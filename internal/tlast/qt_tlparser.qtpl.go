// Code generated by qtc from "qt_tlparser.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package tlast

import "fmt"

import "unicode"

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func (n Name) StreamString(qw422016 *qt422016.Writer) {
	if n.Namespace != "" {
		qw422016.N().S(n.Namespace)
		qw422016.N().S(`.`)
	}
	qw422016.N().S(n.Name)
}

func (n Name) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	n.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (n Name) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	n.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (c Constructor) StreamString(qw422016 *qt422016.Writer) {
	c.Name.StreamString(qw422016)
	if c.ID != nil && *c.ID != 0 {
		qw422016.N().S(`#`)
		qw422016.N().S(fmt.Sprintf("%08x", *c.ID))
	}
}

func (c Constructor) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	c.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (c Constructor) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	c.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (ta TemplateArgument) StreamString(qw422016 *qt422016.Writer) {
	if ta.IsNat {
		qw422016.N().S(`{`)
		qw422016.N().S(ta.FieldName)
		qw422016.N().S(`:#}`)
	}
	qw422016.N().S(`{`)
	qw422016.N().S(ta.FieldName)
	qw422016.N().S(`:Type}`)
}

func (ta TemplateArgument) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	ta.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (ta TemplateArgument) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	ta.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (t TypeRef) StreamString(qw422016 *qt422016.Writer) {
	if t.Bare {
		qw422016.N().S(`%`)
	}
	if len(t.Args) != 0 {
		qw422016.N().S(`(`)
		t.Type.StreamString(qw422016)
		for _, x := range t.Args {
			qw422016.N().S(` `)
			x.StreamString(qw422016)
		}
		qw422016.N().S(`)`)
		return
	}
	t.Type.StreamString(qw422016)
}

func (t TypeRef) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	t.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (t TypeRef) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	t.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (t TypeRef) streamtoCrc32(qw422016 *qt422016.Writer) {
	if t.Bare && (len(t.Type.Name) == 0 || !unicode.IsLower(rune(t.Type.Name[0]))) {
		qw422016.N().S(`%`)
	}
	t.Type.StreamString(qw422016)
	for _, x := range t.Args {
		qw422016.N().S(` `)
		x.streamtoCrc32(qw422016)
	}
}

func (t TypeRef) writetoCrc32(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	t.streamtoCrc32(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (t TypeRef) toCrc32() string {
	qb422016 := qt422016.AcquireByteBuffer()
	t.writetoCrc32(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (a Arithmetic) StreamString(qw422016 *qt422016.Writer) {
	for i, x := range a.Nums {
		qw422016.N().DUL(uint64(x))
		if i != len(a.Nums)-1 {
			qw422016.N().S(" + ")
		}
	}
}

func (a Arithmetic) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	a.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (a Arithmetic) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	a.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (aot ArithmeticOrType) StreamString(qw422016 *qt422016.Writer) {
	if aot.IsArith {
		aot.Arith.StreamString(qw422016)
		return
	}
	aot.T.StreamString(qw422016)
}

func (aot ArithmeticOrType) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	aot.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (aot ArithmeticOrType) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	aot.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (aot ArithmeticOrType) streamtoCrc32(qw422016 *qt422016.Writer) {
	if aot.IsArith {
		qw422016.N().DUL(uint64(aot.Arith.Res))
	} else {
		aot.T.streamtoCrc32(qw422016)
	}
}

func (aot ArithmeticOrType) writetoCrc32(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	aot.streamtoCrc32(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (aot ArithmeticOrType) toCrc32() string {
	qb422016 := qt422016.AcquireByteBuffer()
	aot.writetoCrc32(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (sf ScaleFactor) StreamString(qw422016 *qt422016.Writer) {
	if sf.IsArith {
		qw422016.N().S(`(`)
		sf.Arith.StreamString(qw422016)
		qw422016.N().S(`)`)
		return
	}
	qw422016.N().S(sf.Scale)
}

func (sf ScaleFactor) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	sf.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (sf ScaleFactor) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	sf.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (rws RepeatWithScale) StreamString(qw422016 *qt422016.Writer) {
	if rws.ExplicitScale {
		rws.Scale.StreamString(qw422016)
		qw422016.N().S(`*`)
	}
	qw422016.N().S(`[`)
	for i, x := range rws.Rep[0:] {
		if i != 0 {
			qw422016.N().S(` `)
		}
		x.StreamString(qw422016)
	}
	qw422016.N().S(`]`)
}

func (rws RepeatWithScale) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	rws.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (rws RepeatWithScale) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	rws.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (rws RepeatWithScale) streamtoCrc32(qw422016 *qt422016.Writer) {
	if rws.ExplicitScale {
		if rws.Scale.IsArith {
			qw422016.N().DUL(uint64(rws.Scale.Arith.Res))
		} else {
			qw422016.N().S(rws.Scale.Scale)
		}
		qw422016.N().S(`*`)
	}
	qw422016.N().S(`[`)
	for _, f := range rws.Rep {
		qw422016.N().S(` `)
		if f.IsRepeated {
			if f.FieldName != "" {
				qw422016.N().S(f.FieldName)
				qw422016.N().S(`:`)
			}
			f.ScaleRepeat.streamtoCrc32(qw422016)
		} else {
			f.StreamString(qw422016)
		}
	}
	qw422016.N().S(" ]")
}

func (rws RepeatWithScale) writetoCrc32(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	rws.streamtoCrc32(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (rws RepeatWithScale) toCrc32() string {
	qb422016 := qt422016.AcquireByteBuffer()
	rws.writetoCrc32(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (fm FieldMask) StreamString(qw422016 *qt422016.Writer) {
	qw422016.N().S(fm.MaskName)
	qw422016.N().S(`.`)
	qw422016.N().DUL(uint64(fm.BitNumber))
	qw422016.N().S(`?`)
}

func (fm FieldMask) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	fm.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (fm FieldMask) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	fm.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (f Field) StreamString(qw422016 *qt422016.Writer) {
	if f.FieldName != "" {
		qw422016.N().S(f.FieldName)
		qw422016.N().S(`:`)
	}
	if f.Mask != nil {
		f.Mask.StreamString(qw422016)
	}
	if f.Excl {
		qw422016.N().S(`!`)
	}
	if f.IsRepeated {
		f.ScaleRepeat.StreamString(qw422016)
	} else {
		f.FieldType.StreamString(qw422016)
	}
}

func (f Field) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	f.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (f Field) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	f.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (d TypeDeclaration) StreamString(qw422016 *qt422016.Writer) {
	d.Name.StreamString(qw422016)
	for _, x := range d.Arguments {
		qw422016.N().S(` `)
		qw422016.N().S(x)
	}
}

func (d TypeDeclaration) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	d.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (d TypeDeclaration) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	d.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (descriptor Combinator) StreamString(qw422016 *qt422016.Writer) {
	for _, x := range descriptor.Modifiers {
		qw422016.N().S(x.Name)
		qw422016.N().S(` `)
	}
	descriptor.Construct.StreamString(qw422016)
	qw422016.N().S(` `)
	for _, x := range descriptor.TemplateArguments {
		x.StreamString(qw422016)
		qw422016.N().S(` `)
	}
	if descriptor.Builtin {
		qw422016.N().S("? ")
	} else {
		for _, x := range descriptor.Fields {
			x.StreamString(qw422016)
			qw422016.N().S(` `)
		}
	}
	qw422016.N().S("= ")
	if descriptor.IsFunction {
		descriptor.FuncDecl.StreamString(qw422016)
	} else {
		descriptor.TypeDecl.StreamString(qw422016)
	}
	qw422016.N().S(`;`)
}

func (descriptor Combinator) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	descriptor.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (descriptor Combinator) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	descriptor.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (tl TL) StreamString(qw422016 *qt422016.Writer) {
	functionSection := false

	for _, x := range tl {
		if x.IsFunction && !functionSection {
			qw422016.N().S(functionsSectionString)
			qw422016.N().S(`
`)
			functionSection = true

		}
		if !x.IsFunction && functionSection {
			qw422016.N().S(typesSectionString)
			qw422016.N().S(`
`)
			functionSection = false

		}
		x.StreamString(qw422016)
		qw422016.N().S(`
`)
	}
}

func (tl TL) WriteString(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	tl.StreamString(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (tl TL) String() string {
	qb422016 := qt422016.AcquireByteBuffer()
	tl.WriteString(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (descriptor Combinator) streamcanonicalForm(qw422016 *qt422016.Writer) {
	descriptor.Construct.Name.StreamString(qw422016)
	qw422016.N().S(` `)
	for _, x := range descriptor.TemplateArguments {
		qw422016.N().S(x.FieldName)
		if x.IsNat {
			qw422016.N().S(":# ")
		} else {
			qw422016.N().S(":Type ")
		}
	}
	if descriptor.Builtin {
		qw422016.N().S("? ")
	}
	for _, x := range descriptor.Fields {
		if x.FieldName != "" {
			qw422016.N().S(x.FieldName)
			qw422016.N().S(`:`)
		}
		if x.Mask != nil {
			x.Mask.StreamString(qw422016)
		}
		if x.IsRepeated {
			x.ScaleRepeat.streamtoCrc32(qw422016)
		} else {
			x.FieldType.streamtoCrc32(qw422016)
		}
		qw422016.N().S(` `)
	}
	qw422016.N().S("= ")
	if descriptor.IsFunction {
		descriptor.FuncDecl.streamtoCrc32(qw422016)
	} else {
		descriptor.TypeDecl.StreamString(qw422016)
	}
}

func (descriptor Combinator) writecanonicalForm(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	descriptor.streamcanonicalForm(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (descriptor Combinator) canonicalForm() string {
	qb422016 := qt422016.AcquireByteBuffer()
	descriptor.writecanonicalForm(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
