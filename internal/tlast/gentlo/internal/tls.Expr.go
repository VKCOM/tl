// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTupleTlsExprRead(w []byte, vec *[]TlsExpr, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]TlsExpr, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTlsExprWrite(w []byte, vec []TlsExpr, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]TlsExpr", len(vec), nat_n)
	}
	for _, elem := range vec {
		if w, err = elem.WriteBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTlsExprReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]TlsExpr, nat_n uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]TlsExpr, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]TlsExpr", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[]TlsExpr", "array is longer than expected")
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]TlsExpr", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[]TlsExpr", index, nat_n)
	}
	return nil
}

func BuiltinTupleTlsExprWriteJSON(w []byte, vec []TlsExpr, nat_n uint32) (_ []byte, err error) {
	return BuiltinTupleTlsExprWriteJSONOpt(true, false, w, vec, nat_n)
}
func BuiltinTupleTlsExprWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []TlsExpr, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]TlsExpr", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

var _TlsExpr = [2]UnionElement{
	{TLTag: 0xecc9da78, TLName: "tls.exprType", TLString: "tls.exprType#ecc9da78"},
	{TLTag: 0xdcb49bd8, TLName: "tls.exprNat", TLString: "tls.exprNat#dcb49bd8"},
}

type TlsExpr struct {
	valueType TlsExprType
	valueNat  TlsExprNat
	index     int
}

func (item TlsExpr) TLName() string { return _TlsExpr[item.index].TLName }
func (item TlsExpr) TLTag() uint32  { return _TlsExpr[item.index].TLTag }

func (item *TlsExpr) Reset() { item.ResetToType() }

func (item *TlsExpr) IsType() bool { return item.index == 0 }

func (item *TlsExpr) AsType() (*TlsExprType, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueType, true
}
func (item *TlsExpr) ResetToType() *TlsExprType {
	item.index = 0
	item.valueType.Reset()
	return &item.valueType
}
func (item *TlsExpr) SetType(value TlsExprType) {
	item.index = 0
	item.valueType = value
}

func (item *TlsExpr) IsNat() bool { return item.index == 1 }

func (item *TlsExpr) AsNat() (*TlsExprNat, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueNat, true
}
func (item *TlsExpr) ResetToNat() *TlsExprNat {
	item.index = 1
	item.valueNat.Reset()
	return &item.valueNat
}
func (item *TlsExpr) SetNat(value TlsExprNat) {
	item.index = 1
	item.valueNat = value
}

func (item *TlsExpr) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0xecc9da78:
		item.index = 0
		return item.valueType.Read(w)
	case 0xdcb49bd8:
		item.index = 1
		return item.valueNat.Read(w)
	default:
		return w, ErrorInvalidUnionTag("tls.Expr", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsExpr) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsExpr) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, _TlsExpr[item.index].TLTag)
	switch item.index {
	case 0:
		if w, err = item.valueType.Write(w); err != nil {
			return w, err
		}
	case 1:
		w = item.valueNat.Write(w)
	}
	return w, nil
}

func (item *TlsExpr) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("tls.Expr", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "tls.exprType#ecc9da78", "tls.exprType", "#ecc9da78":
		if !legacyTypeNames && _tag == "tls.exprType#ecc9da78" {
			return ErrorInvalidUnionLegacyTagJSON("tls.Expr", "tls.exprType#ecc9da78")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueType.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "tls.exprNat#dcb49bd8", "tls.exprNat", "#dcb49bd8":
		if !legacyTypeNames && _tag == "tls.exprNat#dcb49bd8" {
			return ErrorInvalidUnionLegacyTagJSON("tls.Expr", "tls.exprNat#dcb49bd8")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueNat.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("tls.Expr", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsExpr) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsExpr) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsExpr) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"tls.exprType"`...)
		} else {
			w = append(w, `{"type":"tls.exprType#ecc9da78"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.valueType.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"tls.exprNat"`...)
		} else {
			w = append(w, `{"type":"tls.exprNat#dcb49bd8"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueNat.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}'), nil
	default: // Impossible due to panic above
		return w, nil
	}
}

func (item TlsExpr) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsExpr) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsExpr) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.Expr", err.Error())
	}
	return nil
}

func (item TlsExprNat) AsUnion() TlsExpr {
	var ret TlsExpr
	ret.SetNat(item)
	return ret
}

type TlsExprNat struct {
	Expr TlsNatExpr
}

func (TlsExprNat) TLName() string { return "tls.exprNat" }
func (TlsExprNat) TLTag() uint32  { return 0xdcb49bd8 }

func (item *TlsExprNat) Reset() {
	item.Expr.Reset()
}

func (item *TlsExprNat) Read(w []byte) (_ []byte, err error) {
	return item.Expr.ReadBoxed(w)
}

// This method is general version of Write, use it instead!
func (item *TlsExprNat) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TlsExprNat) Write(w []byte) []byte {
	w = item.Expr.WriteBoxed(w)
	return w
}

func (item *TlsExprNat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xdcb49bd8); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsExprNat) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TlsExprNat) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xdcb49bd8)
	return item.Write(w)
}

func (item TlsExprNat) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TlsExprNat) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propExprPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "expr":
				if propExprPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.exprNat", "expr")
				}
				if err := item.Expr.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propExprPresented = true
			default:
				return ErrorInvalidJSONExcessElement("tls.exprNat", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propExprPresented {
		item.Expr.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsExprNat) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TlsExprNat) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsExprNat) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"expr":`...)
	w = item.Expr.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *TlsExprNat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TlsExprNat) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.exprNat", err.Error())
	}
	return nil
}

func (item TlsExprType) AsUnion() TlsExpr {
	var ret TlsExpr
	ret.SetType(item)
	return ret
}

type TlsExprType struct {
	Expr TlsTypeExpr
}

func (TlsExprType) TLName() string { return "tls.exprType" }
func (TlsExprType) TLTag() uint32  { return 0xecc9da78 }

func (item *TlsExprType) Reset() {
	item.Expr.Reset()
}

func (item *TlsExprType) Read(w []byte) (_ []byte, err error) {
	return item.Expr.ReadBoxed(w)
}

// This method is general version of Write, use it instead!
func (item *TlsExprType) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsExprType) Write(w []byte) (_ []byte, err error) {
	if w, err = item.Expr.WriteBoxed(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TlsExprType) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xecc9da78); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsExprType) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsExprType) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xecc9da78)
	return item.Write(w)
}

func (item TlsExprType) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsExprType) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propExprPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "expr":
				if propExprPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.exprType", "expr")
				}
				if err := item.Expr.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propExprPresented = true
			default:
				return ErrorInvalidJSONExcessElement("tls.exprType", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propExprPresented {
		item.Expr.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsExprType) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsExprType) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsExprType) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"expr":`...)
	if w, err = item.Expr.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *TlsExprType) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsExprType) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.exprType", err.Error())
	}
	return nil
}
