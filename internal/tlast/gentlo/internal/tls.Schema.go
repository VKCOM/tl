// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

var _TlsSchema = [3]UnionElement{
	{TLTag: 0x3a2f9be2, TLName: "tls.schema_v2", TLString: "tls.schema_v2#3a2f9be2"},
	{TLTag: 0xe4a8604b, TLName: "tls.schema_v3", TLString: "tls.schema_v3#e4a8604b"},
	{TLTag: 0x90ac88d7, TLName: "tls.schema_v4", TLString: "tls.schema_v4#90ac88d7"},
}

type TlsSchema struct {
	valueV2 TlsSchemaV2
	valueV3 TlsSchemaV3
	valueV4 TlsSchemaV4
	index   int
}

func (item TlsSchema) TLName() string { return _TlsSchema[item.index].TLName }
func (item TlsSchema) TLTag() uint32  { return _TlsSchema[item.index].TLTag }

func (item *TlsSchema) Reset() { item.ResetToV2() }

func (item *TlsSchema) IsV2() bool { return item.index == 0 }

func (item *TlsSchema) AsV2() (*TlsSchemaV2, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueV2, true
}
func (item *TlsSchema) ResetToV2() *TlsSchemaV2 {
	item.index = 0
	item.valueV2.Reset()
	return &item.valueV2
}
func (item *TlsSchema) SetV2(value TlsSchemaV2) {
	item.index = 0
	item.valueV2 = value
}

func (item *TlsSchema) IsV3() bool { return item.index == 1 }

func (item *TlsSchema) AsV3() (*TlsSchemaV3, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueV3, true
}
func (item *TlsSchema) ResetToV3() *TlsSchemaV3 {
	item.index = 1
	item.valueV3.Reset()
	return &item.valueV3
}
func (item *TlsSchema) SetV3(value TlsSchemaV3) {
	item.index = 1
	item.valueV3 = value
}

func (item *TlsSchema) IsV4() bool { return item.index == 2 }

func (item *TlsSchema) AsV4() (*TlsSchemaV4, bool) {
	if item.index != 2 {
		return nil, false
	}
	return &item.valueV4, true
}
func (item *TlsSchema) ResetToV4() *TlsSchemaV4 {
	item.index = 2
	item.valueV4.Reset()
	return &item.valueV4
}
func (item *TlsSchema) SetV4(value TlsSchemaV4) {
	item.index = 2
	item.valueV4 = value
}

func (item *TlsSchema) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x3a2f9be2:
		item.index = 0
		return item.valueV2.Read(w)
	case 0xe4a8604b:
		item.index = 1
		return item.valueV3.Read(w)
	case 0x90ac88d7:
		item.index = 2
		return item.valueV4.Read(w)
	default:
		return w, ErrorInvalidUnionTag("tls.Schema", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsSchema) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsSchema) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, _TlsSchema[item.index].TLTag)
	switch item.index {
	case 0:
		if w, err = item.valueV2.Write(w); err != nil {
			return w, err
		}
	case 1:
		if w, err = item.valueV3.Write(w); err != nil {
			return w, err
		}
	case 2:
		if w, err = item.valueV4.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *TlsSchema) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("tls.Schema", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "tls.schema_v2#3a2f9be2", "tls.schema_v2", "#3a2f9be2":
		if !legacyTypeNames && _tag == "tls.schema_v2#3a2f9be2" {
			return ErrorInvalidUnionLegacyTagJSON("tls.Schema", "tls.schema_v2#3a2f9be2")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueV2.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "tls.schema_v3#e4a8604b", "tls.schema_v3", "#e4a8604b":
		if !legacyTypeNames && _tag == "tls.schema_v3#e4a8604b" {
			return ErrorInvalidUnionLegacyTagJSON("tls.Schema", "tls.schema_v3#e4a8604b")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueV3.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "tls.schema_v4#90ac88d7", "tls.schema_v4", "#90ac88d7":
		if !legacyTypeNames && _tag == "tls.schema_v4#90ac88d7" {
			return ErrorInvalidUnionLegacyTagJSON("tls.Schema", "tls.schema_v4#90ac88d7")
		}
		item.index = 2
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueV4.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("tls.Schema", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsSchema) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsSchema) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsSchema) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"tls.schema_v2"`...)
		} else {
			w = append(w, `{"type":"tls.schema_v2#3a2f9be2"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.valueV2.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"tls.schema_v3"`...)
		} else {
			w = append(w, `{"type":"tls.schema_v3#e4a8604b"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.valueV3.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 2:
		if newTypeNames {
			w = append(w, `{"type":"tls.schema_v4"`...)
		} else {
			w = append(w, `{"type":"tls.schema_v4#90ac88d7"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.valueV4.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	default: // Impossible due to panic above
		return w, nil
	}
}

func (item TlsSchema) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsSchema) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsSchema) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.Schema", err.Error())
	}
	return nil
}

func (item TlsSchemaV2) AsUnion() TlsSchema {
	var ret TlsSchema
	ret.SetV2(item)
	return ret
}

type TlsSchemaV2 struct {
	Version        int32
	Date           int32
	TypesNum       uint32
	Types          []TlsType
	ConstructorNum uint32
	Constructors   []TlsCombinator
	FunctionsNum   uint32
	Functions      []TlsCombinator
}

func (TlsSchemaV2) TLName() string { return "tls.schema_v2" }
func (TlsSchemaV2) TLTag() uint32  { return 0x3a2f9be2 }

func (item *TlsSchemaV2) Reset() {
	item.Version = 0
	item.Date = 0
	item.TypesNum = 0
	item.Types = item.Types[:0]
	item.ConstructorNum = 0
	item.Constructors = item.Constructors[:0]
	item.FunctionsNum = 0
	item.Functions = item.Functions[:0]
}

func (item *TlsSchemaV2) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Date); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.TypesNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsTypeBoxedRead(w, &item.Types, item.TypesNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsCombinatorRead(w, &item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.FunctionsNum); err != nil {
		return w, err
	}
	return BuiltinTupleTlsCombinatorRead(w, &item.Functions, item.FunctionsNum)
}

// This method is general version of Write, use it instead!
func (item *TlsSchemaV2) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsSchemaV2) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Version)
	w = basictl.IntWrite(w, item.Date)
	w = basictl.NatWrite(w, item.TypesNum)
	if w, err = BuiltinTupleTlsTypeBoxedWrite(w, item.Types, item.TypesNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.ConstructorNum)
	if w, err = BuiltinTupleTlsCombinatorWrite(w, item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.FunctionsNum)
	if w, err = BuiltinTupleTlsCombinatorWrite(w, item.Functions, item.FunctionsNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TlsSchemaV2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3a2f9be2); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsSchemaV2) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsSchemaV2) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x3a2f9be2)
	return item.Write(w)
}

func (item TlsSchemaV2) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsSchemaV2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propVersionPresented bool
	var propDatePresented bool
	var propTypesNumPresented bool
	var rawTypes []byte
	var propConstructorNumPresented bool
	var rawConstructors []byte
	var propFunctionsNumPresented bool
	var rawFunctions []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "version":
				if propVersionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v2", "version")
				}
				if err := Json2ReadInt32(in, &item.Version); err != nil {
					return err
				}
				propVersionPresented = true
			case "date":
				if propDatePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v2", "date")
				}
				if err := Json2ReadInt32(in, &item.Date); err != nil {
					return err
				}
				propDatePresented = true
			case "types_num":
				if propTypesNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v2", "types_num")
				}
				if err := Json2ReadUint32(in, &item.TypesNum); err != nil {
					return err
				}
				propTypesNumPresented = true
			case "types":
				if rawTypes != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v2", "types")
				}
				rawTypes = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "constructor_num":
				if propConstructorNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v2", "constructor_num")
				}
				if err := Json2ReadUint32(in, &item.ConstructorNum); err != nil {
					return err
				}
				propConstructorNumPresented = true
			case "constructors":
				if rawConstructors != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v2", "constructors")
				}
				rawConstructors = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "functions_num":
				if propFunctionsNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v2", "functions_num")
				}
				if err := Json2ReadUint32(in, &item.FunctionsNum); err != nil {
					return err
				}
				propFunctionsNumPresented = true
			case "functions":
				if rawFunctions != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v2", "functions")
				}
				rawFunctions = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("tls.schema_v2", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propVersionPresented {
		item.Version = 0
	}
	if !propDatePresented {
		item.Date = 0
	}
	if !propTypesNumPresented {
		item.TypesNum = 0
	}
	if !propConstructorNumPresented {
		item.ConstructorNum = 0
	}
	if !propFunctionsNumPresented {
		item.FunctionsNum = 0
	}
	var inTypesPointer *basictl.JsonLexer
	inTypes := basictl.JsonLexer{Data: rawTypes}
	if rawTypes != nil {
		inTypesPointer = &inTypes
	}
	if err := BuiltinTupleTlsTypeBoxedReadJSON(legacyTypeNames, inTypesPointer, &item.Types, item.TypesNum); err != nil {
		return err
	}

	var inConstructorsPointer *basictl.JsonLexer
	inConstructors := basictl.JsonLexer{Data: rawConstructors}
	if rawConstructors != nil {
		inConstructorsPointer = &inConstructors
	}
	if err := BuiltinTupleTlsCombinatorReadJSON(legacyTypeNames, inConstructorsPointer, &item.Constructors, item.ConstructorNum); err != nil {
		return err
	}

	var inFunctionsPointer *basictl.JsonLexer
	inFunctions := basictl.JsonLexer{Data: rawFunctions}
	if rawFunctions != nil {
		inFunctionsPointer = &inFunctions
	}
	if err := BuiltinTupleTlsCombinatorReadJSON(legacyTypeNames, inFunctionsPointer, &item.Functions, item.FunctionsNum); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsSchemaV2) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsSchemaV2) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsSchemaV2) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexVersion := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"version":`...)
	w = basictl.JSONWriteInt32(w, item.Version)
	if (item.Version != 0) == false {
		w = w[:backupIndexVersion]
	}
	backupIndexDate := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"date":`...)
	w = basictl.JSONWriteInt32(w, item.Date)
	if (item.Date != 0) == false {
		w = w[:backupIndexDate]
	}
	backupIndexTypesNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"types_num":`...)
	w = basictl.JSONWriteUint32(w, item.TypesNum)
	if (item.TypesNum != 0) == false {
		w = w[:backupIndexTypesNum]
	}
	backupIndexTypes := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"types":`...)
	if w, err = BuiltinTupleTlsTypeBoxedWriteJSONOpt(newTypeNames, short, w, item.Types, item.TypesNum); err != nil {
		return w, err
	}
	if (len(item.Types) != 0) == false {
		w = w[:backupIndexTypes]
	}
	backupIndexConstructorNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"constructor_num":`...)
	w = basictl.JSONWriteUint32(w, item.ConstructorNum)
	if (item.ConstructorNum != 0) == false {
		w = w[:backupIndexConstructorNum]
	}
	backupIndexConstructors := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"constructors":`...)
	if w, err = BuiltinTupleTlsCombinatorWriteJSONOpt(newTypeNames, short, w, item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	if (len(item.Constructors) != 0) == false {
		w = w[:backupIndexConstructors]
	}
	backupIndexFunctionsNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"functions_num":`...)
	w = basictl.JSONWriteUint32(w, item.FunctionsNum)
	if (item.FunctionsNum != 0) == false {
		w = w[:backupIndexFunctionsNum]
	}
	backupIndexFunctions := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"functions":`...)
	if w, err = BuiltinTupleTlsCombinatorWriteJSONOpt(newTypeNames, short, w, item.Functions, item.FunctionsNum); err != nil {
		return w, err
	}
	if (len(item.Functions) != 0) == false {
		w = w[:backupIndexFunctions]
	}
	return append(w, '}'), nil
}

func (item *TlsSchemaV2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsSchemaV2) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.schema_v2", err.Error())
	}
	return nil
}

func (item TlsSchemaV3) AsUnion() TlsSchema {
	var ret TlsSchema
	ret.SetV3(item)
	return ret
}

type TlsSchemaV3 struct {
	Version        int32
	Date           int32
	TypesNum       uint32
	Types          []TlsType
	ConstructorNum uint32
	Constructors   []TlsCombinator
	FunctionsNum   uint32
	Functions      []TlsCombinator
}

func (TlsSchemaV3) TLName() string { return "tls.schema_v3" }
func (TlsSchemaV3) TLTag() uint32  { return 0xe4a8604b }

func (item *TlsSchemaV3) Reset() {
	item.Version = 0
	item.Date = 0
	item.TypesNum = 0
	item.Types = item.Types[:0]
	item.ConstructorNum = 0
	item.Constructors = item.Constructors[:0]
	item.FunctionsNum = 0
	item.Functions = item.Functions[:0]
}

func (item *TlsSchemaV3) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Date); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.TypesNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsTypeBoxedRead(w, &item.Types, item.TypesNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsCombinatorRead(w, &item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.FunctionsNum); err != nil {
		return w, err
	}
	return BuiltinTupleTlsCombinatorRead(w, &item.Functions, item.FunctionsNum)
}

// This method is general version of Write, use it instead!
func (item *TlsSchemaV3) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsSchemaV3) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Version)
	w = basictl.IntWrite(w, item.Date)
	w = basictl.NatWrite(w, item.TypesNum)
	if w, err = BuiltinTupleTlsTypeBoxedWrite(w, item.Types, item.TypesNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.ConstructorNum)
	if w, err = BuiltinTupleTlsCombinatorWrite(w, item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.FunctionsNum)
	if w, err = BuiltinTupleTlsCombinatorWrite(w, item.Functions, item.FunctionsNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TlsSchemaV3) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe4a8604b); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsSchemaV3) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsSchemaV3) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xe4a8604b)
	return item.Write(w)
}

func (item TlsSchemaV3) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsSchemaV3) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propVersionPresented bool
	var propDatePresented bool
	var propTypesNumPresented bool
	var rawTypes []byte
	var propConstructorNumPresented bool
	var rawConstructors []byte
	var propFunctionsNumPresented bool
	var rawFunctions []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "version":
				if propVersionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v3", "version")
				}
				if err := Json2ReadInt32(in, &item.Version); err != nil {
					return err
				}
				propVersionPresented = true
			case "date":
				if propDatePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v3", "date")
				}
				if err := Json2ReadInt32(in, &item.Date); err != nil {
					return err
				}
				propDatePresented = true
			case "types_num":
				if propTypesNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v3", "types_num")
				}
				if err := Json2ReadUint32(in, &item.TypesNum); err != nil {
					return err
				}
				propTypesNumPresented = true
			case "types":
				if rawTypes != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v3", "types")
				}
				rawTypes = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "constructor_num":
				if propConstructorNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v3", "constructor_num")
				}
				if err := Json2ReadUint32(in, &item.ConstructorNum); err != nil {
					return err
				}
				propConstructorNumPresented = true
			case "constructors":
				if rawConstructors != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v3", "constructors")
				}
				rawConstructors = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "functions_num":
				if propFunctionsNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v3", "functions_num")
				}
				if err := Json2ReadUint32(in, &item.FunctionsNum); err != nil {
					return err
				}
				propFunctionsNumPresented = true
			case "functions":
				if rawFunctions != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v3", "functions")
				}
				rawFunctions = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("tls.schema_v3", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propVersionPresented {
		item.Version = 0
	}
	if !propDatePresented {
		item.Date = 0
	}
	if !propTypesNumPresented {
		item.TypesNum = 0
	}
	if !propConstructorNumPresented {
		item.ConstructorNum = 0
	}
	if !propFunctionsNumPresented {
		item.FunctionsNum = 0
	}
	var inTypesPointer *basictl.JsonLexer
	inTypes := basictl.JsonLexer{Data: rawTypes}
	if rawTypes != nil {
		inTypesPointer = &inTypes
	}
	if err := BuiltinTupleTlsTypeBoxedReadJSON(legacyTypeNames, inTypesPointer, &item.Types, item.TypesNum); err != nil {
		return err
	}

	var inConstructorsPointer *basictl.JsonLexer
	inConstructors := basictl.JsonLexer{Data: rawConstructors}
	if rawConstructors != nil {
		inConstructorsPointer = &inConstructors
	}
	if err := BuiltinTupleTlsCombinatorReadJSON(legacyTypeNames, inConstructorsPointer, &item.Constructors, item.ConstructorNum); err != nil {
		return err
	}

	var inFunctionsPointer *basictl.JsonLexer
	inFunctions := basictl.JsonLexer{Data: rawFunctions}
	if rawFunctions != nil {
		inFunctionsPointer = &inFunctions
	}
	if err := BuiltinTupleTlsCombinatorReadJSON(legacyTypeNames, inFunctionsPointer, &item.Functions, item.FunctionsNum); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsSchemaV3) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsSchemaV3) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsSchemaV3) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexVersion := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"version":`...)
	w = basictl.JSONWriteInt32(w, item.Version)
	if (item.Version != 0) == false {
		w = w[:backupIndexVersion]
	}
	backupIndexDate := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"date":`...)
	w = basictl.JSONWriteInt32(w, item.Date)
	if (item.Date != 0) == false {
		w = w[:backupIndexDate]
	}
	backupIndexTypesNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"types_num":`...)
	w = basictl.JSONWriteUint32(w, item.TypesNum)
	if (item.TypesNum != 0) == false {
		w = w[:backupIndexTypesNum]
	}
	backupIndexTypes := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"types":`...)
	if w, err = BuiltinTupleTlsTypeBoxedWriteJSONOpt(newTypeNames, short, w, item.Types, item.TypesNum); err != nil {
		return w, err
	}
	if (len(item.Types) != 0) == false {
		w = w[:backupIndexTypes]
	}
	backupIndexConstructorNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"constructor_num":`...)
	w = basictl.JSONWriteUint32(w, item.ConstructorNum)
	if (item.ConstructorNum != 0) == false {
		w = w[:backupIndexConstructorNum]
	}
	backupIndexConstructors := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"constructors":`...)
	if w, err = BuiltinTupleTlsCombinatorWriteJSONOpt(newTypeNames, short, w, item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	if (len(item.Constructors) != 0) == false {
		w = w[:backupIndexConstructors]
	}
	backupIndexFunctionsNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"functions_num":`...)
	w = basictl.JSONWriteUint32(w, item.FunctionsNum)
	if (item.FunctionsNum != 0) == false {
		w = w[:backupIndexFunctionsNum]
	}
	backupIndexFunctions := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"functions":`...)
	if w, err = BuiltinTupleTlsCombinatorWriteJSONOpt(newTypeNames, short, w, item.Functions, item.FunctionsNum); err != nil {
		return w, err
	}
	if (len(item.Functions) != 0) == false {
		w = w[:backupIndexFunctions]
	}
	return append(w, '}'), nil
}

func (item *TlsSchemaV3) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsSchemaV3) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.schema_v3", err.Error())
	}
	return nil
}

func (item TlsSchemaV4) AsUnion() TlsSchema {
	var ret TlsSchema
	ret.SetV4(item)
	return ret
}

type TlsSchemaV4 struct {
	Version        int32
	Date           int32
	TypesNum       uint32
	Types          []TlsType
	ConstructorNum uint32
	Constructors   []TlsCombinator
	FunctionsNum   uint32
	Functions      []TlsCombinator
}

func (TlsSchemaV4) TLName() string { return "tls.schema_v4" }
func (TlsSchemaV4) TLTag() uint32  { return 0x90ac88d7 }

func (item *TlsSchemaV4) Reset() {
	item.Version = 0
	item.Date = 0
	item.TypesNum = 0
	item.Types = item.Types[:0]
	item.ConstructorNum = 0
	item.Constructors = item.Constructors[:0]
	item.FunctionsNum = 0
	item.Functions = item.Functions[:0]
}

func (item *TlsSchemaV4) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Date); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.TypesNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsTypeBoxedRead(w, &item.Types, item.TypesNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsCombinatorRead(w, &item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.FunctionsNum); err != nil {
		return w, err
	}
	return BuiltinTupleTlsCombinatorRead(w, &item.Functions, item.FunctionsNum)
}

// This method is general version of Write, use it instead!
func (item *TlsSchemaV4) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsSchemaV4) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Version)
	w = basictl.IntWrite(w, item.Date)
	w = basictl.NatWrite(w, item.TypesNum)
	if w, err = BuiltinTupleTlsTypeBoxedWrite(w, item.Types, item.TypesNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.ConstructorNum)
	if w, err = BuiltinTupleTlsCombinatorWrite(w, item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.FunctionsNum)
	if w, err = BuiltinTupleTlsCombinatorWrite(w, item.Functions, item.FunctionsNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TlsSchemaV4) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x90ac88d7); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsSchemaV4) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsSchemaV4) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x90ac88d7)
	return item.Write(w)
}

func (item TlsSchemaV4) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsSchemaV4) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propVersionPresented bool
	var propDatePresented bool
	var propTypesNumPresented bool
	var rawTypes []byte
	var propConstructorNumPresented bool
	var rawConstructors []byte
	var propFunctionsNumPresented bool
	var rawFunctions []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "version":
				if propVersionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v4", "version")
				}
				if err := Json2ReadInt32(in, &item.Version); err != nil {
					return err
				}
				propVersionPresented = true
			case "date":
				if propDatePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v4", "date")
				}
				if err := Json2ReadInt32(in, &item.Date); err != nil {
					return err
				}
				propDatePresented = true
			case "types_num":
				if propTypesNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v4", "types_num")
				}
				if err := Json2ReadUint32(in, &item.TypesNum); err != nil {
					return err
				}
				propTypesNumPresented = true
			case "types":
				if rawTypes != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v4", "types")
				}
				rawTypes = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "constructor_num":
				if propConstructorNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v4", "constructor_num")
				}
				if err := Json2ReadUint32(in, &item.ConstructorNum); err != nil {
					return err
				}
				propConstructorNumPresented = true
			case "constructors":
				if rawConstructors != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v4", "constructors")
				}
				rawConstructors = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "functions_num":
				if propFunctionsNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v4", "functions_num")
				}
				if err := Json2ReadUint32(in, &item.FunctionsNum); err != nil {
					return err
				}
				propFunctionsNumPresented = true
			case "functions":
				if rawFunctions != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.schema_v4", "functions")
				}
				rawFunctions = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("tls.schema_v4", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propVersionPresented {
		item.Version = 0
	}
	if !propDatePresented {
		item.Date = 0
	}
	if !propTypesNumPresented {
		item.TypesNum = 0
	}
	if !propConstructorNumPresented {
		item.ConstructorNum = 0
	}
	if !propFunctionsNumPresented {
		item.FunctionsNum = 0
	}
	var inTypesPointer *basictl.JsonLexer
	inTypes := basictl.JsonLexer{Data: rawTypes}
	if rawTypes != nil {
		inTypesPointer = &inTypes
	}
	if err := BuiltinTupleTlsTypeBoxedReadJSON(legacyTypeNames, inTypesPointer, &item.Types, item.TypesNum); err != nil {
		return err
	}

	var inConstructorsPointer *basictl.JsonLexer
	inConstructors := basictl.JsonLexer{Data: rawConstructors}
	if rawConstructors != nil {
		inConstructorsPointer = &inConstructors
	}
	if err := BuiltinTupleTlsCombinatorReadJSON(legacyTypeNames, inConstructorsPointer, &item.Constructors, item.ConstructorNum); err != nil {
		return err
	}

	var inFunctionsPointer *basictl.JsonLexer
	inFunctions := basictl.JsonLexer{Data: rawFunctions}
	if rawFunctions != nil {
		inFunctionsPointer = &inFunctions
	}
	if err := BuiltinTupleTlsCombinatorReadJSON(legacyTypeNames, inFunctionsPointer, &item.Functions, item.FunctionsNum); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsSchemaV4) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsSchemaV4) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsSchemaV4) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexVersion := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"version":`...)
	w = basictl.JSONWriteInt32(w, item.Version)
	if (item.Version != 0) == false {
		w = w[:backupIndexVersion]
	}
	backupIndexDate := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"date":`...)
	w = basictl.JSONWriteInt32(w, item.Date)
	if (item.Date != 0) == false {
		w = w[:backupIndexDate]
	}
	backupIndexTypesNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"types_num":`...)
	w = basictl.JSONWriteUint32(w, item.TypesNum)
	if (item.TypesNum != 0) == false {
		w = w[:backupIndexTypesNum]
	}
	backupIndexTypes := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"types":`...)
	if w, err = BuiltinTupleTlsTypeBoxedWriteJSONOpt(newTypeNames, short, w, item.Types, item.TypesNum); err != nil {
		return w, err
	}
	if (len(item.Types) != 0) == false {
		w = w[:backupIndexTypes]
	}
	backupIndexConstructorNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"constructor_num":`...)
	w = basictl.JSONWriteUint32(w, item.ConstructorNum)
	if (item.ConstructorNum != 0) == false {
		w = w[:backupIndexConstructorNum]
	}
	backupIndexConstructors := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"constructors":`...)
	if w, err = BuiltinTupleTlsCombinatorWriteJSONOpt(newTypeNames, short, w, item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	if (len(item.Constructors) != 0) == false {
		w = w[:backupIndexConstructors]
	}
	backupIndexFunctionsNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"functions_num":`...)
	w = basictl.JSONWriteUint32(w, item.FunctionsNum)
	if (item.FunctionsNum != 0) == false {
		w = w[:backupIndexFunctionsNum]
	}
	backupIndexFunctions := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"functions":`...)
	if w, err = BuiltinTupleTlsCombinatorWriteJSONOpt(newTypeNames, short, w, item.Functions, item.FunctionsNum); err != nil {
		return w, err
	}
	if (len(item.Functions) != 0) == false {
		w = w[:backupIndexFunctions]
	}
	return append(w, '}'), nil
}

func (item *TlsSchemaV4) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsSchemaV4) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.schema_v4", err.Error())
	}
	return nil
}
