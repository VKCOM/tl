// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/internal/tlast/gentlo/basictl"
)

var _ = basictl.NatWrite

var _TlsSchemaUnion = [3]UnionElement{
	{TLTag: 0x3a2f9be2, TLName: "tls.schema_v2", TLString: "tls.schema_v2#3a2f9be2"},
	{TLTag: 0xe4a8604b, TLName: "tls.schema_v3", TLString: "tls.schema_v3#e4a8604b"},
	{TLTag: 0x90ac88d7, TLName: "tls.schema_v4", TLString: "tls.schema_v4#90ac88d7"},
}

type TlsSchemaUnion struct {
	valueV2 TlsSchemaV2
	valueV3 TlsSchemaV3
	valueV4 TlsSchemaV4
	index   int
}

func (item TlsSchemaUnion) TLName() string { return _TlsSchemaUnion[item.index].TLName }
func (item TlsSchemaUnion) TLTag() uint32  { return _TlsSchemaUnion[item.index].TLTag }

func (item *TlsSchemaUnion) Reset() { item.ResetToV2() }

func (item *TlsSchemaUnion) IsV2() bool { return item.index == 0 }

func (item *TlsSchemaUnion) AsV2() (*TlsSchemaV2, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueV2, true
}
func (item *TlsSchemaUnion) ResetToV2() *TlsSchemaV2 {
	item.index = 0
	item.valueV2.Reset()
	return &item.valueV2
}
func (item *TlsSchemaUnion) SetV2(value TlsSchemaV2) {
	item.index = 0
	item.valueV2 = value
}

func (item *TlsSchemaUnion) IsV3() bool { return item.index == 1 }

func (item *TlsSchemaUnion) AsV3() (*TlsSchemaV3, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueV3, true
}
func (item *TlsSchemaUnion) ResetToV3() *TlsSchemaV3 {
	item.index = 1
	item.valueV3.Reset()
	return &item.valueV3
}
func (item *TlsSchemaUnion) SetV3(value TlsSchemaV3) {
	item.index = 1
	item.valueV3 = value
}

func (item *TlsSchemaUnion) IsV4() bool { return item.index == 2 }

func (item *TlsSchemaUnion) AsV4() (*TlsSchemaV4, bool) {
	if item.index != 2 {
		return nil, false
	}
	return &item.valueV4, true
}
func (item *TlsSchemaUnion) ResetToV4() *TlsSchemaV4 {
	item.index = 2
	item.valueV4.Reset()
	return &item.valueV4
}
func (item *TlsSchemaUnion) SetV4(value TlsSchemaV4) {
	item.index = 2
	item.valueV4 = value
}

func (item *TlsSchemaUnion) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x3a2f9be2:
		item.index = 0
		return item.valueV2.Read(w)
	case 0xe4a8604b:
		item.index = 1
		return item.valueV3.Read(w)
	case 0x90ac88d7:
		item.index = 2
		return item.valueV4.Read(w)
	default:
		return w, ErrorInvalidUnionTag("tls.Schema", tag)
	}
}

func (item *TlsSchemaUnion) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, _TlsSchemaUnion[item.index].TLTag)
	switch item.index {
	case 0:
		return item.valueV2.Write(w)
	case 1:
		return item.valueV3.Write(w)
	case 2:
		return item.valueV4.Write(w)
	default: // Impossible due to panic above
		return w, nil
	}
}

func TlsSchemaUnion__ReadJSON(item *TlsSchemaUnion, j interface{}) error { return item.readJSON(j) }
func (item *TlsSchemaUnion) readJSON(j interface{}) error {
	_jm, _tag, err := JsonReadUnionType("tls.Schema", j)
	if err != nil {
		return err
	}
	jvalue := _jm["value"]
	switch _tag {
	case "tls.schema_v2#3a2f9be2", "tls.schema_v2", "#3a2f9be2":
		item.index = 0
		if err := TlsSchemaV2__ReadJSON(&item.valueV2, jvalue); err != nil {
			return err
		}
		delete(_jm, "value")
	case "tls.schema_v3#e4a8604b", "tls.schema_v3", "#e4a8604b":
		item.index = 1
		if err := TlsSchemaV3__ReadJSON(&item.valueV3, jvalue); err != nil {
			return err
		}
		delete(_jm, "value")
	case "tls.schema_v4#90ac88d7", "tls.schema_v4", "#90ac88d7":
		item.index = 2
		if err := TlsSchemaV4__ReadJSON(&item.valueV4, jvalue); err != nil {
			return err
		}
		delete(_jm, "value")
	default:
		return ErrorInvalidUnionTagJSON("tls.Schema", _tag)
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("tls.Schema", k)
	}
	return nil
}

func (item *TlsSchemaUnion) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *TlsSchemaUnion) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	switch item.index {
	case 0:
		w = append(w, `{"type":"tls.schema_v2#3a2f9be2","value":`...)
		if w, err = item.valueV2.WriteJSONOpt(short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 1:
		w = append(w, `{"type":"tls.schema_v3#e4a8604b","value":`...)
		if w, err = item.valueV3.WriteJSONOpt(short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 2:
		w = append(w, `{"type":"tls.schema_v4#90ac88d7","value":`...)
		if w, err = item.valueV4.WriteJSONOpt(short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	default: // Impossible due to panic above
		return w, nil
	}
}

func (item TlsSchemaUnion) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item TlsSchemaV2) AsUnion() TlsSchemaUnion {
	var ret TlsSchemaUnion
	ret.SetV2(item)
	return ret
}

// AsUnion will be here
type TlsSchemaV2 struct {
	Version        int32
	Date           int32
	TypesNum       uint32
	Types          []TlsType
	ConstructorNum uint32
	Constructors   []TlsCombinatorUnion
	FunctionsNum   uint32
	Functions      []TlsCombinatorUnion
}

func (TlsSchemaV2) TLName() string { return "tls.schema_v2" }
func (TlsSchemaV2) TLTag() uint32  { return 0x3a2f9be2 }

func (item *TlsSchemaV2) Reset() {
	item.Version = 0
	item.Date = 0
	item.TypesNum = 0
	item.Types = item.Types[:0]
	item.ConstructorNum = 0
	item.Constructors = item.Constructors[:0]
	item.FunctionsNum = 0
	item.Functions = item.Functions[:0]
}

func (item *TlsSchemaV2) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Date); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.TypesNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsTypeBoxedRead(w, &item.Types, item.TypesNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsCombinatorBoxedRead(w, &item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.FunctionsNum); err != nil {
		return w, err
	}
	return BuiltinTupleTlsCombinatorBoxedRead(w, &item.Functions, item.FunctionsNum)
}

func (item *TlsSchemaV2) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Version)
	w = basictl.IntWrite(w, item.Date)
	w = basictl.NatWrite(w, item.TypesNum)
	if w, err = BuiltinTupleTlsTypeBoxedWrite(w, item.Types, item.TypesNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.ConstructorNum)
	if w, err = BuiltinTupleTlsCombinatorBoxedWrite(w, item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.FunctionsNum)
	return BuiltinTupleTlsCombinatorBoxedWrite(w, item.Functions, item.FunctionsNum)
}

func (item *TlsSchemaV2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3a2f9be2); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TlsSchemaV2) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3a2f9be2)
	return item.Write(w)
}

func (item TlsSchemaV2) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func TlsSchemaV2__ReadJSON(item *TlsSchemaV2, j interface{}) error { return item.readJSON(j) }
func (item *TlsSchemaV2) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("tls.schema_v2", "expected json object")
	}
	_jVersion := _jm["version"]
	delete(_jm, "version")
	if err := JsonReadInt32(_jVersion, &item.Version); err != nil {
		return err
	}
	_jDate := _jm["date"]
	delete(_jm, "date")
	if err := JsonReadInt32(_jDate, &item.Date); err != nil {
		return err
	}
	_jTypesNum := _jm["types_num"]
	delete(_jm, "types_num")
	if err := JsonReadUint32(_jTypesNum, &item.TypesNum); err != nil {
		return err
	}
	_jTypes := _jm["types"]
	delete(_jm, "types")
	_jConstructorNum := _jm["constructor_num"]
	delete(_jm, "constructor_num")
	if err := JsonReadUint32(_jConstructorNum, &item.ConstructorNum); err != nil {
		return err
	}
	_jConstructors := _jm["constructors"]
	delete(_jm, "constructors")
	_jFunctionsNum := _jm["functions_num"]
	delete(_jm, "functions_num")
	if err := JsonReadUint32(_jFunctionsNum, &item.FunctionsNum); err != nil {
		return err
	}
	_jFunctions := _jm["functions"]
	delete(_jm, "functions")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("tls.schema_v2", k)
	}
	if err := BuiltinTupleTlsTypeBoxedReadJSON(_jTypes, &item.Types, item.TypesNum); err != nil {
		return err
	}
	if err := BuiltinTupleTlsCombinatorBoxedReadJSON(_jConstructors, &item.Constructors, item.ConstructorNum); err != nil {
		return err
	}
	if err := BuiltinTupleTlsCombinatorBoxedReadJSON(_jFunctions, &item.Functions, item.FunctionsNum); err != nil {
		return err
	}
	return nil
}

func (item *TlsSchemaV2) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *TlsSchemaV2) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.Version != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"version":`...)
		w = basictl.JSONWriteInt32(w, item.Version)
	}
	if item.Date != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"date":`...)
		w = basictl.JSONWriteInt32(w, item.Date)
	}
	if item.TypesNum != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"types_num":`...)
		w = basictl.JSONWriteUint32(w, item.TypesNum)
	}
	if len(item.Types) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"types":`...)
		if w, err = BuiltinTupleTlsTypeBoxedWriteJSONOpt(short, w, item.Types, item.TypesNum); err != nil {
			return w, err
		}
	}
	if item.ConstructorNum != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"constructor_num":`...)
		w = basictl.JSONWriteUint32(w, item.ConstructorNum)
	}
	if len(item.Constructors) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"constructors":`...)
		if w, err = BuiltinTupleTlsCombinatorBoxedWriteJSONOpt(short, w, item.Constructors, item.ConstructorNum); err != nil {
			return w, err
		}
	}
	if item.FunctionsNum != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"functions_num":`...)
		w = basictl.JSONWriteUint32(w, item.FunctionsNum)
	}
	if len(item.Functions) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"functions":`...)
		if w, err = BuiltinTupleTlsCombinatorBoxedWriteJSONOpt(short, w, item.Functions, item.FunctionsNum); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *TlsSchemaV2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsSchemaV2) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("tls.schema_v2", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("tls.schema_v2", err.Error())
	}
	return nil
}

func (item TlsSchemaV3) AsUnion() TlsSchemaUnion {
	var ret TlsSchemaUnion
	ret.SetV3(item)
	return ret
}

// AsUnion will be here
type TlsSchemaV3 struct {
	Version        int32
	Date           int32
	TypesNum       uint32
	Types          []TlsType
	ConstructorNum uint32
	Constructors   []TlsCombinatorUnion
	FunctionsNum   uint32
	Functions      []TlsCombinatorUnion
}

func (TlsSchemaV3) TLName() string { return "tls.schema_v3" }
func (TlsSchemaV3) TLTag() uint32  { return 0xe4a8604b }

func (item *TlsSchemaV3) Reset() {
	item.Version = 0
	item.Date = 0
	item.TypesNum = 0
	item.Types = item.Types[:0]
	item.ConstructorNum = 0
	item.Constructors = item.Constructors[:0]
	item.FunctionsNum = 0
	item.Functions = item.Functions[:0]
}

func (item *TlsSchemaV3) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Date); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.TypesNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsTypeBoxedRead(w, &item.Types, item.TypesNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsCombinatorBoxedRead(w, &item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.FunctionsNum); err != nil {
		return w, err
	}
	return BuiltinTupleTlsCombinatorBoxedRead(w, &item.Functions, item.FunctionsNum)
}

func (item *TlsSchemaV3) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Version)
	w = basictl.IntWrite(w, item.Date)
	w = basictl.NatWrite(w, item.TypesNum)
	if w, err = BuiltinTupleTlsTypeBoxedWrite(w, item.Types, item.TypesNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.ConstructorNum)
	if w, err = BuiltinTupleTlsCombinatorBoxedWrite(w, item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.FunctionsNum)
	return BuiltinTupleTlsCombinatorBoxedWrite(w, item.Functions, item.FunctionsNum)
}

func (item *TlsSchemaV3) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe4a8604b); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TlsSchemaV3) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0xe4a8604b)
	return item.Write(w)
}

func (item TlsSchemaV3) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func TlsSchemaV3__ReadJSON(item *TlsSchemaV3, j interface{}) error { return item.readJSON(j) }
func (item *TlsSchemaV3) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("tls.schema_v3", "expected json object")
	}
	_jVersion := _jm["version"]
	delete(_jm, "version")
	if err := JsonReadInt32(_jVersion, &item.Version); err != nil {
		return err
	}
	_jDate := _jm["date"]
	delete(_jm, "date")
	if err := JsonReadInt32(_jDate, &item.Date); err != nil {
		return err
	}
	_jTypesNum := _jm["types_num"]
	delete(_jm, "types_num")
	if err := JsonReadUint32(_jTypesNum, &item.TypesNum); err != nil {
		return err
	}
	_jTypes := _jm["types"]
	delete(_jm, "types")
	_jConstructorNum := _jm["constructor_num"]
	delete(_jm, "constructor_num")
	if err := JsonReadUint32(_jConstructorNum, &item.ConstructorNum); err != nil {
		return err
	}
	_jConstructors := _jm["constructors"]
	delete(_jm, "constructors")
	_jFunctionsNum := _jm["functions_num"]
	delete(_jm, "functions_num")
	if err := JsonReadUint32(_jFunctionsNum, &item.FunctionsNum); err != nil {
		return err
	}
	_jFunctions := _jm["functions"]
	delete(_jm, "functions")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("tls.schema_v3", k)
	}
	if err := BuiltinTupleTlsTypeBoxedReadJSON(_jTypes, &item.Types, item.TypesNum); err != nil {
		return err
	}
	if err := BuiltinTupleTlsCombinatorBoxedReadJSON(_jConstructors, &item.Constructors, item.ConstructorNum); err != nil {
		return err
	}
	if err := BuiltinTupleTlsCombinatorBoxedReadJSON(_jFunctions, &item.Functions, item.FunctionsNum); err != nil {
		return err
	}
	return nil
}

func (item *TlsSchemaV3) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *TlsSchemaV3) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.Version != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"version":`...)
		w = basictl.JSONWriteInt32(w, item.Version)
	}
	if item.Date != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"date":`...)
		w = basictl.JSONWriteInt32(w, item.Date)
	}
	if item.TypesNum != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"types_num":`...)
		w = basictl.JSONWriteUint32(w, item.TypesNum)
	}
	if len(item.Types) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"types":`...)
		if w, err = BuiltinTupleTlsTypeBoxedWriteJSONOpt(short, w, item.Types, item.TypesNum); err != nil {
			return w, err
		}
	}
	if item.ConstructorNum != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"constructor_num":`...)
		w = basictl.JSONWriteUint32(w, item.ConstructorNum)
	}
	if len(item.Constructors) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"constructors":`...)
		if w, err = BuiltinTupleTlsCombinatorBoxedWriteJSONOpt(short, w, item.Constructors, item.ConstructorNum); err != nil {
			return w, err
		}
	}
	if item.FunctionsNum != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"functions_num":`...)
		w = basictl.JSONWriteUint32(w, item.FunctionsNum)
	}
	if len(item.Functions) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"functions":`...)
		if w, err = BuiltinTupleTlsCombinatorBoxedWriteJSONOpt(short, w, item.Functions, item.FunctionsNum); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *TlsSchemaV3) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsSchemaV3) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("tls.schema_v3", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("tls.schema_v3", err.Error())
	}
	return nil
}

func (item TlsSchemaV4) AsUnion() TlsSchemaUnion {
	var ret TlsSchemaUnion
	ret.SetV4(item)
	return ret
}

// AsUnion will be here
type TlsSchemaV4 struct {
	Version        int32
	Date           int32
	TypesNum       uint32
	Types          []TlsType
	ConstructorNum uint32
	Constructors   []TlsCombinatorUnion
	FunctionsNum   uint32
	Functions      []TlsCombinatorUnion
}

func (TlsSchemaV4) TLName() string { return "tls.schema_v4" }
func (TlsSchemaV4) TLTag() uint32  { return 0x90ac88d7 }

func (item *TlsSchemaV4) Reset() {
	item.Version = 0
	item.Date = 0
	item.TypesNum = 0
	item.Types = item.Types[:0]
	item.ConstructorNum = 0
	item.Constructors = item.Constructors[:0]
	item.FunctionsNum = 0
	item.Functions = item.Functions[:0]
}

func (item *TlsSchemaV4) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Date); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.TypesNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsTypeBoxedRead(w, &item.Types, item.TypesNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleTlsCombinatorBoxedRead(w, &item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.FunctionsNum); err != nil {
		return w, err
	}
	return BuiltinTupleTlsCombinatorBoxedRead(w, &item.Functions, item.FunctionsNum)
}

func (item *TlsSchemaV4) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Version)
	w = basictl.IntWrite(w, item.Date)
	w = basictl.NatWrite(w, item.TypesNum)
	if w, err = BuiltinTupleTlsTypeBoxedWrite(w, item.Types, item.TypesNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.ConstructorNum)
	if w, err = BuiltinTupleTlsCombinatorBoxedWrite(w, item.Constructors, item.ConstructorNum); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.FunctionsNum)
	return BuiltinTupleTlsCombinatorBoxedWrite(w, item.Functions, item.FunctionsNum)
}

func (item *TlsSchemaV4) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x90ac88d7); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TlsSchemaV4) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x90ac88d7)
	return item.Write(w)
}

func (item TlsSchemaV4) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func TlsSchemaV4__ReadJSON(item *TlsSchemaV4, j interface{}) error { return item.readJSON(j) }
func (item *TlsSchemaV4) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("tls.schema_v4", "expected json object")
	}
	_jVersion := _jm["version"]
	delete(_jm, "version")
	if err := JsonReadInt32(_jVersion, &item.Version); err != nil {
		return err
	}
	_jDate := _jm["date"]
	delete(_jm, "date")
	if err := JsonReadInt32(_jDate, &item.Date); err != nil {
		return err
	}
	_jTypesNum := _jm["types_num"]
	delete(_jm, "types_num")
	if err := JsonReadUint32(_jTypesNum, &item.TypesNum); err != nil {
		return err
	}
	_jTypes := _jm["types"]
	delete(_jm, "types")
	_jConstructorNum := _jm["constructor_num"]
	delete(_jm, "constructor_num")
	if err := JsonReadUint32(_jConstructorNum, &item.ConstructorNum); err != nil {
		return err
	}
	_jConstructors := _jm["constructors"]
	delete(_jm, "constructors")
	_jFunctionsNum := _jm["functions_num"]
	delete(_jm, "functions_num")
	if err := JsonReadUint32(_jFunctionsNum, &item.FunctionsNum); err != nil {
		return err
	}
	_jFunctions := _jm["functions"]
	delete(_jm, "functions")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("tls.schema_v4", k)
	}
	if err := BuiltinTupleTlsTypeBoxedReadJSON(_jTypes, &item.Types, item.TypesNum); err != nil {
		return err
	}
	if err := BuiltinTupleTlsCombinatorBoxedReadJSON(_jConstructors, &item.Constructors, item.ConstructorNum); err != nil {
		return err
	}
	if err := BuiltinTupleTlsCombinatorBoxedReadJSON(_jFunctions, &item.Functions, item.FunctionsNum); err != nil {
		return err
	}
	return nil
}

func (item *TlsSchemaV4) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *TlsSchemaV4) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.Version != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"version":`...)
		w = basictl.JSONWriteInt32(w, item.Version)
	}
	if item.Date != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"date":`...)
		w = basictl.JSONWriteInt32(w, item.Date)
	}
	if item.TypesNum != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"types_num":`...)
		w = basictl.JSONWriteUint32(w, item.TypesNum)
	}
	if len(item.Types) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"types":`...)
		if w, err = BuiltinTupleTlsTypeBoxedWriteJSONOpt(short, w, item.Types, item.TypesNum); err != nil {
			return w, err
		}
	}
	if item.ConstructorNum != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"constructor_num":`...)
		w = basictl.JSONWriteUint32(w, item.ConstructorNum)
	}
	if len(item.Constructors) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"constructors":`...)
		if w, err = BuiltinTupleTlsCombinatorBoxedWriteJSONOpt(short, w, item.Constructors, item.ConstructorNum); err != nil {
			return w, err
		}
	}
	if item.FunctionsNum != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"functions_num":`...)
		w = basictl.JSONWriteUint32(w, item.FunctionsNum)
	}
	if len(item.Functions) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"functions":`...)
		if w, err = BuiltinTupleTlsCombinatorBoxedWriteJSONOpt(short, w, item.Functions, item.FunctionsNum); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *TlsSchemaV4) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsSchemaV4) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("tls.schema_v4", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("tls.schema_v4", err.Error())
	}
	return nil
}
