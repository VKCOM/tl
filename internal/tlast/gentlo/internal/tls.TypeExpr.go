// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func (item TlsArray) AsUnion() TlsTypeExpr {
	var ret TlsTypeExpr
	ret.SetArray(item)
	return ret
}

type TlsArray struct {
	Multiplicity TlsNatExpr
	ArgsNum      uint32
	Args         []TlsArg
}

func (TlsArray) TLName() string { return "tls.array" }
func (TlsArray) TLTag() uint32  { return 0xd9fb20de }

func (item *TlsArray) Reset() {
	item.Multiplicity.Reset()
	item.ArgsNum = 0
	item.Args = item.Args[:0]
}

func (item *TlsArray) Read(w []byte) (_ []byte, err error) {
	if w, err = item.Multiplicity.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.ArgsNum); err != nil {
		return w, err
	}
	return BuiltinTupleTlsArgBoxedRead(w, &item.Args, item.ArgsNum)
}

// This method is general version of Write, use it instead!
func (item *TlsArray) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsArray) Write(w []byte) (_ []byte, err error) {
	w = item.Multiplicity.WriteBoxed(w)
	w = basictl.NatWrite(w, item.ArgsNum)
	if w, err = BuiltinTupleTlsArgBoxedWrite(w, item.Args, item.ArgsNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TlsArray) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xd9fb20de); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsArray) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsArray) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xd9fb20de)
	return item.Write(w)
}

func (item TlsArray) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsArray) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propMultiplicityPresented bool
	var propArgsNumPresented bool
	var rawArgs []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "multiplicity":
				if propMultiplicityPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.array", "multiplicity")
				}
				if err := item.Multiplicity.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propMultiplicityPresented = true
			case "args_num":
				if propArgsNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.array", "args_num")
				}
				if err := Json2ReadUint32(in, &item.ArgsNum); err != nil {
					return err
				}
				propArgsNumPresented = true
			case "args":
				if rawArgs != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.array", "args")
				}
				rawArgs = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("tls.array", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propMultiplicityPresented {
		item.Multiplicity.Reset()
	}
	if !propArgsNumPresented {
		item.ArgsNum = 0
	}
	var inArgsPointer *basictl.JsonLexer
	inArgs := basictl.JsonLexer{Data: rawArgs}
	if rawArgs != nil {
		inArgsPointer = &inArgs
	}
	if err := BuiltinTupleTlsArgBoxedReadJSON(legacyTypeNames, inArgsPointer, &item.Args, item.ArgsNum); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsArray) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsArray) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsArray) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"multiplicity":`...)
	w = item.Multiplicity.WriteJSONOpt(newTypeNames, short, w)
	backupIndexArgsNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"args_num":`...)
	w = basictl.JSONWriteUint32(w, item.ArgsNum)
	if (item.ArgsNum != 0) == false {
		w = w[:backupIndexArgsNum]
	}
	backupIndexArgs := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"args":`...)
	if w, err = BuiltinTupleTlsArgBoxedWriteJSONOpt(newTypeNames, short, w, item.Args, item.ArgsNum); err != nil {
		return w, err
	}
	if (len(item.Args) != 0) == false {
		w = w[:backupIndexArgs]
	}
	return append(w, '}'), nil
}

func (item *TlsArray) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsArray) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.array", err.Error())
	}
	return nil
}

var _TlsTypeExpr = [3]UnionElement{
	{TLTag: 0x0142ceae, TLName: "tls.typeVar", TLString: "tls.typeVar#0142ceae"},
	{TLTag: 0xd9fb20de, TLName: "tls.array", TLString: "tls.array#d9fb20de"},
	{TLTag: 0xc1863d08, TLName: "tls.typeExpr", TLString: "tls.typeExpr#c1863d08"},
}

type TlsTypeExpr struct {
	valueTypeVar  TlsTypeVar
	valueArray    TlsArray
	valueTypeExpr TlsTypeExpr0
	index         int
}

func (item TlsTypeExpr) TLName() string { return _TlsTypeExpr[item.index].TLName }
func (item TlsTypeExpr) TLTag() uint32  { return _TlsTypeExpr[item.index].TLTag }

func (item *TlsTypeExpr) Reset() { item.ResetToTypeVar() }

func (item *TlsTypeExpr) IsTypeVar() bool { return item.index == 0 }

func (item *TlsTypeExpr) AsTypeVar() (*TlsTypeVar, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueTypeVar, true
}
func (item *TlsTypeExpr) ResetToTypeVar() *TlsTypeVar {
	item.index = 0
	item.valueTypeVar.Reset()
	return &item.valueTypeVar
}
func (item *TlsTypeExpr) SetTypeVar(value TlsTypeVar) {
	item.index = 0
	item.valueTypeVar = value
}

func (item *TlsTypeExpr) IsArray() bool { return item.index == 1 }

func (item *TlsTypeExpr) AsArray() (*TlsArray, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueArray, true
}
func (item *TlsTypeExpr) ResetToArray() *TlsArray {
	item.index = 1
	item.valueArray.Reset()
	return &item.valueArray
}
func (item *TlsTypeExpr) SetArray(value TlsArray) {
	item.index = 1
	item.valueArray = value
}

func (item *TlsTypeExpr) IsTypeExpr() bool { return item.index == 2 }

func (item *TlsTypeExpr) AsTypeExpr() (*TlsTypeExpr0, bool) {
	if item.index != 2 {
		return nil, false
	}
	return &item.valueTypeExpr, true
}
func (item *TlsTypeExpr) ResetToTypeExpr() *TlsTypeExpr0 {
	item.index = 2
	item.valueTypeExpr.Reset()
	return &item.valueTypeExpr
}
func (item *TlsTypeExpr) SetTypeExpr(value TlsTypeExpr0) {
	item.index = 2
	item.valueTypeExpr = value
}

func (item *TlsTypeExpr) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x0142ceae:
		item.index = 0
		return item.valueTypeVar.Read(w)
	case 0xd9fb20de:
		item.index = 1
		return item.valueArray.Read(w)
	case 0xc1863d08:
		item.index = 2
		return item.valueTypeExpr.Read(w)
	default:
		return w, ErrorInvalidUnionTag("tls.TypeExpr", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsTypeExpr) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsTypeExpr) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, _TlsTypeExpr[item.index].TLTag)
	switch item.index {
	case 0:
		w = item.valueTypeVar.Write(w)
	case 1:
		if w, err = item.valueArray.Write(w); err != nil {
			return w, err
		}
	case 2:
		if w, err = item.valueTypeExpr.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *TlsTypeExpr) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("tls.TypeExpr", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "tls.typeVar#0142ceae", "tls.typeVar", "#0142ceae":
		if !legacyTypeNames && _tag == "tls.typeVar#0142ceae" {
			return ErrorInvalidUnionLegacyTagJSON("tls.TypeExpr", "tls.typeVar#0142ceae")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueTypeVar.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "tls.array#d9fb20de", "tls.array", "#d9fb20de":
		if !legacyTypeNames && _tag == "tls.array#d9fb20de" {
			return ErrorInvalidUnionLegacyTagJSON("tls.TypeExpr", "tls.array#d9fb20de")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueArray.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "tls.typeExpr#c1863d08", "tls.typeExpr", "#c1863d08":
		if !legacyTypeNames && _tag == "tls.typeExpr#c1863d08" {
			return ErrorInvalidUnionLegacyTagJSON("tls.TypeExpr", "tls.typeExpr#c1863d08")
		}
		item.index = 2
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueTypeExpr.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("tls.TypeExpr", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsTypeExpr) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsTypeExpr) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsTypeExpr) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"tls.typeVar"`...)
		} else {
			w = append(w, `{"type":"tls.typeVar#0142ceae"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueTypeVar.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}'), nil
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"tls.array"`...)
		} else {
			w = append(w, `{"type":"tls.array#d9fb20de"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.valueArray.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 2:
		if newTypeNames {
			w = append(w, `{"type":"tls.typeExpr"`...)
		} else {
			w = append(w, `{"type":"tls.typeExpr#c1863d08"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.valueTypeExpr.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	default: // Impossible due to panic above
		return w, nil
	}
}

func (item TlsTypeExpr) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsTypeExpr) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsTypeExpr) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.TypeExpr", err.Error())
	}
	return nil
}

func (item TlsTypeExpr0) AsUnion() TlsTypeExpr {
	var ret TlsTypeExpr
	ret.SetTypeExpr(item)
	return ret
}

type TlsTypeExpr0 struct {
	Name        int32
	Flags       int32
	ChildrenNum uint32
	Children    []TlsExpr
}

func (TlsTypeExpr0) TLName() string { return "tls.typeExpr" }
func (TlsTypeExpr0) TLTag() uint32  { return 0xc1863d08 }

func (item *TlsTypeExpr0) Reset() {
	item.Name = 0
	item.Flags = 0
	item.ChildrenNum = 0
	item.Children = item.Children[:0]
}

func (item *TlsTypeExpr0) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Name); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Flags); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.ChildrenNum); err != nil {
		return w, err
	}
	return BuiltinTupleTlsExprRead(w, &item.Children, item.ChildrenNum)
}

// This method is general version of Write, use it instead!
func (item *TlsTypeExpr0) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsTypeExpr0) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Name)
	w = basictl.IntWrite(w, item.Flags)
	w = basictl.NatWrite(w, item.ChildrenNum)
	if w, err = BuiltinTupleTlsExprWrite(w, item.Children, item.ChildrenNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TlsTypeExpr0) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc1863d08); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsTypeExpr0) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsTypeExpr0) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xc1863d08)
	return item.Write(w)
}

func (item TlsTypeExpr0) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsTypeExpr0) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNamePresented bool
	var propFlagsPresented bool
	var propChildrenNumPresented bool
	var rawChildren []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "name":
				if propNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.typeExpr", "name")
				}
				if err := Json2ReadInt32(in, &item.Name); err != nil {
					return err
				}
				propNamePresented = true
			case "flags":
				if propFlagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.typeExpr", "flags")
				}
				if err := Json2ReadInt32(in, &item.Flags); err != nil {
					return err
				}
				propFlagsPresented = true
			case "children_num":
				if propChildrenNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.typeExpr", "children_num")
				}
				if err := Json2ReadUint32(in, &item.ChildrenNum); err != nil {
					return err
				}
				propChildrenNumPresented = true
			case "children":
				if rawChildren != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.typeExpr", "children")
				}
				rawChildren = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("tls.typeExpr", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNamePresented {
		item.Name = 0
	}
	if !propFlagsPresented {
		item.Flags = 0
	}
	if !propChildrenNumPresented {
		item.ChildrenNum = 0
	}
	var inChildrenPointer *basictl.JsonLexer
	inChildren := basictl.JsonLexer{Data: rawChildren}
	if rawChildren != nil {
		inChildrenPointer = &inChildren
	}
	if err := BuiltinTupleTlsExprReadJSON(legacyTypeNames, inChildrenPointer, &item.Children, item.ChildrenNum); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsTypeExpr0) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsTypeExpr0) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsTypeExpr0) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"name":`...)
	w = basictl.JSONWriteInt32(w, item.Name)
	if (item.Name != 0) == false {
		w = w[:backupIndexName]
	}
	backupIndexFlags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"flags":`...)
	w = basictl.JSONWriteInt32(w, item.Flags)
	if (item.Flags != 0) == false {
		w = w[:backupIndexFlags]
	}
	backupIndexChildrenNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"children_num":`...)
	w = basictl.JSONWriteUint32(w, item.ChildrenNum)
	if (item.ChildrenNum != 0) == false {
		w = w[:backupIndexChildrenNum]
	}
	backupIndexChildren := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"children":`...)
	if w, err = BuiltinTupleTlsExprWriteJSONOpt(newTypeNames, short, w, item.Children, item.ChildrenNum); err != nil {
		return w, err
	}
	if (len(item.Children) != 0) == false {
		w = w[:backupIndexChildren]
	}
	return append(w, '}'), nil
}

func (item *TlsTypeExpr0) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsTypeExpr0) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.typeExpr", err.Error())
	}
	return nil
}

func (item TlsTypeVar) AsUnion() TlsTypeExpr {
	var ret TlsTypeExpr
	ret.SetTypeVar(item)
	return ret
}

type TlsTypeVar struct {
	VarNum int32
	Flags  int32
}

func (TlsTypeVar) TLName() string { return "tls.typeVar" }
func (TlsTypeVar) TLTag() uint32  { return 0x0142ceae }

func (item *TlsTypeVar) Reset() {
	item.VarNum = 0
	item.Flags = 0
}

func (item *TlsTypeVar) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.VarNum); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Flags)
}

// This method is general version of Write, use it instead!
func (item *TlsTypeVar) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TlsTypeVar) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.VarNum)
	w = basictl.IntWrite(w, item.Flags)
	return w
}

func (item *TlsTypeVar) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0142ceae); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsTypeVar) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TlsTypeVar) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0142ceae)
	return item.Write(w)
}

func (item TlsTypeVar) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TlsTypeVar) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propVarNumPresented bool
	var propFlagsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "var_num":
				if propVarNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.typeVar", "var_num")
				}
				if err := Json2ReadInt32(in, &item.VarNum); err != nil {
					return err
				}
				propVarNumPresented = true
			case "flags":
				if propFlagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.typeVar", "flags")
				}
				if err := Json2ReadInt32(in, &item.Flags); err != nil {
					return err
				}
				propFlagsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("tls.typeVar", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propVarNumPresented {
		item.VarNum = 0
	}
	if !propFlagsPresented {
		item.Flags = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsTypeVar) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TlsTypeVar) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsTypeVar) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexVarNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"var_num":`...)
	w = basictl.JSONWriteInt32(w, item.VarNum)
	if (item.VarNum != 0) == false {
		w = w[:backupIndexVarNum]
	}
	backupIndexFlags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"flags":`...)
	w = basictl.JSONWriteInt32(w, item.Flags)
	if (item.Flags != 0) == false {
		w = w[:backupIndexFlags]
	}
	return append(w, '}')
}

func (item *TlsTypeVar) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TlsTypeVar) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.typeVar", err.Error())
	}
	return nil
}
