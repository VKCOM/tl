// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTupleTlsTypeBoxedRead(w []byte, vec *[]TlsType, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]TlsType, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTlsTypeBoxedWrite(w []byte, vec []TlsType, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]TlsType", len(vec), nat_n)
	}
	for _, elem := range vec {
		w = elem.WriteBoxed(w)
	}
	return w, nil
}

func BuiltinTupleTlsTypeBoxedReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]TlsType, nat_n uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]TlsType, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]TlsType", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[]TlsType", "array is longer than expected")
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]TlsType", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[]TlsType", index, nat_n)
	}
	return nil
}

func BuiltinTupleTlsTypeBoxedWriteJSON(w []byte, vec []TlsType, nat_n uint32) (_ []byte, err error) {
	return BuiltinTupleTlsTypeBoxedWriteJSONOpt(true, false, w, vec, nat_n)
}
func BuiltinTupleTlsTypeBoxedWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []TlsType, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]TlsType", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']'), nil
}

type TlsType struct {
	Name            int32
	Id              string
	ConstructorsNum int32
	Flags           int32
	Arity           int32
	ParamsType      int64
}

func (TlsType) TLName() string { return "tls.type" }
func (TlsType) TLTag() uint32  { return 0x12eb4386 }

func (item *TlsType) Reset() {
	item.Name = 0
	item.Id = ""
	item.ConstructorsNum = 0
	item.Flags = 0
	item.Arity = 0
	item.ParamsType = 0
}

func (item *TlsType) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Name); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Id); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.ConstructorsNum); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Flags); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Arity); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.ParamsType)
}

// This method is general version of Write, use it instead!
func (item *TlsType) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TlsType) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.Name)
	w = basictl.StringWrite(w, item.Id)
	w = basictl.IntWrite(w, item.ConstructorsNum)
	w = basictl.IntWrite(w, item.Flags)
	w = basictl.IntWrite(w, item.Arity)
	w = basictl.LongWrite(w, item.ParamsType)
	return w
}

func (item *TlsType) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x12eb4386); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsType) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TlsType) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x12eb4386)
	return item.Write(w)
}

func (item TlsType) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TlsType) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNamePresented bool
	var propIdPresented bool
	var propConstructorsNumPresented bool
	var propFlagsPresented bool
	var propArityPresented bool
	var propParamsTypePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "name":
				if propNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.type", "name")
				}
				if err := Json2ReadInt32(in, &item.Name); err != nil {
					return err
				}
				propNamePresented = true
			case "id":
				if propIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.type", "id")
				}
				if err := Json2ReadString(in, &item.Id); err != nil {
					return err
				}
				propIdPresented = true
			case "constructors_num":
				if propConstructorsNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.type", "constructors_num")
				}
				if err := Json2ReadInt32(in, &item.ConstructorsNum); err != nil {
					return err
				}
				propConstructorsNumPresented = true
			case "flags":
				if propFlagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.type", "flags")
				}
				if err := Json2ReadInt32(in, &item.Flags); err != nil {
					return err
				}
				propFlagsPresented = true
			case "arity":
				if propArityPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.type", "arity")
				}
				if err := Json2ReadInt32(in, &item.Arity); err != nil {
					return err
				}
				propArityPresented = true
			case "params_type":
				if propParamsTypePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.type", "params_type")
				}
				if err := Json2ReadInt64(in, &item.ParamsType); err != nil {
					return err
				}
				propParamsTypePresented = true
			default:
				return ErrorInvalidJSONExcessElement("tls.type", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNamePresented {
		item.Name = 0
	}
	if !propIdPresented {
		item.Id = ""
	}
	if !propConstructorsNumPresented {
		item.ConstructorsNum = 0
	}
	if !propFlagsPresented {
		item.Flags = 0
	}
	if !propArityPresented {
		item.Arity = 0
	}
	if !propParamsTypePresented {
		item.ParamsType = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsType) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TlsType) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsType) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"name":`...)
	w = basictl.JSONWriteInt32(w, item.Name)
	if (item.Name != 0) == false {
		w = w[:backupIndexName]
	}
	backupIndexId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"id":`...)
	w = basictl.JSONWriteString(w, item.Id)
	if (len(item.Id) != 0) == false {
		w = w[:backupIndexId]
	}
	backupIndexConstructorsNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"constructors_num":`...)
	w = basictl.JSONWriteInt32(w, item.ConstructorsNum)
	if (item.ConstructorsNum != 0) == false {
		w = w[:backupIndexConstructorsNum]
	}
	backupIndexFlags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"flags":`...)
	w = basictl.JSONWriteInt32(w, item.Flags)
	if (item.Flags != 0) == false {
		w = w[:backupIndexFlags]
	}
	backupIndexArity := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"arity":`...)
	w = basictl.JSONWriteInt32(w, item.Arity)
	if (item.Arity != 0) == false {
		w = w[:backupIndexArity]
	}
	backupIndexParamsType := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"params_type":`...)
	w = basictl.JSONWriteInt64(w, item.ParamsType)
	if (item.ParamsType != 0) == false {
		w = w[:backupIndexParamsType]
	}
	return append(w, '}')
}

func (item *TlsType) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TlsType) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.type", err.Error())
	}
	return nil
}
