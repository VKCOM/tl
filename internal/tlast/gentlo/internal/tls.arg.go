// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTupleTlsArgBoxedRead(w []byte, vec *[]TlsArg, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]TlsArg, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTlsArgBoxedWrite(w []byte, vec []TlsArg, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]TlsArg", len(vec), nat_n)
	}
	for _, elem := range vec {
		if w, err = elem.WriteBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTlsArgBoxedReadJSON(j interface{}, vec *[]TlsArg, nat_n uint32) error {
	_, _arr, err := JsonReadArrayFixedSize("[]TlsArg", j, nat_n)
	if err != nil {
		return err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]TlsArg, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if err := TlsArg__ReadJSON(&(*vec)[i], _arr[i]); err != nil {
			return err
		}
	}
	return nil
}

func BuiltinTupleTlsArgBoxedWriteJSON(w []byte, vec []TlsArg, nat_n uint32) (_ []byte, err error) {
	return BuiltinTupleTlsArgBoxedWriteJSONOpt(false, w, vec, nat_n)
}
func BuiltinTupleTlsArgBoxedWriteJSONOpt(short bool, w []byte, vec []TlsArg, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]TlsArg", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

type TlsArg struct {
	Id          string
	Flags       uint32
	VarNum      int32 // Conditional: item.Flags.1
	ExistVarNum int32 // Conditional: item.Flags.2
	ExistVarBit int32 // Conditional: item.Flags.2
	Type        TlsTypeExpr
}

func (TlsArg) TLName() string { return "tls.arg" }
func (TlsArg) TLTag() uint32  { return 0x29dfe61b }

func (item *TlsArg) SetVarNum(v int32) {
	item.VarNum = v
	item.Flags |= 1 << 1
}
func (item *TlsArg) ClearVarNum() {
	item.VarNum = 0
	item.Flags &^= 1 << 1
}
func (item TlsArg) IsSetVarNum() bool { return item.Flags&(1<<1) != 0 }

func (item *TlsArg) SetExistVarNum(v int32) {
	item.ExistVarNum = v
	item.Flags |= 1 << 2
}
func (item *TlsArg) ClearExistVarNum() {
	item.ExistVarNum = 0
	item.Flags &^= 1 << 2
}
func (item TlsArg) IsSetExistVarNum() bool { return item.Flags&(1<<2) != 0 }

func (item *TlsArg) SetExistVarBit(v int32) {
	item.ExistVarBit = v
	item.Flags |= 1 << 2
}
func (item *TlsArg) ClearExistVarBit() {
	item.ExistVarBit = 0
	item.Flags &^= 1 << 2
}
func (item TlsArg) IsSetExistVarBit() bool { return item.Flags&(1<<2) != 0 }

func (item *TlsArg) Reset() {
	item.Id = ""
	item.Flags = 0
	item.VarNum = 0
	item.ExistVarNum = 0
	item.ExistVarBit = 0
	item.Type.Reset()
}

func (item *TlsArg) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.Id); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.Flags); err != nil {
		return w, err
	}
	if item.Flags&(1<<1) != 0 {
		if w, err = basictl.IntRead(w, &item.VarNum); err != nil {
			return w, err
		}
	} else {
		item.VarNum = 0
	}
	if item.Flags&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ExistVarNum); err != nil {
			return w, err
		}
	} else {
		item.ExistVarNum = 0
	}
	if item.Flags&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ExistVarBit); err != nil {
			return w, err
		}
	} else {
		item.ExistVarBit = 0
	}
	return item.Type.ReadBoxed(w)
}

func (item *TlsArg) Write(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringWrite(w, item.Id); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.Flags)
	if item.Flags&(1<<1) != 0 {
		w = basictl.IntWrite(w, item.VarNum)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ExistVarNum)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ExistVarBit)
	}
	return item.Type.WriteBoxed(w)
}

func (item *TlsArg) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x29dfe61b); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TlsArg) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x29dfe61b)
	return item.Write(w)
}

func (item TlsArg) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func TlsArg__ReadJSON(item *TlsArg, j interface{}) error { return item.readJSON(j) }
func (item *TlsArg) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("tls.arg", "expected json object")
	}
	_jId := _jm["id"]
	delete(_jm, "id")
	if err := JsonReadString(_jId, &item.Id); err != nil {
		return err
	}
	_jFlags := _jm["flags"]
	delete(_jm, "flags")
	if err := JsonReadUint32(_jFlags, &item.Flags); err != nil {
		return err
	}
	_jVarNum := _jm["var_num"]
	delete(_jm, "var_num")
	_jExistVarNum := _jm["exist_var_num"]
	delete(_jm, "exist_var_num")
	_jExistVarBit := _jm["exist_var_bit"]
	delete(_jm, "exist_var_bit")
	_jType := _jm["type"]
	delete(_jm, "type")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("tls.arg", k)
	}
	if _jVarNum != nil {
		item.Flags |= 1 << 1
	}
	if _jExistVarNum != nil {
		item.Flags |= 1 << 2
	}
	if _jExistVarBit != nil {
		item.Flags |= 1 << 2
	}
	if _jVarNum != nil {
		if err := JsonReadInt32(_jVarNum, &item.VarNum); err != nil {
			return err
		}
	} else {
		item.VarNum = 0
	}
	if _jExistVarNum != nil {
		if err := JsonReadInt32(_jExistVarNum, &item.ExistVarNum); err != nil {
			return err
		}
	} else {
		item.ExistVarNum = 0
	}
	if _jExistVarBit != nil {
		if err := JsonReadInt32(_jExistVarBit, &item.ExistVarBit); err != nil {
			return err
		}
	} else {
		item.ExistVarBit = 0
	}
	if err := TlsTypeExpr__ReadJSON(&item.Type, _jType); err != nil {
		return err
	}
	return nil
}

func (item *TlsArg) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *TlsArg) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Id) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"id":`...)
		w = basictl.JSONWriteString(w, item.Id)
	}
	if item.Flags != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"flags":`...)
		w = basictl.JSONWriteUint32(w, item.Flags)
	}
	if item.Flags&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"var_num":`...)
		w = basictl.JSONWriteInt32(w, item.VarNum)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"exist_var_num":`...)
		w = basictl.JSONWriteInt32(w, item.ExistVarNum)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"exist_var_bit":`...)
		w = basictl.JSONWriteInt32(w, item.ExistVarBit)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"type":`...)
	if w, err = item.Type.WriteJSONOpt(short, w); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *TlsArg) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsArg) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("tls.arg", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("tls.arg", err.Error())
	}
	return nil
}
