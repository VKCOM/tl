// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTupleTlsArgBoxedRead(w []byte, vec *[]TlsArg, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]TlsArg, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTlsArgBoxedWrite(w []byte, vec []TlsArg, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]TlsArg", len(vec), nat_n)
	}
	for _, elem := range vec {
		if w, err = elem.WriteBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTlsArgBoxedReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]TlsArg, nat_n uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]TlsArg, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]TlsArg", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[]TlsArg", "array is longer than expected")
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]TlsArg", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[]TlsArg", index, nat_n)
	}
	return nil
}

func BuiltinTupleTlsArgBoxedWriteJSON(w []byte, vec []TlsArg, nat_n uint32) (_ []byte, err error) {
	return BuiltinTupleTlsArgBoxedWriteJSONOpt(true, false, w, vec, nat_n)
}
func BuiltinTupleTlsArgBoxedWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []TlsArg, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]TlsArg", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

type TlsArg struct {
	Id          string
	Flags       uint32
	VarNum      int32 // Conditional: item.Flags.1
	ExistVarNum int32 // Conditional: item.Flags.2
	ExistVarBit int32 // Conditional: item.Flags.2
	Type        TlsTypeExpr
}

func (TlsArg) TLName() string { return "tls.arg" }
func (TlsArg) TLTag() uint32  { return 0x29dfe61b }

func (item *TlsArg) SetVarNum(v int32) {
	item.VarNum = v
	item.Flags |= 1 << 1
}
func (item *TlsArg) ClearVarNum() {
	item.VarNum = 0
	item.Flags &^= 1 << 1
}
func (item *TlsArg) IsSetVarNum() bool { return item.Flags&(1<<1) != 0 }

func (item *TlsArg) SetExistVarNum(v int32) {
	item.ExistVarNum = v
	item.Flags |= 1 << 2
}
func (item *TlsArg) ClearExistVarNum() {
	item.ExistVarNum = 0
	item.Flags &^= 1 << 2
}
func (item *TlsArg) IsSetExistVarNum() bool { return item.Flags&(1<<2) != 0 }

func (item *TlsArg) SetExistVarBit(v int32) {
	item.ExistVarBit = v
	item.Flags |= 1 << 2
}
func (item *TlsArg) ClearExistVarBit() {
	item.ExistVarBit = 0
	item.Flags &^= 1 << 2
}
func (item *TlsArg) IsSetExistVarBit() bool { return item.Flags&(1<<2) != 0 }

func (item *TlsArg) Reset() {
	item.Id = ""
	item.Flags = 0
	item.VarNum = 0
	item.ExistVarNum = 0
	item.ExistVarBit = 0
	item.Type.Reset()
}

func (item *TlsArg) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.Id); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.Flags); err != nil {
		return w, err
	}
	if item.Flags&(1<<1) != 0 {
		if w, err = basictl.IntRead(w, &item.VarNum); err != nil {
			return w, err
		}
	} else {
		item.VarNum = 0
	}
	if item.Flags&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ExistVarNum); err != nil {
			return w, err
		}
	} else {
		item.ExistVarNum = 0
	}
	if item.Flags&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ExistVarBit); err != nil {
			return w, err
		}
	} else {
		item.ExistVarBit = 0
	}
	return item.Type.ReadBoxed(w)
}

// This method is general version of Write, use it instead!
func (item *TlsArg) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsArg) Write(w []byte) (_ []byte, err error) {
	w = basictl.StringWrite(w, item.Id)
	w = basictl.NatWrite(w, item.Flags)
	if item.Flags&(1<<1) != 0 {
		w = basictl.IntWrite(w, item.VarNum)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ExistVarNum)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ExistVarBit)
	}
	if w, err = item.Type.WriteBoxed(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TlsArg) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x29dfe61b); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsArg) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsArg) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x29dfe61b)
	return item.Write(w)
}

func (item TlsArg) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsArg) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propIdPresented bool
	var propFlagsPresented bool
	var propVarNumPresented bool
	var propExistVarNumPresented bool
	var propExistVarBitPresented bool
	var propTypePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "id":
				if propIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.arg", "id")
				}
				if err := Json2ReadString(in, &item.Id); err != nil {
					return err
				}
				propIdPresented = true
			case "flags":
				if propFlagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.arg", "flags")
				}
				if err := Json2ReadUint32(in, &item.Flags); err != nil {
					return err
				}
				propFlagsPresented = true
			case "var_num":
				if propVarNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.arg", "var_num")
				}
				if err := Json2ReadInt32(in, &item.VarNum); err != nil {
					return err
				}
				propVarNumPresented = true
			case "exist_var_num":
				if propExistVarNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.arg", "exist_var_num")
				}
				if err := Json2ReadInt32(in, &item.ExistVarNum); err != nil {
					return err
				}
				propExistVarNumPresented = true
			case "exist_var_bit":
				if propExistVarBitPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.arg", "exist_var_bit")
				}
				if err := Json2ReadInt32(in, &item.ExistVarBit); err != nil {
					return err
				}
				propExistVarBitPresented = true
			case "type":
				if propTypePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.arg", "type")
				}
				if err := item.Type.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propTypePresented = true
			default:
				return ErrorInvalidJSONExcessElement("tls.arg", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propIdPresented {
		item.Id = ""
	}
	if !propFlagsPresented {
		item.Flags = 0
	}
	if !propVarNumPresented {
		item.VarNum = 0
	}
	if !propExistVarNumPresented {
		item.ExistVarNum = 0
	}
	if !propExistVarBitPresented {
		item.ExistVarBit = 0
	}
	if !propTypePresented {
		item.Type.Reset()
	}
	if propVarNumPresented {
		item.Flags |= 1 << 1
	}
	if propExistVarNumPresented {
		item.Flags |= 1 << 2
	}
	if propExistVarBitPresented {
		item.Flags |= 1 << 2
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsArg) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsArg) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsArg) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"id":`...)
	w = basictl.JSONWriteString(w, item.Id)
	if (len(item.Id) != 0) == false {
		w = w[:backupIndexId]
	}
	backupIndexFlags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"flags":`...)
	w = basictl.JSONWriteUint32(w, item.Flags)
	if (item.Flags != 0) == false {
		w = w[:backupIndexFlags]
	}
	if item.Flags&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"var_num":`...)
		w = basictl.JSONWriteInt32(w, item.VarNum)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"exist_var_num":`...)
		w = basictl.JSONWriteInt32(w, item.ExistVarNum)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"exist_var_bit":`...)
		w = basictl.JSONWriteInt32(w, item.ExistVarBit)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"type":`...)
	if w, err = item.Type.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *TlsArg) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsArg) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.arg", err.Error())
	}
	return nil
}
