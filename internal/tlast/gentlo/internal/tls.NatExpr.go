// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/internal/tlast/gentlo/basictl"
)

var _ = basictl.NatWrite

func (item TlsNatConst) AsUnion() TlsNatExpr {
	var ret TlsNatExpr
	ret.SetNatConst(item)
	return ret
}

type TlsNatConst struct {
	Value int32
}

func (TlsNatConst) TLName() string { return "tls.natConst" }
func (TlsNatConst) TLTag() uint32  { return 0x8ce940b1 }

func (item *TlsNatConst) Reset() {
	item.Value = 0
}

func (item *TlsNatConst) Read(w []byte) (_ []byte, err error) {
	return basictl.IntRead(w, &item.Value)
}

func (item *TlsNatConst) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TlsNatConst) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.Value)
	return w
}

func (item *TlsNatConst) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x8ce940b1); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TlsNatConst) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TlsNatConst) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x8ce940b1)
	return item.Write(w)
}

func (item TlsNatConst) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TlsNatConst) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *TlsNatConst) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.natConst", "value")
				}
				if err := Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("tls.natConst", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propValuePresented {
		item.Value = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsNatConst) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *TlsNatConst) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *TlsNatConst) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *TlsNatConst) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TlsNatConst) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.natConst", err.Error())
	}
	return nil
}

var _TlsNatExpr = [2]UnionElement{
	{TLTag: 0x8ce940b1, TLName: "tls.natConst", TLString: "tls.natConst#8ce940b1"},
	{TLTag: 0x4e8a14f0, TLName: "tls.natVar", TLString: "tls.natVar#4e8a14f0"},
}

type TlsNatExpr struct {
	valueNatConst TlsNatConst
	valueNatVar   TlsNatVar
	index         int
}

func (item TlsNatExpr) TLName() string { return _TlsNatExpr[item.index].TLName }
func (item TlsNatExpr) TLTag() uint32  { return _TlsNatExpr[item.index].TLTag }

func (item *TlsNatExpr) Reset() { item.ResetToNatConst() }

func (item *TlsNatExpr) IsNatConst() bool { return item.index == 0 }

func (item *TlsNatExpr) AsNatConst() (*TlsNatConst, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueNatConst, true
}
func (item *TlsNatExpr) ResetToNatConst() *TlsNatConst {
	item.index = 0
	item.valueNatConst.Reset()
	return &item.valueNatConst
}
func (item *TlsNatExpr) SetNatConst(value TlsNatConst) {
	item.index = 0
	item.valueNatConst = value
}

func (item *TlsNatExpr) IsNatVar() bool { return item.index == 1 }

func (item *TlsNatExpr) AsNatVar() (*TlsNatVar, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueNatVar, true
}
func (item *TlsNatExpr) ResetToNatVar() *TlsNatVar {
	item.index = 1
	item.valueNatVar.Reset()
	return &item.valueNatVar
}
func (item *TlsNatExpr) SetNatVar(value TlsNatVar) {
	item.index = 1
	item.valueNatVar = value
}

func (item *TlsNatExpr) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x8ce940b1:
		item.index = 0
		return item.valueNatConst.Read(w)
	case 0x4e8a14f0:
		item.index = 1
		return item.valueNatVar.Read(w)
	default:
		return w, ErrorInvalidUnionTag("tls.NatExpr", tag)
	}
}

func (item *TlsNatExpr) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TlsNatExpr) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _TlsNatExpr[item.index].TLTag)
	switch item.index {
	case 0:
		w = item.valueNatConst.Write(w)
	case 1:
		w = item.valueNatVar.Write(w)
	}
	return w
}

func (item *TlsNatExpr) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *TlsNatExpr) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("tls.NatExpr", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "tls.natConst#8ce940b1", "tls.natConst", "#8ce940b1":
		if tctx.IsTL2 && _tag != "tls.natConst" {
			return ErrorInvalidUnionLegacyTagJSON("tls.NatExpr", _tag)
		}
		if !tctx.LegacyTypeNames && _tag == "tls.natConst#8ce940b1" {
			return ErrorInvalidUnionLegacyTagJSON("tls.NatExpr", "tls.natConst#8ce940b1")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueNatConst.ReadJSONGeneral(tctx, in2Pointer); err != nil {
			return err
		}
	case "tls.natVar#4e8a14f0", "tls.natVar", "#4e8a14f0":
		if tctx.IsTL2 && _tag != "tls.natVar" {
			return ErrorInvalidUnionLegacyTagJSON("tls.NatExpr", _tag)
		}
		if !tctx.LegacyTypeNames && _tag == "tls.natVar#4e8a14f0" {
			return ErrorInvalidUnionLegacyTagJSON("tls.NatExpr", "tls.natVar#4e8a14f0")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueNatVar.ReadJSONGeneral(tctx, in2Pointer); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("tls.NatExpr", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsNatExpr) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) ([]byte, error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *TlsNatExpr) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *TlsNatExpr) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	switch item.index {
	case 0:
		if tctx.IsTL2 {
			w = append(w, `{"type":"tls.natConst"`...)
		} else {
			if tctx.LegacyTypeNames {
				w = append(w, `{"type":"tls.natConst#8ce940b1"`...)
			} else {
				w = append(w, `{"type":"tls.natConst"`...)
			}
		}
		w = append(w, `,"value":`...)
		w = item.valueNatConst.WriteJSONOpt(tctx, w)
		return append(w, '}')
	case 1:
		if tctx.IsTL2 {
			w = append(w, `{"type":"tls.natVar"`...)
		} else {
			if tctx.LegacyTypeNames {
				w = append(w, `{"type":"tls.natVar#4e8a14f0"`...)
			} else {
				w = append(w, `{"type":"tls.natVar"`...)
			}
		}
		w = append(w, `,"value":`...)
		w = item.valueNatVar.WriteJSONOpt(tctx, w)
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item TlsNatExpr) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TlsNatExpr) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TlsNatExpr) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.NatExpr", err.Error())
	}
	return nil
}

func (item TlsNatVar) AsUnion() TlsNatExpr {
	var ret TlsNatExpr
	ret.SetNatVar(item)
	return ret
}

type TlsNatVar struct {
	Dif    int32
	VarNum int32
}

func (TlsNatVar) TLName() string { return "tls.natVar" }
func (TlsNatVar) TLTag() uint32  { return 0x4e8a14f0 }

func (item *TlsNatVar) Reset() {
	item.Dif = 0
	item.VarNum = 0
}

func (item *TlsNatVar) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Dif); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.VarNum)
}

func (item *TlsNatVar) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TlsNatVar) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.Dif)
	w = basictl.IntWrite(w, item.VarNum)
	return w
}

func (item *TlsNatVar) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4e8a14f0); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TlsNatVar) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TlsNatVar) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x4e8a14f0)
	return item.Write(w)
}

func (item TlsNatVar) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TlsNatVar) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *TlsNatVar) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propDifPresented bool
	var propVarNumPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "dif":
				if propDifPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.natVar", "dif")
				}
				if err := Json2ReadInt32(in, &item.Dif); err != nil {
					return err
				}
				propDifPresented = true
			case "var_num":
				if propVarNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.natVar", "var_num")
				}
				if err := Json2ReadInt32(in, &item.VarNum); err != nil {
					return err
				}
				propVarNumPresented = true
			default:
				return ErrorInvalidJSONExcessElement("tls.natVar", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propDifPresented {
		item.Dif = 0
	}
	if !propVarNumPresented {
		item.VarNum = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsNatVar) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *TlsNatVar) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *TlsNatVar) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexDif := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"dif":`...)
	w = basictl.JSONWriteInt32(w, item.Dif)
	if (item.Dif != 0) == false {
		w = w[:backupIndexDif]
	}
	backupIndexVarNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"var_num":`...)
	w = basictl.JSONWriteInt32(w, item.VarNum)
	if (item.VarNum != 0) == false {
		w = w[:backupIndexVarNum]
	}
	return append(w, '}')
}

func (item *TlsNatVar) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TlsNatVar) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.natVar", err.Error())
	}
	return nil
}
