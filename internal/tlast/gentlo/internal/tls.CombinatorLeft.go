// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

var _TlsCombinatorLeft = [2]UnionElement{
	{TLTag: 0xcd211f63, TLName: "tls.combinatorLeftBuiltin", TLString: "tls.combinatorLeftBuiltin#cd211f63"},
	{TLTag: 0x4c12c6d9, TLName: "tls.combinatorLeft", TLString: "tls.combinatorLeft#4c12c6d9"},
}

type TlsCombinatorLeft struct {
	valueCombinatorLeft TlsCombinatorLeft0
	index               int
}

func (item TlsCombinatorLeft) TLName() string { return _TlsCombinatorLeft[item.index].TLName }
func (item TlsCombinatorLeft) TLTag() uint32  { return _TlsCombinatorLeft[item.index].TLTag }

func (item *TlsCombinatorLeft) Reset() { item.index = 0 }

func (item *TlsCombinatorLeft) IsBuiltin() bool { return item.index == 0 }

func (item *TlsCombinatorLeft) AsBuiltin() (TlsCombinatorLeftBuiltin, bool) {
	var value TlsCombinatorLeftBuiltin
	return value, item.index == 0
}
func (item *TlsCombinatorLeft) ResetToBuiltin() { item.index = 0 }
func (item *TlsCombinatorLeft) SetBuiltin()     { item.index = 0 }

func (item *TlsCombinatorLeft) IsCombinatorLeft() bool { return item.index == 1 }

func (item *TlsCombinatorLeft) AsCombinatorLeft() (*TlsCombinatorLeft0, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueCombinatorLeft, true
}
func (item *TlsCombinatorLeft) ResetToCombinatorLeft() *TlsCombinatorLeft0 {
	item.index = 1
	item.valueCombinatorLeft.Reset()
	return &item.valueCombinatorLeft
}
func (item *TlsCombinatorLeft) SetCombinatorLeft(value TlsCombinatorLeft0) {
	item.index = 1
	item.valueCombinatorLeft = value
}

func (item *TlsCombinatorLeft) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0xcd211f63:
		item.index = 0
		return w, nil
	case 0x4c12c6d9:
		item.index = 1
		return item.valueCombinatorLeft.Read(w)
	default:
		return w, ErrorInvalidUnionTag("tls.CombinatorLeft", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsCombinatorLeft) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsCombinatorLeft) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, _TlsCombinatorLeft[item.index].TLTag)
	switch item.index {
	case 0:
		return w, nil
	case 1:
		if w, err = item.valueCombinatorLeft.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *TlsCombinatorLeft) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("tls.CombinatorLeft", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "tls.combinatorLeftBuiltin#cd211f63", "tls.combinatorLeftBuiltin", "#cd211f63":
		if !legacyTypeNames && _tag == "tls.combinatorLeftBuiltin#cd211f63" {
			return ErrorInvalidUnionLegacyTagJSON("tls.CombinatorLeft", "tls.combinatorLeftBuiltin#cd211f63")
		}
		item.index = 0
	case "tls.combinatorLeft#4c12c6d9", "tls.combinatorLeft", "#4c12c6d9":
		if !legacyTypeNames && _tag == "tls.combinatorLeft#4c12c6d9" {
			return ErrorInvalidUnionLegacyTagJSON("tls.CombinatorLeft", "tls.combinatorLeft#4c12c6d9")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueCombinatorLeft.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("tls.CombinatorLeft", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsCombinatorLeft) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsCombinatorLeft) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsCombinatorLeft) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"tls.combinatorLeftBuiltin"`...)
		} else {
			w = append(w, `{"type":"tls.combinatorLeftBuiltin#cd211f63"`...)
		}
		return append(w, '}'), nil
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"tls.combinatorLeft"`...)
		} else {
			w = append(w, `{"type":"tls.combinatorLeft#4c12c6d9"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.valueCombinatorLeft.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	default: // Impossible due to panic above
		return w, nil
	}
}

func (item TlsCombinatorLeft) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsCombinatorLeft) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsCombinatorLeft) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.CombinatorLeft", err.Error())
	}
	return nil
}

func (item TlsCombinatorLeft0) AsUnion() TlsCombinatorLeft {
	var ret TlsCombinatorLeft
	ret.SetCombinatorLeft(item)
	return ret
}

type TlsCombinatorLeft0 struct {
	ArgsNum uint32
	Args    []TlsArg
}

func (TlsCombinatorLeft0) TLName() string { return "tls.combinatorLeft" }
func (TlsCombinatorLeft0) TLTag() uint32  { return 0x4c12c6d9 }

func (item *TlsCombinatorLeft0) Reset() {
	item.ArgsNum = 0
	item.Args = item.Args[:0]
}

func (item *TlsCombinatorLeft0) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.ArgsNum); err != nil {
		return w, err
	}
	return BuiltinTupleTlsArgBoxedRead(w, &item.Args, item.ArgsNum)
}

// This method is general version of Write, use it instead!
func (item *TlsCombinatorLeft0) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsCombinatorLeft0) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.ArgsNum)
	if w, err = BuiltinTupleTlsArgBoxedWrite(w, item.Args, item.ArgsNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TlsCombinatorLeft0) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4c12c6d9); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsCombinatorLeft0) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsCombinatorLeft0) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x4c12c6d9)
	return item.Write(w)
}

func (item TlsCombinatorLeft0) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsCombinatorLeft0) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propArgsNumPresented bool
	var rawArgs []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "args_num":
				if propArgsNumPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinatorLeft", "args_num")
				}
				if err := Json2ReadUint32(in, &item.ArgsNum); err != nil {
					return err
				}
				propArgsNumPresented = true
			case "args":
				if rawArgs != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinatorLeft", "args")
				}
				rawArgs = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("tls.combinatorLeft", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propArgsNumPresented {
		item.ArgsNum = 0
	}
	var inArgsPointer *basictl.JsonLexer
	inArgs := basictl.JsonLexer{Data: rawArgs}
	if rawArgs != nil {
		inArgsPointer = &inArgs
	}
	if err := BuiltinTupleTlsArgBoxedReadJSON(legacyTypeNames, inArgsPointer, &item.Args, item.ArgsNum); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsCombinatorLeft0) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsCombinatorLeft0) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsCombinatorLeft0) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexArgsNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"args_num":`...)
	w = basictl.JSONWriteUint32(w, item.ArgsNum)
	if (item.ArgsNum != 0) == false {
		w = w[:backupIndexArgsNum]
	}
	backupIndexArgs := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"args":`...)
	if w, err = BuiltinTupleTlsArgBoxedWriteJSONOpt(newTypeNames, short, w, item.Args, item.ArgsNum); err != nil {
		return w, err
	}
	if (len(item.Args) != 0) == false {
		w = w[:backupIndexArgs]
	}
	return append(w, '}'), nil
}

func (item *TlsCombinatorLeft0) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsCombinatorLeft0) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.combinatorLeft", err.Error())
	}
	return nil
}

func (item TlsCombinatorLeftBuiltin) AsUnion() TlsCombinatorLeft {
	var ret TlsCombinatorLeft
	ret.SetBuiltin()
	return ret
}

type TlsCombinatorLeftBuiltin struct {
}

func (TlsCombinatorLeftBuiltin) TLName() string { return "tls.combinatorLeftBuiltin" }
func (TlsCombinatorLeftBuiltin) TLTag() uint32  { return 0xcd211f63 }

func (item *TlsCombinatorLeftBuiltin) Reset() {}

func (item *TlsCombinatorLeftBuiltin) Read(w []byte) (_ []byte, err error) { return w, nil }

// This method is general version of Write, use it instead!
func (item *TlsCombinatorLeftBuiltin) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TlsCombinatorLeftBuiltin) Write(w []byte) []byte {
	return w
}

func (item *TlsCombinatorLeftBuiltin) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xcd211f63); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsCombinatorLeftBuiltin) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TlsCombinatorLeftBuiltin) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xcd211f63)
	return item.Write(w)
}

func (item TlsCombinatorLeftBuiltin) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TlsCombinatorLeftBuiltin) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("tls.combinatorLeftBuiltin", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsCombinatorLeftBuiltin) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TlsCombinatorLeftBuiltin) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsCombinatorLeftBuiltin) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *TlsCombinatorLeftBuiltin) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TlsCombinatorLeftBuiltin) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.combinatorLeftBuiltin", err.Error())
	}
	return nil
}
