// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTupleTlsCombinatorRead(w []byte, vec *[]TlsCombinator, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]TlsCombinator, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTlsCombinatorWrite(w []byte, vec []TlsCombinator, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]TlsCombinator", len(vec), nat_n)
	}
	for _, elem := range vec {
		if w, err = elem.WriteBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTlsCombinatorReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]TlsCombinator, nat_n uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]TlsCombinator, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]TlsCombinator", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[]TlsCombinator", "array is longer than expected")
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]TlsCombinator", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[]TlsCombinator", index, nat_n)
	}
	return nil
}

func BuiltinTupleTlsCombinatorWriteJSON(w []byte, vec []TlsCombinator, nat_n uint32) (_ []byte, err error) {
	return BuiltinTupleTlsCombinatorWriteJSONOpt(true, false, w, vec, nat_n)
}
func BuiltinTupleTlsCombinatorWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []TlsCombinator, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]TlsCombinator", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

var _TlsCombinator = [2]UnionElement{
	{TLTag: 0x5c0a1ed5, TLName: "tls.combinator", TLString: "tls.combinator#5c0a1ed5"},
	{TLTag: 0xe91692d5, TLName: "tls.combinator_v4", TLString: "tls.combinator_v4#e91692d5"},
}

type TlsCombinator struct {
	valueCombinator TlsCombinator0
	valueV4         TlsCombinatorV4
	index           int
}

func (item TlsCombinator) TLName() string { return _TlsCombinator[item.index].TLName }
func (item TlsCombinator) TLTag() uint32  { return _TlsCombinator[item.index].TLTag }

func (item *TlsCombinator) Reset() { item.ResetToCombinator() }

func (item *TlsCombinator) IsCombinator() bool { return item.index == 0 }

func (item *TlsCombinator) AsCombinator() (*TlsCombinator0, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueCombinator, true
}
func (item *TlsCombinator) ResetToCombinator() *TlsCombinator0 {
	item.index = 0
	item.valueCombinator.Reset()
	return &item.valueCombinator
}
func (item *TlsCombinator) SetCombinator(value TlsCombinator0) {
	item.index = 0
	item.valueCombinator = value
}

func (item *TlsCombinator) IsV4() bool { return item.index == 1 }

func (item *TlsCombinator) AsV4() (*TlsCombinatorV4, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueV4, true
}
func (item *TlsCombinator) ResetToV4() *TlsCombinatorV4 {
	item.index = 1
	item.valueV4.Reset()
	return &item.valueV4
}
func (item *TlsCombinator) SetV4(value TlsCombinatorV4) {
	item.index = 1
	item.valueV4 = value
}

func (item *TlsCombinator) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x5c0a1ed5:
		item.index = 0
		return item.valueCombinator.Read(w)
	case 0xe91692d5:
		item.index = 1
		return item.valueV4.Read(w)
	default:
		return w, ErrorInvalidUnionTag("tls.Combinator", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsCombinator) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsCombinator) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, _TlsCombinator[item.index].TLTag)
	switch item.index {
	case 0:
		if w, err = item.valueCombinator.Write(w); err != nil {
			return w, err
		}
	case 1:
		if w, err = item.valueV4.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *TlsCombinator) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("tls.Combinator", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "tls.combinator#5c0a1ed5", "tls.combinator", "#5c0a1ed5":
		if !legacyTypeNames && _tag == "tls.combinator#5c0a1ed5" {
			return ErrorInvalidUnionLegacyTagJSON("tls.Combinator", "tls.combinator#5c0a1ed5")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueCombinator.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "tls.combinator_v4#e91692d5", "tls.combinator_v4", "#e91692d5":
		if !legacyTypeNames && _tag == "tls.combinator_v4#e91692d5" {
			return ErrorInvalidUnionLegacyTagJSON("tls.Combinator", "tls.combinator_v4#e91692d5")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueV4.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("tls.Combinator", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsCombinator) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsCombinator) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsCombinator) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"tls.combinator"`...)
		} else {
			w = append(w, `{"type":"tls.combinator#5c0a1ed5"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.valueCombinator.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"tls.combinator_v4"`...)
		} else {
			w = append(w, `{"type":"tls.combinator_v4#e91692d5"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.valueV4.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	default: // Impossible due to panic above
		return w, nil
	}
}

func (item TlsCombinator) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsCombinator) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsCombinator) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.Combinator", err.Error())
	}
	return nil
}

func (item TlsCombinator0) AsUnion() TlsCombinator {
	var ret TlsCombinator
	ret.SetCombinator(item)
	return ret
}

type TlsCombinator0 struct {
	Name     int32
	Id       string
	TypeName int32
	Left     TlsCombinatorLeft
	Right    TlsCombinatorRight
}

func (TlsCombinator0) TLName() string { return "tls.combinator" }
func (TlsCombinator0) TLTag() uint32  { return 0x5c0a1ed5 }

func (item *TlsCombinator0) Reset() {
	item.Name = 0
	item.Id = ""
	item.TypeName = 0
	item.Left.Reset()
	item.Right.Reset()
}

func (item *TlsCombinator0) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Name); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Id); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.TypeName); err != nil {
		return w, err
	}
	if w, err = item.Left.ReadBoxed(w); err != nil {
		return w, err
	}
	return item.Right.ReadBoxed(w)
}

// This method is general version of Write, use it instead!
func (item *TlsCombinator0) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsCombinator0) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Name)
	w = basictl.StringWrite(w, item.Id)
	w = basictl.IntWrite(w, item.TypeName)
	if w, err = item.Left.WriteBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.Right.WriteBoxed(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TlsCombinator0) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5c0a1ed5); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsCombinator0) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsCombinator0) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x5c0a1ed5)
	return item.Write(w)
}

func (item TlsCombinator0) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsCombinator0) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNamePresented bool
	var propIdPresented bool
	var propTypeNamePresented bool
	var propLeftPresented bool
	var propRightPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "name":
				if propNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator", "name")
				}
				if err := Json2ReadInt32(in, &item.Name); err != nil {
					return err
				}
				propNamePresented = true
			case "id":
				if propIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator", "id")
				}
				if err := Json2ReadString(in, &item.Id); err != nil {
					return err
				}
				propIdPresented = true
			case "type_name":
				if propTypeNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator", "type_name")
				}
				if err := Json2ReadInt32(in, &item.TypeName); err != nil {
					return err
				}
				propTypeNamePresented = true
			case "left":
				if propLeftPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator", "left")
				}
				if err := item.Left.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propLeftPresented = true
			case "right":
				if propRightPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator", "right")
				}
				if err := item.Right.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propRightPresented = true
			default:
				return ErrorInvalidJSONExcessElement("tls.combinator", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNamePresented {
		item.Name = 0
	}
	if !propIdPresented {
		item.Id = ""
	}
	if !propTypeNamePresented {
		item.TypeName = 0
	}
	if !propLeftPresented {
		item.Left.Reset()
	}
	if !propRightPresented {
		item.Right.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsCombinator0) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsCombinator0) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsCombinator0) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"name":`...)
	w = basictl.JSONWriteInt32(w, item.Name)
	if (item.Name != 0) == false {
		w = w[:backupIndexName]
	}
	backupIndexId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"id":`...)
	w = basictl.JSONWriteString(w, item.Id)
	if (len(item.Id) != 0) == false {
		w = w[:backupIndexId]
	}
	backupIndexTypeName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"type_name":`...)
	w = basictl.JSONWriteInt32(w, item.TypeName)
	if (item.TypeName != 0) == false {
		w = w[:backupIndexTypeName]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"left":`...)
	if w, err = item.Left.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"right":`...)
	if w, err = item.Right.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *TlsCombinator0) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsCombinator0) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.combinator", err.Error())
	}
	return nil
}

func (item TlsCombinatorV4) AsUnion() TlsCombinator {
	var ret TlsCombinator
	ret.SetV4(item)
	return ret
}

type TlsCombinatorV4 struct {
	Name     int32
	Id       string
	TypeName int32
	Left     TlsCombinatorLeft
	Right    TlsCombinatorRight
	Flags    int32
}

func (TlsCombinatorV4) TLName() string { return "tls.combinator_v4" }
func (TlsCombinatorV4) TLTag() uint32  { return 0xe91692d5 }

func (item *TlsCombinatorV4) Reset() {
	item.Name = 0
	item.Id = ""
	item.TypeName = 0
	item.Left.Reset()
	item.Right.Reset()
	item.Flags = 0
}

func (item *TlsCombinatorV4) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Name); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Id); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.TypeName); err != nil {
		return w, err
	}
	if w, err = item.Left.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.Right.ReadBoxed(w); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Flags)
}

// This method is general version of Write, use it instead!
func (item *TlsCombinatorV4) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsCombinatorV4) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Name)
	w = basictl.StringWrite(w, item.Id)
	w = basictl.IntWrite(w, item.TypeName)
	if w, err = item.Left.WriteBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.Right.WriteBoxed(w); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.Flags)
	return w, nil
}

func (item *TlsCombinatorV4) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe91692d5); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsCombinatorV4) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsCombinatorV4) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xe91692d5)
	return item.Write(w)
}

func (item TlsCombinatorV4) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsCombinatorV4) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNamePresented bool
	var propIdPresented bool
	var propTypeNamePresented bool
	var propLeftPresented bool
	var propRightPresented bool
	var propFlagsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "name":
				if propNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator_v4", "name")
				}
				if err := Json2ReadInt32(in, &item.Name); err != nil {
					return err
				}
				propNamePresented = true
			case "id":
				if propIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator_v4", "id")
				}
				if err := Json2ReadString(in, &item.Id); err != nil {
					return err
				}
				propIdPresented = true
			case "type_name":
				if propTypeNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator_v4", "type_name")
				}
				if err := Json2ReadInt32(in, &item.TypeName); err != nil {
					return err
				}
				propTypeNamePresented = true
			case "left":
				if propLeftPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator_v4", "left")
				}
				if err := item.Left.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propLeftPresented = true
			case "right":
				if propRightPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator_v4", "right")
				}
				if err := item.Right.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propRightPresented = true
			case "flags":
				if propFlagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinator_v4", "flags")
				}
				if err := Json2ReadInt32(in, &item.Flags); err != nil {
					return err
				}
				propFlagsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("tls.combinator_v4", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNamePresented {
		item.Name = 0
	}
	if !propIdPresented {
		item.Id = ""
	}
	if !propTypeNamePresented {
		item.TypeName = 0
	}
	if !propLeftPresented {
		item.Left.Reset()
	}
	if !propRightPresented {
		item.Right.Reset()
	}
	if !propFlagsPresented {
		item.Flags = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsCombinatorV4) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsCombinatorV4) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsCombinatorV4) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"name":`...)
	w = basictl.JSONWriteInt32(w, item.Name)
	if (item.Name != 0) == false {
		w = w[:backupIndexName]
	}
	backupIndexId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"id":`...)
	w = basictl.JSONWriteString(w, item.Id)
	if (len(item.Id) != 0) == false {
		w = w[:backupIndexId]
	}
	backupIndexTypeName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"type_name":`...)
	w = basictl.JSONWriteInt32(w, item.TypeName)
	if (item.TypeName != 0) == false {
		w = w[:backupIndexTypeName]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"left":`...)
	if w, err = item.Left.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"right":`...)
	if w, err = item.Right.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	backupIndexFlags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"flags":`...)
	w = basictl.JSONWriteInt32(w, item.Flags)
	if (item.Flags != 0) == false {
		w = w[:backupIndexFlags]
	}
	return append(w, '}'), nil
}

func (item *TlsCombinatorV4) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsCombinatorV4) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.combinator_v4", err.Error())
	}
	return nil
}
