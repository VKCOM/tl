// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type TlsCombinatorRight struct {
	Value TlsTypeExpr
}

func (TlsCombinatorRight) TLName() string { return "tls.combinatorRight" }
func (TlsCombinatorRight) TLTag() uint32  { return 0x2c064372 }

func (item *TlsCombinatorRight) Reset() {
	item.Value.Reset()
}

func (item *TlsCombinatorRight) Read(w []byte) (_ []byte, err error) {
	return item.Value.ReadBoxed(w)
}

// This method is general version of Write, use it instead!
func (item *TlsCombinatorRight) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TlsCombinatorRight) Write(w []byte) (_ []byte, err error) {
	if w, err = item.Value.WriteBoxed(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TlsCombinatorRight) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x2c064372); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TlsCombinatorRight) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TlsCombinatorRight) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x2c064372)
	return item.Write(w)
}

func (item TlsCombinatorRight) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TlsCombinatorRight) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("tls.combinatorRight", "value")
				}
				if err := item.Value.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("tls.combinatorRight", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propValuePresented {
		item.Value.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TlsCombinatorRight) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TlsCombinatorRight) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TlsCombinatorRight) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	if w, err = item.Value.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *TlsCombinatorRight) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TlsCombinatorRight) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tls.combinatorRight", err.Error())
	}
	return nil
}
