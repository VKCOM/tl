TL2File := TL2Combinator* EOF;
TL2Combinator := TL2Annotation* (TL2TypeDeclaration | TL2FuncDeclaration) scl;

TL2FuncDeclaration := TL2TypeName CRC32 TL2Field* funEq TL2TypeDefinition?;
TL2TypeDeclaration := TL2TypeName (lts TL2TypeTemplate (cm TL2TypeTemplate)* gts)? CRC32? eq TL2TypeDefinition?;

TL2TypeDefinition := TL2TypeRef | TL2Field* | TL2UnionType;

TL2UnionType := vb? TL2UnionConstructor (vb TL2UnionConstructor)+;
TL2UnionConstructor := ucName (TL2TypeRef | TL2Field*);

TL2Field := ((lcName qm?) | usc) cl TL2TypeRef;

TL2TypeRef := TL2TypeApplication | TL2BracketType;

TL2TypeApplication := TL2TypeName (lts TL2TypeArgument (cm TL2TypeArgument)* gts)?;
TL2BracketType := lsb TL2TypeArgument? rsb TL2TypeRef;

TL2TypeArgument := TL2TypeRef | number;
TL2TypeTemplate := lcName cl lcName;

TL2TypeName := (lcName dot)? lcName;
TL2Annotation := at lcName;

// tokens
CRC32 := #[a-f0-9]{8};
number := [0-9]+;
ucName := [A-Z][a-zA-Z0-9_]*;
lcName := [a-z][a-zA-Z0-9_]*;
funEq := =>;
dot := \.;
cm := ,;
eq := =;
cl := :;
scl := \;;
qm := \?;
vb := \|;
lsb := \[;
rsb := \];
lts := <;
gts := >;
at := @;
usc := _;