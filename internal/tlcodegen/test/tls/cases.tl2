bool = BoolFalse | BoolTrue;
dictionary<t:type> = vector<dictionaryField<t>>;
dictionaryAny<k:type,v:type> = []dictionaryFieldAny<k,v>;
dictionaryField<t:type> = key:string value:t;
dictionaryFieldAny<k:type,v:type> = key:k value:v;
int = int;
int32 = int;
int64 = long;
long = long;
maybe<t:type> = ResultFalse | t;
pair<x:type,y:type> = x:x y:y;
string = string;
true = ;
tuple_N<t:type,n:uint32> = [n]t;
tuple<t:type> = []t;
vector<t:type> = []t;
benchmarks.vruHash = low:long high:long;
benchmarks.vruPosition = fields_mask:uint32 commit_bit?:true meta_block?:true split_payload?:true rotation_block?:true canonical_hash?:true payload_offset:long block_time_nano:long hash:benchmarks.vruHash file_offset:long seq_number?:long;
benchmarks.vrutoyPositions = next_positions:[]benchmarks.vruPosition;
benchmarks.vrutoyTopLevelContainer = value:benchmarks.vrutoyTopLevelUnion;
benchmarks.vrutoyTopLevelContainerWithDependency = n:uint32 value:benchmarks.vrutoyPositions;
benchmarks.vrutoyTopLevelUnion = VrutoytopLevelUnionBig next_positions:vector<benchmarks.vruPosition> | VrutoytopLevelUnionEmpty;
cases.inplace1<x:type> = value:cases.inplace2<x>;
cases.inplace2<x:type> = value:cases.inplace3<tuple_N<x,2>>;
cases.inplace3<x:type> = value:pair<tuple<x>,tuple<x>>;
cases.myCycle1 = fields_mask:uint32 a?:cases.myCycle2;
cases.myCycle2 = fields_mask:uint32 a?:cases.myCycle3;
cases.myCycle3 = fields_mask:uint32 a?:cases.myCycle1;
cases.replace7 = n:uint32 m:uint32 a:[][]int;
cases.replace7plus = n:uint32 m:uint32 a?:[][]int;
cases.replace7plusplus = n:uint32 m:uint32 a?:[][]int;
cases.testAllPossibleFieldConfigs = local:uint32 f00:int f01:true f02:[]int f03:[]int f10?:int f11?:true f12?:[]int f13?:[]int f20?:int f21?:true f22?:[]int f23?:[]int;
cases.testAllPossibleFieldConfigsContainer = outer:uint32 value:cases.testAllPossibleFieldConfigs;
cases.testArray = n:uint32 arr:[]int;
cases.testBeforeReadBitValidation = n:uint32 a?:[]int b?:[]int;
cases.testDictAny = dict:dictionaryAny<double,int>;
cases.testDictInt = dict:dictionaryAny<int,int>;
cases.testDictString = dict:dictionary<int>;
cases.testEnum = TestEnum1 | TestEnum2 | TestEnum3;
cases.testEnumContainer = value:cases.testEnum;
cases.testInplaceStructArgs = a1:uint32 a2:uint32 a3:uint32 arg:cases.inplace1<int>;
cases.testInplaceStructArgs2 = a1:uint32 a2:uint32 a3:uint32 arg:cases.inplace1<pair<tuple<int>,tuple<int>>>;
cases.testLocalFieldmask = f1:uint32 f2?:uint32 f3?:true f4?:true;
cases.testMaybe = value:maybe<int>;
cases.testOutFieldMask = f1?:uint32 f2?:true f3:[]int;
cases.testOutFieldMaskContainer = f:uint32 inner:cases.testOutFieldMask;
cases.testRecursiveFieldmask = f0:uint32 f1?:uint32 f2?:uint32 t1?:true t2?:true t3?:true;
cases.testTuple = tpl:tuple_N<int,4>;
cases.testUnion = TestUnion1 value:int | TestUnion2 value:string;
cases.testUnionContainer = value:cases.testUnion;
cases.testVector = arr:vector<int>;
casesTL2.testArrayFixedBool = a1:[1]bool a2:[0]bool a3:[7]bool a4:[8]bool a5:[11]bool a6:[16]bool;
casesTL2.testArrayFlexibleBool = n:uint32 arr:[]bool;
casesTL2.testFixedParam = x:casesTL2.testObjectWithParam_N<4>;
casesTL2.testObject = n:uint32 f1?:true f2:bool f3:vector<bool> f4:benchmarks.vrutoyPositions f5:maybe<bool> f6:vector<benchmarks.vrutoyTopLevelUnion> f7?:vector<true>;
casesTL2.testObjectWithMuiltiParams_N_M<n:uint32,m:uint32> = f1?:[n]int f2?:[m]int y:[n][m]int;
casesTL2.testObjectWithMuiltiParams_M<m:uint32> = f1?:[]int f2?:[m]int y:[][m]int;
casesTL2.testObjectWithMuiltiParams_N<n:uint32> = f1?:[n]int f2?:[]int y:[n][]int;
casesTL2.testObjectWithMuiltiParams = f1?:[]int f2?:[]int y:[][]int;
casesTL2.testObjectWithParam_N<n:uint32> = x?:int y:[n]int;
casesTL2.testParamsGeneration = n1:uint32 n2:uint32 x1:casesTL2.testObjectWithMuiltiParams_N_M<4,1> x2:casesTL2.testObjectWithMuiltiParams_M<2> x3:casesTL2.testObjectWithMuiltiParams_N<3> x4:casesTL2.testObjectWithMuiltiParams;
casesTL2.testVectorBool = x:vector<bool>;
cases_bytes.testArray = n:uint32 arr:[]string;
cases_bytes.testDictAny = dict:dictionaryAny<double,int>;
cases_bytes.testDictInt = dict:dictionaryAny<int,int>;
cases_bytes.testDictString = dict:dictionary<int>;
cases_bytes.testDictStringString = dict:dictionary<string>;
cases_bytes.testEnum = TestEnum1 | TestEnum2 | TestEnum3;
cases_bytes.testEnumContainer = value:cases.testEnum;
cases_bytes.testTuple = tpl:tuple_N<string,4>;
cases_bytes.testVector = arr:vector<string>;
@read casesTL2.testFunctionNoDep1#1b8b9feb x:int => int;
@read casesTL2.testFunctionNoDep2#0a2c0bf9 x:int => true;
@read casesTL2.testFunctionNoDep3#f020849b x:int => vector<int>;
@read casesTL2.testFunctionNoDep4#5a933a50 x:int => bool;
@read casesTL2.testFunctionNoDep5#2b47b925 x:int => casesTL2.testObject;
@read casesTL2.testFunctionWithDep1#b6c63b07 n:uint32 => tuple<int>;
@read casesTL2.testFunctionWithDep2#9d44a2fd n:uint32 => benchmarks.vrutoyPositions;
