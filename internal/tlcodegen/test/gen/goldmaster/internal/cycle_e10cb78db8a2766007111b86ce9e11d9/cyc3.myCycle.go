// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package cycle_e10cb78db8a2766007111b86ce9e11d9

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Cyc3MyCycle struct {
	FieldsMask uint32
	A          []Cyc1MyCycle
}

func (Cyc3MyCycle) TLName() string { return "cyc3.myCycle" }
func (Cyc3MyCycle) TLTag() uint32  { return 0x47866860 }

func (item *Cyc3MyCycle) Reset() {
	item.FieldsMask = 0
	item.A = item.A[:0]
}

func (item *Cyc3MyCycle) FillRandom(rg *basictl.RandGenerator) {
	item.FieldsMask = basictl.RandomUint(rg)
	BuiltinVectorCyc1MyCycleFillRandom(rg, &item.A)
}

func (item *Cyc3MyCycle) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	return BuiltinVectorCyc1MyCycleRead(w, &item.A)
}

// This method is general version of Write, use it instead!
func (item *Cyc3MyCycle) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Cyc3MyCycle) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = BuiltinVectorCyc1MyCycleWrite(w, item.A)
	return w
}

func (item *Cyc3MyCycle) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x47866860); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Cyc3MyCycle) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Cyc3MyCycle) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x47866860)
	return item.Write(w)
}

func (item *Cyc3MyCycle) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Cyc3MyCycle) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propAPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cyc3.myCycle", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "a":
				if propAPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cyc3.myCycle", "a")
				}
				if err := BuiltinVectorCyc1MyCycleReadJSON(legacyTypeNames, in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("cyc3.myCycle", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propAPresented {
		item.A = item.A[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Cyc3MyCycle) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Cyc3MyCycle) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Cyc3MyCycle) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = BuiltinVectorCyc1MyCycleWriteJSONOpt(newTypeNames, short, w, item.A)
	if (len(item.A) != 0) == false {
		w = w[:backupIndexA]
	}
	return append(w, '}')
}

func (item *Cyc3MyCycle) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Cyc3MyCycle) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cyc3.myCycle", err.Error())
	}
	return nil
}

type Cyc3MyCycleMaybe struct {
	Value Cyc3MyCycle // not deterministic if !Ok
	Ok    bool
}

func (item *Cyc3MyCycleMaybe) Reset() {
	item.Ok = false
}
func (item *Cyc3MyCycleMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		item.Value.FillRandom(rg)
	} else {
		item.Ok = false
	}
}

func (item *Cyc3MyCycleMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		return item.Value.Read(w)
	}
	return w, nil
}

// This method is general version of WriteBoxed, use it instead!
func (item *Cyc3MyCycleMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Cyc3MyCycleMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		return item.Value.Write(w)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *Cyc3MyCycleMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := internal.Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := item.Value.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Cyc3MyCycleMaybe) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Cyc3MyCycleMaybe) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Cyc3MyCycleMaybe) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	w = append(w, `,"value":`...)
	w = item.Value.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *Cyc3MyCycleMaybe) String() string {
	return string(item.WriteJSON(nil))
}
