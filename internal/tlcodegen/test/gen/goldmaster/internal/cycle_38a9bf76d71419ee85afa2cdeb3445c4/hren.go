// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package cycle_38a9bf76d71419ee85afa2cdeb3445c4

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Hren struct {
	Next *HrenMaybe
}

func (Hren) TLName() string { return "hren" }
func (Hren) TLTag() uint32  { return 0x12ab5219 }

func (item *Hren) Reset() {
	if item.Next != nil {
		item.Next.Reset()
	}
}

func (item *Hren) FillRandom(rg *basictl.RandGenerator) {
	rg.IncreaseDepth()
	if item.Next == nil {
		var value HrenMaybe
		item.Next = &value
	}
	item.Next.FillRandom(rg)
	rg.DecreaseDepth()
}

func (item *Hren) Read(w []byte) (_ []byte, err error) {
	if item.Next == nil {
		var value HrenMaybe
		item.Next = &value
	}
	return item.Next.ReadBoxed(w)
}

// This method is general version of Write, use it instead!
func (item *Hren) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Hren) Write(w []byte) []byte {
	w = item.Next.WriteBoxed(w)
	return w
}

func (item *Hren) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x12ab5219); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Hren) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Hren) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x12ab5219)
	return item.Write(w)
}

func (item *Hren) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Hren) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNextPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "next":
				if propNextPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("hren", "next")
				}
				if item.Next == nil {
					var value HrenMaybe
					item.Next = &value
				}
				if err := item.Next.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propNextPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("hren", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNextPresented {
		if item.Next != nil {
			item.Next.Reset()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Hren) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Hren) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Hren) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexNext := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"next":`...)
	w = item.Next.WriteJSONOpt(newTypeNames, short, w)
	if (item.Next.Ok) == false {
		w = w[:backupIndexNext]
	}
	return append(w, '}')
}

func (item *Hren) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Hren) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("hren", err.Error())
	}
	return nil
}

type HrenMaybe struct {
	Value Hren // not deterministic if !Ok
	Ok    bool
}

func (item *HrenMaybe) Reset() {
	item.Ok = false
}
func (item *HrenMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		item.Value.FillRandom(rg)
	} else {
		item.Ok = false
	}
}

func (item *HrenMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		return item.Value.Read(w)
	}
	return w, nil
}

// This method is general version of WriteBoxed, use it instead!
func (item *HrenMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *HrenMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		return item.Value.Write(w)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *HrenMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := internal.Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := item.Value.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *HrenMaybe) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *HrenMaybe) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *HrenMaybe) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	w = append(w, `,"value":`...)
	w = item.Value.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *HrenMaybe) String() string {
	return string(item.WriteJSON(nil))
}
