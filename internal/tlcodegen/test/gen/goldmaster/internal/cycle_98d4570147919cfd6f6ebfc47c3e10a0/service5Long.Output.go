// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package cycle_98d4570147919cfd6f6ebfc47c3e10a0

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func (item Service5LongEmptyOutput) AsUnion() Service5LongOutput {
	var ret Service5LongOutput
	ret.SetEmpty()
	return ret
}

type Service5LongEmptyOutput struct {
}

func (Service5LongEmptyOutput) TLName() string { return "service5Long.emptyOutput" }
func (Service5LongEmptyOutput) TLTag() uint32  { return 0xff8f7db9 }

func (item *Service5LongEmptyOutput) Reset() {}

func (item *Service5LongEmptyOutput) FillRandom(rg *basictl.RandGenerator) {}

func (item *Service5LongEmptyOutput) Read(w []byte) (_ []byte, err error) { return w, nil }

func (item *Service5LongEmptyOutput) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Service5LongEmptyOutput) Write(w []byte) []byte {
	return w
}

func (item *Service5LongEmptyOutput) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xff8f7db9); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Service5LongEmptyOutput) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service5LongEmptyOutput) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xff8f7db9)
	return item.Write(w)
}

func (item Service5LongEmptyOutput) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service5LongEmptyOutput) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return internal.ErrorInvalidJSON("service5Long.emptyOutput", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service5LongEmptyOutput) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Service5LongEmptyOutput) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service5LongEmptyOutput) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *Service5LongEmptyOutput) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service5LongEmptyOutput) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service5Long.emptyOutput", err.Error())
	}
	return nil
}

func (item *Service5LongEmptyOutput) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *Service5LongEmptyOutput) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	w = append(w, 0)
	serializedSize += 1
	return w, sizes
}

func (item *Service5LongEmptyOutput) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *Service5LongEmptyOutput) InternalReadTL2(r []byte, block byte) (_ []byte, err error) {

	return r, nil
}

func (item *Service5LongEmptyOutput) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	var index int
	if currentSize == 0 {
		index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			index = 0
		}
	}
	if index != 0 {
		return r, basictl.TL2Error("unexpected constructor number %d, instead of %d", index, 0)
	}
	currentR, err = item.InternalReadTL2(currentR, block)
	return r, err
}

var _Service5LongOutput = [2]internal.UnionElement{
	{TLTag: 0xff8f7db9, TLName: "service5Long.emptyOutput", TLString: "service5Long.emptyOutput#ff8f7db9"},
	{TLTag: 0xdc170ff5, TLName: "service5Long.stringOutput", TLString: "service5Long.stringOutput#dc170ff5"},
}

type Service5LongOutput struct {
	valueString Service5LongStringOutput
	index       int
}

func (item Service5LongOutput) TLName() string { return _Service5LongOutput[item.index].TLName }
func (item Service5LongOutput) TLTag() uint32  { return _Service5LongOutput[item.index].TLTag }

func (item *Service5LongOutput) Reset() { item.index = 0 }
func (item *Service5LongOutput) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 2
	switch index {
	case 0:
		item.index = 0
	case 1:
		item.index = 1
		item.valueString.FillRandom(rg)
	default:
	}
}

func (item *Service5LongOutput) IsEmpty() bool { return item.index == 0 }

func (item *Service5LongOutput) AsEmpty() (Service5LongEmptyOutput, bool) {
	var value Service5LongEmptyOutput
	return value, item.index == 0
}
func (item *Service5LongOutput) ResetToEmpty() { item.index = 0 }
func (item *Service5LongOutput) SetEmpty()     { item.index = 0 }

func (item *Service5LongOutput) IsString() bool { return item.index == 1 }

func (item *Service5LongOutput) AsString() (*Service5LongStringOutput, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueString, true
}
func (item *Service5LongOutput) ResetToString() *Service5LongStringOutput {
	item.index = 1
	item.valueString.Reset()
	return &item.valueString
}
func (item *Service5LongOutput) SetString(value Service5LongStringOutput) {
	item.index = 1
	item.valueString = value
}

func (item *Service5LongOutput) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0xff8f7db9:
		item.index = 0
		return w, nil
	case 0xdc170ff5:
		item.index = 1
		return item.valueString.Read(w)
	default:
		return w, internal.ErrorInvalidUnionTag("service5Long.Output", tag)
	}
}

func (item *Service5LongOutput) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service5LongOutput) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _Service5LongOutput[item.index].TLTag)
	switch item.index {
	case 0:
		return w
	case 1:
		w = item.valueString.Write(w)
	}
	return w
}

func (item *Service5LongOutput) CalculateLayout(sizes []int) []int {
	switch item.index {
	case 0:
		sizes = append(sizes, 0)
	case 1:
		sizes = item.valueString.CalculateLayout(sizes)
	}
	return sizes
}

func (item *Service5LongOutput) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	switch item.index {
	case 0:
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, 0)
	case 1:
		w, sizes = item.valueString.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}
func (item *Service5LongOutput) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *Service5LongOutput) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	if currentSize == 0 {
		item.index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, item.index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	switch item.index {
	case 0:
		break
	case 1:
		if currentR, err = item.valueString.InternalReadTL2(currentR, block); err != nil {
			return currentR, err
		}
	}
	return r, nil
}

func (item *Service5LongOutput) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) ([]byte, error) {
	return item.InternalReadTL2(r)
}

func (item *Service5LongOutput) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := internal.Json2ReadUnion("service5Long.Output", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "service5Long.emptyOutput#ff8f7db9", "service5Long.emptyOutput", "#ff8f7db9",
		"service5.emptyOutput#ff8f7db8", "service5.emptyOutput", "#ff8f7db8":
		if !legacyTypeNames && _tag == "service5.emptyOutput#ff8f7db8" {
			return internal.ErrorInvalidUnionLegacyTagJSON("service5Long.Output", "service5.emptyOutput#ff8f7db8")
		}
		if !legacyTypeNames && _tag == "service5Long.emptyOutput#ff8f7db9" {
			return internal.ErrorInvalidUnionLegacyTagJSON("service5Long.Output", "service5Long.emptyOutput#ff8f7db9")
		}
		item.index = 0
	case "service5Long.stringOutput#dc170ff5", "service5Long.stringOutput", "#dc170ff5",
		"service5.stringOutput#dc170ff4", "service5.stringOutput", "#dc170ff4":
		if !legacyTypeNames && _tag == "service5.stringOutput#dc170ff4" {
			return internal.ErrorInvalidUnionLegacyTagJSON("service5Long.Output", "service5.stringOutput#dc170ff4")
		}
		if !legacyTypeNames && _tag == "service5Long.stringOutput#dc170ff5" {
			return internal.ErrorInvalidUnionLegacyTagJSON("service5Long.Output", "service5Long.stringOutput#dc170ff5")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueString.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return internal.ErrorInvalidUnionTagJSON("service5Long.Output", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service5LongOutput) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Service5LongOutput) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service5LongOutput) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	switch item.index {
	case 0:
		if short {
			if newTypeNames {
				w = append(w, `{"type":"service5.emptyOutput"`...)
			} else {
				w = append(w, `{"type":"service5.emptyOutput#ff8f7db8"`...)
			}
		} else {
			if newTypeNames {
				w = append(w, `{"type":"service5Long.emptyOutput"`...)
			} else {
				w = append(w, `{"type":"service5Long.emptyOutput#ff8f7db9"`...)
			}
		}
		return append(w, '}')
	case 1:
		if short {
			if newTypeNames {
				w = append(w, `{"type":"service5.stringOutput"`...)
			} else {
				w = append(w, `{"type":"service5.stringOutput#dc170ff4"`...)
			}
		} else {
			if newTypeNames {
				w = append(w, `{"type":"service5Long.stringOutput"`...)
			} else {
				w = append(w, `{"type":"service5Long.stringOutput#dc170ff5"`...)
			}
		}
		w = append(w, `,"value":`...)
		w = item.valueString.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item Service5LongOutput) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service5LongOutput) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service5LongOutput) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service5Long.Output", err.Error())
	}
	return nil
}

func (item Service5LongStringOutput) AsUnion() Service5LongOutput {
	var ret Service5LongOutput
	ret.SetString(item)
	return ret
}

type Service5LongStringOutput struct {
	HttpCode int64
	Response string
}

func (Service5LongStringOutput) TLName() string { return "service5Long.stringOutput" }
func (Service5LongStringOutput) TLTag() uint32  { return 0xdc170ff5 }

func (item *Service5LongStringOutput) Reset() {
	item.HttpCode = 0
	item.Response = ""
}

func (item *Service5LongStringOutput) FillRandom(rg *basictl.RandGenerator) {
	item.HttpCode = basictl.RandomLong(rg)
	item.Response = basictl.RandomString(rg)
}

func (item *Service5LongStringOutput) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.HttpCode); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.Response)
}

func (item *Service5LongStringOutput) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Service5LongStringOutput) Write(w []byte) []byte {
	w = basictl.LongWrite(w, item.HttpCode)
	w = basictl.StringWrite(w, item.Response)
	return w
}

func (item *Service5LongStringOutput) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xdc170ff5); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Service5LongStringOutput) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service5LongStringOutput) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xdc170ff5)
	return item.Write(w)
}

func (item Service5LongStringOutput) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service5LongStringOutput) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propHttpCodePresented bool
	var propResponsePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "http_code":
				if propHttpCodePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service5Long.stringOutput", "http_code")
				}
				if err := internal.Json2ReadInt64(in, &item.HttpCode); err != nil {
					return err
				}
				propHttpCodePresented = true
			case "response":
				if propResponsePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service5Long.stringOutput", "response")
				}
				if err := internal.Json2ReadString(in, &item.Response); err != nil {
					return err
				}
				propResponsePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("service5Long.stringOutput", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propHttpCodePresented {
		item.HttpCode = 0
	}
	if !propResponsePresented {
		item.Response = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service5LongStringOutput) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Service5LongStringOutput) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service5LongStringOutput) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexHttpCode := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"http_code":`...)
	w = basictl.JSONWriteInt64(w, item.HttpCode)
	if (item.HttpCode != 0) == false {
		w = w[:backupIndexHttpCode]
	}
	backupIndexResponse := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"response":`...)
	w = basictl.JSONWriteString(w, item.Response)
	if (len(item.Response) != 0) == false {
		w = w[:backupIndexResponse]
	}
	return append(w, '}')
}

func (item *Service5LongStringOutput) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service5LongStringOutput) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service5Long.stringOutput", err.Error())
	}
	return nil
}

func (item *Service5LongStringOutput) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// add constructor No for union type in case of non first option
	lastUsedByte = 1
	currentSize += basictl.TL2CalculateSize(1)

	// calculate layout for item.HttpCode
	if item.HttpCode != 0 {

		lastUsedByte = 1
		currentSize += 8
	}

	// calculate layout for item.Response
	if len(item.Response) != 0 {

		if len(item.Response) != 0 {
			lastUsedByte = 1
			currentSize += len(item.Response)
			currentSize += basictl.TL2CalculateSize(len(item.Response))
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *Service5LongStringOutput) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// add constructor No for union type in case of non first option
	currentBlock |= (1 << 0)

	w = basictl.TL2WriteSize(w, 1)
	serializedSize += basictl.TL2CalculateSize(1)
	// write item.HttpCode
	if item.HttpCode != 0 {
		serializedSize += 8
		if 8 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.LongWrite(w, item.HttpCode)
		}
	}
	// write item.Response
	if len(item.Response) != 0 {
		serializedSize += len(item.Response)
		if len(item.Response) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.Response))
			currentBlock |= (1 << 2)
			w = basictl.StringWriteTL2(w, item.Response)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *Service5LongStringOutput) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *Service5LongStringOutput) InternalReadTL2(r []byte, block byte) (_ []byte, err error) {
	currentR := r

	// read item.HttpCode
	if block&(1<<1) != 0 {
		if currentR, err = basictl.LongRead(currentR, &item.HttpCode); err != nil {
			return currentR, err
		}
	} else {
		item.HttpCode = 0
	}

	// read item.Response
	if block&(1<<2) != 0 {
		if currentR, err = basictl.StringReadTL2(currentR, &item.Response); err != nil {
			return currentR, err
		}
	} else {
		item.Response = ""
	}

	return r, nil
}

func (item *Service5LongStringOutput) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	var index int
	if currentSize == 0 {
		index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			index = 0
		}
	}
	if index != 1 {
		return r, basictl.TL2Error("unexpected constructor number %d, instead of %d", index, 1)
	}
	currentR, err = item.InternalReadTL2(currentR, block)
	return r, err
}
