// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlUsefulServiceUserEntityPaymentItemPromo

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type UsefulServiceUserEntityPaymentItemPromo struct {
	Content string
}

func (UsefulServiceUserEntityPaymentItemPromo) TLName() string {
	return "usefulService.userEntityPaymentItemPromo"
}
func (UsefulServiceUserEntityPaymentItemPromo) TLTag() uint32 { return 0x24c7ec9f }

func (item *UsefulServiceUserEntityPaymentItemPromo) Reset() {
	item.Content = ""
}

func (item *UsefulServiceUserEntityPaymentItemPromo) FillRandom(rg *basictl.RandGenerator, nat_fields_mask uint32) {
	item.Content = basictl.RandomString(rg)
}

func (item *UsefulServiceUserEntityPaymentItemPromo) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return basictl.StringRead(w, &item.Content)
}

// This method is general version of Write, use it instead!
func (item *UsefulServiceUserEntityPaymentItemPromo) WriteGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_fields_mask), nil
}

func (item *UsefulServiceUserEntityPaymentItemPromo) Write(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.StringWrite(w, item.Content)
	return w
}

func (item *UsefulServiceUserEntityPaymentItemPromo) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x24c7ec9f); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *UsefulServiceUserEntityPaymentItemPromo) WriteBoxedGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_fields_mask), nil
}

func (item *UsefulServiceUserEntityPaymentItemPromo) WriteBoxed(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x24c7ec9f)
	return item.Write(w, nat_fields_mask)
}

func (item *UsefulServiceUserEntityPaymentItemPromo) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_fields_mask uint32) error {
	var propContentPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "content":
				if propContentPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("usefulService.userEntityPaymentItemPromo", "content")
				}
				if err := internal.Json2ReadString(in, &item.Content); err != nil {
					return err
				}
				propContentPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("usefulService.userEntityPaymentItemPromo", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propContentPresented {
		item.Content = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UsefulServiceUserEntityPaymentItemPromo) WriteJSONGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask), nil
}

func (item *UsefulServiceUserEntityPaymentItemPromo) WriteJSON(w []byte, nat_fields_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask)
}
func (item *UsefulServiceUserEntityPaymentItemPromo) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_fields_mask uint32) []byte {
	w = append(w, '{')
	backupIndexContent := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"content":`...)
	w = basictl.JSONWriteString(w, item.Content)
	if (len(item.Content) != 0) == false {
		w = w[:backupIndexContent]
	}
	return append(w, '}')
}
