// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlAInner

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type AInner struct {
	A []int32
}

func (AInner) TLName() string { return "a.inner" }
func (AInner) TLTag() uint32  { return 0xec5089b9 }

func (item *AInner) Reset() {
	item.A = item.A[:0]
}

func (item *AInner) FillRandom(rg *basictl.RandGenerator, nat_I uint32) {
	tlBuiltinTupleInt.BuiltinTupleIntFillRandom(rg, &item.A, nat_I)
}

func (item *AInner) Read(w []byte, nat_I uint32) (_ []byte, err error) {
	return tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.A, nat_I)
}

// This method is general version of Write, use it instead!
func (item *AInner) WriteGeneral(w []byte, nat_I uint32) (_ []byte, err error) {
	return item.Write(w, nat_I)
}

func (item *AInner) Write(w []byte, nat_I uint32) (_ []byte, err error) {
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.A, nat_I); err != nil {
		return w, err
	}
	return w, nil
}

func (item *AInner) ReadBoxed(w []byte, nat_I uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xec5089b9); err != nil {
		return w, err
	}
	return item.Read(w, nat_I)
}

// This method is general version of WriteBoxed, use it instead!
func (item *AInner) WriteBoxedGeneral(w []byte, nat_I uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_I)
}

func (item *AInner) WriteBoxed(w []byte, nat_I uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xec5089b9)
	return item.Write(w, nat_I)
}

func (item *AInner) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_I uint32) error {
	var rawA []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if rawA != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("a.inner", "a")
				}
				rawA = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("a.inner", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inAPointer *basictl.JsonLexer
	inA := basictl.JsonLexer{Data: rawA}
	if rawA != nil {
		inAPointer = &inA
	}
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, inAPointer, &item.A, nat_I); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AInner) WriteJSONGeneral(w []byte, nat_I uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_I)
}

func (item *AInner) WriteJSON(w []byte, nat_I uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_I)
}
func (item *AInner) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_I uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.A, nat_I); err != nil {
		return w, err
	}
	if (len(item.A) != 0) == false {
		w = w[:backupIndexA]
	}
	return append(w, '}'), nil
}
