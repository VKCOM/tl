// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlAColor

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

var _AColor = [5]internal.UnionElement{
	{TLTag: 0xf35d7a69, TLName: "a.color", TLString: "a.color#f35d7a69"},
	{TLTag: 0xb83a723d, TLName: "a.red", TLString: "a.red#b83a723d"},
	{TLTag: 0x6127e7b8, TLName: "a.green", TLString: "a.green#6127e7b8"},
	{TLTag: 0xa9471844, TLName: "b.red", TLString: "b.red#a9471844"},
	{TLTag: 0x623360f3, TLName: "a.blue", TLString: "a.blue#623360f3"},
}

func AColor__MakeEnum(i int) AColor { return AColor{index: i} }

type AColor struct {
	index int
}

func (item AColor) TLName() string { return _AColor[item.index].TLName }
func (item AColor) TLTag() uint32  { return _AColor[item.index].TLTag }

func (item *AColor) Reset() { item.index = 0 }
func (item *AColor) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 5
	switch index {
	case 0:
		item.index = 0
	case 1:
		item.index = 1
	case 2:
		item.index = 2
	case 3:
		item.index = 3
	case 4:
		item.index = 4
	default:
	}
}

func (item AColor) IsColor() bool { return item.index == 0 }
func (item *AColor) SetColor()    { item.index = 0 }

func (item AColor) IsRed() bool { return item.index == 1 }
func (item *AColor) SetRed()    { item.index = 1 }

func (item AColor) IsGreen() bool { return item.index == 2 }
func (item *AColor) SetGreen()    { item.index = 2 }

func (item AColor) IsBRed() bool { return item.index == 3 }
func (item *AColor) SetBRed()    { item.index = 3 }

func (item AColor) IsBlue() bool { return item.index == 4 }
func (item *AColor) SetBlue()    { item.index = 4 }

func (item *AColor) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0xf35d7a69:
		item.index = 0
		return w, nil
	case 0xb83a723d:
		item.index = 1
		return w, nil
	case 0x6127e7b8:
		item.index = 2
		return w, nil
	case 0xa9471844:
		item.index = 3
		return w, nil
	case 0x623360f3:
		item.index = 4
		return w, nil
	default:
		return w, internal.ErrorInvalidUnionTag("a.Color", tag)
	}
}

func (item *AColor) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AColor) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _AColor[item.index].TLTag)
	return w
}

func (item *AColor) CalculateLayout(sizes []int) []int {
	switch item.index {
	case 0:
		sizes = append(sizes, 0)
	default:
		sizes = append(sizes, 1+basictl.TL2CalculateSize(item.index))
	}
	return sizes
}

func (item *AColor) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	switch item.index {
	case 0:
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, 0)
	default:
		currentSize := sizes[0]
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, currentSize)
		w = append(w, 1)
		w = basictl.TL2WriteSize(w, item.index)
	}
	return w, sizes
}

func (item *AColor) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	if currentSize == 0 {
		item.index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if _, item.index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	return r, nil
}
func (item *AColor) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *AColor) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) ([]byte, error) {
	return item.InternalReadTL2(r)
}

func (item *AColor) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_jtype := in.UnsafeString()
	if !in.Ok() {
		return internal.ErrorInvalidJSON("a.Color", "expected string")
	}
	switch _jtype {
	case "a.color#f35d7a69", "a.color", "#f35d7a69":
		if !legacyTypeNames && _jtype == "a.color#f35d7a69" {
			return internal.ErrorInvalidUnionLegacyTagJSON("a.Color", "a.color#f35d7a69")
		}
		item.index = 0
		return nil
	case "a.red#b83a723d", "a.red", "#b83a723d":
		if !legacyTypeNames && _jtype == "a.red#b83a723d" {
			return internal.ErrorInvalidUnionLegacyTagJSON("a.Color", "a.red#b83a723d")
		}
		item.index = 1
		return nil
	case "a.green#6127e7b8", "a.green", "#6127e7b8":
		if !legacyTypeNames && _jtype == "a.green#6127e7b8" {
			return internal.ErrorInvalidUnionLegacyTagJSON("a.Color", "a.green#6127e7b8")
		}
		item.index = 2
		return nil
	case "b.red#a9471844", "b.red", "#a9471844":
		if !legacyTypeNames && _jtype == "b.red#a9471844" {
			return internal.ErrorInvalidUnionLegacyTagJSON("a.Color", "b.red#a9471844")
		}
		item.index = 3
		return nil
	case "a.blue#623360f3", "a.blue", "#623360f3":
		if !legacyTypeNames && _jtype == "a.blue#623360f3" {
			return internal.ErrorInvalidUnionLegacyTagJSON("a.Color", "a.blue#623360f3")
		}
		item.index = 4
		return nil
	default:
		return internal.ErrorInvalidEnumTagJSON("a.Color", _jtype)
	}
}

// This method is general version of WriteJSON, use it instead!
func (item AColor) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) ([]byte, error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item AColor) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item AColor) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '"')
	if tctx.LegacyTypeNames {
		w = append(w, _AColor[item.index].TLString...)
	} else {
		w = append(w, _AColor[item.index].TLName...)
	}
	return append(w, '"')
}

func (item AColor) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AColor) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AColor) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("a.Color", err.Error())
	}
	return nil
}
