// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlInner

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Inner struct {
	A int32
}

func (Inner) TLName() string { return "inner" }
func (Inner) TLTag() uint32  { return 0x3b53db83 }

func (item *Inner) Reset() {
	item.A = 0
}

func (item *Inner) FillRandom(rg *basictl.RandGenerator, nat_X uint32) {
	item.A = basictl.RandomInt(rg)
}

func (item *Inner) Read(w []byte, nat_X uint32) (_ []byte, err error) {
	return basictl.IntRead(w, &item.A)
}

// This method is general version of Write, use it instead!
func (item *Inner) WriteGeneral(w []byte, nat_X uint32) (_ []byte, err error) {
	return item.Write(w, nat_X), nil
}

func (item *Inner) Write(w []byte, nat_X uint32) []byte {
	w = basictl.IntWrite(w, item.A)
	return w
}

func (item *Inner) ReadBoxed(w []byte, nat_X uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3b53db83); err != nil {
		return w, err
	}
	return item.Read(w, nat_X)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Inner) WriteBoxedGeneral(w []byte, nat_X uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_X), nil
}

func (item *Inner) WriteBoxed(w []byte, nat_X uint32) []byte {
	w = basictl.NatWrite(w, 0x3b53db83)
	return item.Write(w, nat_X)
}

func (item *Inner) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_X uint32) error {
	var propAPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("inner", "a")
				}
				if err := internal.Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("inner", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Inner) WriteJSONGeneral(w []byte, nat_X uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_X), nil
}

func (item *Inner) WriteJSON(w []byte, nat_X uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_X)
}
func (item *Inner) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_X uint32) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	return append(w, '}')
}
