// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlInnerMaybe0

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlTupleInt0Maybe"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type InnerMaybe0 struct {
	A tlTupleInt0Maybe.TupleInt0Maybe
}

func (InnerMaybe0) TLName() string { return "innerMaybe" }
func (InnerMaybe0) TLTag() uint32  { return 0xa7d3b9e }

func (item *InnerMaybe0) Reset() {
	item.A.Reset()
}

func (item *InnerMaybe0) FillRandom(rg *basictl.RandGenerator) {
	item.A.FillRandom(rg)
}

func (item *InnerMaybe0) Read(w []byte) (_ []byte, err error) {
	return item.A.ReadBoxed(w)
}

// This method is general version of Write, use it instead!
func (item *InnerMaybe0) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *InnerMaybe0) Write(w []byte) []byte {
	w = item.A.WriteBoxed(w)
	return w
}

func (item *InnerMaybe0) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa7d3b9e); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *InnerMaybe0) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *InnerMaybe0) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa7d3b9e)
	return item.Write(w)
}

func (item InnerMaybe0) String() string {
	return string(item.WriteJSON(nil))
}

func (item *InnerMaybe0) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("innerMaybe", "a")
				}
				if err := item.A.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propAPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("innerMaybe", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *InnerMaybe0) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *InnerMaybe0) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *InnerMaybe0) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = item.A.WriteJSONOpt(newTypeNames, short, w)
	if (item.A.Ok) == false {
		w = w[:backupIndexA]
	}
	return append(w, '}')
}

func (item *InnerMaybe0) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *InnerMaybe0) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("innerMaybe", err.Error())
	}
	return nil
}
