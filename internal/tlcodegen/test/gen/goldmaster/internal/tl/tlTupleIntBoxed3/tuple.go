// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTupleIntBoxed3

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTuple3IntBoxed"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TupleIntBoxed3 [3]int32

func (TupleIntBoxed3) TLName() string { return "tuple" }
func (TupleIntBoxed3) TLTag() uint32  { return 0x9770768a }

func (item *TupleIntBoxed3) Reset() {
	ptr := (*[3]int32)(item)
	tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedReset(ptr)
}

func (item *TupleIntBoxed3) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[3]int32)(item)
	tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedFillRandom(rg, ptr)
}

func (item *TupleIntBoxed3) Read(w []byte) (_ []byte, err error) {
	ptr := (*[3]int32)(item)
	return tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedRead(w, ptr)
}

func (item *TupleIntBoxed3) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TupleIntBoxed3) Write(w []byte) []byte {
	ptr := (*[3]int32)(item)
	return tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedWrite(w, ptr)
}

func (item *TupleIntBoxed3) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TupleIntBoxed3) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TupleIntBoxed3) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x9770768a)
	return item.Write(w)
}

func (item TupleIntBoxed3) String() string {
	return string(item.WriteJSON(nil))
}
func (item *TupleIntBoxed3) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[3]int32)(item)
	if err := tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TupleIntBoxed3) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *TupleIntBoxed3) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TupleIntBoxed3) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[3]int32)(item)
	w = tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedWriteJSONOpt(newTypeNames, short, w, ptr)
	return w
}
func (item *TupleIntBoxed3) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TupleIntBoxed3) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("tuple", err.Error())
	}
	return nil
}

func (item *TupleIntBoxed3) CalculateLayout(sizes []int) []int {
	ptr := (*[3]int32)(item)
	sizes = tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedCalculateLayout(sizes, ptr)
	return sizes
}

func (item *TupleIntBoxed3) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*[3]int32)(item)
	w, sizes = tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedInternalWriteTL2(w, sizes, ptr)
	return w, sizes
}

func (item *TupleIntBoxed3) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *TupleIntBoxed3) ReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*[3]int32)(item)
	if r, err = tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedReadTL2(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}
