// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBuiltinTuple3Int

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func BuiltinTuple3IntReset(vec *[3]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple3IntFillRandom(rg *basictl.RandGenerator, vec *[3]int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3IntRead(w []byte, vec *[3]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3IntWrite(w []byte, vec *[3]int32) []byte {
	for _, elem := range *vec {
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple3IntCalculateLayout(sizes []int, vec *[3]int32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	for i := 0; i < len(*vec); i++ {

		sizes[sizePosition] += 4
	}
	return sizes
}

func BuiltinTuple3IntInternalWriteTL2(w []byte, sizes []int, vec *[3]int32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	for i := 0; i < len(*vec); i++ {
		w = basictl.IntWrite(w, (*vec)[i])
	}
	return w, sizes
}

func BuiltinTuple3IntReadTL2(r []byte, vec *[3]int32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]
	i := 0
	for len(currentR) > 0 {
		if i == 3 {
			return r, basictl.TL2Error("more elements than expected")
		}
		if currentR, err = basictl.IntRead(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
		i += 1
	}
	if i != 3 {
		return r, basictl.TL2Error("less elements than expected")
	}
	return r, nil
}

func BuiltinTuple3IntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[3]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[3]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return internal.ErrorWrongSequenceLength("[3]int32", index+1, 3)
			}
			if err := internal.Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[3]int32", "expected json array's end")
		}
	}
	if index != 3 {
		return internal.ErrorWrongSequenceLength("[3]int32", index+1, 3)
	}
	return nil
}

func BuiltinTuple3IntWriteJSON(w []byte, vec *[3]int32) []byte {
	return BuiltinTuple3IntWriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple3IntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[3]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}
