// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBuiltinVectorDictionaryElemPairIntIntInt

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlDictionaryElemPairIntIntInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func BuiltinVectorDictionaryElemPairIntIntIntFillRandom(rg *basictl.RandGenerator, vec *[]tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt, l)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemPairIntIntIntRead(w []byte, vec *[]tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorDictionaryElemPairIntIntIntWrite(w []byte, vec []tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryElemPairIntIntIntCalculateLayout(sizes []int, vec *[]tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	for i := 0; i < len(*vec); i++ {
		currentPosition := len(sizes)
		sizes = (*vec)[i].CalculateLayout(sizes)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinVectorDictionaryElemPairIntIntIntInternalWriteTL2(w []byte, sizes []int, vec *[]tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	for i := 0; i < len(*vec); i++ {
		w, sizes = (*vec)[i].InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemPairIntIntIntReadTL2(r []byte, vec *[]tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	*vec = (*vec)[:0]
	for len(currentR) > 0 {
		var elem tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt
		if currentR, err = elem.ReadTL2(currentR); err != nil {
			return currentR, err
		}
		*vec = append(*vec, elem)
	}
	return r, nil
}

func BuiltinVectorDictionaryElemPairIntIntIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[]tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[]tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorDictionaryElemPairIntIntIntWriteJSON(w []byte, vec []tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt) []byte {
	return BuiltinVectorDictionaryElemPairIntIntIntWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorDictionaryElemPairIntIntIntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []tlDictionaryElemPairIntIntInt.DictionaryElemPairIntIntInt) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']')
}
