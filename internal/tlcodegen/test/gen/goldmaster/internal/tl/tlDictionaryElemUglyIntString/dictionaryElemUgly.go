// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlDictionaryElemUglyIntString

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type DictionaryElemUglyIntString struct {
	Key   int32  // Conditional: nat_f.0
	Value string // Conditional: nat_f.1
}

func (DictionaryElemUglyIntString) TLName() string { return "dictionaryElemUgly" }
func (DictionaryElemUglyIntString) TLTag() uint32  { return 0xe6790546 }

func (item *DictionaryElemUglyIntString) SetKey(v int32, nat_f *uint32) {
	item.Key = v
	if nat_f != nil {
		*nat_f |= 1 << 0
	}
}
func (item *DictionaryElemUglyIntString) ClearKey(nat_f *uint32) {
	item.Key = 0
	if nat_f != nil {
		*nat_f &^= 1 << 0
	}
}
func (item *DictionaryElemUglyIntString) IsSetKey(nat_f uint32) bool { return nat_f&(1<<0) != 0 }

func (item *DictionaryElemUglyIntString) SetValue(v string, nat_f *uint32) {
	item.Value = v
	if nat_f != nil {
		*nat_f |= 1 << 1
	}
}
func (item *DictionaryElemUglyIntString) ClearValue(nat_f *uint32) {
	item.Value = ""
	if nat_f != nil {
		*nat_f &^= 1 << 1
	}
}
func (item *DictionaryElemUglyIntString) IsSetValue(nat_f uint32) bool { return nat_f&(1<<1) != 0 }

func (item *DictionaryElemUglyIntString) Reset() {
	item.Key = 0
	item.Value = ""
}

func (item *DictionaryElemUglyIntString) FillRandom(rg *basictl.RandGenerator, nat_f uint32) {
	if nat_f&(1<<0) != 0 {
		item.Key = basictl.RandomInt(rg)
	} else {
		item.Key = 0
	}
	if nat_f&(1<<1) != 0 {
		item.Value = basictl.RandomString(rg)
	} else {
		item.Value = ""
	}
}

func (item *DictionaryElemUglyIntString) Read(w []byte, nat_f uint32) (_ []byte, err error) {
	if nat_f&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.Key); err != nil {
			return w, err
		}
	} else {
		item.Key = 0
	}
	if nat_f&(1<<1) != 0 {
		if w, err = basictl.StringRead(w, &item.Value); err != nil {
			return w, err
		}
	} else {
		item.Value = ""
	}
	return w, nil
}

func (item *DictionaryElemUglyIntString) WriteGeneral(w []byte, nat_f uint32) (_ []byte, err error) {
	return item.Write(w, nat_f), nil
}

func (item *DictionaryElemUglyIntString) Write(w []byte, nat_f uint32) []byte {
	if nat_f&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.Key)
	}
	if nat_f&(1<<1) != 0 {
		w = basictl.StringWrite(w, item.Value)
	}
	return w
}

func (item *DictionaryElemUglyIntString) ReadBoxed(w []byte, nat_f uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe6790546); err != nil {
		return w, err
	}
	return item.Read(w, nat_f)
}

func (item *DictionaryElemUglyIntString) WriteBoxedGeneral(w []byte, nat_f uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_f), nil
}

func (item *DictionaryElemUglyIntString) WriteBoxed(w []byte, nat_f uint32) []byte {
	w = basictl.NatWrite(w, 0xe6790546)
	return item.Write(w, nat_f)
}

func (item *DictionaryElemUglyIntString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_f uint32) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("dictionaryElemUgly", "key")
				}
				if nat_f&(1<<0) == 0 {
					return internal.ErrorInvalidJSON("dictionaryElemUgly", "field 'key' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := internal.Json2ReadInt32(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("dictionaryElemUgly", "value")
				}
				if nat_f&(1<<1) == 0 {
					return internal.ErrorInvalidJSON("dictionaryElemUgly", "field 'value' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := internal.Json2ReadString(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("dictionaryElemUgly", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = 0
	}
	if !propValuePresented {
		item.Value = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemUglyIntString) WriteJSONGeneral(w []byte, nat_f uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_f), nil
}

func (item *DictionaryElemUglyIntString) WriteJSON(w []byte, nat_f uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_f)
}
func (item *DictionaryElemUglyIntString) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_f uint32) []byte {
	w = append(w, '{')
	if nat_f&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"key":`...)
		w = basictl.JSONWriteInt32(w, item.Key)
	}
	if nat_f&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"value":`...)
		w = basictl.JSONWriteString(w, item.Value)
	}
	return append(w, '}')
}

func (item *DictionaryElemUglyIntString) CalculateLayout(sizes []int, nat_f uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	if nat_f&(1<<0) != 0 {
		if item.Key != 0 {

			lastUsedByte = 1
			currentSize += 4
		}
	}

	// calculate layout for item.Value
	if nat_f&(1<<1) != 0 {
		if len(item.Value) != 0 {

			if len(item.Value) != 0 {
				lastUsedByte = 1
				currentSize += len(item.Value)
				currentSize += basictl.TL2CalculateSize(len(item.Value))
			}
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryElemUglyIntString) InternalWriteTL2(w []byte, sizes []int, nat_f uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	if nat_f&(1<<0) != 0 {
		if item.Key != 0 {
			serializedSize += 4
			if 4 != 0 {
				currentBlock |= (1 << 1)
				w = basictl.IntWrite(w, item.Key)
			}
		}
	}
	// write item.Value
	if nat_f&(1<<1) != 0 {
		if len(item.Value) != 0 {
			serializedSize += len(item.Value)
			if len(item.Value) != 0 {
				serializedSize += basictl.TL2CalculateSize(len(item.Value))
				currentBlock |= (1 << 2)
				w = basictl.StringWriteTL2(w, item.Value)
			}
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryElemUglyIntString) WriteTL2(w []byte, ctx *basictl.TL2WriteContext, nat_f uint32) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0], nat_f)
	w, _ = item.InternalWriteTL2(w, sizes, nat_f)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryElemUglyIntString) InternalReadTL2(r []byte, nat_f uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if nat_f&(1<<0) != 0 {
			if currentR, err = basictl.IntRead(currentR, &item.Key); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "Key" + "is presented but depending bit is absent")
		}
	} else {
		item.Key = 0
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if nat_f&(1<<1) != 0 {
			if currentR, err = basictl.StringReadTL2(currentR, &item.Value); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "Value" + "is presented but depending bit is absent")
		}
	} else {
		item.Value = ""
	}

	return r, nil
}

func (item *DictionaryElemUglyIntString) ReadTL2(r []byte, ctx *basictl.TL2ReadContext, nat_f uint32) (_ []byte, err error) {
	return item.InternalReadTL2(r, nat_f)
}
