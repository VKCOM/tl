// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlReplace14ElemLong

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTuple3Replace14ElemElemLong"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace14ElemElemLong"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Replace14ElemLong struct {
	B [3]tlReplace14ElemElemLong.Replace14ElemElemLong // Conditional: nat_n.0
	C int32
}

func (item *Replace14ElemLong) SetB(v [3]tlReplace14ElemElemLong.Replace14ElemElemLong, nat_n *uint32) {
	item.B = v
	if nat_n != nil {
		*nat_n |= 1 << 0
	}
}
func (item *Replace14ElemLong) ClearB(nat_n *uint32) {
	tlBuiltinTuple3Replace14ElemElemLong.BuiltinTuple3Replace14ElemElemLongReset(&item.B)
	if nat_n != nil {
		*nat_n &^= 1 << 0
	}
}
func (item Replace14ElemLong) IsSetB(nat_n uint32) bool { return nat_n&(1<<0) != 0 }

func (item *Replace14ElemLong) Reset() {
	tlBuiltinTuple3Replace14ElemElemLong.BuiltinTuple3Replace14ElemElemLongReset(&item.B)
	item.C = 0
}

func (item *Replace14ElemLong) FillRandom(rg *basictl.RandGenerator, nat_n uint32, nat_k uint32) {
	if nat_n&(1<<0) != 0 {
		tlBuiltinTuple3Replace14ElemElemLong.BuiltinTuple3Replace14ElemElemLongFillRandom(rg, &item.B, nat_n, nat_k)
	} else {
		tlBuiltinTuple3Replace14ElemElemLong.BuiltinTuple3Replace14ElemElemLongReset(&item.B)
	}
	item.C = basictl.RandomInt(rg)
}

func (item *Replace14ElemLong) Read(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	if nat_n&(1<<0) != 0 {
		if w, err = tlBuiltinTuple3Replace14ElemElemLong.BuiltinTuple3Replace14ElemElemLongRead(w, &item.B, nat_n, nat_k); err != nil {
			return w, err
		}
	} else {
		tlBuiltinTuple3Replace14ElemElemLong.BuiltinTuple3Replace14ElemElemLongReset(&item.B)
	}
	return basictl.IntRead(w, &item.C)
}

// This method is general version of Write, use it instead!
func (item *Replace14ElemLong) WriteGeneral(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	return item.Write(w, nat_n, nat_k)
}

func (item *Replace14ElemLong) Write(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	if nat_n&(1<<0) != 0 {
		if w, err = tlBuiltinTuple3Replace14ElemElemLong.BuiltinTuple3Replace14ElemElemLongWrite(w, &item.B, nat_n, nat_k); err != nil {
			return w, err
		}
	}
	w = basictl.IntWrite(w, item.C)
	return w, nil
}

func (item *Replace14ElemLong) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_n uint32, nat_k uint32) error {
	var rawB []byte
	var propCPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "b":
				if rawB != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace14Elem", "b")
				}
				rawB = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "c":
				if propCPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace14Elem", "c")
				}
				if err := internal.Json2ReadInt32(in, &item.C); err != nil {
					return err
				}
				propCPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("replace14Elem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propCPresented {
		item.C = 0
	}
	if nat_n&(1<<0) == 0 {
		if rawB != nil {
			return internal.ErrorInvalidJSON("replace14Elem", "field 'b' is defined, while corresponding implicit fieldmask bit is 0")
		}
		tlBuiltinTuple3Replace14ElemElemLong.BuiltinTuple3Replace14ElemElemLongReset(&item.B)
	} else {
		var inBPointer *basictl.JsonLexer
		inB := basictl.JsonLexer{Data: rawB}
		if rawB != nil {
			inBPointer = &inB
		}
		if err := tlBuiltinTuple3Replace14ElemElemLong.BuiltinTuple3Replace14ElemElemLongReadJSON(legacyTypeNames, inBPointer, &item.B, nat_n, nat_k); err != nil {
			return err
		}

	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Replace14ElemLong) WriteJSONGeneral(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n, nat_k)
}

func (item *Replace14ElemLong) WriteJSON(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n, nat_k)
}
func (item *Replace14ElemLong) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	w = append(w, '{')
	if nat_n&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"b":`...)
		if w, err = tlBuiltinTuple3Replace14ElemElemLong.BuiltinTuple3Replace14ElemElemLongWriteJSONOpt(newTypeNames, short, w, &item.B, nat_n, nat_k); err != nil {
			return w, err
		}
	}
	backupIndexC := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"c":`...)
	w = basictl.JSONWriteInt32(w, item.C)
	if (item.C != 0) == false {
		w = w[:backupIndexC]
	}
	return append(w, '}'), nil
}
