// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlReplace15Elem1

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Replace15Elem1 struct {
	X int64
	Y int64
}

func (item *Replace15Elem1) Reset() {
	item.X = 0
	item.Y = 0
}

func (item *Replace15Elem1) FillRandom(rg *basictl.RandGenerator, nat_n uint32) {
	item.X = basictl.RandomLong(rg)
	item.Y = basictl.RandomLong(rg)
}

func (item *Replace15Elem1) Read(w []byte, nat_n uint32) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.X); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.Y)
}

func (item *Replace15Elem1) WriteGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.Write(w, nat_n), nil
}

func (item *Replace15Elem1) Write(w []byte, nat_n uint32) []byte {
	w = basictl.LongWrite(w, item.X)
	w = basictl.LongWrite(w, item.Y)
	return w
}

func (item *Replace15Elem1) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_n uint32) error {
	var propXPresented bool
	var propYPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if propXPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace15Elem1", "x")
				}
				if err := internal.Json2ReadInt64(in, &item.X); err != nil {
					return err
				}
				propXPresented = true
			case "y":
				if propYPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace15Elem1", "y")
				}
				if err := internal.Json2ReadInt64(in, &item.Y); err != nil {
					return err
				}
				propYPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("replace15Elem1", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propXPresented {
		item.X = 0
	}
	if !propYPresented {
		item.Y = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Replace15Elem1) WriteJSONGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n), nil
}

func (item *Replace15Elem1) WriteJSON(w []byte, nat_n uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_n)
}
func (item *Replace15Elem1) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_n uint32) []byte {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	w = basictl.JSONWriteInt64(w, item.X)
	if (item.X != 0) == false {
		w = w[:backupIndexX]
	}
	backupIndexY := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"y":`...)
	w = basictl.JSONWriteInt64(w, item.Y)
	if (item.Y != 0) == false {
		w = w[:backupIndexY]
	}
	return append(w, '}')
}

func (item *Replace15Elem1) CalculateLayout(sizes []int, nat_n uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.X
	if item.X != 0 {

		lastUsedByte = 1
		currentSize += 8
	}

	// calculate layout for item.Y
	if item.Y != 0 {

		lastUsedByte = 1
		currentSize += 8
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *Replace15Elem1) InternalWriteTL2(w []byte, sizes []int, nat_n uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.X
	if item.X != 0 {
		serializedSize += 8
		if 8 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.LongWrite(w, item.X)
		}
	}
	// write item.Y
	if item.Y != 0 {
		serializedSize += 8
		if 8 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.LongWrite(w, item.Y)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *Replace15Elem1) InternalReadTL2(r []byte, nat_n uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.X
	if block&(1<<1) != 0 {
		if currentR, err = basictl.LongRead(currentR, &item.X); err != nil {
			return currentR, err
		}
	} else {
		item.X = 0
	}

	// read item.Y
	if block&(1<<2) != 0 {
		if currentR, err = basictl.LongRead(currentR, &item.Y); err != nil {
			return currentR, err
		}
	} else {
		item.Y = 0
	}

	return r, nil
}
