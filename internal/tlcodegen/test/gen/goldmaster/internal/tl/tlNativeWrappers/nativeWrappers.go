// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlNativeWrappers

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlInt32"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlMyInt32"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type NativeWrappers struct {
	A int32
	B int32
	C tlInt32.Int32
	D tlInt32.Int32
	E tlMyInt32.MyInt32
	F tlMyInt32.MyInt32
}

func (NativeWrappers) TLName() string { return "nativeWrappers" }
func (NativeWrappers) TLTag() uint32  { return 0x344ddf50 }

func (item *NativeWrappers) Reset() {
	item.A = 0
	item.B = 0
	item.C.Reset()
	item.D.Reset()
	item.E.Reset()
	item.F.Reset()
}

func (item *NativeWrappers) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomInt(rg)
	item.B = basictl.RandomInt(rg)
	item.C.FillRandom(rg)
	item.D.FillRandom(rg)
	item.E.FillRandom(rg)
	item.F.FillRandom(rg)
}

func (item *NativeWrappers) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.A); err != nil {
		return w, err
	}
	if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.B); err != nil {
		return w, err
	}
	if w, err = item.C.Read(w); err != nil {
		return w, err
	}
	if w, err = item.D.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.E.Read(w); err != nil {
		return w, err
	}
	return item.F.ReadBoxed(w)
}

func (item *NativeWrappers) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *NativeWrappers) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.A)
	w = basictl.NatWrite(w, 0xa8509bda)
	w = basictl.IntWrite(w, item.B)
	w = item.C.Write(w)
	w = item.D.WriteBoxed(w)
	w = item.E.Write(w)
	w = item.F.WriteBoxed(w)
	return w
}

func (item *NativeWrappers) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x344ddf50); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *NativeWrappers) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *NativeWrappers) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x344ddf50)
	return item.Write(w)
}

func (item NativeWrappers) String() string {
	return string(item.WriteJSON(nil))
}

func (item *NativeWrappers) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool
	var propCPresented bool
	var propDPresented bool
	var propEPresented bool
	var propFPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("nativeWrappers", "a")
				}
				if err := internal.Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("nativeWrappers", "b")
				}
				if err := internal.Json2ReadInt32(in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			case "c":
				if propCPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("nativeWrappers", "c")
				}
				if err := item.C.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propCPresented = true
			case "d":
				if propDPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("nativeWrappers", "d")
				}
				if err := item.D.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propDPresented = true
			case "e":
				if propEPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("nativeWrappers", "e")
				}
				if err := item.E.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propEPresented = true
			case "f":
				if propFPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("nativeWrappers", "f")
				}
				if err := item.F.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propFPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("nativeWrappers", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	if !propBPresented {
		item.B = 0
	}
	if !propCPresented {
		item.C.Reset()
	}
	if !propDPresented {
		item.D.Reset()
	}
	if !propEPresented {
		item.E.Reset()
	}
	if !propFPresented {
		item.F.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *NativeWrappers) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *NativeWrappers) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *NativeWrappers) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = basictl.JSONWriteInt32(w, item.B)
	if (item.B != 0) == false {
		w = w[:backupIndexB]
	}
	backupIndexC := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"c":`...)
	w = item.C.WriteJSONOpt(tctx, w)
	if (item.C != 0) == false {
		w = w[:backupIndexC]
	}
	backupIndexD := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"d":`...)
	w = item.D.WriteJSONOpt(tctx, w)
	if (item.D != 0) == false {
		w = w[:backupIndexD]
	}
	backupIndexE := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"e":`...)
	w = item.E.WriteJSONOpt(tctx, w)
	if (item.E != 0) == false {
		w = w[:backupIndexE]
	}
	backupIndexF := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f":`...)
	w = item.F.WriteJSONOpt(tctx, w)
	if (item.F != 0) == false {
		w = w[:backupIndexF]
	}
	return append(w, '}')
}

func (item *NativeWrappers) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *NativeWrappers) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("nativeWrappers", err.Error())
	}
	return nil
}

func (item *NativeWrappers) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	if item.A != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.B
	if item.B != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.C
	if item.C != 0 {
		sizes = item.C.CalculateLayout(sizes)
		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.D
	if item.D != 0 {
		sizes = item.D.CalculateLayout(sizes)
		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.E
	if item.E != 0 {
		sizes = item.E.CalculateLayout(sizes)
		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.F
	if item.F != 0 {
		sizes = item.F.CalculateLayout(sizes)
		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *NativeWrappers) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	if item.A != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, item.A)
		}
	}
	// write item.B
	if item.B != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.IntWrite(w, item.B)
		}
	}
	// write item.C
	if item.C != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 3)
			w, sizes = item.C.InternalWriteTL2(w, sizes)
		}
	}
	// write item.D
	if item.D != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 4)
			w, sizes = item.D.InternalWriteTL2(w, sizes)
		}
	}
	// write item.E
	if item.E != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 5)
			w, sizes = item.E.InternalWriteTL2(w, sizes)
		}
	}
	// write item.F
	if item.F != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 6)
			w, sizes = item.F.InternalWriteTL2(w, sizes)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *NativeWrappers) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *NativeWrappers) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A
	if block&(1<<1) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.A); err != nil {
			return currentR, err
		}
	} else {
		item.A = 0
	}

	// read item.B
	if block&(1<<2) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.B); err != nil {
			return currentR, err
		}
	} else {
		item.B = 0
	}

	// read item.C
	if block&(1<<3) != 0 {
		if currentR, err = item.C.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.C.Reset()
	}

	// read item.D
	if block&(1<<4) != 0 {
		if currentR, err = item.D.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.D.Reset()
	}

	// read item.E
	if block&(1<<5) != 0 {
		if currentR, err = item.E.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.E.Reset()
	}

	// read item.F
	if block&(1<<6) != 0 {
		if currentR, err = item.F.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.F.Reset()
	}

	return r, nil
}

func (item *NativeWrappers) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
