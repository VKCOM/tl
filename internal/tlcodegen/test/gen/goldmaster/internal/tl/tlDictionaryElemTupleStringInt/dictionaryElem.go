// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlDictionaryElemTupleStringInt

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTupleString"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type DictionaryElemTupleStringInt struct {
	Key   []string
	Value int32
}

func (DictionaryElemTupleStringInt) TLName() string { return "dictionaryElem" }
func (DictionaryElemTupleStringInt) TLTag() uint32  { return 0xa69d7dd0 }

func (item *DictionaryElemTupleStringInt) Reset() {
	item.Key = item.Key[:0]
	item.Value = 0
}

func (item *DictionaryElemTupleStringInt) FillRandom(rg *basictl.RandGenerator, nat_k uint32) {
	tlBuiltinTupleString.BuiltinTupleStringFillRandom(rg, &item.Key, nat_k)
	item.Value = basictl.RandomInt(rg)
}

func (item *DictionaryElemTupleStringInt) Read(w []byte, nat_k uint32) (_ []byte, err error) {
	if w, err = tlBuiltinTupleString.BuiltinTupleStringRead(w, &item.Key, nat_k); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Value)
}

// This method is general version of Write, use it instead!
func (item *DictionaryElemTupleStringInt) WriteGeneral(w []byte, nat_k uint32) (_ []byte, err error) {
	return item.Write(w, nat_k)
}

func (item *DictionaryElemTupleStringInt) Write(w []byte, nat_k uint32) (_ []byte, err error) {
	if w, err = tlBuiltinTupleString.BuiltinTupleStringWrite(w, item.Key, nat_k); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.Value)
	return w, nil
}

func (item *DictionaryElemTupleStringInt) ReadBoxed(w []byte, nat_k uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa69d7dd0); err != nil {
		return w, err
	}
	return item.Read(w, nat_k)
}

// This method is general version of WriteBoxed, use it instead!
func (item *DictionaryElemTupleStringInt) WriteBoxedGeneral(w []byte, nat_k uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_k)
}

func (item *DictionaryElemTupleStringInt) WriteBoxed(w []byte, nat_k uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xa69d7dd0)
	return item.Write(w, nat_k)
}

func (item *DictionaryElemTupleStringInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_k uint32) error {
	var rawKey []byte
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if rawKey != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "key")
				}
				rawKey = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "value":
				if propValuePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "value")
				}
				if err := internal.Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("dictionaryElem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propValuePresented {
		item.Value = 0
	}
	var inKeyPointer *basictl.JsonLexer
	inKey := basictl.JsonLexer{Data: rawKey}
	if rawKey != nil {
		inKeyPointer = &inKey
	}
	if err := tlBuiltinTupleString.BuiltinTupleStringReadJSON(legacyTypeNames, inKeyPointer, &item.Key, nat_k); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemTupleStringInt) WriteJSONGeneral(w []byte, nat_k uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_k)
}

func (item *DictionaryElemTupleStringInt) WriteJSON(w []byte, nat_k uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_k)
}
func (item *DictionaryElemTupleStringInt) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_k uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	if w, err = tlBuiltinTupleString.BuiltinTupleStringWriteJSONOpt(newTypeNames, short, w, item.Key, nat_k); err != nil {
		return w, err
	}
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}'), nil
}
