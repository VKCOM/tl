// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBuiltinVectorDictionaryElemStrangeString

import (
	"sort"

	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlDictionaryElemStrangeString"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func BuiltinVectorDictionaryElemStrangeStringReset(m map[uint32]string) {
	for k := range m {
		delete(m, k)
	}
}

func BuiltinVectorDictionaryElemStrangeStringFillRandom(rg *basictl.RandGenerator, m *map[uint32]string) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*m = make(map[uint32]string, l)
	for i := 0; i < int(l); i++ {
		var elem tlDictionaryElemStrangeString.DictionaryElemStrangeString
		elem.FillRandom(rg)
		(*m)[elem.Key] = elem.Value
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemStrangeStringRead(w []byte, m *map[uint32]string) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	var data map[uint32]string
	if *m == nil {
		if l == 0 {
			return w, nil
		}
		data = make(map[uint32]string, l)
		*m = data
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	for i := 0; i < int(l); i++ {
		var elem tlDictionaryElemStrangeString.DictionaryElemStrangeString
		if w, err = elem.Read(w); err != nil {
			return w, err
		}
		data[elem.Key] = elem.Value
	}
	return w, nil
}

func BuiltinVectorDictionaryElemStrangeStringWrite(w []byte, m map[uint32]string) []byte {
	w = basictl.NatWrite(w, uint32(len(m)))
	if len(m) == 0 {
		return w
	}
	keys := make([]uint32, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})
	for _, key := range keys {
		val := m[key]
		elem := tlDictionaryElemStrangeString.DictionaryElemStrangeString{Key: key, Value: val}
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryElemStrangeStringCalculateLayout(sizes []int, m *map[uint32]string) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*m) != 0 {
		sizes[sizePosition] += basictl.TL2CalculateSize(len(*m))
	}

	keys := make([]uint32, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})

	for i := 0; i < len(keys); i++ {
		elem := tlDictionaryElemStrangeString.DictionaryElemStrangeString{Key: keys[i], Value: (*m)[keys[i]]}
		currentPosition := len(sizes)
		sizes = elem.CalculateLayout(sizes)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinVectorDictionaryElemStrangeStringInternalWriteTL2(w []byte, sizes []int, m *map[uint32]string) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*m) != 0 {
		w = basictl.TL2WriteSize(w, len(*m))
	}

	keys := make([]uint32, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})

	for i := 0; i < len(keys); i++ {
		elem := tlDictionaryElemStrangeString.DictionaryElemStrangeString{Key: keys[i], Value: (*m)[keys[i]]}
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemStrangeStringInternalReadTL2(r []byte, m *map[uint32]string) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if *m == nil {
		*m = make(map[uint32]string)
	}

	for key := range *m {
		delete(*m, key)
	}

	data := *m

	for i := 0; i < elementCount; i++ {
		elem := tlDictionaryElemStrangeString.DictionaryElemStrangeString{}
		if currentR, err = elem.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
		data[elem.Key] = elem.Value
	}
	return r, nil
}

func BuiltinVectorDictionaryElemStrangeStringReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, m *map[uint32]string) error {
	var data map[uint32]string
	if *m == nil {
		*m = make(map[uint32]string, 0)
		data = *m
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("map[uint32]string", "expected json object")
		}
		for !in.IsDelim('}') {
			keyBytes := []byte(in.UnsafeFieldName(false))
			in.WantColon()
			if !in.Ok() {
				return internal.ErrorInvalidJSON("map[uint32]string", "expected correct json value in key")
			}
			in2 := basictl.JsonLexer{Data: keyBytes}
			var key uint32
			if err := internal.Json2ReadUint32(&in2, &key); err != nil {
				return err
			}
			var value string
			if err := internal.Json2ReadString(in, &value); err != nil {
				return err
			}
			data[key] = value
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("map[uint32]string", "expected json object's end")
		}
	}
	return nil
}

func BuiltinVectorDictionaryElemStrangeStringWriteJSON(w []byte, m map[uint32]string) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorDictionaryElemStrangeStringWriteJSONOpt(&tctx, w, m)
}
func BuiltinVectorDictionaryElemStrangeStringWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, m map[uint32]string) []byte {
	keys := make([]uint32, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})
	w = append(w, '{')
	for _, key := range keys {
		value := m[key]
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"`...)
		w = basictl.JSONWriteUint32(w, key)
		w = append(w, `":`...)
		w = basictl.JSONWriteString(w, value)
	}
	return append(w, '}')
}
