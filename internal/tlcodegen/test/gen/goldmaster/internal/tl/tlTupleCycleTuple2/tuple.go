// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTupleCycleTuple2

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/cycle_b51088a4226835d54f08524a36f8aa77"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TupleCycleTuple2 [2]cycle_b51088a4226835d54f08524a36f8aa77.CycleTuple

func (TupleCycleTuple2) TLName() string { return "tuple" }
func (TupleCycleTuple2) TLTag() uint32  { return 0x9770768a }

func (item *TupleCycleTuple2) Reset() {
	ptr := (*[2]cycle_b51088a4226835d54f08524a36f8aa77.CycleTuple)(item)
	cycle_b51088a4226835d54f08524a36f8aa77.BuiltinTuple2CycleTupleReset(ptr)
}

func (item *TupleCycleTuple2) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[2]cycle_b51088a4226835d54f08524a36f8aa77.CycleTuple)(item)
	cycle_b51088a4226835d54f08524a36f8aa77.BuiltinTuple2CycleTupleFillRandom(rg, ptr)
}

func (item *TupleCycleTuple2) Read(w []byte) (_ []byte, err error) {
	ptr := (*[2]cycle_b51088a4226835d54f08524a36f8aa77.CycleTuple)(item)
	return cycle_b51088a4226835d54f08524a36f8aa77.BuiltinTuple2CycleTupleRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *TupleCycleTuple2) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *TupleCycleTuple2) Write(w []byte) (_ []byte, err error) {
	ptr := (*[2]cycle_b51088a4226835d54f08524a36f8aa77.CycleTuple)(item)
	return cycle_b51088a4226835d54f08524a36f8aa77.BuiltinTuple2CycleTupleWrite(w, ptr)
}

func (item *TupleCycleTuple2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TupleCycleTuple2) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *TupleCycleTuple2) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x9770768a)
	return item.Write(w)
}

func (item TupleCycleTuple2) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *TupleCycleTuple2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[2]cycle_b51088a4226835d54f08524a36f8aa77.CycleTuple)(item)
	if err := cycle_b51088a4226835d54f08524a36f8aa77.BuiltinTuple2CycleTupleReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TupleCycleTuple2) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w)
}

func (item *TupleCycleTuple2) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TupleCycleTuple2) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	ptr := (*[2]cycle_b51088a4226835d54f08524a36f8aa77.CycleTuple)(item)
	if w, err = cycle_b51088a4226835d54f08524a36f8aa77.BuiltinTuple2CycleTupleWriteJSONOpt(newTypeNames, short, w, ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *TupleCycleTuple2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *TupleCycleTuple2) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("tuple", err.Error())
	}
	return nil
}
