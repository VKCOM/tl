// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTupleIntMaybe

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TupleIntMaybe struct {
	Value []int32 // not deterministic if !Ok
	Ok    bool
}

func (item *TupleIntMaybe) Reset() {
	item.Ok = false
}
func (item *TupleIntMaybe) FillRandom(rg *basictl.RandGenerator, nat_t uint32) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		tlBuiltinTupleInt.BuiltinTupleIntFillRandom(rg, &item.Value, nat_t)
	} else {
		item.Ok = false
	}
}

func (item *TupleIntMaybe) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		return tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.Value, nat_t)
	}
	return w, nil
}

// This method is general version of WriteBoxed, use it instead!
func (item *TupleIntMaybe) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t)
}

func (item *TupleIntMaybe) WriteBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		return tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.Value, nat_t)
	}
	return basictl.NatWrite(w, 0x27930a7b), nil
}

func (item *TupleIntMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	_ok, _jvalue, err := internal.Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, in2Pointer, &item.Value, nat_t); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TupleIntMaybe) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_t)
}

func (item *TupleIntMaybe) WriteJSON(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_t)
}
func (item *TupleIntMaybe) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) (_ []byte, err error) {
	if !item.Ok {
		return append(w, "{}"...), nil
	}
	w = append(w, `{"ok":true`...)
	if len(item.Value) != 0 {
		w = append(w, `,"value":`...)
		if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.Value, nat_t); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}
