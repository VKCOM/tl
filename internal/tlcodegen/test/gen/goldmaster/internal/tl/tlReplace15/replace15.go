// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlReplace15

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTupleReplace15Elem"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTupleReplace15Elem1"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTupleReplace15Elem2"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace15Elem"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace15Elem1"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace15Elem2"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Replace15 struct {
	N uint32
	A []tlReplace15Elem.Replace15Elem
	B []tlReplace15Elem1.Replace15Elem1
	C []tlReplace15Elem2.Replace15Elem2
}

func (Replace15) TLName() string { return "replace15" }
func (Replace15) TLTag() uint32  { return 0x2280e430 }

func (item *Replace15) Reset() {
	item.N = 0
	item.A = item.A[:0]
	item.B = item.B[:0]
	item.C = item.C[:0]
}

func (item *Replace15) FillRandom(rg *basictl.RandGenerator) {
	item.N = basictl.RandomUint(rg)
	item.N = rg.LimitValue(item.N)
	tlBuiltinTupleReplace15Elem.BuiltinTupleReplace15ElemFillRandom(rg, &item.A, item.N, item.N)
	tlBuiltinTupleReplace15Elem1.BuiltinTupleReplace15Elem1FillRandom(rg, &item.B, item.N, item.N)
	tlBuiltinTupleReplace15Elem2.BuiltinTupleReplace15Elem2FillRandom(rg, &item.C, item.N, item.N)
}

func (item *Replace15) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.N); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleReplace15Elem.BuiltinTupleReplace15ElemRead(w, &item.A, item.N, item.N); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleReplace15Elem1.BuiltinTupleReplace15Elem1Read(w, &item.B, item.N, item.N); err != nil {
		return w, err
	}
	return tlBuiltinTupleReplace15Elem2.BuiltinTupleReplace15Elem2Read(w, &item.C, item.N, item.N)
}

// This method is general version of Write, use it instead!
func (item *Replace15) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *Replace15) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.N)
	if w, err = tlBuiltinTupleReplace15Elem.BuiltinTupleReplace15ElemWrite(w, item.A, item.N, item.N); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleReplace15Elem1.BuiltinTupleReplace15Elem1Write(w, item.B, item.N, item.N); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleReplace15Elem2.BuiltinTupleReplace15Elem2Write(w, item.C, item.N, item.N); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Replace15) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x2280e430); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Replace15) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *Replace15) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x2280e430)
	return item.Write(w)
}

func (item Replace15) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *Replace15) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNPresented bool
	var rawA []byte
	var rawB []byte
	var rawC []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "n":
				if propNPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace15", "n")
				}
				if err := internal.Json2ReadUint32(in, &item.N); err != nil {
					return err
				}
				propNPresented = true
			case "a":
				if rawA != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace15", "a")
				}
				rawA = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "b":
				if rawB != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace15", "b")
				}
				rawB = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "c":
				if rawC != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace15", "c")
				}
				rawC = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("replace15", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNPresented {
		item.N = 0
	}
	var inAPointer *basictl.JsonLexer
	inA := basictl.JsonLexer{Data: rawA}
	if rawA != nil {
		inAPointer = &inA
	}
	if err := tlBuiltinTupleReplace15Elem.BuiltinTupleReplace15ElemReadJSON(legacyTypeNames, inAPointer, &item.A, item.N, item.N); err != nil {
		return err
	}

	var inBPointer *basictl.JsonLexer
	inB := basictl.JsonLexer{Data: rawB}
	if rawB != nil {
		inBPointer = &inB
	}
	if err := tlBuiltinTupleReplace15Elem1.BuiltinTupleReplace15Elem1ReadJSON(legacyTypeNames, inBPointer, &item.B, item.N, item.N); err != nil {
		return err
	}

	var inCPointer *basictl.JsonLexer
	inC := basictl.JsonLexer{Data: rawC}
	if rawC != nil {
		inCPointer = &inC
	}
	if err := tlBuiltinTupleReplace15Elem2.BuiltinTupleReplace15Elem2ReadJSON(legacyTypeNames, inCPointer, &item.C, item.N, item.N); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Replace15) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *Replace15) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Replace15) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexN := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"n":`...)
	w = basictl.JSONWriteUint32(w, item.N)
	if (item.N != 0) == false {
		w = w[:backupIndexN]
	}
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	if w, err = tlBuiltinTupleReplace15Elem.BuiltinTupleReplace15ElemWriteJSONOpt(newTypeNames, short, w, item.A, item.N, item.N); err != nil {
		return w, err
	}
	if (len(item.A) != 0) == false {
		w = w[:backupIndexA]
	}
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	if w, err = tlBuiltinTupleReplace15Elem1.BuiltinTupleReplace15Elem1WriteJSONOpt(newTypeNames, short, w, item.B, item.N, item.N); err != nil {
		return w, err
	}
	if (len(item.B) != 0) == false {
		w = w[:backupIndexB]
	}
	backupIndexC := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"c":`...)
	if w, err = tlBuiltinTupleReplace15Elem2.BuiltinTupleReplace15Elem2WriteJSONOpt(newTypeNames, short, w, item.C, item.N, item.N); err != nil {
		return w, err
	}
	if (len(item.C) != 0) == false {
		w = w[:backupIndexC]
	}
	return append(w, '}'), nil
}

func (item *Replace15) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *Replace15) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("replace15", err.Error())
	}
	return nil
}
