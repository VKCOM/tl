// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlMyInt64

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlInt64"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type MyInt64 tlInt64.Int64

func (MyInt64) TLName() string { return "myInt64" }
func (MyInt64) TLTag() uint32  { return 0x1d95db9d }

func (item *MyInt64) Reset() {
	ptr := (*tlInt64.Int64)(item)
	ptr.Reset()
}

func (item *MyInt64) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*tlInt64.Int64)(item)
	ptr.FillRandom(rg)
}

func (item *MyInt64) Read(w []byte) (_ []byte, err error) {
	ptr := (*tlInt64.Int64)(item)
	return ptr.Read(w)
}

func (item *MyInt64) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MyInt64) Write(w []byte) []byte {
	ptr := (*tlInt64.Int64)(item)
	return ptr.Write(w)
}

func (item *MyInt64) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1d95db9d); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MyInt64) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MyInt64) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1d95db9d)
	return item.Write(w)
}

func (item MyInt64) String() string {
	return string(item.WriteJSON(nil))
}
func (item *MyInt64) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*tlInt64.Int64)(item)
	if err := ptr.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MyInt64) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *MyInt64) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *MyInt64) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*tlInt64.Int64)(item)
	w = ptr.WriteJSONOpt(newTypeNames, short, w)
	return w
}
func (item *MyInt64) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MyInt64) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("myInt64", err.Error())
	}
	return nil
}

func (item *MyInt64) CalculateLayout(sizes []int) []int {
	ptr := (*tlInt64.Int64)(item)
	sizes = (*ptr).CalculateLayout(sizes)
	return sizes
}

func (item *MyInt64) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*tlInt64.Int64)(item)
	w, sizes = ptr.InternalWriteTL2(w, sizes)
	return w, sizes
}

func (item *MyInt64) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *MyInt64) ReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*tlInt64.Int64)(item)
	if r, err = ptr.ReadTL2(r); err != nil {
		return r, err
	}
	return r, nil
}
