// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlInt64

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Int64 int64

func (Int64) TLName() string { return "int64" }
func (Int64) TLTag() uint32  { return 0xf5609de0 }

func (item *Int64) Reset() {
	ptr := (*int64)(item)
	*ptr = 0
}

func (item *Int64) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*int64)(item)
	*ptr = basictl.RandomLong(rg)
}

func (item *Int64) Read(w []byte) (_ []byte, err error) {
	ptr := (*int64)(item)
	return basictl.LongRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *Int64) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Int64) Write(w []byte) []byte {
	ptr := (*int64)(item)
	return basictl.LongWrite(w, *ptr)
}

func (item *Int64) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xf5609de0); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Int64) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Int64) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xf5609de0)
	return item.Write(w)
}

func (item Int64) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Int64) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*int64)(item)
	if err := internal.Json2ReadInt64(in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Int64) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *Int64) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *Int64) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*int64)(item)
	w = basictl.JSONWriteInt64(w, *ptr)
	return w
}
func (item *Int64) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Int64) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("int64", err.Error())
	}
	return nil
}
