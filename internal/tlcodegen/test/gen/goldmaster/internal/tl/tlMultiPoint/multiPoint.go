// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlMultiPoint

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTuple3Int"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTuple3Int32"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTuple3Int32Boxed"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTuple3IntBoxed"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTuple3MyInt32"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTuple3MyInt32Boxed"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlInt32"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlMyInt32"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type MultiPoint struct {
	A [3]int32
	B [3]int32
	C [3]tlInt32.Int32
	D [3]tlInt32.Int32
	E [3]tlMyInt32.MyInt32
	F [3]tlMyInt32.MyInt32
}

func (MultiPoint) TLName() string { return "multiPoint" }
func (MultiPoint) TLTag() uint32  { return 0x0e1ae81e }

func (item *MultiPoint) Reset() {
	tlBuiltinTuple3Int.BuiltinTuple3IntReset(&item.A)
	tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedReset(&item.B)
	tlBuiltinTuple3Int32.BuiltinTuple3Int32Reset(&item.C)
	tlBuiltinTuple3Int32Boxed.BuiltinTuple3Int32BoxedReset(&item.D)
	tlBuiltinTuple3MyInt32.BuiltinTuple3MyInt32Reset(&item.E)
	tlBuiltinTuple3MyInt32Boxed.BuiltinTuple3MyInt32BoxedReset(&item.F)
}

func (item *MultiPoint) FillRandom(rg *basictl.RandGenerator) {
	tlBuiltinTuple3Int.BuiltinTuple3IntFillRandom(rg, &item.A)
	tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedFillRandom(rg, &item.B)
	tlBuiltinTuple3Int32.BuiltinTuple3Int32FillRandom(rg, &item.C)
	tlBuiltinTuple3Int32Boxed.BuiltinTuple3Int32BoxedFillRandom(rg, &item.D)
	tlBuiltinTuple3MyInt32.BuiltinTuple3MyInt32FillRandom(rg, &item.E)
	tlBuiltinTuple3MyInt32Boxed.BuiltinTuple3MyInt32BoxedFillRandom(rg, &item.F)
}

func (item *MultiPoint) Read(w []byte) (_ []byte, err error) {
	if w, err = tlBuiltinTuple3Int.BuiltinTuple3IntRead(w, &item.A); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedRead(w, &item.B); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTuple3Int32.BuiltinTuple3Int32Read(w, &item.C); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTuple3Int32Boxed.BuiltinTuple3Int32BoxedRead(w, &item.D); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTuple3MyInt32.BuiltinTuple3MyInt32Read(w, &item.E); err != nil {
		return w, err
	}
	return tlBuiltinTuple3MyInt32Boxed.BuiltinTuple3MyInt32BoxedRead(w, &item.F)
}

// This method is general version of Write, use it instead!
func (item *MultiPoint) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MultiPoint) Write(w []byte) []byte {
	w = tlBuiltinTuple3Int.BuiltinTuple3IntWrite(w, &item.A)
	w = tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedWrite(w, &item.B)
	w = tlBuiltinTuple3Int32.BuiltinTuple3Int32Write(w, &item.C)
	w = tlBuiltinTuple3Int32Boxed.BuiltinTuple3Int32BoxedWrite(w, &item.D)
	w = tlBuiltinTuple3MyInt32.BuiltinTuple3MyInt32Write(w, &item.E)
	w = tlBuiltinTuple3MyInt32Boxed.BuiltinTuple3MyInt32BoxedWrite(w, &item.F)
	return w
}

func (item *MultiPoint) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0e1ae81e); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MultiPoint) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MultiPoint) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0e1ae81e)
	return item.Write(w)
}

func (item MultiPoint) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MultiPoint) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool
	var propCPresented bool
	var propDPresented bool
	var propEPresented bool
	var propFPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "a")
				}
				if err := tlBuiltinTuple3Int.BuiltinTuple3IntReadJSON(legacyTypeNames, in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "b")
				}
				if err := tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedReadJSON(legacyTypeNames, in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			case "c":
				if propCPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "c")
				}
				if err := tlBuiltinTuple3Int32.BuiltinTuple3Int32ReadJSON(legacyTypeNames, in, &item.C); err != nil {
					return err
				}
				propCPresented = true
			case "d":
				if propDPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "d")
				}
				if err := tlBuiltinTuple3Int32Boxed.BuiltinTuple3Int32BoxedReadJSON(legacyTypeNames, in, &item.D); err != nil {
					return err
				}
				propDPresented = true
			case "e":
				if propEPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "e")
				}
				if err := tlBuiltinTuple3MyInt32.BuiltinTuple3MyInt32ReadJSON(legacyTypeNames, in, &item.E); err != nil {
					return err
				}
				propEPresented = true
			case "f":
				if propFPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "f")
				}
				if err := tlBuiltinTuple3MyInt32Boxed.BuiltinTuple3MyInt32BoxedReadJSON(legacyTypeNames, in, &item.F); err != nil {
					return err
				}
				propFPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("multiPoint", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		tlBuiltinTuple3Int.BuiltinTuple3IntReset(&item.A)
	}
	if !propBPresented {
		tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedReset(&item.B)
	}
	if !propCPresented {
		tlBuiltinTuple3Int32.BuiltinTuple3Int32Reset(&item.C)
	}
	if !propDPresented {
		tlBuiltinTuple3Int32Boxed.BuiltinTuple3Int32BoxedReset(&item.D)
	}
	if !propEPresented {
		tlBuiltinTuple3MyInt32.BuiltinTuple3MyInt32Reset(&item.E)
	}
	if !propFPresented {
		tlBuiltinTuple3MyInt32Boxed.BuiltinTuple3MyInt32BoxedReset(&item.F)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MultiPoint) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *MultiPoint) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *MultiPoint) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = tlBuiltinTuple3Int.BuiltinTuple3IntWriteJSONOpt(newTypeNames, short, w, &item.A)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = tlBuiltinTuple3IntBoxed.BuiltinTuple3IntBoxedWriteJSONOpt(newTypeNames, short, w, &item.B)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"c":`...)
	w = tlBuiltinTuple3Int32.BuiltinTuple3Int32WriteJSONOpt(newTypeNames, short, w, &item.C)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"d":`...)
	w = tlBuiltinTuple3Int32Boxed.BuiltinTuple3Int32BoxedWriteJSONOpt(newTypeNames, short, w, &item.D)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"e":`...)
	w = tlBuiltinTuple3MyInt32.BuiltinTuple3MyInt32WriteJSONOpt(newTypeNames, short, w, &item.E)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f":`...)
	w = tlBuiltinTuple3MyInt32Boxed.BuiltinTuple3MyInt32BoxedWriteJSONOpt(newTypeNames, short, w, &item.F)
	return append(w, '}')
}

func (item *MultiPoint) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MultiPoint) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("multiPoint", err.Error())
	}
	return nil
}
