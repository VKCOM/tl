// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlMaybeTest1

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlInnerMaybe"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlInnerMaybe0"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlIntBoxedMaybe"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlIntMaybe"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlTupleInt3BoxedMaybe"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlTupleInt3Maybe"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlTupleIntBoxed0BoxedMaybe"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlTupleIntBoxed3Maybe"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlVectorIntBoxedMaybe"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlVectorIntMaybe"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type MaybeTest1 struct {
	N uint32
	A tlIntMaybe.IntMaybe
	B tlIntBoxedMaybe.IntBoxedMaybe
	C tlTupleInt3Maybe.TupleInt3Maybe
	D tlTupleIntBoxed3Maybe.TupleIntBoxed3Maybe
	E tlInnerMaybe.InnerMaybe
	F tlInnerMaybe0.InnerMaybe0
	G tlVectorIntMaybe.VectorIntMaybe
	H tlVectorIntBoxedMaybe.VectorIntBoxedMaybe
	I tlTupleInt3BoxedMaybe.TupleInt3BoxedMaybe
	J tlTupleIntBoxed0BoxedMaybe.TupleIntBoxed0BoxedMaybe
}

func (MaybeTest1) TLName() string { return "maybeTest1" }
func (MaybeTest1) TLTag() uint32  { return 0xc457763c }

func (item *MaybeTest1) Reset() {
	item.N = 0
	item.A.Reset()
	item.B.Reset()
	item.C.Reset()
	item.D.Reset()
	item.E.Reset()
	item.F.Reset()
	item.G.Reset()
	item.H.Reset()
	item.I.Reset()
	item.J.Reset()
}

func (item *MaybeTest1) FillRandom(rg *basictl.RandGenerator) {
	item.N = basictl.RandomUint(rg)
	item.N = rg.LimitValue(item.N)
	item.A.FillRandom(rg)
	item.B.FillRandom(rg)
	item.C.FillRandom(rg)
	item.D.FillRandom(rg)
	item.E.FillRandom(rg, item.N)
	item.F.FillRandom(rg)
	item.G.FillRandom(rg)
	item.H.FillRandom(rg)
	item.I.FillRandom(rg)
	item.J.FillRandom(rg)
}

func (item *MaybeTest1) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.N); err != nil {
		return w, err
	}
	if w, err = item.A.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.B.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.C.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.D.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.E.ReadBoxed(w, item.N); err != nil {
		return w, err
	}
	if w, err = item.F.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.G.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.H.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.I.ReadBoxed(w); err != nil {
		return w, err
	}
	return item.J.ReadBoxed(w)
}

func (item *MaybeTest1) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *MaybeTest1) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.N)
	w = item.A.WriteBoxed(w)
	w = item.B.WriteBoxed(w)
	w = item.C.WriteBoxed(w)
	w = item.D.WriteBoxed(w)
	if w, err = item.E.WriteBoxed(w, item.N); err != nil {
		return w, err
	}
	w = item.F.WriteBoxed(w)
	w = item.G.WriteBoxed(w)
	w = item.H.WriteBoxed(w)
	w = item.I.WriteBoxed(w)
	w = item.J.WriteBoxed(w)
	return w, nil
}

func (item *MaybeTest1) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc457763c); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MaybeTest1) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *MaybeTest1) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xc457763c)
	return item.Write(w)
}

func (item MaybeTest1) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *MaybeTest1) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNPresented bool
	var propAPresented bool
	var propBPresented bool
	var propCPresented bool
	var propDPresented bool
	var rawE []byte
	var propFPresented bool
	var propGPresented bool
	var propHPresented bool
	var propIPresented bool
	var propJPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "n":
				if propNPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "n")
				}
				if err := internal.Json2ReadUint32(in, &item.N); err != nil {
					return err
				}
				propNPresented = true
			case "a":
				if propAPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "a")
				}
				if err := item.A.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "b")
				}
				if err := item.B.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propBPresented = true
			case "c":
				if propCPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "c")
				}
				if err := item.C.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propCPresented = true
			case "d":
				if propDPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "d")
				}
				if err := item.D.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propDPresented = true
			case "e":
				if rawE != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "e")
				}
				rawE = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "f":
				if propFPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "f")
				}
				if err := item.F.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propFPresented = true
			case "g":
				if propGPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "g")
				}
				if err := item.G.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propGPresented = true
			case "h":
				if propHPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "h")
				}
				if err := item.H.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propHPresented = true
			case "i":
				if propIPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "i")
				}
				if err := item.I.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propIPresented = true
			case "j":
				if propJPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("maybeTest1", "j")
				}
				if err := item.J.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propJPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("maybeTest1", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNPresented {
		item.N = 0
	}
	if !propAPresented {
		item.A.Reset()
	}
	if !propBPresented {
		item.B.Reset()
	}
	if !propCPresented {
		item.C.Reset()
	}
	if !propDPresented {
		item.D.Reset()
	}
	if !propFPresented {
		item.F.Reset()
	}
	if !propGPresented {
		item.G.Reset()
	}
	if !propHPresented {
		item.H.Reset()
	}
	if !propIPresented {
		item.I.Reset()
	}
	if !propJPresented {
		item.J.Reset()
	}
	var inEPointer *basictl.JsonLexer
	inE := basictl.JsonLexer{Data: rawE}
	if rawE != nil {
		inEPointer = &inE
	}
	if err := item.E.ReadJSON(legacyTypeNames, inEPointer, item.N); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MaybeTest1) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w)
}

func (item *MaybeTest1) WriteJSON(w []byte) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *MaybeTest1) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexN := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"n":`...)
	w = basictl.JSONWriteUint32(w, item.N)
	if (item.N != 0) == false {
		w = w[:backupIndexN]
	}
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = item.A.WriteJSONOpt(tctx, w)
	if (item.A.Ok) == false {
		w = w[:backupIndexA]
	}
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = item.B.WriteJSONOpt(tctx, w)
	if (item.B.Ok) == false {
		w = w[:backupIndexB]
	}
	backupIndexC := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"c":`...)
	w = item.C.WriteJSONOpt(tctx, w)
	if (item.C.Ok) == false {
		w = w[:backupIndexC]
	}
	backupIndexD := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"d":`...)
	w = item.D.WriteJSONOpt(tctx, w)
	if (item.D.Ok) == false {
		w = w[:backupIndexD]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"e":`...)
	if w, err = item.E.WriteJSONOpt(tctx, w, item.N); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f":`...)
	w = item.F.WriteJSONOpt(tctx, w)
	backupIndexG := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"g":`...)
	w = item.G.WriteJSONOpt(tctx, w)
	if (item.G.Ok) == false {
		w = w[:backupIndexG]
	}
	backupIndexH := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"h":`...)
	w = item.H.WriteJSONOpt(tctx, w)
	if (item.H.Ok) == false {
		w = w[:backupIndexH]
	}
	backupIndexI := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"i":`...)
	w = item.I.WriteJSONOpt(tctx, w)
	if (item.I.Ok) == false {
		w = w[:backupIndexI]
	}
	backupIndexJ := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"j":`...)
	w = item.J.WriteJSONOpt(tctx, w)
	if (item.J.Ok) == false {
		w = w[:backupIndexJ]
	}
	return append(w, '}'), nil
}

func (item *MaybeTest1) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *MaybeTest1) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("maybeTest1", err.Error())
	}
	return nil
}

func (item *MaybeTest1) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.N
	if item.N != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.A
	currentPosition := len(sizes)
	if item.A.Ok {
		sizes = item.A.CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.B
	currentPosition = len(sizes)
	if item.B.Ok {
		sizes = item.B.CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.C
	currentPosition = len(sizes)
	if item.C.Ok {
		sizes = item.C.CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.D
	currentPosition = len(sizes)
	if item.D.Ok {
		sizes = item.D.CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.E
	currentPosition = len(sizes)
	sizes = item.E.CalculateLayout(sizes, item.N)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.F
	currentPosition = len(sizes)
	sizes = item.F.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.G
	currentPosition = len(sizes)
	if item.G.Ok {
		sizes = item.G.CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 2
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.H
	currentPosition = len(sizes)
	if item.H.Ok {
		sizes = item.H.CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 2
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.I
	currentPosition = len(sizes)
	if item.I.Ok {
		sizes = item.I.CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 2
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.J
	currentPosition = len(sizes)
	if item.J.Ok {
		sizes = item.J.CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 2
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *MaybeTest1) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.N
	if item.N != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.N)
		}
	}
	// write item.A
	if item.A.Ok {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 2)
			w, sizes = item.A.InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.B
	if item.B.Ok {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 3)
			w, sizes = item.B.InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.C
	if item.C.Ok {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 4)
			w, sizes = item.C.InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.D
	if item.D.Ok {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 5)
			w, sizes = item.D.InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.E
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 6)
		w, sizes = item.E.InternalWriteTL2(w, sizes, item.N)
	} else {
		sizes = sizes[1:]
	}
	// write item.F
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 7)
		w, sizes = item.F.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}

	// add byte for fields with index 8..15
	w[currentBlockPosition] = currentBlock
	currentBlock = 0
	if serializedSize != currentSize {
		currentBlockPosition = len(w)
		w = append(w, 0)
		serializedSize += 1
	} else {
		return w, sizes
	}
	// write item.G
	if item.G.Ok {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 0)
			w, sizes = item.G.InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.H
	if item.H.Ok {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 1)
			w, sizes = item.H.InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.I
	if item.I.Ok {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 2)
			w, sizes = item.I.InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.J
	if item.J.Ok {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 3)
			w, sizes = item.J.InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *MaybeTest1) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *MaybeTest1) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.N
	if block&(1<<1) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.N); err != nil {
			return currentR, err
		}
	} else {
		item.N = 0
	}

	// read item.A
	if block&(1<<2) != 0 {
		if currentR, err = item.A.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.A.Reset()
	}

	// read item.B
	if block&(1<<3) != 0 {
		if currentR, err = item.B.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.B.Reset()
	}

	// read item.C
	if block&(1<<4) != 0 {
		if currentR, err = item.C.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.C.Reset()
	}

	// read item.D
	if block&(1<<5) != 0 {
		if currentR, err = item.D.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.D.Reset()
	}

	// read item.E
	if block&(1<<6) != 0 {
		if currentR, err = item.E.InternalReadTL2(currentR, item.N); err != nil {
			return currentR, err
		}
	} else {
		item.E.Reset()
	}

	// read item.F
	if block&(1<<7) != 0 {
		if currentR, err = item.F.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.F.Reset()
	}

	// read next block for fields 8..15
	if len(currentR) > 0 {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return currentR, err
		}
	} else {
		block = 0
	}

	// read item.G
	if block&(1<<0) != 0 {
		if currentR, err = item.G.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.G.Reset()
	}

	// read item.H
	if block&(1<<1) != 0 {
		if currentR, err = item.H.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.H.Reset()
	}

	// read item.I
	if block&(1<<2) != 0 {
		if currentR, err = item.I.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.I.Reset()
	}

	// read item.J
	if block&(1<<3) != 0 {
		if currentR, err = item.J.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.J.Reset()
	}

	return r, nil
}

func (item *MaybeTest1) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
