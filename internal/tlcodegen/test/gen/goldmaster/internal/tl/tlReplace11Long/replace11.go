// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlReplace11Long

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinTupleReplace11ElemLong"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace11ElemLong"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Replace11Long struct {
	K uint32
	A []tlReplace11ElemLong.Replace11ElemLong
}

func (Replace11Long) TLName() string { return "replace11" }
func (Replace11Long) TLTag() uint32  { return 0xbf5944e6 }

func (item *Replace11Long) Reset() {
	item.K = 0
	item.A = item.A[:0]
}

func (item *Replace11Long) FillRandom(rg *basictl.RandGenerator, nat_n uint32) {
	item.K = basictl.RandomUint(rg)
	item.K = rg.LimitValue(item.K)
	tlBuiltinTupleReplace11ElemLong.BuiltinTupleReplace11ElemLongFillRandom(rg, &item.A, item.K, nat_n, item.K)
}

func (item *Replace11Long) Read(w []byte, nat_n uint32) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.K); err != nil {
		return w, err
	}
	return tlBuiltinTupleReplace11ElemLong.BuiltinTupleReplace11ElemLongRead(w, &item.A, item.K, nat_n, item.K)
}

// This method is general version of Write, use it instead!
func (item *Replace11Long) WriteGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.Write(w, nat_n)
}

func (item *Replace11Long) Write(w []byte, nat_n uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.K)
	if w, err = tlBuiltinTupleReplace11ElemLong.BuiltinTupleReplace11ElemLongWrite(w, item.A, item.K, nat_n, item.K); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Replace11Long) ReadBoxed(w []byte, nat_n uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xbf5944e6); err != nil {
		return w, err
	}
	return item.Read(w, nat_n)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Replace11Long) WriteBoxedGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_n)
}

func (item *Replace11Long) WriteBoxed(w []byte, nat_n uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xbf5944e6)
	return item.Write(w, nat_n)
}

func (item *Replace11Long) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_n uint32) error {
	var propKPresented bool
	var rawA []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "k":
				if propKPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace11", "k")
				}
				if err := internal.Json2ReadUint32(in, &item.K); err != nil {
					return err
				}
				propKPresented = true
			case "a":
				if rawA != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace11", "a")
				}
				rawA = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("replace11", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKPresented {
		item.K = 0
	}
	var inAPointer *basictl.JsonLexer
	inA := basictl.JsonLexer{Data: rawA}
	if rawA != nil {
		inAPointer = &inA
	}
	if err := tlBuiltinTupleReplace11ElemLong.BuiltinTupleReplace11ElemLongReadJSON(legacyTypeNames, inAPointer, &item.A, item.K, nat_n, item.K); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Replace11Long) WriteJSONGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n)
}

func (item *Replace11Long) WriteJSON(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n)
}
func (item *Replace11Long) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_n uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexK := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"k":`...)
	w = basictl.JSONWriteUint32(w, item.K)
	if (item.K != 0) == false {
		w = w[:backupIndexK]
	}
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	if w, err = tlBuiltinTupleReplace11ElemLong.BuiltinTupleReplace11ElemLongWriteJSONOpt(newTypeNames, short, w, item.A, item.K, nat_n, item.K); err != nil {
		return w, err
	}
	if (len(item.A) != 0) == false {
		w = w[:backupIndexA]
	}
	return append(w, '}'), nil
}
