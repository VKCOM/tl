// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlReplace

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace1"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace13"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace2"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace3"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace4"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace43"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace5"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlReplace6"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Replace struct {
	N  uint32
	A  tlReplace1.Replace1
	A1 tlReplace13.Replace13
	B  tlReplace2.Replace2
	C  tlReplace3.Replace3
	D  tlReplace4.Replace4
	D1 tlReplace43.Replace43
	E  tlReplace5.Replace5
	G  tlReplace6.Replace6
}

func (Replace) TLName() string { return "replace" }
func (Replace) TLTag() uint32  { return 0xebb26b29 }

func (item *Replace) Reset() {
	item.N = 0
	item.A.Reset()
	item.A1.Reset()
	item.B.Reset()
	item.C.Reset()
	item.D.Reset()
	item.D1.Reset()
	item.E.Reset()
	item.G.Reset()
}

func (item *Replace) FillRandom(rg *basictl.RandGenerator) {
	item.N = basictl.RandomUint(rg)
	item.N = rg.LimitValue(item.N)
	item.A.FillRandom(rg, item.N)
	item.A1.FillRandom(rg)
	item.B.FillRandom(rg)
	item.C.FillRandom(rg)
	item.D.FillRandom(rg, item.N)
	item.D1.FillRandom(rg)
	item.E.FillRandom(rg)
	item.G.FillRandom(rg)
}

func (item *Replace) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.N); err != nil {
		return w, err
	}
	if w, err = item.A.Read(w, item.N); err != nil {
		return w, err
	}
	if w, err = item.A1.Read(w); err != nil {
		return w, err
	}
	if w, err = item.B.Read(w); err != nil {
		return w, err
	}
	if w, err = item.C.Read(w); err != nil {
		return w, err
	}
	if w, err = item.D.Read(w, item.N); err != nil {
		return w, err
	}
	if w, err = item.D1.Read(w); err != nil {
		return w, err
	}
	if w, err = item.E.Read(w); err != nil {
		return w, err
	}
	return item.G.Read(w)
}

func (item *Replace) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *Replace) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.N)
	if w, err = item.A.Write(w, item.N); err != nil {
		return w, err
	}
	w = item.A1.Write(w)
	if w, err = item.B.Write(w); err != nil {
		return w, err
	}
	w = item.C.Write(w)
	if w, err = item.D.Write(w, item.N); err != nil {
		return w, err
	}
	w = item.D1.Write(w)
	if w, err = item.E.Write(w); err != nil {
		return w, err
	}
	w = item.G.Write(w)
	return w, nil
}

func (item *Replace) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xebb26b29); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Replace) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *Replace) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xebb26b29)
	return item.Write(w)
}

func (item Replace) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *Replace) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNPresented bool
	var rawA []byte
	var propA1Presented bool
	var propBPresented bool
	var propCPresented bool
	var rawD []byte
	var propD1Presented bool
	var propEPresented bool
	var propGPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "n":
				if propNPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace", "n")
				}
				if err := internal.Json2ReadUint32(in, &item.N); err != nil {
					return err
				}
				propNPresented = true
			case "a":
				if rawA != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace", "a")
				}
				rawA = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "a1":
				if propA1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace", "a1")
				}
				if err := item.A1.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propA1Presented = true
			case "b":
				if propBPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace", "b")
				}
				if err := item.B.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propBPresented = true
			case "c":
				if propCPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace", "c")
				}
				if err := item.C.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propCPresented = true
			case "d":
				if rawD != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace", "d")
				}
				rawD = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "d1":
				if propD1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace", "d1")
				}
				if err := item.D1.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propD1Presented = true
			case "e":
				if propEPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace", "e")
				}
				if err := item.E.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propEPresented = true
			case "g":
				if propGPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("replace", "g")
				}
				if err := item.G.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propGPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("replace", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNPresented {
		item.N = 0
	}
	if !propA1Presented {
		item.A1.Reset()
	}
	if !propBPresented {
		item.B.Reset()
	}
	if !propCPresented {
		item.C.Reset()
	}
	if !propD1Presented {
		item.D1.Reset()
	}
	if !propEPresented {
		item.E.Reset()
	}
	if !propGPresented {
		item.G.Reset()
	}
	var inAPointer *basictl.JsonLexer
	inA := basictl.JsonLexer{Data: rawA}
	if rawA != nil {
		inAPointer = &inA
	}
	if err := item.A.ReadJSON(legacyTypeNames, inAPointer, item.N); err != nil {
		return err
	}

	var inDPointer *basictl.JsonLexer
	inD := basictl.JsonLexer{Data: rawD}
	if rawD != nil {
		inDPointer = &inD
	}
	if err := item.D.ReadJSON(legacyTypeNames, inDPointer, item.N); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Replace) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w)
}

func (item *Replace) WriteJSON(w []byte) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *Replace) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexN := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"n":`...)
	w = basictl.JSONWriteUint32(w, item.N)
	if (item.N != 0) == false {
		w = w[:backupIndexN]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	if w, err = item.A.WriteJSONOpt(tctx, w, item.N); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a1":`...)
	w = item.A1.WriteJSONOpt(tctx, w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	if w, err = item.B.WriteJSONOpt(tctx, w); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"c":`...)
	w = item.C.WriteJSONOpt(tctx, w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"d":`...)
	if w, err = item.D.WriteJSONOpt(tctx, w, item.N); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"d1":`...)
	w = item.D1.WriteJSONOpt(tctx, w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"e":`...)
	if w, err = item.E.WriteJSONOpt(tctx, w); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"g":`...)
	w = item.G.WriteJSONOpt(tctx, w)
	return append(w, '}'), nil
}

func (item *Replace) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *Replace) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("replace", err.Error())
	}
	return nil
}

func (item *Replace) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.N
	if item.N != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.A
	currentPosition := len(sizes)
	sizes = item.A.CalculateLayout(sizes, item.N)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.A1
	currentPosition = len(sizes)
	sizes = item.A1.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.B
	currentPosition = len(sizes)
	sizes = item.B.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.C
	currentPosition = len(sizes)
	sizes = item.C.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.D
	currentPosition = len(sizes)
	sizes = item.D.CalculateLayout(sizes, item.N)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.D1
	currentPosition = len(sizes)
	sizes = item.D1.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.E
	currentPosition = len(sizes)
	sizes = item.E.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 2
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.G
	currentPosition = len(sizes)
	sizes = item.G.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 2
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *Replace) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.N
	if item.N != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.N)
		}
	}
	// write item.A
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = item.A.InternalWriteTL2(w, sizes, item.N)
	} else {
		sizes = sizes[1:]
	}
	// write item.A1
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 3)
		w, sizes = item.A1.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.B
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 4)
		w, sizes = item.B.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.C
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 5)
		w, sizes = item.C.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.D
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 6)
		w, sizes = item.D.InternalWriteTL2(w, sizes, item.N)
	} else {
		sizes = sizes[1:]
	}
	// write item.D1
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 7)
		w, sizes = item.D1.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}

	// add byte for fields with index 8..15
	w[currentBlockPosition] = currentBlock
	currentBlock = 0
	if serializedSize != currentSize {
		currentBlockPosition = len(w)
		w = append(w, 0)
		serializedSize += 1
	} else {
		return w, sizes
	}
	// write item.E
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 0)
		w, sizes = item.E.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.G
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.G.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *Replace) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *Replace) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.N
	if block&(1<<1) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.N); err != nil {
			return currentR, err
		}
	} else {
		item.N = 0
	}

	// read item.A
	if block&(1<<2) != 0 {
		if currentR, err = item.A.InternalReadTL2(currentR, item.N); err != nil {
			return currentR, err
		}
	} else {
		item.A.Reset()
	}

	// read item.A1
	if block&(1<<3) != 0 {
		if currentR, err = item.A1.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.A1.Reset()
	}

	// read item.B
	if block&(1<<4) != 0 {
		if currentR, err = item.B.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.B.Reset()
	}

	// read item.C
	if block&(1<<5) != 0 {
		if currentR, err = item.C.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.C.Reset()
	}

	// read item.D
	if block&(1<<6) != 0 {
		if currentR, err = item.D.InternalReadTL2(currentR, item.N); err != nil {
			return currentR, err
		}
	} else {
		item.D.Reset()
	}

	// read item.D1
	if block&(1<<7) != 0 {
		if currentR, err = item.D1.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.D1.Reset()
	}

	// read next block for fields 8..15
	if len(currentR) > 0 {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return currentR, err
		}
	} else {
		block = 0
	}

	// read item.E
	if block&(1<<0) != 0 {
		if currentR, err = item.E.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.E.Reset()
	}

	// read item.G
	if block&(1<<1) != 0 {
		if currentR, err = item.G.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.G.Reset()
	}

	return r, nil
}

func (item *Replace) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
