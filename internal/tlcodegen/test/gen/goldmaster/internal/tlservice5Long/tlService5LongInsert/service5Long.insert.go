// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService5LongInsert

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/cycle_98d4570147919cfd6f6ebfc47c3e10a0"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service5LongInsert struct {
	Flags uint32
	// Persistent (TrueType) // Conditional: item.Flags.0
}

func (Service5LongInsert) TLName() string { return "service5Long.insert" }
func (Service5LongInsert) TLTag() uint32  { return 0x7cf362bb }

func (item *Service5LongInsert) SetPersistent(v bool) {
	if v {
		item.Flags |= 1 << 0
	} else {
		item.Flags &^= 1 << 0
	}
}
func (item *Service5LongInsert) IsSetPersistent() bool { return item.Flags&(1<<0) != 0 }

func (item *Service5LongInsert) Reset() {
	item.Flags = 0
}

func (item *Service5LongInsert) FillRandom(rg *basictl.RandGenerator) {
	var maskFlags uint32
	maskFlags = basictl.RandomUint(rg)
	item.Flags = 0
	if maskFlags&(1<<0) != 0 {
		item.Flags |= (1 << 0)
	}
}

func (item *Service5LongInsert) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.Flags); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Service5LongInsert) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Service5LongInsert) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.Flags)
	return w
}

func (item *Service5LongInsert) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x7cf362bb); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Service5LongInsert) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service5LongInsert) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x7cf362bb)
	return item.Write(w)
}

func (item *Service5LongInsert) ReadResult(w []byte, ret *cycle_98d4570147919cfd6f6ebfc47c3e10a0.Service5LongOutput) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *Service5LongInsert) WriteResult(w []byte, ret cycle_98d4570147919cfd6f6ebfc47c3e10a0.Service5LongOutput) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *Service5LongInsert) ReadResultTL2(w []byte, ret *cycle_98d4570147919cfd6f6ebfc47c3e10a0.Service5LongOutput) (_ []byte, err error) {
	if w, err = ret.ReadTL2(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Service5LongInsert) WriteResultTL2(w []byte, sizes []int, ret cycle_98d4570147919cfd6f6ebfc47c3e10a0.Service5LongOutput) (_ []byte, _ []int, err error) {
	w, sizes = ret.InternalWriteTL2(w, sizes)
	return w, sizes, nil
}

func (item *Service5LongInsert) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *cycle_98d4570147919cfd6f6ebfc47c3e10a0.Service5LongOutput) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *Service5LongInsert) WriteResultJSON(w []byte, ret cycle_98d4570147919cfd6f6ebfc47c3e10a0.Service5LongOutput) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *Service5LongInsert) writeResultJSON(newTypeNames bool, short bool, w []byte, ret cycle_98d4570147919cfd6f6ebfc47c3e10a0.Service5LongOutput) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *Service5LongInsert) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret cycle_98d4570147919cfd6f6ebfc47c3e10a0.Service5LongOutput
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *Service5LongInsert) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret cycle_98d4570147919cfd6f6ebfc47c3e10a0.Service5LongOutput
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *Service5LongInsert) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret cycle_98d4570147919cfd6f6ebfc47c3e10a0.Service5LongOutput
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item Service5LongInsert) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service5LongInsert) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFlagsPresented bool
	var trueTypePersistentPresented bool
	var trueTypePersistentValue bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "flags":
				if propFlagsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service5Long.insert", "flags")
				}
				if err := internal.Json2ReadUint32(in, &item.Flags); err != nil {
					return err
				}
				propFlagsPresented = true
			case "persistent":
				if trueTypePersistentPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service5Long.insert", "persistent")
				}
				if err := internal.Json2ReadBool(in, &trueTypePersistentValue); err != nil {
					return err
				}
				trueTypePersistentPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("service5Long.insert", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFlagsPresented {
		item.Flags = 0
	}
	if trueTypePersistentPresented {
		if trueTypePersistentValue {
			item.Flags |= 1 << 0
		}
	}
	// tries to set bit to zero if it is 1
	if trueTypePersistentPresented && !trueTypePersistentValue && (item.Flags&(1<<0) != 0) {
		return internal.ErrorInvalidJSON("service5Long.insert", "fieldmask bit flags.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service5LongInsert) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Service5LongInsert) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service5LongInsert) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFlags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"flags":`...)
	w = basictl.JSONWriteUint32(w, item.Flags)
	if (item.Flags != 0) == false {
		w = w[:backupIndexFlags]
	}
	if item.Flags&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"persistent":true`...)
	}
	return append(w, '}')
}

func (item *Service5LongInsert) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service5LongInsert) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service5Long.insert", err.Error())
	}
	return nil
}

func (item *Service5LongInsert) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Flags
	if item.Flags != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *Service5LongInsert) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Flags
	if item.Flags != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.Flags)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *Service5LongInsert) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *Service5LongInsert) ReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.Flags
		if block&(1<<1) != 0 {
			if r, err = basictl.NatRead(r, &item.Flags); err != nil {
				return r, err
			}
		} else {
			item.Flags = 0
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}
