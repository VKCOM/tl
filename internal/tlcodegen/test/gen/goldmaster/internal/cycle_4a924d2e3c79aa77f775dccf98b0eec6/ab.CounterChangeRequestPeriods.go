// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package cycle_4a924d2e3c79aa77f775dccf98b0eec6

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal/tl/tlBuiltinVectorInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

var _AbCounterChangeRequestPeriods = [2]internal.UnionElement{
	{TLTag: 0x14a35d80, TLName: "ab.counterChangeRequestPeriodsMany", TLString: "ab.counterChangeRequestPeriodsMany#14a35d80"},
	{TLTag: 0xd9c36de5, TLName: "ab.counterChangeRequestPeriodsOne", TLString: "ab.counterChangeRequestPeriodsOne#d9c36de5"},
}

type AbCounterChangeRequestPeriods struct {
	valueMany AbCounterChangeRequestPeriodsMany
	valueOne  AbCounterChangeRequestPeriodsOne
	index     int
}

func (item AbCounterChangeRequestPeriods) TLName() string {
	return _AbCounterChangeRequestPeriods[item.index].TLName
}
func (item AbCounterChangeRequestPeriods) TLTag() uint32 {
	return _AbCounterChangeRequestPeriods[item.index].TLTag
}

func (item *AbCounterChangeRequestPeriods) Reset() { item.ResetToMany() }
func (item *AbCounterChangeRequestPeriods) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 2
	switch index {
	case 0:
		item.index = 0
		item.valueMany.FillRandom(rg)
	case 1:
		item.index = 1
		item.valueOne.FillRandom(rg)
	default:
	}
}

func (item *AbCounterChangeRequestPeriods) IsMany() bool { return item.index == 0 }

func (item *AbCounterChangeRequestPeriods) AsMany() (*AbCounterChangeRequestPeriodsMany, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueMany, true
}
func (item *AbCounterChangeRequestPeriods) ResetToMany() *AbCounterChangeRequestPeriodsMany {
	item.index = 0
	item.valueMany.Reset()
	return &item.valueMany
}
func (item *AbCounterChangeRequestPeriods) SetMany(value AbCounterChangeRequestPeriodsMany) {
	item.index = 0
	item.valueMany = value
}

func (item *AbCounterChangeRequestPeriods) IsOne() bool { return item.index == 1 }

func (item *AbCounterChangeRequestPeriods) AsOne() (*AbCounterChangeRequestPeriodsOne, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueOne, true
}
func (item *AbCounterChangeRequestPeriods) ResetToOne() *AbCounterChangeRequestPeriodsOne {
	item.index = 1
	item.valueOne.Reset()
	return &item.valueOne
}
func (item *AbCounterChangeRequestPeriods) SetOne(value AbCounterChangeRequestPeriodsOne) {
	item.index = 1
	item.valueOne = value
}

func (item *AbCounterChangeRequestPeriods) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x14a35d80:
		item.index = 0
		return item.valueMany.Read(w)
	case 0xd9c36de5:
		item.index = 1
		return item.valueOne.Read(w)
	default:
		return w, internal.ErrorInvalidUnionTag("ab.CounterChangeRequestPeriods", tag)
	}
}

func (item *AbCounterChangeRequestPeriods) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AbCounterChangeRequestPeriods) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _AbCounterChangeRequestPeriods[item.index].TLTag)
	switch item.index {
	case 0:
		w = item.valueMany.Write(w)
	case 1:
		w = item.valueOne.Write(w)
	}
	return w
}

func (item *AbCounterChangeRequestPeriods) CalculateLayout(sizes []int) []int {
	switch item.index {
	case 0:
		sizes = item.valueMany.CalculateLayout(sizes)
	case 1:
		sizes = item.valueOne.CalculateLayout(sizes)
	}
	return sizes
}

func (item *AbCounterChangeRequestPeriods) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	switch item.index {
	case 0:
		w, sizes = item.valueMany.InternalWriteTL2(w, sizes)
	case 1:
		w, sizes = item.valueOne.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func (item *AbCounterChangeRequestPeriods) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	if currentSize == 0 {
		item.index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, item.index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	switch item.index {
	case 0:
		if currentR, err = item.valueMany.InternalReadTL2(currentR, block); err != nil {
			return currentR, err
		}
	case 1:
		if currentR, err = item.valueOne.InternalReadTL2(currentR, block); err != nil {
			return currentR, err
		}
	}
	return r, nil
}
func (item *AbCounterChangeRequestPeriods) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *AbCounterChangeRequestPeriods) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) ([]byte, error) {
	return item.InternalReadTL2(r)
}

func (item *AbCounterChangeRequestPeriods) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *AbCounterChangeRequestPeriods) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	_tag, _value, err := internal.Json2ReadUnion("ab.CounterChangeRequestPeriods", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "ab.counterChangeRequestPeriodsMany#14a35d80", "ab.counterChangeRequestPeriodsMany", "#14a35d80":
		if tctx.IsTL2 && _tag != "ab.counterChangeRequestPeriodsMany" {
			return internal.ErrorInvalidUnionLegacyTagJSON("ab.CounterChangeRequestPeriods", _tag)
		}
		if !tctx.LegacyTypeNames && _tag == "ab.counterChangeRequestPeriodsMany#14a35d80" {
			return internal.ErrorInvalidUnionLegacyTagJSON("ab.CounterChangeRequestPeriods", "ab.counterChangeRequestPeriodsMany#14a35d80")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueMany.ReadJSONGeneral(tctx, in2Pointer); err != nil {
			return err
		}
	case "ab.counterChangeRequestPeriodsOne#d9c36de5", "ab.counterChangeRequestPeriodsOne", "#d9c36de5":
		if tctx.IsTL2 && _tag != "ab.counterChangeRequestPeriodsOne" {
			return internal.ErrorInvalidUnionLegacyTagJSON("ab.CounterChangeRequestPeriods", _tag)
		}
		if !tctx.LegacyTypeNames && _tag == "ab.counterChangeRequestPeriodsOne#d9c36de5" {
			return internal.ErrorInvalidUnionLegacyTagJSON("ab.CounterChangeRequestPeriods", "ab.counterChangeRequestPeriodsOne#d9c36de5")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueOne.ReadJSONGeneral(tctx, in2Pointer); err != nil {
			return err
		}
	default:
		return internal.ErrorInvalidUnionTagJSON("ab.CounterChangeRequestPeriods", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AbCounterChangeRequestPeriods) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) ([]byte, error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *AbCounterChangeRequestPeriods) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *AbCounterChangeRequestPeriods) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	switch item.index {
	case 0:
		if tctx.IsTL2 {
			w = append(w, `{"type":"ab.counterChangeRequestPeriodsMany"`...)
		} else {
			if tctx.LegacyTypeNames {
				w = append(w, `{"type":"ab.counterChangeRequestPeriodsMany#14a35d80"`...)
			} else {
				w = append(w, `{"type":"ab.counterChangeRequestPeriodsMany"`...)
			}
		}
		w = append(w, `,"value":`...)
		w = item.valueMany.WriteJSONOpt(tctx, w)
		return append(w, '}')
	case 1:
		if tctx.IsTL2 {
			w = append(w, `{"type":"ab.counterChangeRequestPeriodsOne"`...)
		} else {
			if tctx.LegacyTypeNames {
				w = append(w, `{"type":"ab.counterChangeRequestPeriodsOne#d9c36de5"`...)
			} else {
				w = append(w, `{"type":"ab.counterChangeRequestPeriodsOne"`...)
			}
		}
		w = append(w, `,"value":`...)
		w = item.valueOne.WriteJSONOpt(tctx, w)
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item AbCounterChangeRequestPeriods) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AbCounterChangeRequestPeriods) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AbCounterChangeRequestPeriods) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("ab.CounterChangeRequestPeriods", err.Error())
	}
	return nil
}

func (item AbCounterChangeRequestPeriodsMany) AsUnion() AbCounterChangeRequestPeriods {
	var ret AbCounterChangeRequestPeriods
	ret.SetMany(item)
	return ret
}

type AbCounterChangeRequestPeriodsMany struct {
	ObjectsPeridos []int32
}

func (AbCounterChangeRequestPeriodsMany) TLName() string { return "ab.counterChangeRequestPeriodsMany" }
func (AbCounterChangeRequestPeriodsMany) TLTag() uint32  { return 0x14a35d80 }

func (item *AbCounterChangeRequestPeriodsMany) Reset() {
	item.ObjectsPeridos = item.ObjectsPeridos[:0]
}

func (item *AbCounterChangeRequestPeriodsMany) FillRandom(rg *basictl.RandGenerator) {
	tlBuiltinVectorInt.BuiltinVectorIntFillRandom(rg, &item.ObjectsPeridos)
}

func (item *AbCounterChangeRequestPeriodsMany) Read(w []byte) (_ []byte, err error) {
	return tlBuiltinVectorInt.BuiltinVectorIntRead(w, &item.ObjectsPeridos)
}

func (item *AbCounterChangeRequestPeriodsMany) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *AbCounterChangeRequestPeriodsMany) Write(w []byte) []byte {
	w = tlBuiltinVectorInt.BuiltinVectorIntWrite(w, item.ObjectsPeridos)
	return w
}

func (item *AbCounterChangeRequestPeriodsMany) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x14a35d80); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *AbCounterChangeRequestPeriodsMany) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AbCounterChangeRequestPeriodsMany) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x14a35d80)
	return item.Write(w)
}

func (item AbCounterChangeRequestPeriodsMany) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AbCounterChangeRequestPeriodsMany) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *AbCounterChangeRequestPeriodsMany) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propObjectsPeridosPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "objects_peridos":
				if propObjectsPeridosPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("ab.counterChangeRequestPeriodsMany", "objects_peridos")
				}
				if err := tlBuiltinVectorInt.BuiltinVectorIntReadJSONGeneral(tctx, in, &item.ObjectsPeridos); err != nil {
					return err
				}
				propObjectsPeridosPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("ab.counterChangeRequestPeriodsMany", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propObjectsPeridosPresented {
		item.ObjectsPeridos = item.ObjectsPeridos[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AbCounterChangeRequestPeriodsMany) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *AbCounterChangeRequestPeriodsMany) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *AbCounterChangeRequestPeriodsMany) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexObjectsPeridos := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"objects_peridos":`...)
	w = tlBuiltinVectorInt.BuiltinVectorIntWriteJSONOpt(tctx, w, item.ObjectsPeridos)
	if (len(item.ObjectsPeridos) != 0) == false {
		w = w[:backupIndexObjectsPeridos]
	}
	return append(w, '}')
}

func (item *AbCounterChangeRequestPeriodsMany) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AbCounterChangeRequestPeriodsMany) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("ab.counterChangeRequestPeriodsMany", err.Error())
	}
	return nil
}

func (item *AbCounterChangeRequestPeriodsMany) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.ObjectsPeridos
	currentPosition := len(sizes)
	if len(item.ObjectsPeridos) != 0 {
		sizes = tlBuiltinVectorInt.BuiltinVectorIntCalculateLayout(sizes, &item.ObjectsPeridos)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *AbCounterChangeRequestPeriodsMany) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.ObjectsPeridos
	if len(item.ObjectsPeridos) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 1)
			w, sizes = tlBuiltinVectorInt.BuiltinVectorIntInternalWriteTL2(w, sizes, &item.ObjectsPeridos)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *AbCounterChangeRequestPeriodsMany) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *AbCounterChangeRequestPeriodsMany) InternalReadTL2(r []byte, block byte) (_ []byte, err error) {
	currentR := r

	// read item.ObjectsPeridos
	if block&(1<<1) != 0 {
		if currentR, err = tlBuiltinVectorInt.BuiltinVectorIntInternalReadTL2(currentR, &item.ObjectsPeridos); err != nil {
			return currentR, err
		}
	} else {
		item.ObjectsPeridos = item.ObjectsPeridos[:0]
	}

	return r, nil
}

func (item *AbCounterChangeRequestPeriodsMany) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	var index int
	if currentSize == 0 {
		index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			index = 0
		}
	}
	if index != 0 {
		return r, basictl.TL2Error("unexpected constructor number %d, instead of %d", index, 0)
	}
	_, err = item.InternalReadTL2(currentR, block)
	return r, err
}

func (item AbCounterChangeRequestPeriodsOne) AsUnion() AbCounterChangeRequestPeriods {
	var ret AbCounterChangeRequestPeriods
	ret.SetOne(item)
	return ret
}

type AbCounterChangeRequestPeriodsOne struct {
	Period int64
}

func (AbCounterChangeRequestPeriodsOne) TLName() string { return "ab.counterChangeRequestPeriodsOne" }
func (AbCounterChangeRequestPeriodsOne) TLTag() uint32  { return 0xd9c36de5 }

func (item *AbCounterChangeRequestPeriodsOne) Reset() {
	item.Period = 0
}

func (item *AbCounterChangeRequestPeriodsOne) FillRandom(rg *basictl.RandGenerator) {
	item.Period = basictl.RandomLong(rg)
}

func (item *AbCounterChangeRequestPeriodsOne) Read(w []byte) (_ []byte, err error) {
	return basictl.LongRead(w, &item.Period)
}

func (item *AbCounterChangeRequestPeriodsOne) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *AbCounterChangeRequestPeriodsOne) Write(w []byte) []byte {
	w = basictl.LongWrite(w, item.Period)
	return w
}

func (item *AbCounterChangeRequestPeriodsOne) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xd9c36de5); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *AbCounterChangeRequestPeriodsOne) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AbCounterChangeRequestPeriodsOne) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xd9c36de5)
	return item.Write(w)
}

func (item AbCounterChangeRequestPeriodsOne) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AbCounterChangeRequestPeriodsOne) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *AbCounterChangeRequestPeriodsOne) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propPeriodPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "period":
				if propPeriodPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("ab.counterChangeRequestPeriodsOne", "period")
				}
				if err := internal.Json2ReadInt64(in, &item.Period); err != nil {
					return err
				}
				propPeriodPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("ab.counterChangeRequestPeriodsOne", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propPeriodPresented {
		item.Period = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AbCounterChangeRequestPeriodsOne) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *AbCounterChangeRequestPeriodsOne) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *AbCounterChangeRequestPeriodsOne) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexPeriod := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"period":`...)
	w = basictl.JSONWriteInt64(w, item.Period)
	if (item.Period != 0) == false {
		w = w[:backupIndexPeriod]
	}
	return append(w, '}')
}

func (item *AbCounterChangeRequestPeriodsOne) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AbCounterChangeRequestPeriodsOne) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("ab.counterChangeRequestPeriodsOne", err.Error())
	}
	return nil
}

func (item *AbCounterChangeRequestPeriodsOne) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// add constructor No for union type in case of non first option
	lastUsedByte = 1
	currentSize += basictl.TL2CalculateSize(1)

	// calculate layout for item.Period
	if item.Period != 0 {

		lastUsedByte = 1
		currentSize += 8
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *AbCounterChangeRequestPeriodsOne) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// add constructor No for union type in case of non first option
	currentBlock |= (1 << 0)

	w = basictl.TL2WriteSize(w, 1)
	serializedSize += basictl.TL2CalculateSize(1)
	// write item.Period
	if item.Period != 0 {
		serializedSize += 8
		if 8 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.LongWrite(w, item.Period)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *AbCounterChangeRequestPeriodsOne) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *AbCounterChangeRequestPeriodsOne) InternalReadTL2(r []byte, block byte) (_ []byte, err error) {
	currentR := r

	// read item.Period
	if block&(1<<1) != 0 {
		if currentR, err = basictl.LongRead(currentR, &item.Period); err != nil {
			return currentR, err
		}
	} else {
		item.Period = 0
	}

	return r, nil
}

func (item *AbCounterChangeRequestPeriodsOne) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	var index int
	if currentSize == 0 {
		index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			index = 0
		}
	}
	if index != 1 {
		return r, basictl.TL2Error("unexpected constructor number %d, instead of %d", index, 1)
	}
	_, err = item.InternalReadTL2(currentR, block)
	return r, err
}
