// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package cycle_1cc29369792b96d4551962ce180c8b39

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/goldmaster/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

var _MyNat2 = [2]internal.UnionElement{
	{TLTag: 0x8d868379, TLName: "myZero", TLString: "myZero#8d868379"},
	{TLTag: 0x79e0c6df, TLName: "myPlus", TLString: "myPlus#79e0c6df"},
}

type MyNat2 struct {
	valueMyPlus *MyPlus
	index       int
}

func (item MyNat2) TLName() string { return _MyNat2[item.index].TLName }
func (item MyNat2) TLTag() uint32  { return _MyNat2[item.index].TLTag }

func (item *MyNat2) Reset() { item.index = 0 }
func (item *MyNat2) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 2
	switch index {
	case 0:
		item.index = 0
	case 1:
		item.index = 1
		if item.valueMyPlus == nil {
			var value MyPlus
			value.FillRandom(rg)
			item.valueMyPlus = &value
		}
	default:
	}
}

func (item *MyNat2) IsMyZero() bool { return item.index == 0 }

func (item *MyNat2) AsMyZero() (MyZero, bool) {
	var value MyZero
	return value, item.index == 0
}
func (item *MyNat2) ResetToMyZero() { item.index = 0 }
func (item *MyNat2) SetMyZero()     { item.index = 0 }

func (item *MyNat2) IsMyPlus() bool { return item.index == 1 }

func (item *MyNat2) AsMyPlus() (*MyPlus, bool) {
	if item.index != 1 {
		return nil, false
	}
	return item.valueMyPlus, true
}
func (item *MyNat2) ResetToMyPlus() *MyPlus {
	item.index = 1
	if item.valueMyPlus == nil {
		var value MyPlus
		item.valueMyPlus = &value
	} else {
		item.valueMyPlus.Reset()
	}
	return item.valueMyPlus
}
func (item *MyNat2) SetMyPlus(value MyPlus) {
	item.index = 1
	if item.valueMyPlus == nil {
		item.valueMyPlus = &value
	} else {
		*item.valueMyPlus = value
	}
}

func (item *MyNat2) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x8d868379:
		item.index = 0
		return w, nil
	case 0x79e0c6df:
		item.index = 1
		if item.valueMyPlus == nil {
			var value MyPlus
			item.valueMyPlus = &value
		}
		return item.valueMyPlus.Read(w)
	default:
		return w, internal.ErrorInvalidUnionTag("MyNat2", tag)
	}
}

func (item *MyNat2) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MyNat2) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _MyNat2[item.index].TLTag)
	switch item.index {
	case 0:
		return w
	case 1:
		w = item.valueMyPlus.Write(w)
	}
	return w
}

func (item *MyNat2) CalculateLayout(sizes []int) []int {
	switch item.index {
	case 0:
		sizes = append(sizes, 0)
	case 1:
		sizes = (*item.valueMyPlus).CalculateLayout(sizes)
	}
	return sizes
}

func (item *MyNat2) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	switch item.index {
	case 0:
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, 0)
	case 1:
		w, sizes = item.valueMyPlus.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func (item *MyNat2) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	if currentSize == 0 {
		item.index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, item.index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	switch item.index {
	case 0:
		break
	case 1:
		if item.valueMyPlus == nil {
			var newValue MyPlus
			item.valueMyPlus = &newValue
		}
		if currentR, err = item.valueMyPlus.InternalReadTL2(currentR, block); err != nil {
			return currentR, err
		}
	}
	return r, nil
}
func (item *MyNat2) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *MyNat2) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) ([]byte, error) {
	return item.InternalReadTL2(r)
}

func (item *MyNat2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := internal.Json2ReadUnion("MyNat2", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "myZero#8d868379", "myZero", "#8d868379":
		if !legacyTypeNames && _tag == "myZero#8d868379" {
			return internal.ErrorInvalidUnionLegacyTagJSON("MyNat2", "myZero#8d868379")
		}
		item.index = 0
	case "myPlus#79e0c6df", "myPlus", "#79e0c6df":
		if !legacyTypeNames && _tag == "myPlus#79e0c6df" {
			return internal.ErrorInvalidUnionLegacyTagJSON("MyNat2", "myPlus#79e0c6df")
		}
		item.index = 1
		if item.valueMyPlus == nil {
			var value MyPlus
			item.valueMyPlus = &value
		}
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueMyPlus.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return internal.ErrorInvalidUnionTagJSON("MyNat2", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MyNat2) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) ([]byte, error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *MyNat2) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *MyNat2) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	switch item.index {
	case 0:
		if tctx.LegacyTypeNames {
			w = append(w, `{"type":"myZero#8d868379"`...)
		} else {
			w = append(w, `{"type":"myZero"`...)
		}
		return append(w, '}')
	case 1:
		if tctx.LegacyTypeNames {
			w = append(w, `{"type":"myPlus#79e0c6df"`...)
		} else {
			w = append(w, `{"type":"myPlus"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueMyPlus.WriteJSONOpt(tctx, w)
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item MyNat2) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MyNat2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MyNat2) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("MyNat2", err.Error())
	}
	return nil
}

func (item MyPlus) AsUnion() MyNat2 {
	var ret MyNat2
	ret.SetMyPlus(item)
	return ret
}

type MyPlus struct {
	A MyNat2
}

func (MyPlus) TLName() string { return "myPlus" }
func (MyPlus) TLTag() uint32  { return 0x79e0c6df }

func (item *MyPlus) Reset() {
	item.A.Reset()
}

func (item *MyPlus) FillRandom(rg *basictl.RandGenerator) {
	item.A.FillRandom(rg)
}

func (item *MyPlus) Read(w []byte) (_ []byte, err error) {
	return item.A.ReadBoxed(w)
}

func (item *MyPlus) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MyPlus) Write(w []byte) []byte {
	w = item.A.WriteBoxed(w)
	return w
}

func (item *MyPlus) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x79e0c6df); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MyPlus) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MyPlus) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x79e0c6df)
	return item.Write(w)
}

func (item MyPlus) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MyPlus) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("myPlus", "a")
				}
				if err := item.A.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propAPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("myPlus", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MyPlus) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *MyPlus) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *MyPlus) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = item.A.WriteJSONOpt(tctx, w)
	return append(w, '}')
}

func (item *MyPlus) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MyPlus) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("myPlus", err.Error())
	}
	return nil
}

func (item *MyPlus) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// add constructor No for union type in case of non first option
	lastUsedByte = 1
	currentSize += basictl.TL2CalculateSize(1)

	// calculate layout for item.A
	currentPosition := len(sizes)
	sizes = item.A.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *MyPlus) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// add constructor No for union type in case of non first option
	currentBlock |= (1 << 0)

	w = basictl.TL2WriteSize(w, 1)
	serializedSize += basictl.TL2CalculateSize(1)
	// write item.A
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.A.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *MyPlus) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *MyPlus) InternalReadTL2(r []byte, block byte) (_ []byte, err error) {
	currentR := r

	// read item.A
	if block&(1<<1) != 0 {
		if currentR, err = item.A.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.A.Reset()
	}

	return r, nil
}

func (item *MyPlus) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	var index int
	if currentSize == 0 {
		index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			index = 0
		}
	}
	if index != 1 {
		return r, basictl.TL2Error("unexpected constructor number %d, instead of %d", index, 1)
	}
	_, err = item.InternalReadTL2(currentR, block)
	return r, err
}

func (item MyZero) AsUnion() MyNat2 {
	var ret MyNat2
	ret.SetMyZero()
	return ret
}

type MyZero struct {
}

func (MyZero) TLName() string { return "myZero" }
func (MyZero) TLTag() uint32  { return 0x8d868379 }

func (item *MyZero) Reset() {}

func (item *MyZero) FillRandom(rg *basictl.RandGenerator) {}

func (item *MyZero) Read(w []byte) (_ []byte, err error) { return w, nil }

func (item *MyZero) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MyZero) Write(w []byte) []byte {
	return w
}

func (item *MyZero) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x8d868379); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MyZero) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MyZero) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x8d868379)
	return item.Write(w)
}

func (item MyZero) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MyZero) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return internal.ErrorInvalidJSON("myZero", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MyZero) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *MyZero) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *MyZero) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *MyZero) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MyZero) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("myZero", err.Error())
	}
	return nil
}

func (item *MyZero) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *MyZero) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	w = append(w, 0)
	serializedSize += 1
	return w, sizes
}

func (item *MyZero) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *MyZero) InternalReadTL2(r []byte, block byte) (_ []byte, err error) {

	return r, nil
}

func (item *MyZero) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	var index int
	if currentSize == 0 {
		index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			index = 0
		}
	}
	if index != 0 {
		return r, basictl.TL2Error("unexpected constructor number %d, instead of %d", index, 0)
	}
	_, err = item.InternalReadTL2(currentR, block)
	return r, err
}
