// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"


namespace tlgen { namespace tasks { 
struct TaskStatusInProgress {

  // tl type info
  static constexpr uint32_t TL_TAG = 0x06ef70e7;
  static constexpr std::string_view TL_NAME = "tasks.taskStatusInProgress";

  uint32_t tl_tag() const { return 0x06ef70e7; }
  std::string_view tl_name() const { return "tasks.taskStatusInProgress"; }

  // basic serialization methods 
  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const;

  friend std::ostream& operator<<(std::ostream& s, const TaskStatusInProgress& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::tasks

namespace tlgen { namespace tasks { 
struct TaskStatusNotCurrentlyInEngine {

  // tl type info
  static constexpr uint32_t TL_TAG = 0xb207caaa;
  static constexpr std::string_view TL_NAME = "tasks.taskStatusNotCurrentlyInEngine";

  uint32_t tl_tag() const { return 0xb207caaa; }
  std::string_view tl_name() const { return "tasks.taskStatusNotCurrentlyInEngine"; }

  // basic serialization methods 
  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const;

  friend std::ostream& operator<<(std::ostream& s, const TaskStatusNotCurrentlyInEngine& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::tasks

namespace tlgen { namespace tasks { 
struct TaskStatusScheduled {

  // tl type info
  static constexpr uint32_t TL_TAG = 0x0aca80a9;
  static constexpr std::string_view TL_NAME = "tasks.taskStatusScheduled";

  uint32_t tl_tag() const { return 0x0aca80a9; }
  std::string_view tl_name() const { return "tasks.taskStatusScheduled"; }

  // basic serialization methods 
  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const;

  friend std::ostream& operator<<(std::ostream& s, const TaskStatusScheduled& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::tasks

namespace tlgen { namespace tasks { 
struct TaskStatusWaiting {

  // tl type info
  static constexpr uint32_t TL_TAG = 0x16739c2c;
  static constexpr std::string_view TL_NAME = "tasks.taskStatusWaiting";

  uint32_t tl_tag() const { return 0x16739c2c; }
  std::string_view tl_name() const { return "tasks.taskStatusWaiting"; }

  // basic serialization methods 
  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const;

  friend std::ostream& operator<<(std::ostream& s, const TaskStatusWaiting& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::tasks

