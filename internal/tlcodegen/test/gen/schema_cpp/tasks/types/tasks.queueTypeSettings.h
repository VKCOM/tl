// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"


namespace tlgen { namespace tasks { 
struct QueueTypeSettings {
  uint32_t fields_mask = 0;
  bool is_enabled = false;
  bool is_persistent = false;
  int32_t priority = 0;
  int32_t default_retry_time = 0;
  int32_t default_retry_num = 0;
  std::string move_to_queue_type_on_error;
  bool is_blocking = false;
  int32_t timelimit = 0;
  int32_t max_queue_size = 0;

  // tl type info
  static constexpr uint32_t TL_TAG = 0x561fbc09;
  static constexpr std::string_view TL_NAME = "tasks.queueTypeSettings";

  uint32_t tl_tag() const { return 0x561fbc09; }
  std::string_view tl_name() const { return "tasks.queueTypeSettings"; }

  // basic serialization methods 
  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const;

  friend std::ostream& operator<<(std::ostream& s, const QueueTypeSettings& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::tasks

