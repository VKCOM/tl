// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "tasks/headers/tasks.TaskStatus.h"
#include "tasks/headers/tasks.TaskStatusItems.h"
#include "tasks/headers/tasks.taskInfo.h"
#include "tasks/headers/tasks.queueTypeInfo.h"
#include "tasks/headers/tasks.queueTypeSettings.h"
#include "tasks/headers/tasks.queueStats.h"
#include "tasks/headers/tasks.getTaskFromQueue.h"
#include "tasks/headers/tasks.getQueueTypes.h"
#include "tasks/headers/tasks.getQueueSize.h"
#include "tasks/headers/tasks.getAnyTask.h"
#include "tasks/headers/tasks.fullFilledCron.h"
#include "tasks/headers/tasks.cronTaskWithId.h"
#include "tasks/headers/tasks.cronTask.h"
#include "tasks/headers/tasks.cronTime.h"
#include "tasks/headers/tasks.addTask.h"
#include "tasks/headers/tasks.task.h"
#include "tasks/headers/tasks_getStats.h"
#include "tasks/headers/tasks.queueTypeStats.h"
#include "__common_namespace/headers/long.h"
#include "__common_namespace/headers/Bool.h"
#include "__common_namespace/headers/int.h"


void tlgen::details::BuiltinVectorTasksQueueTypeInfoReset(std::vector<::tlgen::tasks::QueueTypeInfo>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorTasksQueueTypeInfoWriteJSON(std::ostream & s, const std::vector<::tlgen::tasks::QueueTypeInfo>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    if (!::tlgen::details::TasksQueueTypeInfoWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorTasksQueueTypeInfoRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::tasks::QueueTypeInfo>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!::tlgen::details::TasksQueueTypeInfoRead(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::details::BuiltinVectorTasksQueueTypeInfoWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::tasks::QueueTypeInfo>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!::tlgen::details::TasksQueueTypeInfoWrite(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::GetStats::write_json(std::ostream& s)const {
  if (!::tlgen::details::GetStatsWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::GetStats::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetStatsRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetStats::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::GetStatsWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetStats::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::GetStats::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::GetStats::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetStatsReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetStats::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::GetStatsWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetStats::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::GetStats::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::GetStatsReset(::tlgen::GetStats& item) noexcept {
  (void)item;
  ::tlgen::details::TasksQueueTypeStatsReset(item.x);
}

bool tlgen::details::GetStatsWriteJSON(std::ostream& s, const ::tlgen::GetStats& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::TasksQueueTypeStatsWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::GetStatsRead(::tlgen::basictl::tl_istream & s, ::tlgen::GetStats& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::TasksQueueTypeStatsRead(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::GetStatsWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetStats& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::TasksQueueTypeStatsWrite(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::GetStatsReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::GetStats& item) {
  if (!s.nat_read_exact_tag(0xbaa6da35)) { return false; }
  return tlgen::details::GetStatsRead(s, item);
}

bool tlgen::details::GetStatsWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetStats& item) {
  if (!s.nat_write(0xbaa6da35)) { return false; }
  return tlgen::details::GetStatsWrite(s, item);
}

bool tlgen::details::GetStatsReadResult(::tlgen::basictl::tl_istream & s, tlgen::GetStats& item, ::tlgen::tasks::QueueTypeStats& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::TasksQueueTypeStatsReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::GetStatsWriteResult(::tlgen::basictl::tl_ostream & s, tlgen::GetStats& item, ::tlgen::tasks::QueueTypeStats& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::TasksQueueTypeStatsWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::GetStats::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::QueueTypeStats & result) noexcept {
  bool success = tlgen::details::GetStatsReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::GetStats::write_result(::tlgen::basictl::tl_ostream & s, ::tlgen::tasks::QueueTypeStats & result) noexcept {
  bool success = tlgen::details::GetStatsWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::GetStats::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::tasks::QueueTypeStats & result) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::GetStats::write_result(::tlgen::basictl::tl_throwable_ostream & s, ::tlgen::tasks::QueueTypeStats & result) {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::tasks::AddTask::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksAddTaskWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::AddTask::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksAddTaskRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::AddTask::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksAddTaskWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::AddTask::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::AddTask::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::AddTask::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksAddTaskReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::AddTask::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksAddTaskWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::AddTask::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::AddTask::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksAddTaskReset(::tlgen::tasks::AddTask& item) noexcept {
  (void)item;
  item.type_name.clear();
  item.queue_id.clear();
  ::tlgen::details::TasksTaskReset(item.task);
}

bool tlgen::details::TasksAddTaskWriteJSON(std::ostream& s, const ::tlgen::tasks::AddTask& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.type_name.size() != 0) {
    add_comma = true;
    s << "\"type_name\":";
    s << "\"" << item.type_name << "\"";
  }
  if (item.queue_id.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"queue_id\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.queue_id)) { return false; }
  }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"task\":";
  if (!::tlgen::details::TasksTaskWriteJSON(s, item.task)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::TasksAddTaskRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::AddTask& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.type_name)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, item.queue_id)) { return false; }
  if (!::tlgen::details::TasksTaskRead(s, item.task)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TasksAddTaskWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::AddTask& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.type_name)) { return false;}
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item.queue_id)) { return false; }
  if (!::tlgen::details::TasksTaskWrite(s, item.task)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TasksAddTaskReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::AddTask& item) {
  if (!s.nat_read_exact_tag(0x2ca073d5)) { return false; }
  return tlgen::details::TasksAddTaskRead(s, item);
}

bool tlgen::details::TasksAddTaskWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::AddTask& item) {
  if (!s.nat_write(0x2ca073d5)) { return false; }
  return tlgen::details::TasksAddTaskWrite(s, item);
}

bool tlgen::details::TasksAddTaskReadResult(::tlgen::basictl::tl_istream & s, tlgen::tasks::AddTask& item, int64_t& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x22076cba)) { return false; }
  if (!s.long_read(result)) { return false; }
  return true;
}
bool tlgen::details::TasksAddTaskWriteResult(::tlgen::basictl::tl_ostream & s, tlgen::tasks::AddTask& item, int64_t& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x22076cba)) { return false; }
  if (!s.long_write(result)) { return false;}
  return true;
}

bool tlgen::tasks::AddTask::read_result(::tlgen::basictl::tl_istream & s, int64_t & result) noexcept {
  bool success = tlgen::details::TasksAddTaskReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::tasks::AddTask::write_result(::tlgen::basictl::tl_ostream & s, int64_t & result) noexcept {
  bool success = tlgen::details::TasksAddTaskWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::tasks::AddTask::read_result(::tlgen::basictl::tl_throwable_istream & s, int64_t & result) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::tasks::AddTask::write_result(::tlgen::basictl::tl_throwable_ostream & s, int64_t & result) {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::tasks::CronTask::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksCronTaskWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::CronTask::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksCronTaskRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::CronTask::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksCronTaskWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::CronTask::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::CronTask::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::CronTask::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksCronTaskReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::CronTask::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksCronTaskWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::CronTask::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::CronTask::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksCronTaskReset(::tlgen::tasks::CronTask& item) noexcept {
  (void)item;
  item.type_name.clear();
  item.queue_id.clear();
  ::tlgen::details::TasksTaskReset(item.task);
  ::tlgen::details::TasksCronTimeReset(item.time);
}

bool tlgen::details::TasksCronTaskWriteJSON(std::ostream& s, const ::tlgen::tasks::CronTask& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.type_name.size() != 0) {
    add_comma = true;
    s << "\"type_name\":";
    s << "\"" << item.type_name << "\"";
  }
  if (item.queue_id.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"queue_id\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.queue_id)) { return false; }
  }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"task\":";
  if (!::tlgen::details::TasksTaskWriteJSON(s, item.task)) { return false; }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"time\":";
  if (!::tlgen::details::TasksCronTimeWriteJSON(s, item.time)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::TasksCronTaskRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::CronTask& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.type_name)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, item.queue_id)) { return false; }
  if (!::tlgen::details::TasksTaskRead(s, item.task)) { return s.set_error_unknown_scenario(); }
  if (!::tlgen::details::TasksCronTimeRead(s, item.time)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TasksCronTaskWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::CronTask& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.type_name)) { return false;}
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item.queue_id)) { return false; }
  if (!::tlgen::details::TasksTaskWrite(s, item.task)) { return s.set_error_unknown_scenario(); }
  if (!::tlgen::details::TasksCronTimeWrite(s, item.time)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TasksCronTaskReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::CronTask& item) {
  if (!s.nat_read_exact_tag(0xc90cf28a)) { return false; }
  return tlgen::details::TasksCronTaskRead(s, item);
}

bool tlgen::details::TasksCronTaskWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::CronTask& item) {
  if (!s.nat_write(0xc90cf28a)) { return false; }
  return tlgen::details::TasksCronTaskWrite(s, item);
}

bool tlgen::tasks::CronTaskWithId::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksCronTaskWithIdWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::CronTaskWithId::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksCronTaskWithIdRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::CronTaskWithId::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksCronTaskWithIdWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::CronTaskWithId::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::CronTaskWithId::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::CronTaskWithId::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksCronTaskWithIdReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::CronTaskWithId::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksCronTaskWithIdWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::CronTaskWithId::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::CronTaskWithId::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksCronTaskWithIdReset(::tlgen::tasks::CronTaskWithId& item) noexcept {
  (void)item;
  item.id = 0;
  item.next_time = 0;
  ::tlgen::details::TasksCronTaskReset(item.task);
}

bool tlgen::details::TasksCronTaskWithIdWriteJSON(std::ostream& s, const ::tlgen::tasks::CronTaskWithId& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.id != 0) {
    add_comma = true;
    s << "\"id\":";
    s << item.id;
  }
  if (item.next_time != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"next_time\":";
    s << item.next_time;
  }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"task\":";
  if (!::tlgen::details::TasksCronTaskWriteJSON(s, item.task)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::TasksCronTaskWithIdRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::CronTaskWithId& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.id)) { return false; }
  if (!s.int_read(item.next_time)) { return false; }
  if (!::tlgen::details::TasksCronTaskRead(s, item.task)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TasksCronTaskWithIdWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::CronTaskWithId& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.id)) { return false;}
  if (!s.int_write(item.next_time)) { return false;}
  if (!::tlgen::details::TasksCronTaskWrite(s, item.task)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TasksCronTaskWithIdReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::CronTaskWithId& item) {
  if (!s.nat_read_exact_tag(0x3a958001)) { return false; }
  return tlgen::details::TasksCronTaskWithIdRead(s, item);
}

bool tlgen::details::TasksCronTaskWithIdWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::CronTaskWithId& item) {
  if (!s.nat_write(0x3a958001)) { return false; }
  return tlgen::details::TasksCronTaskWithIdWrite(s, item);
}

bool tlgen::tasks::CronTime::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksCronTimeWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::CronTime::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksCronTimeRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::CronTime::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksCronTimeWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::CronTime::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::CronTime::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::CronTime::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksCronTimeReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::CronTime::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksCronTimeWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::CronTime::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::CronTime::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksCronTimeReset(::tlgen::tasks::CronTime& item) noexcept {
  (void)item;
  item.fields_mask = 0;
  item.seconds.clear();
  item.minutes.clear();
  item.hours.clear();
  item.days_of_week.clear();
  item.days.clear();
  item.months.clear();
}

bool tlgen::details::TasksCronTimeWriteJSON(std::ostream& s, const ::tlgen::tasks::CronTime& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.fields_mask != 0) {
    add_comma = true;
    s << "\"fields_mask\":";
    s << item.fields_mask;
  }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"seconds\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.seconds)) { return false; }
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"minutes\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.minutes)) { return false; }
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"hours\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.hours)) { return false; }
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"days_of_week\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.days_of_week)) { return false; }
  }
  if ((item.fields_mask & (1<<4)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"days\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.days)) { return false; }
  }
  if ((item.fields_mask & (1<<5)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"months\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.months)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::TasksCronTimeRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::CronTime& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.fields_mask)) { return false; }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (!::tlgen::details::BuiltinVectorIntRead(s, item.seconds)) { return false; }
  } else {
      item.seconds.clear();
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (!::tlgen::details::BuiltinVectorIntRead(s, item.minutes)) { return false; }
  } else {
      item.minutes.clear();
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (!::tlgen::details::BuiltinVectorIntRead(s, item.hours)) { return false; }
  } else {
      item.hours.clear();
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (!::tlgen::details::BuiltinVectorIntRead(s, item.days_of_week)) { return false; }
  } else {
      item.days_of_week.clear();
  }
  if ((item.fields_mask & (1<<4)) != 0) {
    if (!::tlgen::details::BuiltinVectorIntRead(s, item.days)) { return false; }
  } else {
      item.days.clear();
  }
  if ((item.fields_mask & (1<<5)) != 0) {
    if (!::tlgen::details::BuiltinVectorIntRead(s, item.months)) { return false; }
  } else {
      item.months.clear();
  }
  return true;
}

bool tlgen::details::TasksCronTimeWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::CronTime& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.fields_mask)) { return false;}
  if ((item.fields_mask & (1<<0)) != 0) {
      if (!::tlgen::details::BuiltinVectorIntWrite(s, item.seconds)) { return false; }
  }
  if ((item.fields_mask & (1<<1)) != 0) {
      if (!::tlgen::details::BuiltinVectorIntWrite(s, item.minutes)) { return false; }
  }
  if ((item.fields_mask & (1<<2)) != 0) {
      if (!::tlgen::details::BuiltinVectorIntWrite(s, item.hours)) { return false; }
  }
  if ((item.fields_mask & (1<<3)) != 0) {
      if (!::tlgen::details::BuiltinVectorIntWrite(s, item.days_of_week)) { return false; }
  }
  if ((item.fields_mask & (1<<4)) != 0) {
      if (!::tlgen::details::BuiltinVectorIntWrite(s, item.days)) { return false; }
  }
  if ((item.fields_mask & (1<<5)) != 0) {
      if (!::tlgen::details::BuiltinVectorIntWrite(s, item.months)) { return false; }
  }
  return true;
}

bool tlgen::details::TasksCronTimeReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::CronTime& item) {
  if (!s.nat_read_exact_tag(0xd4177d7f)) { return false; }
  return tlgen::details::TasksCronTimeRead(s, item);
}

bool tlgen::details::TasksCronTimeWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::CronTime& item) {
  if (!s.nat_write(0xd4177d7f)) { return false; }
  return tlgen::details::TasksCronTimeWrite(s, item);
}

bool tlgen::tasks::FullFilledCron::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksFullFilledCronWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::FullFilledCron::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksFullFilledCronRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::FullFilledCron::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksFullFilledCronWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::FullFilledCron::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::FullFilledCron::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::FullFilledCron::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksFullFilledCronReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::FullFilledCron::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksFullFilledCronWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::FullFilledCron::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::FullFilledCron::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksFullFilledCronReset(::tlgen::tasks::FullFilledCron& item) noexcept {
  (void)item;
  item.fields_mask = 0;
  item.a0 = 0;
  item.a1 = 0;
  item.a2 = 0;
  item.a3 = 0;
  item.a4 = 0;
  item.a5 = 0;
  item.a6 = 0;
  item.a7 = 0;
  item.a8 = 0;
  item.a9 = 0;
  item.a10 = 0;
  item.a11 = 0;
  item.a12 = 0;
  item.a13 = 0;
  item.a14 = 0;
  item.a15 = 0;
  item.a16 = 0;
  item.a17 = 0;
  item.a18 = 0;
  item.a19 = 0;
  item.a20 = 0;
  item.a21 = 0;
  item.a22 = 0;
  item.a23 = 0;
  item.a24 = 0;
  item.a25 = 0;
  item.a26 = 0;
  item.a27 = 0;
  item.a28 = 0;
  item.a29 = 0;
  item.a30 = 0;
  item.a31 = 0;
}

bool tlgen::details::TasksFullFilledCronWriteJSON(std::ostream& s, const ::tlgen::tasks::FullFilledCron& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.fields_mask != 0) {
    add_comma = true;
    s << "\"fields_mask\":";
    s << item.fields_mask;
  }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a0\":";
    s << item.a0;
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a1\":";
    s << item.a1;
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a2\":";
    s << item.a2;
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a3\":";
    s << item.a3;
  }
  if ((item.fields_mask & (1<<4)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a4\":";
    s << item.a4;
  }
  if ((item.fields_mask & (1<<5)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a5\":";
    s << item.a5;
  }
  if ((item.fields_mask & (1<<6)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a6\":";
    s << item.a6;
  }
  if ((item.fields_mask & (1<<7)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a7\":";
    s << item.a7;
  }
  if ((item.fields_mask & (1<<8)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a8\":";
    s << item.a8;
  }
  if ((item.fields_mask & (1<<9)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a9\":";
    s << item.a9;
  }
  if ((item.fields_mask & (1<<10)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a10\":";
    s << item.a10;
  }
  if ((item.fields_mask & (1<<11)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a11\":";
    s << item.a11;
  }
  if ((item.fields_mask & (1<<12)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a12\":";
    s << item.a12;
  }
  if ((item.fields_mask & (1<<13)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a13\":";
    s << item.a13;
  }
  if ((item.fields_mask & (1<<14)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a14\":";
    s << item.a14;
  }
  if ((item.fields_mask & (1<<15)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a15\":";
    s << item.a15;
  }
  if ((item.fields_mask & (1<<16)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a16\":";
    s << item.a16;
  }
  if ((item.fields_mask & (1<<17)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a17\":";
    s << item.a17;
  }
  if ((item.fields_mask & (1<<18)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a18\":";
    s << item.a18;
  }
  if ((item.fields_mask & (1<<19)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a19\":";
    s << item.a19;
  }
  if ((item.fields_mask & (1<<20)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a20\":";
    s << item.a20;
  }
  if ((item.fields_mask & (1<<21)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a21\":";
    s << item.a21;
  }
  if ((item.fields_mask & (1<<22)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a22\":";
    s << item.a22;
  }
  if ((item.fields_mask & (1<<23)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a23\":";
    s << item.a23;
  }
  if ((item.fields_mask & (1<<24)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a24\":";
    s << item.a24;
  }
  if ((item.fields_mask & (1<<25)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a25\":";
    s << item.a25;
  }
  if ((item.fields_mask & (1<<26)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a26\":";
    s << item.a26;
  }
  if ((item.fields_mask & (1<<27)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a27\":";
    s << item.a27;
  }
  if ((item.fields_mask & (1<<28)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a28\":";
    s << item.a28;
  }
  if ((item.fields_mask & (1<<29)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a29\":";
    s << item.a29;
  }
  if ((item.fields_mask & (1<<30)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a30\":";
    s << item.a30;
  }
  if ((item.fields_mask & (1<<31)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a31\":";
    s << item.a31;
  }
  s << "}";
  return true;
}

bool tlgen::details::TasksFullFilledCronRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::FullFilledCron& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.fields_mask)) { return false; }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (!s.int_read(item.a0)) { return false; }
  } else {
      item.a0 = 0;
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (!s.int_read(item.a1)) { return false; }
  } else {
      item.a1 = 0;
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (!s.int_read(item.a2)) { return false; }
  } else {
      item.a2 = 0;
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (!s.int_read(item.a3)) { return false; }
  } else {
      item.a3 = 0;
  }
  if ((item.fields_mask & (1<<4)) != 0) {
    if (!s.int_read(item.a4)) { return false; }
  } else {
      item.a4 = 0;
  }
  if ((item.fields_mask & (1<<5)) != 0) {
    if (!s.int_read(item.a5)) { return false; }
  } else {
      item.a5 = 0;
  }
  if ((item.fields_mask & (1<<6)) != 0) {
    if (!s.int_read(item.a6)) { return false; }
  } else {
      item.a6 = 0;
  }
  if ((item.fields_mask & (1<<7)) != 0) {
    if (!s.int_read(item.a7)) { return false; }
  } else {
      item.a7 = 0;
  }
  if ((item.fields_mask & (1<<8)) != 0) {
    if (!s.int_read(item.a8)) { return false; }
  } else {
      item.a8 = 0;
  }
  if ((item.fields_mask & (1<<9)) != 0) {
    if (!s.int_read(item.a9)) { return false; }
  } else {
      item.a9 = 0;
  }
  if ((item.fields_mask & (1<<10)) != 0) {
    if (!s.int_read(item.a10)) { return false; }
  } else {
      item.a10 = 0;
  }
  if ((item.fields_mask & (1<<11)) != 0) {
    if (!s.int_read(item.a11)) { return false; }
  } else {
      item.a11 = 0;
  }
  if ((item.fields_mask & (1<<12)) != 0) {
    if (!s.int_read(item.a12)) { return false; }
  } else {
      item.a12 = 0;
  }
  if ((item.fields_mask & (1<<13)) != 0) {
    if (!s.int_read(item.a13)) { return false; }
  } else {
      item.a13 = 0;
  }
  if ((item.fields_mask & (1<<14)) != 0) {
    if (!s.int_read(item.a14)) { return false; }
  } else {
      item.a14 = 0;
  }
  if ((item.fields_mask & (1<<15)) != 0) {
    if (!s.int_read(item.a15)) { return false; }
  } else {
      item.a15 = 0;
  }
  if ((item.fields_mask & (1<<16)) != 0) {
    if (!s.int_read(item.a16)) { return false; }
  } else {
      item.a16 = 0;
  }
  if ((item.fields_mask & (1<<17)) != 0) {
    if (!s.int_read(item.a17)) { return false; }
  } else {
      item.a17 = 0;
  }
  if ((item.fields_mask & (1<<18)) != 0) {
    if (!s.int_read(item.a18)) { return false; }
  } else {
      item.a18 = 0;
  }
  if ((item.fields_mask & (1<<19)) != 0) {
    if (!s.int_read(item.a19)) { return false; }
  } else {
      item.a19 = 0;
  }
  if ((item.fields_mask & (1<<20)) != 0) {
    if (!s.int_read(item.a20)) { return false; }
  } else {
      item.a20 = 0;
  }
  if ((item.fields_mask & (1<<21)) != 0) {
    if (!s.int_read(item.a21)) { return false; }
  } else {
      item.a21 = 0;
  }
  if ((item.fields_mask & (1<<22)) != 0) {
    if (!s.int_read(item.a22)) { return false; }
  } else {
      item.a22 = 0;
  }
  if ((item.fields_mask & (1<<23)) != 0) {
    if (!s.int_read(item.a23)) { return false; }
  } else {
      item.a23 = 0;
  }
  if ((item.fields_mask & (1<<24)) != 0) {
    if (!s.int_read(item.a24)) { return false; }
  } else {
      item.a24 = 0;
  }
  if ((item.fields_mask & (1<<25)) != 0) {
    if (!s.int_read(item.a25)) { return false; }
  } else {
      item.a25 = 0;
  }
  if ((item.fields_mask & (1<<26)) != 0) {
    if (!s.int_read(item.a26)) { return false; }
  } else {
      item.a26 = 0;
  }
  if ((item.fields_mask & (1<<27)) != 0) {
    if (!s.int_read(item.a27)) { return false; }
  } else {
      item.a27 = 0;
  }
  if ((item.fields_mask & (1<<28)) != 0) {
    if (!s.int_read(item.a28)) { return false; }
  } else {
      item.a28 = 0;
  }
  if ((item.fields_mask & (1<<29)) != 0) {
    if (!s.int_read(item.a29)) { return false; }
  } else {
      item.a29 = 0;
  }
  if ((item.fields_mask & (1<<30)) != 0) {
    if (!s.int_read(item.a30)) { return false; }
  } else {
      item.a30 = 0;
  }
  if ((item.fields_mask & (1<<31)) != 0) {
    if (!s.int_read(item.a31)) { return false; }
  } else {
      item.a31 = 0;
  }
  return true;
}

bool tlgen::details::TasksFullFilledCronWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::FullFilledCron& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.fields_mask)) { return false;}
  if ((item.fields_mask & (1<<0)) != 0) {
      if (!s.int_write(item.a0)) { return false;}
  }
  if ((item.fields_mask & (1<<1)) != 0) {
      if (!s.int_write(item.a1)) { return false;}
  }
  if ((item.fields_mask & (1<<2)) != 0) {
      if (!s.int_write(item.a2)) { return false;}
  }
  if ((item.fields_mask & (1<<3)) != 0) {
      if (!s.int_write(item.a3)) { return false;}
  }
  if ((item.fields_mask & (1<<4)) != 0) {
      if (!s.int_write(item.a4)) { return false;}
  }
  if ((item.fields_mask & (1<<5)) != 0) {
      if (!s.int_write(item.a5)) { return false;}
  }
  if ((item.fields_mask & (1<<6)) != 0) {
      if (!s.int_write(item.a6)) { return false;}
  }
  if ((item.fields_mask & (1<<7)) != 0) {
      if (!s.int_write(item.a7)) { return false;}
  }
  if ((item.fields_mask & (1<<8)) != 0) {
      if (!s.int_write(item.a8)) { return false;}
  }
  if ((item.fields_mask & (1<<9)) != 0) {
      if (!s.int_write(item.a9)) { return false;}
  }
  if ((item.fields_mask & (1<<10)) != 0) {
      if (!s.int_write(item.a10)) { return false;}
  }
  if ((item.fields_mask & (1<<11)) != 0) {
      if (!s.int_write(item.a11)) { return false;}
  }
  if ((item.fields_mask & (1<<12)) != 0) {
      if (!s.int_write(item.a12)) { return false;}
  }
  if ((item.fields_mask & (1<<13)) != 0) {
      if (!s.int_write(item.a13)) { return false;}
  }
  if ((item.fields_mask & (1<<14)) != 0) {
      if (!s.int_write(item.a14)) { return false;}
  }
  if ((item.fields_mask & (1<<15)) != 0) {
      if (!s.int_write(item.a15)) { return false;}
  }
  if ((item.fields_mask & (1<<16)) != 0) {
      if (!s.int_write(item.a16)) { return false;}
  }
  if ((item.fields_mask & (1<<17)) != 0) {
      if (!s.int_write(item.a17)) { return false;}
  }
  if ((item.fields_mask & (1<<18)) != 0) {
      if (!s.int_write(item.a18)) { return false;}
  }
  if ((item.fields_mask & (1<<19)) != 0) {
      if (!s.int_write(item.a19)) { return false;}
  }
  if ((item.fields_mask & (1<<20)) != 0) {
      if (!s.int_write(item.a20)) { return false;}
  }
  if ((item.fields_mask & (1<<21)) != 0) {
      if (!s.int_write(item.a21)) { return false;}
  }
  if ((item.fields_mask & (1<<22)) != 0) {
      if (!s.int_write(item.a22)) { return false;}
  }
  if ((item.fields_mask & (1<<23)) != 0) {
      if (!s.int_write(item.a23)) { return false;}
  }
  if ((item.fields_mask & (1<<24)) != 0) {
      if (!s.int_write(item.a24)) { return false;}
  }
  if ((item.fields_mask & (1<<25)) != 0) {
      if (!s.int_write(item.a25)) { return false;}
  }
  if ((item.fields_mask & (1<<26)) != 0) {
      if (!s.int_write(item.a26)) { return false;}
  }
  if ((item.fields_mask & (1<<27)) != 0) {
      if (!s.int_write(item.a27)) { return false;}
  }
  if ((item.fields_mask & (1<<28)) != 0) {
      if (!s.int_write(item.a28)) { return false;}
  }
  if ((item.fields_mask & (1<<29)) != 0) {
      if (!s.int_write(item.a29)) { return false;}
  }
  if ((item.fields_mask & (1<<30)) != 0) {
      if (!s.int_write(item.a30)) { return false;}
  }
  if ((item.fields_mask & (1<<31)) != 0) {
      if (!s.int_write(item.a31)) { return false;}
  }
  return true;
}

bool tlgen::details::TasksFullFilledCronReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::FullFilledCron& item) {
  if (!s.nat_read_exact_tag(0xd4177d7e)) { return false; }
  return tlgen::details::TasksFullFilledCronRead(s, item);
}

bool tlgen::details::TasksFullFilledCronWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::FullFilledCron& item) {
  if (!s.nat_write(0xd4177d7e)) { return false; }
  return tlgen::details::TasksFullFilledCronWrite(s, item);
}

bool tlgen::tasks::GetAnyTask::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksGetAnyTaskWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::GetAnyTask::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksGetAnyTaskRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::GetAnyTask::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksGetAnyTaskWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::GetAnyTask::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::GetAnyTask::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::GetAnyTask::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksGetAnyTaskReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::GetAnyTask::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksGetAnyTaskWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::GetAnyTask::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::GetAnyTask::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksGetAnyTaskReset(::tlgen::tasks::GetAnyTask& item) noexcept {
  (void)item;
}

bool tlgen::details::TasksGetAnyTaskWriteJSON(std::ostream& s, const ::tlgen::tasks::GetAnyTask& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::TasksGetAnyTaskRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::GetAnyTask& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TasksGetAnyTaskWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetAnyTask& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TasksGetAnyTaskReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::GetAnyTask& item) {
  if (!s.nat_read_exact_tag(0x4a9c7dbb)) { return false; }
  return tlgen::details::TasksGetAnyTaskRead(s, item);
}

bool tlgen::details::TasksGetAnyTaskWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetAnyTask& item) {
  if (!s.nat_write(0x4a9c7dbb)) { return false; }
  return tlgen::details::TasksGetAnyTaskWrite(s, item);
}

bool tlgen::details::TasksGetAnyTaskReadResult(::tlgen::basictl::tl_istream & s, tlgen::tasks::GetAnyTask& item, std::optional<::tlgen::tasks::TaskInfo>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::TasksTaskInfoMaybeReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::TasksGetAnyTaskWriteResult(::tlgen::basictl::tl_ostream & s, tlgen::tasks::GetAnyTask& item, std::optional<::tlgen::tasks::TaskInfo>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::TasksTaskInfoMaybeWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::tasks::GetAnyTask::read_result(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::tasks::TaskInfo> & result) noexcept {
  bool success = tlgen::details::TasksGetAnyTaskReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::tasks::GetAnyTask::write_result(::tlgen::basictl::tl_ostream & s, std::optional<::tlgen::tasks::TaskInfo> & result) noexcept {
  bool success = tlgen::details::TasksGetAnyTaskWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::tasks::GetAnyTask::read_result(::tlgen::basictl::tl_throwable_istream & s, std::optional<::tlgen::tasks::TaskInfo> & result) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::tasks::GetAnyTask::write_result(::tlgen::basictl::tl_throwable_ostream & s, std::optional<::tlgen::tasks::TaskInfo> & result) {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::tasks::GetQueueSize::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksGetQueueSizeWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::GetQueueSize::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksGetQueueSizeRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::GetQueueSize::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksGetQueueSizeWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::GetQueueSize::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::GetQueueSize::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::GetQueueSize::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksGetQueueSizeReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::GetQueueSize::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksGetQueueSizeWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::GetQueueSize::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::GetQueueSize::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksGetQueueSizeReset(::tlgen::tasks::GetQueueSize& item) noexcept {
  (void)item;
  item.type_name.clear();
  item.queue_id.clear();
  item.fields_mask = 0;
  item.local_dep = 0;
}

bool tlgen::details::TasksGetQueueSizeWriteJSON(std::ostream& s, const ::tlgen::tasks::GetQueueSize& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.type_name.size() != 0) {
    add_comma = true;
    s << "\"type_name\":";
    s << "\"" << item.type_name << "\"";
  }
  if (item.queue_id.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"queue_id\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.queue_id)) { return false; }
  }
  if (item.fields_mask != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"fields_mask\":";
    s << item.fields_mask;
  }
  if ((item.fields_mask & (1<<4)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"local_dep\":";
    s << item.local_dep;
  }
  s << "}";
  return true;
}

bool tlgen::details::TasksGetQueueSizeRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::GetQueueSize& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.type_name)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, item.queue_id)) { return false; }
  if (!s.nat_read(item.fields_mask)) { return false; }
  if ((item.fields_mask & (1<<4)) != 0) {
    if (!s.int_read(item.local_dep)) { return false; }
  } else {
      item.local_dep = 0;
  }
  return true;
}

bool tlgen::details::TasksGetQueueSizeWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetQueueSize& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.type_name)) { return false;}
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item.queue_id)) { return false; }
  if (!s.nat_write(item.fields_mask)) { return false;}
  if ((item.fields_mask & (1<<4)) != 0) {
      if (!s.int_write(item.local_dep)) { return false;}
  }
  return true;
}

bool tlgen::details::TasksGetQueueSizeReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::GetQueueSize& item) {
  if (!s.nat_read_exact_tag(0x6abbb057)) { return false; }
  return tlgen::details::TasksGetQueueSizeRead(s, item);
}

bool tlgen::details::TasksGetQueueSizeWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetQueueSize& item) {
  if (!s.nat_write(0x6abbb057)) { return false; }
  return tlgen::details::TasksGetQueueSizeWrite(s, item);
}

bool tlgen::details::TasksGetQueueSizeReadResult(::tlgen::basictl::tl_istream & s, tlgen::tasks::GetQueueSize& item, ::tlgen::tasks::QueueStats& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::TasksQueueStatsReadBoxed(s, result, item.fields_mask)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::TasksGetQueueSizeWriteResult(::tlgen::basictl::tl_ostream & s, tlgen::tasks::GetQueueSize& item, ::tlgen::tasks::QueueStats& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::TasksQueueStatsWriteBoxed(s, result, item.fields_mask)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::tasks::GetQueueSize::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::QueueStats & result) noexcept {
  bool success = tlgen::details::TasksGetQueueSizeReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::tasks::GetQueueSize::write_result(::tlgen::basictl::tl_ostream & s, ::tlgen::tasks::QueueStats & result) noexcept {
  bool success = tlgen::details::TasksGetQueueSizeWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::tasks::GetQueueSize::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::tasks::QueueStats & result) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::tasks::GetQueueSize::write_result(::tlgen::basictl::tl_throwable_ostream & s, ::tlgen::tasks::QueueStats & result) {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::tasks::GetQueueTypes::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksGetQueueTypesWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::GetQueueTypes::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksGetQueueTypesRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::GetQueueTypes::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksGetQueueTypesWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::GetQueueTypes::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::GetQueueTypes::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::GetQueueTypes::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksGetQueueTypesReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::GetQueueTypes::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksGetQueueTypesWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::GetQueueTypes::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::GetQueueTypes::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksGetQueueTypesReset(::tlgen::tasks::GetQueueTypes& item) noexcept {
  (void)item;
  item.settings_mask = 0;
  item.stats_mask = 0;
}

bool tlgen::details::TasksGetQueueTypesWriteJSON(std::ostream& s, const ::tlgen::tasks::GetQueueTypes& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.settings_mask != 0) {
    add_comma = true;
    s << "\"settings_mask\":";
    s << item.settings_mask;
  }
  if (item.stats_mask != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"stats_mask\":";
    s << item.stats_mask;
  }
  s << "}";
  return true;
}

bool tlgen::details::TasksGetQueueTypesRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::GetQueueTypes& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.settings_mask)) { return false; }
  if (!s.nat_read(item.stats_mask)) { return false; }
  return true;
}

bool tlgen::details::TasksGetQueueTypesWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetQueueTypes& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.settings_mask)) { return false;}
  if (!s.nat_write(item.stats_mask)) { return false;}
  return true;
}

bool tlgen::details::TasksGetQueueTypesReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::GetQueueTypes& item) {
  if (!s.nat_read_exact_tag(0x5434457a)) { return false; }
  return tlgen::details::TasksGetQueueTypesRead(s, item);
}

bool tlgen::details::TasksGetQueueTypesWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetQueueTypes& item) {
  if (!s.nat_write(0x5434457a)) { return false; }
  return tlgen::details::TasksGetQueueTypesWrite(s, item);
}

bool tlgen::details::TasksGetQueueTypesReadResult(::tlgen::basictl::tl_istream & s, tlgen::tasks::GetQueueTypes& item, std::vector<::tlgen::tasks::QueueTypeInfo>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorTasksQueueTypeInfoRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::TasksGetQueueTypesWriteResult(::tlgen::basictl::tl_ostream & s, tlgen::tasks::GetQueueTypes& item, std::vector<::tlgen::tasks::QueueTypeInfo>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorTasksQueueTypeInfoWrite(s, result)) { return false; }
  return true;
}

bool tlgen::tasks::GetQueueTypes::read_result(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::tasks::QueueTypeInfo> & result) noexcept {
  bool success = tlgen::details::TasksGetQueueTypesReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::tasks::GetQueueTypes::write_result(::tlgen::basictl::tl_ostream & s, std::vector<::tlgen::tasks::QueueTypeInfo> & result) noexcept {
  bool success = tlgen::details::TasksGetQueueTypesWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::tasks::GetQueueTypes::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<::tlgen::tasks::QueueTypeInfo> & result) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::tasks::GetQueueTypes::write_result(::tlgen::basictl::tl_throwable_ostream & s, std::vector<::tlgen::tasks::QueueTypeInfo> & result) {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::tasks::GetTaskFromQueue::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksGetTaskFromQueueWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::GetTaskFromQueue::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksGetTaskFromQueueRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::GetTaskFromQueue::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksGetTaskFromQueueWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::GetTaskFromQueue::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::GetTaskFromQueue::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::GetTaskFromQueue::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksGetTaskFromQueueReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::GetTaskFromQueue::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksGetTaskFromQueueWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::GetTaskFromQueue::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::GetTaskFromQueue::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksGetTaskFromQueueReset(::tlgen::tasks::GetTaskFromQueue& item) noexcept {
  (void)item;
  item.type_name.clear();
  item.queue_id.clear();
}

bool tlgen::details::TasksGetTaskFromQueueWriteJSON(std::ostream& s, const ::tlgen::tasks::GetTaskFromQueue& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.type_name.size() != 0) {
    add_comma = true;
    s << "\"type_name\":";
    s << "\"" << item.type_name << "\"";
  }
  if (item.queue_id.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"queue_id\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.queue_id)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::TasksGetTaskFromQueueRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::GetTaskFromQueue& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.type_name)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, item.queue_id)) { return false; }
  return true;
}

bool tlgen::details::TasksGetTaskFromQueueWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetTaskFromQueue& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.type_name)) { return false;}
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item.queue_id)) { return false; }
  return true;
}

bool tlgen::details::TasksGetTaskFromQueueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::GetTaskFromQueue& item) {
  if (!s.nat_read_exact_tag(0x6a52b698)) { return false; }
  return tlgen::details::TasksGetTaskFromQueueRead(s, item);
}

bool tlgen::details::TasksGetTaskFromQueueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetTaskFromQueue& item) {
  if (!s.nat_write(0x6a52b698)) { return false; }
  return tlgen::details::TasksGetTaskFromQueueWrite(s, item);
}

bool tlgen::details::TasksGetTaskFromQueueReadResult(::tlgen::basictl::tl_istream & s, tlgen::tasks::GetTaskFromQueue& item, std::optional<::tlgen::tasks::TaskInfo>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::TasksTaskInfoMaybeReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::TasksGetTaskFromQueueWriteResult(::tlgen::basictl::tl_ostream & s, tlgen::tasks::GetTaskFromQueue& item, std::optional<::tlgen::tasks::TaskInfo>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::TasksTaskInfoMaybeWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::tasks::GetTaskFromQueue::read_result(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::tasks::TaskInfo> & result) noexcept {
  bool success = tlgen::details::TasksGetTaskFromQueueReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::tasks::GetTaskFromQueue::write_result(::tlgen::basictl::tl_ostream & s, std::optional<::tlgen::tasks::TaskInfo> & result) noexcept {
  bool success = tlgen::details::TasksGetTaskFromQueueWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::tasks::GetTaskFromQueue::read_result(::tlgen::basictl::tl_throwable_istream & s, std::optional<::tlgen::tasks::TaskInfo> & result) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::tasks::GetTaskFromQueue::write_result(::tlgen::basictl::tl_throwable_ostream & s, std::optional<::tlgen::tasks::TaskInfo> & result) {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::tasks::QueueStats::write_json(std::ostream& s, [[maybe_unused]] uint32_t nat_fields_mask)const {
  if (!::tlgen::details::TasksQueueStatsWriteJSON(s, *this, nat_fields_mask)) { return false; }
  return true;
}

bool tlgen::tasks::QueueStats::read(::tlgen::basictl::tl_istream & s, [[maybe_unused]] uint32_t nat_fields_mask) noexcept {
  if (!::tlgen::details::TasksQueueStatsRead(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::QueueStats::write(::tlgen::basictl::tl_ostream & s, [[maybe_unused]] uint32_t nat_fields_mask)const noexcept {
  if (!::tlgen::details::TasksQueueStatsWrite(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::QueueStats::read(::tlgen::basictl::tl_throwable_istream & s, [[maybe_unused]] uint32_t nat_fields_mask) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2, nat_fields_mask);
  s2.pass_data(s);
}

void tlgen::tasks::QueueStats::write(::tlgen::basictl::tl_throwable_ostream & s, [[maybe_unused]] uint32_t nat_fields_mask)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2, nat_fields_mask);
  s2.pass_data(s);
}

bool tlgen::tasks::QueueStats::read_boxed(::tlgen::basictl::tl_istream & s, [[maybe_unused]] uint32_t nat_fields_mask) noexcept {
  if (!::tlgen::details::TasksQueueStatsReadBoxed(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::QueueStats::write_boxed(::tlgen::basictl::tl_ostream & s, [[maybe_unused]] uint32_t nat_fields_mask)const noexcept {
  if (!::tlgen::details::TasksQueueStatsWriteBoxed(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::QueueStats::read_boxed(::tlgen::basictl::tl_throwable_istream & s, [[maybe_unused]] uint32_t nat_fields_mask) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2, nat_fields_mask);
  s2.pass_data(s);
}

void tlgen::tasks::QueueStats::write_boxed(::tlgen::basictl::tl_throwable_ostream & s, [[maybe_unused]] uint32_t nat_fields_mask)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2, nat_fields_mask);
  s2.pass_data(s);
}

void tlgen::details::TasksQueueStatsReset(::tlgen::tasks::QueueStats& item) noexcept {
  (void)item;
  item.waiting_size = 0;
  item.scheduled_size = 0;
  item.in_progress_size = 0;
}

bool tlgen::details::TasksQueueStatsWriteJSON(std::ostream& s, const ::tlgen::tasks::QueueStats& item, [[maybe_unused]] uint32_t nat_fields_mask) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if ((nat_fields_mask & (1<<0)) != 0) {
    add_comma = true;
    s << "\"waiting_size\":";
    s << item.waiting_size;
  }
  if ((nat_fields_mask & (1<<1)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"scheduled_size\":";
    s << item.scheduled_size;
  }
  if ((nat_fields_mask & (1<<2)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"in_progress_size\":";
    s << item.in_progress_size;
  }
  s << "}";
  return true;
}

bool tlgen::details::TasksQueueStatsRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::QueueStats& item, [[maybe_unused]] uint32_t nat_fields_mask) noexcept {
  (void)s;
  (void)item;
  if ((nat_fields_mask & (1<<0)) != 0) {
    if (!s.int_read(item.waiting_size)) { return false; }
  } else {
      item.waiting_size = 0;
  }
  if ((nat_fields_mask & (1<<1)) != 0) {
    if (!s.int_read(item.scheduled_size)) { return false; }
  } else {
      item.scheduled_size = 0;
  }
  if ((nat_fields_mask & (1<<2)) != 0) {
    if (!s.int_read(item.in_progress_size)) { return false; }
  } else {
      item.in_progress_size = 0;
  }
  return true;
}

bool tlgen::details::TasksQueueStatsWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::QueueStats& item, [[maybe_unused]] uint32_t nat_fields_mask) noexcept {
  (void)s;
  (void)item;
  if ((nat_fields_mask & (1<<0)) != 0) {
      if (!s.int_write(item.waiting_size)) { return false;}
  }
  if ((nat_fields_mask & (1<<1)) != 0) {
      if (!s.int_write(item.scheduled_size)) { return false;}
  }
  if ((nat_fields_mask & (1<<2)) != 0) {
      if (!s.int_write(item.in_progress_size)) { return false;}
  }
  return true;
}

bool tlgen::details::TasksQueueStatsReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::QueueStats& item, [[maybe_unused]] uint32_t nat_fields_mask) {
  if (!s.nat_read_exact_tag(0x1d942543)) { return false; }
  return tlgen::details::TasksQueueStatsRead(s, item, nat_fields_mask);
}

bool tlgen::details::TasksQueueStatsWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::QueueStats& item, [[maybe_unused]] uint32_t nat_fields_mask) {
  if (!s.nat_write(0x1d942543)) { return false; }
  return tlgen::details::TasksQueueStatsWrite(s, item, nat_fields_mask);
}

bool tlgen::tasks::QueueTypeInfo::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksQueueTypeInfoWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::QueueTypeInfo::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksQueueTypeInfoRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::QueueTypeInfo::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksQueueTypeInfoWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::QueueTypeInfo::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::QueueTypeInfo::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::QueueTypeInfo::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksQueueTypeInfoReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::QueueTypeInfo::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksQueueTypeInfoWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::QueueTypeInfo::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::QueueTypeInfo::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksQueueTypeInfoReset(::tlgen::tasks::QueueTypeInfo& item) noexcept {
  (void)item;
  item.type_name.clear();
  ::tlgen::details::TasksQueueTypeSettingsReset(item.settings);
  ::tlgen::details::TasksQueueTypeStatsReset(item.stats);
}

bool tlgen::details::TasksQueueTypeInfoWriteJSON(std::ostream& s, const ::tlgen::tasks::QueueTypeInfo& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.type_name.size() != 0) {
    add_comma = true;
    s << "\"type_name\":";
    s << "\"" << item.type_name << "\"";
  }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"settings\":";
  if (!::tlgen::details::TasksQueueTypeSettingsWriteJSON(s, item.settings)) { return false; }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"stats\":";
  if (!::tlgen::details::TasksQueueTypeStatsWriteJSON(s, item.stats)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::TasksQueueTypeInfoRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::QueueTypeInfo& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.type_name)) { return false; }
  if (!::tlgen::details::TasksQueueTypeSettingsRead(s, item.settings)) { return s.set_error_unknown_scenario(); }
  if (!::tlgen::details::TasksQueueTypeStatsRead(s, item.stats)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TasksQueueTypeInfoWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::QueueTypeInfo& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.type_name)) { return false;}
  if (!::tlgen::details::TasksQueueTypeSettingsWrite(s, item.settings)) { return s.set_error_unknown_scenario(); }
  if (!::tlgen::details::TasksQueueTypeStatsWrite(s, item.stats)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TasksQueueTypeInfoReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::QueueTypeInfo& item) {
  if (!s.nat_read_exact_tag(0x38d38d3e)) { return false; }
  return tlgen::details::TasksQueueTypeInfoRead(s, item);
}

bool tlgen::details::TasksQueueTypeInfoWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::QueueTypeInfo& item) {
  if (!s.nat_write(0x38d38d3e)) { return false; }
  return tlgen::details::TasksQueueTypeInfoWrite(s, item);
}

bool tlgen::tasks::QueueTypeSettings::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksQueueTypeSettingsWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::QueueTypeSettings::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksQueueTypeSettingsRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::QueueTypeSettings::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksQueueTypeSettingsWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::QueueTypeSettings::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::QueueTypeSettings::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::QueueTypeSettings::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksQueueTypeSettingsReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::QueueTypeSettings::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksQueueTypeSettingsWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::QueueTypeSettings::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::QueueTypeSettings::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksQueueTypeSettingsReset(::tlgen::tasks::QueueTypeSettings& item) noexcept {
  (void)item;
  item.fields_mask = 0;
  item.is_enabled = false;
  item.is_persistent = false;
  item.priority = 0;
  item.default_retry_time = 0;
  item.default_retry_num = 0;
  item.move_to_queue_type_on_error.clear();
  item.is_blocking = false;
  item.timelimit = 0;
  item.max_queue_size = 0;
}

bool tlgen::details::TasksQueueTypeSettingsWriteJSON(std::ostream& s, const ::tlgen::tasks::QueueTypeSettings& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.fields_mask != 0) {
    add_comma = true;
    s << "\"fields_mask\":";
    s << item.fields_mask;
  }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"is_enabled\":";
    if (!::tlgen::details::BoolWriteJSON(s, item.is_enabled)) { return false; }
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"is_persistent\":";
    if (!::tlgen::details::BoolWriteJSON(s, item.is_persistent)) { return false; }
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"priority\":";
    s << item.priority;
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"default_retry_time\":";
    s << item.default_retry_time;
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"default_retry_num\":";
    s << item.default_retry_num;
  }
  if ((item.fields_mask & (1<<4)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"move_to_queue_type_on_error\":";
    s << "\"" << item.move_to_queue_type_on_error << "\"";
  }
  if ((item.fields_mask & (1<<5)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"is_blocking\":";
    if (!::tlgen::details::BoolWriteJSON(s, item.is_blocking)) { return false; }
  }
  if ((item.fields_mask & (1<<6)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"timelimit\":";
    s << item.timelimit;
  }
  if ((item.fields_mask & (1<<7)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"max_queue_size\":";
    s << item.max_queue_size;
  }
  s << "}";
  return true;
}

bool tlgen::details::TasksQueueTypeSettingsRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::QueueTypeSettings& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.fields_mask)) { return false; }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (!::tlgen::details::BoolReadBoxed(s, item.is_enabled)) { return false; }
  } else {
      item.is_enabled = false;
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (!::tlgen::details::BoolReadBoxed(s, item.is_persistent)) { return false; }
  } else {
      item.is_persistent = false;
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (!s.int_read(item.priority)) { return false; }
  } else {
      item.priority = 0;
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (!s.int_read(item.default_retry_time)) { return false; }
  } else {
      item.default_retry_time = 0;
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (!s.int_read(item.default_retry_num)) { return false; }
  } else {
      item.default_retry_num = 0;
  }
  if ((item.fields_mask & (1<<4)) != 0) {
    if (!s.string_read(item.move_to_queue_type_on_error)) { return false; }
  } else {
      item.move_to_queue_type_on_error.clear();
  }
  if ((item.fields_mask & (1<<5)) != 0) {
    if (!::tlgen::details::BoolReadBoxed(s, item.is_blocking)) { return false; }
  } else {
      item.is_blocking = false;
  }
  if ((item.fields_mask & (1<<6)) != 0) {
    if (!s.int_read(item.timelimit)) { return false; }
  } else {
      item.timelimit = 0;
  }
  if ((item.fields_mask & (1<<7)) != 0) {
    if (!s.int_read(item.max_queue_size)) { return false; }
  } else {
      item.max_queue_size = 0;
  }
  return true;
}

bool tlgen::details::TasksQueueTypeSettingsWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::QueueTypeSettings& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.fields_mask)) { return false;}
  if ((item.fields_mask & (1<<0)) != 0) {
      if (!::tlgen::details::BoolWriteBoxed(s, item.is_enabled)) { return false; }
  }
  if ((item.fields_mask & (1<<1)) != 0) {
      if (!::tlgen::details::BoolWriteBoxed(s, item.is_persistent)) { return false; }
  }
  if ((item.fields_mask & (1<<2)) != 0) {
      if (!s.int_write(item.priority)) { return false;}
  }
  if ((item.fields_mask & (1<<3)) != 0) {
      if (!s.int_write(item.default_retry_time)) { return false;}
  }
  if ((item.fields_mask & (1<<3)) != 0) {
      if (!s.int_write(item.default_retry_num)) { return false;}
  }
  if ((item.fields_mask & (1<<4)) != 0) {
      if (!s.string_write(item.move_to_queue_type_on_error)) { return false;}
  }
  if ((item.fields_mask & (1<<5)) != 0) {
      if (!::tlgen::details::BoolWriteBoxed(s, item.is_blocking)) { return false; }
  }
  if ((item.fields_mask & (1<<6)) != 0) {
      if (!s.int_write(item.timelimit)) { return false;}
  }
  if ((item.fields_mask & (1<<7)) != 0) {
      if (!s.int_write(item.max_queue_size)) { return false;}
  }
  return true;
}

bool tlgen::details::TasksQueueTypeSettingsReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::QueueTypeSettings& item) {
  if (!s.nat_read_exact_tag(0x561fbc09)) { return false; }
  return tlgen::details::TasksQueueTypeSettingsRead(s, item);
}

bool tlgen::details::TasksQueueTypeSettingsWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::QueueTypeSettings& item) {
  if (!s.nat_write(0x561fbc09)) { return false; }
  return tlgen::details::TasksQueueTypeSettingsWrite(s, item);
}

bool tlgen::tasks::QueueTypeStats::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksQueueTypeStatsWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::QueueTypeStats::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksQueueTypeStatsRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::QueueTypeStats::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksQueueTypeStatsWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::QueueTypeStats::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::QueueTypeStats::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::QueueTypeStats::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksQueueTypeStatsReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::QueueTypeStats::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksQueueTypeStatsWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::QueueTypeStats::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::QueueTypeStats::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksQueueTypeStatsReset(::tlgen::tasks::QueueTypeStats& item) noexcept {
  (void)item;
  item.fields_mask = 0;
  item.waiting_size = 0;
  item.scheduled_size = 0;
  item.in_progress_size = 0;
  item.num_queues = 0;
}

bool tlgen::details::TasksQueueTypeStatsWriteJSON(std::ostream& s, const ::tlgen::tasks::QueueTypeStats& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.fields_mask != 0) {
    add_comma = true;
    s << "\"fields_mask\":";
    s << item.fields_mask;
  }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"waiting_size\":";
    s << item.waiting_size;
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"scheduled_size\":";
    s << item.scheduled_size;
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"in_progress_size\":";
    s << item.in_progress_size;
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"num_queues\":";
    s << item.num_queues;
  }
  s << "}";
  return true;
}

bool tlgen::details::TasksQueueTypeStatsRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::QueueTypeStats& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.fields_mask)) { return false; }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (!s.long_read(item.waiting_size)) { return false; }
  } else {
      item.waiting_size = 0;
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (!s.long_read(item.scheduled_size)) { return false; }
  } else {
      item.scheduled_size = 0;
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (!s.long_read(item.in_progress_size)) { return false; }
  } else {
      item.in_progress_size = 0;
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (!s.int_read(item.num_queues)) { return false; }
  } else {
      item.num_queues = 0;
  }
  return true;
}

bool tlgen::details::TasksQueueTypeStatsWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::QueueTypeStats& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.fields_mask)) { return false;}
  if ((item.fields_mask & (1<<0)) != 0) {
      if (!s.long_write(item.waiting_size)) { return false;}
  }
  if ((item.fields_mask & (1<<1)) != 0) {
      if (!s.long_write(item.scheduled_size)) { return false;}
  }
  if ((item.fields_mask & (1<<2)) != 0) {
      if (!s.long_write(item.in_progress_size)) { return false;}
  }
  if ((item.fields_mask & (1<<3)) != 0) {
      if (!s.int_write(item.num_queues)) { return false;}
  }
  return true;
}

bool tlgen::details::TasksQueueTypeStatsReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::QueueTypeStats& item) {
  if (!s.nat_read_exact_tag(0xe1b785f2)) { return false; }
  return tlgen::details::TasksQueueTypeStatsRead(s, item);
}

bool tlgen::details::TasksQueueTypeStatsWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::QueueTypeStats& item) {
  if (!s.nat_write(0xe1b785f2)) { return false; }
  return tlgen::details::TasksQueueTypeStatsWrite(s, item);
}

bool tlgen::tasks::Task::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksTaskWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::Task::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::Task::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::Task::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::Task::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::Task::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::Task::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::Task::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::Task::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksTaskReset(::tlgen::tasks::Task& item) noexcept {
  (void)item;
  item.fields_mask = 0;
  item.flags = 0;
  item.tag.clear();
  item.data.clear();
  item.id = 0;
  item.retries = 0;
  item.scheduled_time = 0;
  item.deadline = 0;
}

bool tlgen::details::TasksTaskWriteJSON(std::ostream& s, const ::tlgen::tasks::Task& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.fields_mask != 0) {
    add_comma = true;
    s << "\"fields_mask\":";
    s << item.fields_mask;
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.tag.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"tag\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.tag)) { return false; }
  }
  if (item.data.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"data\":";
    s << "\"" << item.data << "\"";
  }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"id\":";
    s << item.id;
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"retries\":";
    s << item.retries;
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"scheduled_time\":";
    s << item.scheduled_time;
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"deadline\":";
    s << item.deadline;
  }
  s << "}";
  return true;
}

bool tlgen::details::TasksTaskRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::Task& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.fields_mask)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, item.tag)) { return false; }
  if (!s.string_read(item.data)) { return false; }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (!s.long_read(item.id)) { return false; }
  } else {
      item.id = 0;
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (!s.int_read(item.retries)) { return false; }
  } else {
      item.retries = 0;
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (!s.int_read(item.scheduled_time)) { return false; }
  } else {
      item.scheduled_time = 0;
  }
  if ((item.fields_mask & (1<<3)) != 0) {
    if (!s.int_read(item.deadline)) { return false; }
  } else {
      item.deadline = 0;
  }
  return true;
}

bool tlgen::details::TasksTaskWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::Task& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.fields_mask)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item.tag)) { return false; }
  if (!s.string_write(item.data)) { return false;}
  if ((item.fields_mask & (1<<0)) != 0) {
      if (!s.long_write(item.id)) { return false;}
  }
  if ((item.fields_mask & (1<<1)) != 0) {
      if (!s.int_write(item.retries)) { return false;}
  }
  if ((item.fields_mask & (1<<2)) != 0) {
      if (!s.int_write(item.scheduled_time)) { return false;}
  }
  if ((item.fields_mask & (1<<3)) != 0) {
      if (!s.int_write(item.deadline)) { return false;}
  }
  return true;
}

bool tlgen::details::TasksTaskReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::Task& item) {
  if (!s.nat_read_exact_tag(0x7c23bc2c)) { return false; }
  return tlgen::details::TasksTaskRead(s, item);
}

bool tlgen::details::TasksTaskWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::Task& item) {
  if (!s.nat_write(0x7c23bc2c)) { return false; }
  return tlgen::details::TasksTaskWrite(s, item);
}

bool tlgen::tasks::TaskInfo::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksTaskInfoWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::TaskInfo::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskInfoRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::TaskInfo::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskInfoWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::TaskInfo::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskInfo::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::TaskInfo::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskInfoReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::TaskInfo::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskInfoWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::TaskInfo::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskInfo::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksTaskInfoReset(::tlgen::tasks::TaskInfo& item) noexcept {
  (void)item;
  item.type_name.clear();
  item.queue_id.clear();
  ::tlgen::details::TasksTaskReset(item.task);
}

bool tlgen::details::TasksTaskInfoWriteJSON(std::ostream& s, const ::tlgen::tasks::TaskInfo& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.type_name.size() != 0) {
    add_comma = true;
    s << "\"type_name\":";
    s << "\"" << item.type_name << "\"";
  }
  if (item.queue_id.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"queue_id\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.queue_id)) { return false; }
  }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"task\":";
  if (!::tlgen::details::TasksTaskWriteJSON(s, item.task)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::TasksTaskInfoRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskInfo& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.type_name)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, item.queue_id)) { return false; }
  if (!::tlgen::details::TasksTaskRead(s, item.task)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TasksTaskInfoWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskInfo& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.type_name)) { return false;}
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item.queue_id)) { return false; }
  if (!::tlgen::details::TasksTaskWrite(s, item.task)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TasksTaskInfoReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskInfo& item) {
  if (!s.nat_read_exact_tag(0x06f0c6a6)) { return false; }
  return tlgen::details::TasksTaskInfoRead(s, item);
}

bool tlgen::details::TasksTaskInfoWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskInfo& item) {
  if (!s.nat_write(0x06f0c6a6)) { return false; }
  return tlgen::details::TasksTaskInfoWrite(s, item);
}

bool tlgen::details::TasksTaskInfoMaybeWriteJSON(std::ostream & s, const std::optional<::tlgen::tasks::TaskInfo>& item) {
  s << "{";
  if (item) {
    s << "\"ok\":true";
    s << ",\"value\":";
    if (!::tlgen::details::TasksTaskInfoWriteJSON(s, *item)) { return false; }
  }
  s << "}";
  return true;
}
bool tlgen::details::TasksTaskInfoMaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::tasks::TaskInfo>& item) {
  bool has_item = false;
  if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
  if (has_item) {
    if (!item) {
      item.emplace();
    }
    if (!::tlgen::details::TasksTaskInfoRead(s, *item)) { return s.set_error_unknown_scenario(); }
    return true;
  }
  item.reset();
  return true;
}

bool tlgen::details::TasksTaskInfoMaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::tasks::TaskInfo>& item) {
  if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
  if (item) {
    if (!::tlgen::details::TasksTaskInfoWrite(s, *item)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

static const std::string_view TasksTaskStatus_tbl_tl_name[]{"tasks.taskStatusNotCurrentlyInEngine", "tasks.taskStatusScheduled", "tasks.taskStatusWaiting", "tasks.taskStatusInProgress"};
static const uint32_t TasksTaskStatus_tbl_tl_tag[]{0xb207caaa, 0x0aca80a9, 0x16739c2c, 0x06ef70e7};

bool tlgen::tasks::TaskStatus::write_json(std::ostream & s)const {
  if (!::tlgen::details::TasksTaskStatusWriteJSON(s, *this)) { return false; }
  return true;
}
bool tlgen::tasks::TaskStatus::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskStatusReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::tasks::TaskStatus::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskStatusWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  return true;
}

void tlgen::tasks::TaskStatus::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskStatus::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

std::string_view tlgen::tasks::TaskStatus::tl_name() const {
  return TasksTaskStatus_tbl_tl_name[value.index()];
}
uint32_t tlgen::tasks::TaskStatus::tl_tag() const {
  return TasksTaskStatus_tbl_tl_tag[value.index()];
}


void tlgen::details::TasksTaskStatusReset(::tlgen::tasks::TaskStatus& item) noexcept{
  item.value.emplace<0>(); // TODO - optimize, if already 0, call Reset function
}

bool tlgen::details::TasksTaskStatusWriteJSON(std::ostream & s, const ::tlgen::tasks::TaskStatus& item) noexcept {
  s << "\"" << TasksTaskStatus_tbl_tl_name[item.value.index()] << "\"";
  return true;
}
bool tlgen::details::TasksTaskStatusReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskStatus& item) noexcept {
  uint32_t nat;
  if (!s.nat_read(nat)) { return false; }
  switch (nat) {
  case 0xb207caaa:
    if (item.value.index() != 0) { item.value.emplace<0>(); }
    break;
  case 0x0aca80a9:
    if (item.value.index() != 1) { item.value.emplace<1>(); }
    break;
  case 0x16739c2c:
    if (item.value.index() != 2) { item.value.emplace<2>(); }
    break;
  case 0x06ef70e7:
    if (item.value.index() != 3) { item.value.emplace<3>(); }
    break;
  default:
    return s.set_error_union_tag();
    }
  return true;
}

bool tlgen::details::TasksTaskStatusWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskStatus& item) noexcept{
  if (!s.nat_write(TasksTaskStatus_tbl_tl_tag[item.value.index()])) { return false; }
  switch (item.value.index()) {
  }
  return true;
}

bool tlgen::tasks::TaskStatusInProgress::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksTaskStatusInProgressWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::TaskStatusInProgress::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskStatusInProgressRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::TaskStatusInProgress::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskStatusInProgressWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::TaskStatusInProgress::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskStatusInProgress::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::TaskStatusInProgress::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskStatusInProgressReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::TaskStatusInProgress::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskStatusInProgressWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::TaskStatusInProgress::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskStatusInProgress::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksTaskStatusInProgressReset(::tlgen::tasks::TaskStatusInProgress& item) noexcept {
  (void)item;
}

bool tlgen::details::TasksTaskStatusInProgressWriteJSON(std::ostream& s, const ::tlgen::tasks::TaskStatusInProgress& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::TasksTaskStatusInProgressRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskStatusInProgress& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TasksTaskStatusInProgressWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskStatusInProgress& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TasksTaskStatusInProgressReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskStatusInProgress& item) {
  if (!s.nat_read_exact_tag(0x06ef70e7)) { return false; }
  return tlgen::details::TasksTaskStatusInProgressRead(s, item);
}

bool tlgen::details::TasksTaskStatusInProgressWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskStatusInProgress& item) {
  if (!s.nat_write(0x06ef70e7)) { return false; }
  return tlgen::details::TasksTaskStatusInProgressWrite(s, item);
}

bool tlgen::tasks::TaskStatusNotCurrentlyInEngine::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksTaskStatusNotCurrentlyInEngineWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::TaskStatusNotCurrentlyInEngine::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskStatusNotCurrentlyInEngineRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::TaskStatusNotCurrentlyInEngine::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskStatusNotCurrentlyInEngineWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::TaskStatusNotCurrentlyInEngine::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskStatusNotCurrentlyInEngine::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::TaskStatusNotCurrentlyInEngine::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskStatusNotCurrentlyInEngineReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::TaskStatusNotCurrentlyInEngine::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskStatusNotCurrentlyInEngineWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::TaskStatusNotCurrentlyInEngine::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskStatusNotCurrentlyInEngine::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksTaskStatusNotCurrentlyInEngineReset(::tlgen::tasks::TaskStatusNotCurrentlyInEngine& item) noexcept {
  (void)item;
}

bool tlgen::details::TasksTaskStatusNotCurrentlyInEngineWriteJSON(std::ostream& s, const ::tlgen::tasks::TaskStatusNotCurrentlyInEngine& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::TasksTaskStatusNotCurrentlyInEngineRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskStatusNotCurrentlyInEngine& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TasksTaskStatusNotCurrentlyInEngineWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskStatusNotCurrentlyInEngine& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TasksTaskStatusNotCurrentlyInEngineReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskStatusNotCurrentlyInEngine& item) {
  if (!s.nat_read_exact_tag(0xb207caaa)) { return false; }
  return tlgen::details::TasksTaskStatusNotCurrentlyInEngineRead(s, item);
}

bool tlgen::details::TasksTaskStatusNotCurrentlyInEngineWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskStatusNotCurrentlyInEngine& item) {
  if (!s.nat_write(0xb207caaa)) { return false; }
  return tlgen::details::TasksTaskStatusNotCurrentlyInEngineWrite(s, item);
}

bool tlgen::tasks::TaskStatusScheduled::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksTaskStatusScheduledWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::TaskStatusScheduled::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskStatusScheduledRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::TaskStatusScheduled::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskStatusScheduledWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::TaskStatusScheduled::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskStatusScheduled::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::TaskStatusScheduled::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskStatusScheduledReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::TaskStatusScheduled::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskStatusScheduledWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::TaskStatusScheduled::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskStatusScheduled::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksTaskStatusScheduledReset(::tlgen::tasks::TaskStatusScheduled& item) noexcept {
  (void)item;
}

bool tlgen::details::TasksTaskStatusScheduledWriteJSON(std::ostream& s, const ::tlgen::tasks::TaskStatusScheduled& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::TasksTaskStatusScheduledRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskStatusScheduled& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TasksTaskStatusScheduledWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskStatusScheduled& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TasksTaskStatusScheduledReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskStatusScheduled& item) {
  if (!s.nat_read_exact_tag(0x0aca80a9)) { return false; }
  return tlgen::details::TasksTaskStatusScheduledRead(s, item);
}

bool tlgen::details::TasksTaskStatusScheduledWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskStatusScheduled& item) {
  if (!s.nat_write(0x0aca80a9)) { return false; }
  return tlgen::details::TasksTaskStatusScheduledWrite(s, item);
}

bool tlgen::tasks::TaskStatusWaiting::write_json(std::ostream& s)const {
  if (!::tlgen::details::TasksTaskStatusWaitingWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tasks::TaskStatusWaiting::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskStatusWaitingRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::TaskStatusWaiting::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskStatusWaitingWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::TaskStatusWaiting::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskStatusWaiting::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tasks::TaskStatusWaiting::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TasksTaskStatusWaitingReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tasks::TaskStatusWaiting::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TasksTaskStatusWaitingWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tasks::TaskStatusWaiting::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tasks::TaskStatusWaiting::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TasksTaskStatusWaitingReset(::tlgen::tasks::TaskStatusWaiting& item) noexcept {
  (void)item;
}

bool tlgen::details::TasksTaskStatusWaitingWriteJSON(std::ostream& s, const ::tlgen::tasks::TaskStatusWaiting& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::TasksTaskStatusWaitingRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskStatusWaiting& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TasksTaskStatusWaitingWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskStatusWaiting& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TasksTaskStatusWaitingReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::TaskStatusWaiting& item) {
  if (!s.nat_read_exact_tag(0x16739c2c)) { return false; }
  return tlgen::details::TasksTaskStatusWaitingRead(s, item);
}

bool tlgen::details::TasksTaskStatusWaitingWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::TaskStatusWaiting& item) {
  if (!s.nat_write(0x16739c2c)) { return false; }
  return tlgen::details::TasksTaskStatusWaitingWrite(s, item);
}
