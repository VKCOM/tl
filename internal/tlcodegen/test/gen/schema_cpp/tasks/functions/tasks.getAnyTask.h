// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "tasks/types/tasks.taskInfo.h"


namespace tlgen { namespace tasks { 
struct GetAnyTask {

  std::string_view tl_name() const { return "tasks.getAnyTask"; }
  uint32_t tl_tag() const { return 0x4a9c7dbb; }

  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const;

  bool read_result(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::tasks::TaskInfo> & result) noexcept;
  bool write_result(::tlgen::basictl::tl_ostream & s, std::optional<::tlgen::tasks::TaskInfo> & result) noexcept;

  void read_result(::tlgen::basictl::tl_throwable_istream & s, std::optional<::tlgen::tasks::TaskInfo> & result);
  void write_result(::tlgen::basictl::tl_throwable_ostream & s, std::optional<::tlgen::tasks::TaskInfo> & result);

  friend std::ostream& operator<<(std::ostream& s, const GetAnyTask& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::tasks

