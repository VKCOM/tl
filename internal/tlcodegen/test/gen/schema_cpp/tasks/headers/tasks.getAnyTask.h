// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "tasks/functions/tasks.getAnyTask.h"
#include "tasks/types/tasks.taskInfo.h"

namespace tlgen { namespace details { 

void TasksGetAnyTaskReset(::tlgen::tasks::GetAnyTask& item) noexcept;

bool TasksGetAnyTaskWriteJSON(std::ostream& s, const ::tlgen::tasks::GetAnyTask& item) noexcept;
bool TasksGetAnyTaskRead(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::GetAnyTask& item) noexcept; 
bool TasksGetAnyTaskWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetAnyTask& item) noexcept;
bool TasksGetAnyTaskReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tasks::GetAnyTask& item);
bool TasksGetAnyTaskWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetAnyTask& item);

bool TasksGetAnyTaskReadResult(::tlgen::basictl::tl_istream & s, const ::tlgen::tasks::GetAnyTask& item, std::optional<::tlgen::tasks::TaskInfo>& result);
bool TasksGetAnyTaskWriteResult(::tlgen::basictl::tl_ostream & s, const ::tlgen::tasks::GetAnyTask& item, const std::optional<::tlgen::tasks::TaskInfo>& result);
    
}} // namespace tlgen::details

