// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "service6/types/service6.findWithBoundsResult.h"
#include "__common_namespace/types/Either.h"


namespace tlgen { namespace service6 { 
struct MultiFindWithBounds {
  std::vector<int32_t> clusters;

  std::string_view tl_name() const { return "service6.multiFindWithBounds"; }
  uint32_t tl_tag() const { return 0x84b168cf; }

  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const;

  bool read_result(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::Either<int32_t, std::vector<::tlgen::service6::FindWithBoundsResult>>> & result) noexcept;
  bool write_result(::tlgen::basictl::tl_ostream & s, std::vector<::tlgen::Either<int32_t, std::vector<::tlgen::service6::FindWithBoundsResult>>> & result) noexcept;

  void read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<::tlgen::Either<int32_t, std::vector<::tlgen::service6::FindWithBoundsResult>>> & result);
  void write_result(::tlgen::basictl::tl_throwable_ostream & s, std::vector<::tlgen::Either<int32_t, std::vector<::tlgen::service6::FindWithBoundsResult>>> & result);

  friend std::ostream& operator<<(std::ostream& s, const MultiFindWithBounds& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::service6

