// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "tree_stats/headers/tree_stats.ObjectLimitValue.h"
#include "tree_stats/headers/tree_stats.objectLimitValueLong.h"
#include "tree_stats/headers/tree_stats.objectLimitValueDouble.h"


static const std::string_view TreeStatsObjectLimitValue_tbl_tl_name[]{"tree_stats.objectLimitValueLong", "tree_stats.objectLimitValueDouble"};
static const uint32_t TreeStatsObjectLimitValue_tbl_tl_tag[]{0x73111993, 0x5dfb8816};

bool tlgen::tree_stats::ObjectLimitValue::write_json(std::ostream & s)const {
  if (!::tlgen::details::TreeStatsObjectLimitValueWriteJSON(s, *this)) { return false; }
  return true;
}
bool tlgen::tree_stats::ObjectLimitValue::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TreeStatsObjectLimitValueReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::tree_stats::ObjectLimitValue::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::TreeStatsObjectLimitValueWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  return true;
}

void tlgen::tree_stats::ObjectLimitValue::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tree_stats::ObjectLimitValue::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

std::string_view tlgen::tree_stats::ObjectLimitValue::tl_name() const {
  return TreeStatsObjectLimitValue_tbl_tl_name[value.index()];
}
uint32_t tlgen::tree_stats::ObjectLimitValue::tl_tag() const {
  return TreeStatsObjectLimitValue_tbl_tl_tag[value.index()];
}


void tlgen::details::TreeStatsObjectLimitValueReset(::tlgen::tree_stats::ObjectLimitValue& item) noexcept{
  item.value.emplace<0>(); // TODO - optimize, if already 0, call Reset function
}

bool tlgen::details::TreeStatsObjectLimitValueWriteJSON(std::ostream & s, const ::tlgen::tree_stats::ObjectLimitValue& item) noexcept {
  s << "{";
  s << "\"type\":";
  s << "\"" << TreeStatsObjectLimitValue_tbl_tl_name[item.value.index()] << "\"";
  switch (item.value.index()) {
  case 1:
    if (std::get<1>(item.value) != 0) {
      s << ",\"value\":";
      if (!::tlgen::details::TreeStatsObjectLimitValueDoubleWriteJSON(s, std::get<1>(item.value))) { return false; }
    }
    break;
  }
  s << "}";
  return true;
}
bool tlgen::details::TreeStatsObjectLimitValueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tree_stats::ObjectLimitValue& item) noexcept {
  uint32_t nat;
  if (!s.nat_read(nat)) { return false; }
  switch (nat) {
  case 0x73111993:
    if (item.value.index() != 0) { item.value.emplace<0>(); }
    break;
  case 0x5dfb8816:
    if (item.value.index() != 1) { item.value.emplace<1>(); }
    if (!::tlgen::details::TreeStatsObjectLimitValueDoubleRead(s, std::get<1>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  default:
    return s.set_error_union_tag();
    }
  return true;
}

bool tlgen::details::TreeStatsObjectLimitValueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tree_stats::ObjectLimitValue& item) noexcept{
  if (!s.nat_write(TreeStatsObjectLimitValue_tbl_tl_tag[item.value.index()])) { return false; }
  switch (item.value.index()) {
  case 1:
    if (!::tlgen::details::TreeStatsObjectLimitValueDoubleWrite(s, std::get<1>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  }
  return true;
}

void tlgen::details::TreeStatsObjectLimitValueDoubleReset(::tlgen::tree_stats::ObjectLimitValueDouble& item) noexcept {
  (void)item;
  item = 0;
}

bool tlgen::details::TreeStatsObjectLimitValueDoubleWriteJSON(std::ostream& s, const ::tlgen::tree_stats::ObjectLimitValueDouble& item) noexcept {
  (void)s;
  (void)item;
  s << item;
  return true;
}

bool tlgen::details::TreeStatsObjectLimitValueDoubleRead(::tlgen::basictl::tl_istream & s, ::tlgen::tree_stats::ObjectLimitValueDouble& item) noexcept {
  (void)s;
  (void)item;
  if (!s.double_read(item)) { return false; }
  return true;
}

bool tlgen::details::TreeStatsObjectLimitValueDoubleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tree_stats::ObjectLimitValueDouble& item) noexcept {
  (void)s;
  (void)item;
  if (!s.double_write(item)) { return false;}
  return true;
}

bool tlgen::details::TreeStatsObjectLimitValueDoubleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tree_stats::ObjectLimitValueDouble& item) {
  if (!s.nat_read_exact_tag(0x5dfb8816)) { return false; }
  return tlgen::details::TreeStatsObjectLimitValueDoubleRead(s, item);
}

bool tlgen::details::TreeStatsObjectLimitValueDoubleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tree_stats::ObjectLimitValueDouble& item) {
  if (!s.nat_write(0x5dfb8816)) { return false; }
  return tlgen::details::TreeStatsObjectLimitValueDoubleWrite(s, item);
}

bool tlgen::tree_stats::ObjectLimitValueLong::write_json(std::ostream& s)const {
  if (!::tlgen::details::TreeStatsObjectLimitValueLongWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::tree_stats::ObjectLimitValueLong::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TreeStatsObjectLimitValueLongRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tree_stats::ObjectLimitValueLong::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::TreeStatsObjectLimitValueLongWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tree_stats::ObjectLimitValueLong::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::tree_stats::ObjectLimitValueLong::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::tree_stats::ObjectLimitValueLong::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TreeStatsObjectLimitValueLongReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::tree_stats::ObjectLimitValueLong::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::TreeStatsObjectLimitValueLongWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::tree_stats::ObjectLimitValueLong::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::tree_stats::ObjectLimitValueLong::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TreeStatsObjectLimitValueLongReset(::tlgen::tree_stats::ObjectLimitValueLong& item) noexcept {
  (void)item;
}

bool tlgen::details::TreeStatsObjectLimitValueLongWriteJSON(std::ostream& s, const ::tlgen::tree_stats::ObjectLimitValueLong& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::TreeStatsObjectLimitValueLongRead(::tlgen::basictl::tl_istream & s, ::tlgen::tree_stats::ObjectLimitValueLong& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TreeStatsObjectLimitValueLongWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::tree_stats::ObjectLimitValueLong& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TreeStatsObjectLimitValueLongReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::tree_stats::ObjectLimitValueLong& item) {
  if (!s.nat_read_exact_tag(0x73111993)) { return false; }
  return tlgen::details::TreeStatsObjectLimitValueLongRead(s, item);
}

bool tlgen::details::TreeStatsObjectLimitValueLongWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::tree_stats::ObjectLimitValueLong& item) {
  if (!s.nat_write(0x73111993)) { return false; }
  return tlgen::details::TreeStatsObjectLimitValueLongWrite(s, item);
}
