// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "service4/headers/service4.modifiedNewsEntry.h"
#include "service4/headers/service4.object.h"
#include "__common_namespace/headers/Bool.h"
#include "__common_namespace/headers/int.h"


bool tlgen::service4::ModifiedNewsEntry::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service4ModifiedNewsEntryWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service4::ModifiedNewsEntry::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service4ModifiedNewsEntryRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service4::ModifiedNewsEntry::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::Service4ModifiedNewsEntryWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service4::ModifiedNewsEntry::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service4::ModifiedNewsEntry::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service4::ModifiedNewsEntry::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service4ModifiedNewsEntryReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service4::ModifiedNewsEntry::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::Service4ModifiedNewsEntryWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service4::ModifiedNewsEntry::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service4::ModifiedNewsEntry::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service4ModifiedNewsEntryReset(::tlgen::service4::ModifiedNewsEntry& item) noexcept {
  (void)item;
  ::tlgen::details::Service4ObjectReset(item.object);
  item.creation_date = 0;
  item.fields_mask = 0;
  item.restoration_date = 0;
  item.deletion_date = 0;
  item.hidden_by_privacy = false;
}

bool tlgen::details::Service4ModifiedNewsEntryWriteJSON(std::ostream& s, const ::tlgen::service4::ModifiedNewsEntry& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  add_comma = true;
  s << "\"object\":";
  if (!::tlgen::details::Service4ObjectWriteJSON(s, item.object)) { return false; }
  if (item.creation_date != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"creation_date\":";
    s << item.creation_date;
  }
  if (item.fields_mask != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"fields_mask\":";
    s << item.fields_mask;
  }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"restoration_date\":";
    s << item.restoration_date;
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"deletion_date\":";
    s << item.deletion_date;
  }
  if ((item.fields_mask & (1<<16)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"hidden_by_privacy\":";
    if (!::tlgen::details::BoolWriteJSON(s, item.hidden_by_privacy)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::Service4ModifiedNewsEntryRead(::tlgen::basictl::tl_istream & s, ::tlgen::service4::ModifiedNewsEntry& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Service4ObjectRead(s, item.object)) { return s.set_error_unknown_scenario(); }
  if (!s.int_read(item.creation_date)) { return false; }
  if (!s.nat_read(item.fields_mask)) { return false; }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (!s.int_read(item.restoration_date)) { return false; }
  } else {
      item.restoration_date = 0;
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (!s.int_read(item.deletion_date)) { return false; }
  } else {
      item.deletion_date = 0;
  }
  if ((item.fields_mask & (1<<16)) != 0) {
    if (!::tlgen::details::BoolReadBoxed(s, item.hidden_by_privacy)) { return false; }
  } else {
      item.hidden_by_privacy = false;
  }
  return true;
}

bool tlgen::details::Service4ModifiedNewsEntryWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service4::ModifiedNewsEntry& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Service4ObjectWrite(s, item.object)) { return s.set_error_unknown_scenario(); }
  if (!s.int_write(item.creation_date)) { return false;}
  if (!s.nat_write(item.fields_mask)) { return false;}
  if ((item.fields_mask & (1<<0)) != 0) {
      if (!s.int_write(item.restoration_date)) { return false;}
  }
  if ((item.fields_mask & (1<<1)) != 0) {
      if (!s.int_write(item.deletion_date)) { return false;}
  }
  if ((item.fields_mask & (1<<16)) != 0) {
      if (!::tlgen::details::BoolWriteBoxed(s, item.hidden_by_privacy)) { return false; }
  }
  return true;
}

bool tlgen::details::Service4ModifiedNewsEntryReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service4::ModifiedNewsEntry& item) {
  if (!s.nat_read_exact_tag(0xda19832a)) { return false; }
  return tlgen::details::Service4ModifiedNewsEntryRead(s, item);
}

bool tlgen::details::Service4ModifiedNewsEntryWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service4::ModifiedNewsEntry& item) {
  if (!s.nat_write(0xda19832a)) { return false; }
  return tlgen::details::Service4ModifiedNewsEntryWrite(s, item);
}

bool tlgen::service4::Object::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service4ObjectWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service4::Object::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service4ObjectRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service4::Object::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::Service4ObjectWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service4::Object::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service4::Object::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service4::Object::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service4ObjectReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service4::Object::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::Service4ObjectWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service4::Object::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service4::Object::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service4ObjectReset(::tlgen::service4::Object& item) noexcept {
  (void)item;
  item.type = 0;
  item.joint_id.clear();
  item.object_id.clear();
}

bool tlgen::details::Service4ObjectWriteJSON(std::ostream& s, const ::tlgen::service4::Object& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.type != 0) {
    add_comma = true;
    s << "\"type\":";
    s << item.type;
  }
  if (item.joint_id.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"joint_id\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.joint_id)) { return false; }
  }
  if (item.object_id.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"object_id\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.object_id)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::Service4ObjectRead(::tlgen::basictl::tl_istream & s, ::tlgen::service4::Object& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.type)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, item.joint_id)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, item.object_id)) { return false; }
  return true;
}

bool tlgen::details::Service4ObjectWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service4::Object& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.type)) { return false;}
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item.joint_id)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item.object_id)) { return false; }
  return true;
}

bool tlgen::details::Service4ObjectReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service4::Object& item) {
  if (!s.nat_read_exact_tag(0xa6eeca4f)) { return false; }
  return tlgen::details::Service4ObjectRead(s, item);
}

bool tlgen::details::Service4ObjectWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service4::Object& item) {
  if (!s.nat_write(0xa6eeca4f)) { return false; }
  return tlgen::details::Service4ObjectWrite(s, item);
}
