// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "__common_namespace/types/myTuple.h"

namespace tlgen { namespace details { 

void MyTuple10Reset(::tlgen::MyTuplen<10>& item) noexcept;

bool MyTuple10WriteJSON(std::ostream& s, const ::tlgen::MyTuplen<10>& item) noexcept;
bool MyTuple10Read(::tlgen::basictl::tl_istream & s, ::tlgen::MyTuplen<10>& item) noexcept; 
bool MyTuple10Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyTuplen<10>& item) noexcept;
bool MyTuple10ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyTuplen<10>& item);
bool MyTuple10WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyTuplen<10>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

bool MyTuple10MaybeWriteJSON(std::ostream & s, const std::optional<::tlgen::MyTuplen<10>>& item);

bool MyTuple10MaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::MyTuplen<10>>& item);
bool MyTuple10MaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::MyTuplen<10>>& item);


}} // namespace tlgen::details

