// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "__common_namespace/types/tuple.h"
#include "__common_namespace/types/int.h"

namespace tlgen { namespace details { 

void TupleIntReset(std::vector<int32_t>& item) noexcept;

bool TupleIntWriteJSON(std::ostream& s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept;
bool TupleIntRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept; 
bool TupleIntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept;
bool TupleIntReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n);
bool TupleIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void TupleInt3Reset(std::array<int32_t, 3>& item) noexcept;

bool TupleInt3WriteJSON(std::ostream& s, const std::array<int32_t, 3>& item) noexcept;
bool TupleInt3Read(::tlgen::basictl::tl_istream & s, std::array<int32_t, 3>& item) noexcept; 
bool TupleInt3Write(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 3>& item) noexcept;
bool TupleInt3ReadBoxed(::tlgen::basictl::tl_istream & s, std::array<int32_t, 3>& item);
bool TupleInt3WriteBoxed(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 3>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void TupleIntBoxedReset(std::vector<int32_t>& item) noexcept;

bool TupleIntBoxedWriteJSON(std::ostream& s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept;
bool TupleIntBoxedRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept; 
bool TupleIntBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept;
bool TupleIntBoxedReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n);
bool TupleIntBoxedWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void TupleIntBoxed10Reset(std::array<int32_t, 10>& item) noexcept;

bool TupleIntBoxed10WriteJSON(std::ostream& s, const std::array<int32_t, 10>& item) noexcept;
bool TupleIntBoxed10Read(::tlgen::basictl::tl_istream & s, std::array<int32_t, 10>& item) noexcept; 
bool TupleIntBoxed10Write(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 10>& item) noexcept;
bool TupleIntBoxed10ReadBoxed(::tlgen::basictl::tl_istream & s, std::array<int32_t, 10>& item);
bool TupleIntBoxed10WriteBoxed(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 10>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void TupleIntBoxed2Reset(std::array<int32_t, 2>& item) noexcept;

bool TupleIntBoxed2WriteJSON(std::ostream& s, const std::array<int32_t, 2>& item) noexcept;
bool TupleIntBoxed2Read(::tlgen::basictl::tl_istream & s, std::array<int32_t, 2>& item) noexcept; 
bool TupleIntBoxed2Write(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 2>& item) noexcept;
bool TupleIntBoxed2ReadBoxed(::tlgen::basictl::tl_istream & s, std::array<int32_t, 2>& item);
bool TupleIntBoxed2WriteBoxed(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 2>& item);

}} // namespace tlgen::details

