// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "__common_namespace/headers/withFloat.h"
#include "__common_namespace/headers/vector.h"
#include "__common_namespace/headers/tuple.h"
#include "__common_namespace/headers/string.h"
#include "__common_namespace/headers/statOne.h"
#include "__common_namespace/headers/rpcInvokeReqExtra.h"
#include "__common_namespace/headers/true.h"
#include "__common_namespace/headers/nonOptNat.h"
#include "__common_namespace/headers/myTwoDicts.h"
#include "__common_namespace/headers/myMaybe2.h"
#include "__common_namespace/headers/myMaybe1.h"
#include "__common_namespace/headers/myTuple.h"
#include "__common_namespace/headers/myBoxedVectorSlice.h"
#include "__common_namespace/headers/long.h"
#include "__common_namespace/headers/int.h"
#include "__common_namespace/headers/getNonOptNat.h"
#include "__common_namespace/headers/getMyValue.h"
#include "__common_namespace/headers/MyValue.h"
#include "__common_namespace/headers/myString.h"
#include "__common_namespace/headers/myInt.h"
#include "__common_namespace/headers/getMyDouble.h"
#include "__common_namespace/headers/myDouble.h"
#include "__common_namespace/headers/getMyDictOfInt.h"
#include "__common_namespace/headers/myDictOfInt.h"
#include "__common_namespace/headers/getFloat.h"
#include "__common_namespace/headers/getDouble.h"
#include "__common_namespace/headers/get_arrays.h"
#include "__common_namespace/headers/float.h"
#include "__common_namespace/headers/fieldConflict4.h"
#include "__common_namespace/headers/fieldConflict3.h"
#include "__common_namespace/headers/fieldConflict2.h"
#include "__common_namespace/headers/fieldConflict1.h"
#include "__common_namespace/headers/double.h"
#include "__common_namespace/headers/dictionary.h"
#include "__common_namespace/headers/dictionaryField.h"
#include "__common_namespace/headers/boxedVector64.h"
#include "__common_namespace/headers/boxedVector32BoxedElem.h"
#include "__common_namespace/headers/boxedVector32.h"
#include "__common_namespace/headers/boxedTupleSlice3.h"
#include "__common_namespace/headers/boxedTupleSlice2.h"
#include "__common_namespace/headers/myBoxedTupleSlice.h"
#include "__common_namespace/headers/boxedTupleSlice1.h"
#include "__common_namespace/headers/boxedTuple.h"
#include "__common_namespace/headers/boxedString.h"
#include "__common_namespace/headers/boxedInt.h"
#include "__common_namespace/headers/boxedArray.h"
#include "__common_namespace/headers/myBoxedArray.h"
#include "__common_namespace/headers/Bool.h"
#include "__common_namespace/headers/benchObject.h"
#include "__common_namespace/headers/integer.h"


bool tlgen::BenchObject::write_json(std::ostream& s)const {
  if (!::tlgen::details::BenchObjectWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BenchObject::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BenchObjectRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BenchObject::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BenchObjectWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BenchObject::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BenchObject::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BenchObject::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BenchObjectReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BenchObject::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BenchObjectWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BenchObject::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BenchObject::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BenchObjectReset(::tlgen::BenchObject& item) noexcept {
  (void)item;
  item.xs.clear();
  item.ys.clear();
}

bool tlgen::details::BenchObjectWriteJSON(std::ostream& s, const ::tlgen::BenchObject& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.xs.size() != 0) {
    add_comma = true;
    s << "\"xs\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.xs)) { return false; }
  }
  if (item.ys.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"ys\":";
    if (!::tlgen::details::BuiltinVectorIntegerWriteJSON(s, item.ys)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::BenchObjectRead(::tlgen::basictl::tl_istream & s, ::tlgen::BenchObject& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntRead(s, item.xs)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntegerRead(s, item.ys)) { return false; }
  return true;
}

bool tlgen::details::BenchObjectWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::BenchObject& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item.xs)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntegerWrite(s, item.ys)) { return false; }
  return true;
}

bool tlgen::details::BenchObjectReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BenchObject& item) {
  if (!s.nat_read_exact_tag(0xb697e865)) { return false; }
  return tlgen::details::BenchObjectRead(s, item);
}

bool tlgen::details::BenchObjectWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BenchObject& item) {
  if (!s.nat_write(0xb697e865)) { return false; }
  return tlgen::details::BenchObjectWrite(s, item);
}

bool tlgen::details::BoolWriteJSON(std::ostream & s, bool item) {
  if (item) {
    s << "true";
  } else {
    s << "false";
  }
  return true;
}

bool tlgen::details::BoolReadBoxed(::tlgen::basictl::tl_istream & s, bool& item) {
  return s.bool_read(item, 0xbc799737, 0x997275b5);
}

bool tlgen::details::BoolWriteBoxed(::tlgen::basictl::tl_ostream & s, bool item) {
  return s.nat_write(item ? 0x997275b5 : 0xbc799737);
}

bool tlgen::BoxedArray::write_json(std::ostream& s)const {
  if (!::tlgen::details::BoxedArrayWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BoxedArray::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedArrayRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedArray::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedArrayWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedArray::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BoxedArray::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BoxedArray::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedArrayReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedArray::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedArrayWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedArray::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BoxedArray::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BoxedArrayReset(::tlgen::BoxedArray& item) noexcept {
  (void)item;
  ::tlgen::details::MyBoxedArrayReset(item.x);
}

bool tlgen::details::BoxedArrayWriteJSON(std::ostream& s, const ::tlgen::BoxedArray& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::MyBoxedArrayWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::BoxedArrayRead(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedArray& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyBoxedArrayReadBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::BoxedArrayWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedArray& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyBoxedArrayWriteBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::BoxedArrayReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedArray& item) {
  if (!s.nat_read_exact_tag(0x95dcc8b7)) { return false; }
  return tlgen::details::BoxedArrayRead(s, item);
}

bool tlgen::details::BoxedArrayWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedArray& item) {
  if (!s.nat_write(0x95dcc8b7)) { return false; }
  return tlgen::details::BoxedArrayWrite(s, item);
}

bool tlgen::details::BoxedArrayReadResult(::tlgen::basictl::tl_istream & s, const tlgen::BoxedArray& item, ::tlgen::MyBoxedArray& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::MyBoxedArrayReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::BoxedArrayWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::BoxedArray& item, const ::tlgen::MyBoxedArray& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::MyBoxedArrayWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::BoxedArray::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::MyBoxedArray & result) const noexcept {
  bool success = tlgen::details::BoxedArrayReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::BoxedArray::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyBoxedArray & result) const noexcept {
  bool success = tlgen::details::BoxedArrayWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::BoxedArray::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::MyBoxedArray & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::BoxedArray::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::MyBoxedArray & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::BoxedInt::write_json(std::ostream& s)const {
  if (!::tlgen::details::BoxedIntWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BoxedInt::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedIntRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedInt::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedIntWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedInt::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BoxedInt::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BoxedInt::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedIntReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedInt::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedIntWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedInt::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BoxedInt::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BoxedIntReset(::tlgen::BoxedInt& item) noexcept {
  (void)item;
  item.x = 0;
}

bool tlgen::details::BoxedIntWriteJSON(std::ostream& s, const ::tlgen::BoxedInt& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    s << item.x;
  }
  s << "}";
  return true;
}

bool tlgen::details::BoxedIntRead(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedInt& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0xa8509bda)) { return false; }
  if (!s.int_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::BoxedIntWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedInt& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0xa8509bda)) { return false; }
  if (!s.int_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::BoxedIntReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedInt& item) {
  if (!s.nat_read_exact_tag(0x5688ebaf)) { return false; }
  return tlgen::details::BoxedIntRead(s, item);
}

bool tlgen::details::BoxedIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedInt& item) {
  if (!s.nat_write(0x5688ebaf)) { return false; }
  return tlgen::details::BoxedIntWrite(s, item);
}

bool tlgen::details::BoxedIntReadResult(::tlgen::basictl::tl_istream & s, const tlgen::BoxedInt& item, int32_t& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0xa8509bda)) { return false; }
  if (!s.int_read(result)) { return false; }
  return true;
}
bool tlgen::details::BoxedIntWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::BoxedInt& item, const int32_t& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0xa8509bda)) { return false; }
  if (!s.int_write(result)) { return false;}
  return true;
}

bool tlgen::BoxedInt::read_result(::tlgen::basictl::tl_istream & s, int32_t & result) const noexcept {
  bool success = tlgen::details::BoxedIntReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::BoxedInt::write_result(::tlgen::basictl::tl_ostream & s, const int32_t & result) const noexcept {
  bool success = tlgen::details::BoxedIntWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::BoxedInt::read_result(::tlgen::basictl::tl_throwable_istream & s, int32_t & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::BoxedInt::write_result(::tlgen::basictl::tl_throwable_ostream & s, const int32_t & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::BoxedString::write_json(std::ostream& s)const {
  if (!::tlgen::details::BoxedStringWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BoxedString::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedStringRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedString::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedStringWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedString::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BoxedString::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BoxedString::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedStringReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedString::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedStringWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedString::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BoxedString::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BoxedStringReset(::tlgen::BoxedString& item) noexcept {
  (void)item;
  item.x.clear();
}

bool tlgen::details::BoxedStringWriteJSON(std::ostream& s, const ::tlgen::BoxedString& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x.size() != 0) {
    s << "\"x\":";
    s << "\"" << item.x << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::BoxedStringRead(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedString& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0xb5286e24)) { return false; }
  if (!s.string_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::BoxedStringWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedString& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0xb5286e24)) { return false; }
  if (!s.string_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::BoxedStringReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedString& item) {
  if (!s.nat_read_exact_tag(0x548994db)) { return false; }
  return tlgen::details::BoxedStringRead(s, item);
}

bool tlgen::details::BoxedStringWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedString& item) {
  if (!s.nat_write(0x548994db)) { return false; }
  return tlgen::details::BoxedStringWrite(s, item);
}

bool tlgen::details::BoxedStringReadResult(::tlgen::basictl::tl_istream & s, const tlgen::BoxedString& item, std::string& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0xb5286e24)) { return false; }
  if (!s.string_read(result)) { return false; }
  return true;
}
bool tlgen::details::BoxedStringWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::BoxedString& item, const std::string& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0xb5286e24)) { return false; }
  if (!s.string_write(result)) { return false;}
  return true;
}

bool tlgen::BoxedString::read_result(::tlgen::basictl::tl_istream & s, std::string & result) const noexcept {
  bool success = tlgen::details::BoxedStringReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::BoxedString::write_result(::tlgen::basictl::tl_ostream & s, const std::string & result) const noexcept {
  bool success = tlgen::details::BoxedStringWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::BoxedString::read_result(::tlgen::basictl::tl_throwable_istream & s, std::string & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::BoxedString::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::string & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::BoxedTuple::write_json(std::ostream& s)const {
  if (!::tlgen::details::BoxedTupleWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BoxedTuple::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedTupleRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedTuple::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedTupleWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedTuple::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BoxedTuple::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BoxedTuple::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedTupleReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedTuple::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedTupleWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedTuple::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BoxedTuple::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BoxedTupleReset(::tlgen::BoxedTuple& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple3IntReset(item.x);
}

bool tlgen::details::BoxedTupleWriteJSON(std::ostream& s, const ::tlgen::BoxedTuple& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::BuiltinTuple3IntWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::BoxedTupleRead(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedTuple& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTuple3IntRead(s, item.x)) { return false; }
  return true;
}

bool tlgen::details::BoxedTupleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedTuple& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTuple3IntWrite(s, item.x)) { return false; }
  return true;
}

bool tlgen::details::BoxedTupleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedTuple& item) {
  if (!s.nat_read_exact_tag(0x30c9d533)) { return false; }
  return tlgen::details::BoxedTupleRead(s, item);
}

bool tlgen::details::BoxedTupleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedTuple& item) {
  if (!s.nat_write(0x30c9d533)) { return false; }
  return tlgen::details::BoxedTupleWrite(s, item);
}

bool tlgen::details::BoxedTupleReadResult(::tlgen::basictl::tl_istream & s, const tlgen::BoxedTuple& item, std::array<int32_t, 3>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTuple3IntRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::BoxedTupleWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::BoxedTuple& item, const std::array<int32_t, 3>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTuple3IntWrite(s, result)) { return false; }
  return true;
}

bool tlgen::BoxedTuple::read_result(::tlgen::basictl::tl_istream & s, std::array<int32_t, 3> & result) const noexcept {
  bool success = tlgen::details::BoxedTupleReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::BoxedTuple::write_result(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 3> & result) const noexcept {
  bool success = tlgen::details::BoxedTupleWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::BoxedTuple::read_result(::tlgen::basictl::tl_throwable_istream & s, std::array<int32_t, 3> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::BoxedTuple::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::array<int32_t, 3> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::BoxedTupleSlice1::write_json(std::ostream& s)const {
  if (!::tlgen::details::BoxedTupleSlice1WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BoxedTupleSlice1::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedTupleSlice1Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedTupleSlice1::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedTupleSlice1Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedTupleSlice1::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BoxedTupleSlice1::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BoxedTupleSlice1::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedTupleSlice1ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedTupleSlice1::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedTupleSlice1WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedTupleSlice1::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BoxedTupleSlice1::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BoxedTupleSlice1Reset(::tlgen::BoxedTupleSlice1& item) noexcept {
  (void)item;
  item.n = 0;
  item.x.clear();
}

bool tlgen::details::BoxedTupleSlice1WriteJSON(std::ostream& s, const ::tlgen::BoxedTupleSlice1& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.n != 0) {
    add_comma = true;
    s << "\"n\":";
    s << item.n;
  }
  if ((item.x.size() != 0) || (item.n != 0)) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"x\":";
    if (!::tlgen::details::BuiltinTupleIntBoxedWriteJSON(s, item.x, item.n)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::BoxedTupleSlice1Read(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedTupleSlice1& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntBoxedRead(s, item.x, item.n)) { return false; }
  return true;
}

bool tlgen::details::BoxedTupleSlice1Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedTupleSlice1& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntBoxedWrite(s, item.x, item.n)) { return false; }
  return true;
}

bool tlgen::details::BoxedTupleSlice1ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedTupleSlice1& item) {
  if (!s.nat_read_exact_tag(0x25230d40)) { return false; }
  return tlgen::details::BoxedTupleSlice1Read(s, item);
}

bool tlgen::details::BoxedTupleSlice1WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedTupleSlice1& item) {
  if (!s.nat_write(0x25230d40)) { return false; }
  return tlgen::details::BoxedTupleSlice1Write(s, item);
}

bool tlgen::details::BoxedTupleSlice1ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::BoxedTupleSlice1& item, std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntBoxedRead(s, result, item.n)) { return false; }
  return true;
}
bool tlgen::details::BoxedTupleSlice1WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::BoxedTupleSlice1& item, const std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntBoxedWrite(s, result, item.n)) { return false; }
  return true;
}

bool tlgen::BoxedTupleSlice1::read_result(::tlgen::basictl::tl_istream & s, std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::BoxedTupleSlice1ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::BoxedTupleSlice1::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::BoxedTupleSlice1WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::BoxedTupleSlice1::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::BoxedTupleSlice1::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::BoxedTupleSlice2::write_json(std::ostream& s)const {
  if (!::tlgen::details::BoxedTupleSlice2WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BoxedTupleSlice2::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedTupleSlice2Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedTupleSlice2::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedTupleSlice2Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedTupleSlice2::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BoxedTupleSlice2::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BoxedTupleSlice2::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedTupleSlice2ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedTupleSlice2::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedTupleSlice2WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedTupleSlice2::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BoxedTupleSlice2::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BoxedTupleSlice2Reset(::tlgen::BoxedTupleSlice2& item) noexcept {
  (void)item;
  ::tlgen::details::MyBoxedTupleSliceReset(item.x);
}

bool tlgen::details::BoxedTupleSlice2WriteJSON(std::ostream& s, const ::tlgen::BoxedTupleSlice2& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::MyBoxedTupleSliceWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::BoxedTupleSlice2Read(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedTupleSlice2& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyBoxedTupleSliceReadBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::BoxedTupleSlice2Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedTupleSlice2& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyBoxedTupleSliceWriteBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::BoxedTupleSlice2ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedTupleSlice2& item) {
  if (!s.nat_read_exact_tag(0x1cdf4705)) { return false; }
  return tlgen::details::BoxedTupleSlice2Read(s, item);
}

bool tlgen::details::BoxedTupleSlice2WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedTupleSlice2& item) {
  if (!s.nat_write(0x1cdf4705)) { return false; }
  return tlgen::details::BoxedTupleSlice2Write(s, item);
}

bool tlgen::details::BoxedTupleSlice2ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::BoxedTupleSlice2& item, ::tlgen::MyBoxedTupleSlice& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::MyBoxedTupleSliceReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::BoxedTupleSlice2WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::BoxedTupleSlice2& item, const ::tlgen::MyBoxedTupleSlice& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::MyBoxedTupleSliceWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::BoxedTupleSlice2::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::MyBoxedTupleSlice & result) const noexcept {
  bool success = tlgen::details::BoxedTupleSlice2ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::BoxedTupleSlice2::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyBoxedTupleSlice & result) const noexcept {
  bool success = tlgen::details::BoxedTupleSlice2WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::BoxedTupleSlice2::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::MyBoxedTupleSlice & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::BoxedTupleSlice2::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::MyBoxedTupleSlice & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::BoxedTupleSlice3::write_json(std::ostream& s)const {
  if (!::tlgen::details::BoxedTupleSlice3WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BoxedTupleSlice3::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedTupleSlice3Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedTupleSlice3::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedTupleSlice3Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedTupleSlice3::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BoxedTupleSlice3::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BoxedTupleSlice3::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedTupleSlice3ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedTupleSlice3::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedTupleSlice3WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedTupleSlice3::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BoxedTupleSlice3::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BoxedTupleSlice3Reset(::tlgen::BoxedTupleSlice3& item) noexcept {
  (void)item;
  item.n = 0;
  item.x.clear();
}

bool tlgen::details::BoxedTupleSlice3WriteJSON(std::ostream& s, const ::tlgen::BoxedTupleSlice3& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.n != 0) {
    add_comma = true;
    s << "\"n\":";
    s << item.n;
  }
  if ((item.x.size() != 0) || (item.n != 0)) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"x\":";
    if (!::tlgen::details::BuiltinTupleIntWriteJSON(s, item.x, item.n)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::BoxedTupleSlice3Read(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedTupleSlice3& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntRead(s, item.x, item.n)) { return false; }
  return true;
}

bool tlgen::details::BoxedTupleSlice3Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedTupleSlice3& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntWrite(s, item.x, item.n)) { return false; }
  return true;
}

bool tlgen::details::BoxedTupleSlice3ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedTupleSlice3& item) {
  if (!s.nat_read_exact_tag(0xa19b8106)) { return false; }
  return tlgen::details::BoxedTupleSlice3Read(s, item);
}

bool tlgen::details::BoxedTupleSlice3WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedTupleSlice3& item) {
  if (!s.nat_write(0xa19b8106)) { return false; }
  return tlgen::details::BoxedTupleSlice3Write(s, item);
}

bool tlgen::details::BoxedTupleSlice3ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::BoxedTupleSlice3& item, std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntRead(s, result, item.n)) { return false; }
  return true;
}
bool tlgen::details::BoxedTupleSlice3WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::BoxedTupleSlice3& item, const std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntWrite(s, result, item.n)) { return false; }
  return true;
}

bool tlgen::BoxedTupleSlice3::read_result(::tlgen::basictl::tl_istream & s, std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::BoxedTupleSlice3ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::BoxedTupleSlice3::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::BoxedTupleSlice3WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::BoxedTupleSlice3::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::BoxedTupleSlice3::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::BoxedVector32::write_json(std::ostream& s)const {
  if (!::tlgen::details::BoxedVector32WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BoxedVector32::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedVector32Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedVector32::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedVector32Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedVector32::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BoxedVector32::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BoxedVector32::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedVector32ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedVector32::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedVector32WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedVector32::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BoxedVector32::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BoxedVector32Reset(::tlgen::BoxedVector32& item) noexcept {
  (void)item;
  item.x.clear();
}

bool tlgen::details::BoxedVector32WriteJSON(std::ostream& s, const ::tlgen::BoxedVector32& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x.size() != 0) {
    s << "\"x\":";
    if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item.x)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::BoxedVector32Read(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedVector32& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, item.x)) { return false; }
  return true;
}

bool tlgen::details::BoxedVector32Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedVector32& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item.x)) { return false; }
  return true;
}

bool tlgen::details::BoxedVector32ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedVector32& item) {
  if (!s.nat_read_exact_tag(0xbbadef07)) { return false; }
  return tlgen::details::BoxedVector32Read(s, item);
}

bool tlgen::details::BoxedVector32WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedVector32& item) {
  if (!s.nat_write(0xbbadef07)) { return false; }
  return tlgen::details::BoxedVector32Write(s, item);
}

bool tlgen::details::BoxedVector32ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::BoxedVector32& item, std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::BoxedVector32WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::BoxedVector32& item, const std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntWrite(s, result)) { return false; }
  return true;
}

bool tlgen::BoxedVector32::read_result(::tlgen::basictl::tl_istream & s, std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::BoxedVector32ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::BoxedVector32::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::BoxedVector32WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::BoxedVector32::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::BoxedVector32::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::BoxedVector32BoxedElem::write_json(std::ostream& s)const {
  if (!::tlgen::details::BoxedVector32BoxedElemWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BoxedVector32BoxedElem::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedVector32BoxedElemRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedVector32BoxedElem::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedVector32BoxedElemWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedVector32BoxedElem::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BoxedVector32BoxedElem::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BoxedVector32BoxedElem::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedVector32BoxedElemReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedVector32BoxedElem::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedVector32BoxedElemWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedVector32BoxedElem::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BoxedVector32BoxedElem::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BoxedVector32BoxedElemReset(::tlgen::BoxedVector32BoxedElem& item) noexcept {
  (void)item;
  item.x.clear();
}

bool tlgen::details::BoxedVector32BoxedElemWriteJSON(std::ostream& s, const ::tlgen::BoxedVector32BoxedElem& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x.size() != 0) {
    s << "\"x\":";
    if (!::tlgen::details::BuiltinVectorIntBoxedWriteJSON(s, item.x)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::BoxedVector32BoxedElemRead(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedVector32BoxedElem& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntBoxedRead(s, item.x)) { return false; }
  return true;
}

bool tlgen::details::BoxedVector32BoxedElemWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedVector32BoxedElem& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntBoxedWrite(s, item.x)) { return false; }
  return true;
}

bool tlgen::details::BoxedVector32BoxedElemReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedVector32BoxedElem& item) {
  if (!s.nat_read_exact_tag(0x591cecd4)) { return false; }
  return tlgen::details::BoxedVector32BoxedElemRead(s, item);
}

bool tlgen::details::BoxedVector32BoxedElemWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedVector32BoxedElem& item) {
  if (!s.nat_write(0x591cecd4)) { return false; }
  return tlgen::details::BoxedVector32BoxedElemWrite(s, item);
}

bool tlgen::details::BoxedVector32BoxedElemReadResult(::tlgen::basictl::tl_istream & s, const tlgen::BoxedVector32BoxedElem& item, std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntBoxedRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::BoxedVector32BoxedElemWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::BoxedVector32BoxedElem& item, const std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntBoxedWrite(s, result)) { return false; }
  return true;
}

bool tlgen::BoxedVector32BoxedElem::read_result(::tlgen::basictl::tl_istream & s, std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::BoxedVector32BoxedElemReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::BoxedVector32BoxedElem::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::BoxedVector32BoxedElemWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::BoxedVector32BoxedElem::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::BoxedVector32BoxedElem::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::BoxedVector64::write_json(std::ostream& s)const {
  if (!::tlgen::details::BoxedVector64WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::BoxedVector64::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedVector64Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedVector64::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedVector64Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedVector64::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::BoxedVector64::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::BoxedVector64::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::BoxedVector64ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::BoxedVector64::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::BoxedVector64WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::BoxedVector64::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::BoxedVector64::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::BoxedVector64Reset(::tlgen::BoxedVector64& item) noexcept {
  (void)item;
  item.x.clear();
}

bool tlgen::details::BoxedVector64WriteJSON(std::ostream& s, const ::tlgen::BoxedVector64& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x.size() != 0) {
    s << "\"x\":";
    if (!::tlgen::details::BuiltinVectorLongBoxedWriteJSON(s, item.x)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::BoxedVector64Read(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedVector64& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorLongBoxedRead(s, item.x)) { return false; }
  return true;
}

bool tlgen::details::BoxedVector64Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedVector64& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorLongBoxedWrite(s, item.x)) { return false; }
  return true;
}

bool tlgen::details::BoxedVector64ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::BoxedVector64& item) {
  if (!s.nat_read_exact_tag(0x83659ba8)) { return false; }
  return tlgen::details::BoxedVector64Read(s, item);
}

bool tlgen::details::BoxedVector64WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::BoxedVector64& item) {
  if (!s.nat_write(0x83659ba8)) { return false; }
  return tlgen::details::BoxedVector64Write(s, item);
}

bool tlgen::details::BoxedVector64ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::BoxedVector64& item, std::vector<int64_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorLongBoxedRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::BoxedVector64WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::BoxedVector64& item, const std::vector<int64_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorLongBoxedWrite(s, result)) { return false; }
  return true;
}

bool tlgen::BoxedVector64::read_result(::tlgen::basictl::tl_istream & s, std::vector<int64_t> & result) const noexcept {
  bool success = tlgen::details::BoxedVector64ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::BoxedVector64::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<int64_t> & result) const noexcept {
  bool success = tlgen::details::BoxedVector64WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::BoxedVector64::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<int64_t> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::BoxedVector64::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<int64_t> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

void tlgen::details::BuiltinTuple10IntBoxedReset(std::array<int32_t, 10>& item) {
  for(auto && el : item) {
    el = 0;
  }
}

bool tlgen::details::BuiltinTuple10IntBoxedWriteJSON(std::ostream &s, const std::array<int32_t, 10>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    s << el;
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple10IntBoxedRead(::tlgen::basictl::tl_istream & s, std::array<int32_t, 10>& item) {
  for(auto && el : item) {
    if (!s.nat_read_exact_tag(0xa8509bda)) { return false; }
  if (!s.int_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinTuple10IntBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 10>& item) {
  for(const auto & el : item) {
    if (!s.nat_write(0xa8509bda)) { return false; }
  if (!s.int_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinTuple2IntBoxedReset(std::array<int32_t, 2>& item) {
  for(auto && el : item) {
    el = 0;
  }
}

bool tlgen::details::BuiltinTuple2IntBoxedWriteJSON(std::ostream &s, const std::array<int32_t, 2>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    s << el;
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple2IntBoxedRead(::tlgen::basictl::tl_istream & s, std::array<int32_t, 2>& item) {
  for(auto && el : item) {
    if (!s.nat_read_exact_tag(0xa8509bda)) { return false; }
  if (!s.int_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinTuple2IntBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 2>& item) {
  for(const auto & el : item) {
    if (!s.nat_write(0xa8509bda)) { return false; }
  if (!s.int_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinTuple3IntReset(std::array<int32_t, 3>& item) {
  for(auto && el : item) {
    el = 0;
  }
}

bool tlgen::details::BuiltinTuple3IntWriteJSON(std::ostream &s, const std::array<int32_t, 3>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    s << el;
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple3IntRead(::tlgen::basictl::tl_istream & s, std::array<int32_t, 3>& item) {
  for(auto && el : item) {
    if (!s.int_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinTuple3IntWrite(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 3>& item) {
  for(const auto & el : item) {
    if (!s.int_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinTuple5IntReset(std::array<int32_t, 5>& item) {
  for(auto && el : item) {
    el = 0;
  }
}

bool tlgen::details::BuiltinTuple5IntWriteJSON(std::ostream &s, const std::array<int32_t, 5>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    s << el;
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple5IntRead(::tlgen::basictl::tl_istream & s, std::array<int32_t, 5>& item) {
  for(auto && el : item) {
    if (!s.int_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinTuple5IntWrite(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 5>& item) {
  for(const auto & el : item) {
    if (!s.int_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinTupleIntReset(std::vector<int32_t>& item) {
  item.resize(0);
}

bool tlgen::details::BuiltinTupleIntWriteJSON(std::ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) {
  if (item.size() != nat_n) { return false; }
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    s << el;
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTupleIntRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) {
  // TODO - check length sanity
  item.resize(nat_n);
  for(auto && el : item) {
    if (!s.int_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinTupleIntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) {
  if (item.size() != nat_n) { return s.set_error_sequence_length(); }
  for(const auto & el : item) {
    if (!s.int_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinTupleIntBoxedReset(std::vector<int32_t>& item) {
  item.resize(0);
}

bool tlgen::details::BuiltinTupleIntBoxedWriteJSON(std::ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) {
  if (item.size() != nat_n) { return false; }
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    s << el;
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTupleIntBoxedRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) {
  // TODO - check length sanity
  item.resize(nat_n);
  for(auto && el : item) {
    if (!s.nat_read_exact_tag(0xa8509bda)) { return false; }
  if (!s.int_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinTupleIntBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) {
  if (item.size() != nat_n) { return s.set_error_sequence_length(); }
  for(const auto & el : item) {
    if (!s.nat_write(0xa8509bda)) { return false; }
  if (!s.int_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinVectorDictionaryFieldIntReset(std::map<std::string, int32_t>& item) {
  item.clear(); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorDictionaryFieldIntWriteJSON(std::ostream & s, const std::map<std::string, int32_t>& item) {
  s << "{";
  size_t index = 0;
  for(const auto & el : item) {
    s << "\"" << el.first << "\"";
    s << ":";
    s << el.second;
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "}";
  return true;
}

bool tlgen::details::BuiltinVectorDictionaryFieldIntRead(::tlgen::basictl::tl_istream & s, std::map<std::string, int32_t>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  item.clear();
  for(uint32_t i = 0; i < len; i++) {
    ::tlgen::DictionaryField<int32_t> el;
    if (!::tlgen::details::DictionaryFieldIntRead(s, el)) { return s.set_error_unknown_scenario(); }
    item[el.key] = el.value;
  }
  return true;
}

bool tlgen::details::BuiltinVectorDictionaryFieldIntWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, int32_t>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    ::tlgen::DictionaryField<int32_t> el2{.key= el.first, .value= el.second};
    if (!::tlgen::details::DictionaryFieldIntWrite(s, el2)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::BuiltinVectorIntReset(std::vector<int32_t>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorIntWriteJSON(std::ostream & s, const std::vector<int32_t>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    s << el;
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorIntRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!s.int_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinVectorIntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!s.int_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinVectorIntBoxedReset(std::vector<int32_t>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorIntBoxedWriteJSON(std::ostream & s, const std::vector<int32_t>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    s << el;
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorIntBoxedRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!s.nat_read_exact_tag(0xa8509bda)) { return false; }
  if (!s.int_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinVectorIntBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!s.nat_write(0xa8509bda)) { return false; }
  if (!s.int_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinVectorIntegerReset(std::vector<::tlgen::Integer>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorIntegerWriteJSON(std::ostream & s, const std::vector<::tlgen::Integer>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    if (!::tlgen::details::IntegerWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorIntegerRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::Integer>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!::tlgen::details::IntegerRead(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::details::BuiltinVectorIntegerWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::Integer>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!::tlgen::details::IntegerWrite(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::BuiltinVectorLongBoxedReset(std::vector<int64_t>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorLongBoxedWriteJSON(std::ostream & s, const std::vector<int64_t>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    s << el;
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorLongBoxedRead(::tlgen::basictl::tl_istream & s, std::vector<int64_t>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!s.nat_read_exact_tag(0x22076cba)) { return false; }
  if (!s.long_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinVectorLongBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int64_t>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!s.nat_write(0x22076cba)) { return false; }
  if (!s.long_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinVectorStringReset(std::vector<std::string>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorStringWriteJSON(std::ostream & s, const std::vector<std::string>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    s << "\"" << el << "\"";
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorStringRead(::tlgen::basictl::tl_istream & s, std::vector<std::string>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!s.string_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinVectorStringWrite(::tlgen::basictl::tl_ostream & s, const std::vector<std::string>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!s.string_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::DictionaryFieldDictionaryIntReset(::tlgen::DictionaryField<std::map<std::string, int32_t>>& item) noexcept {
  (void)item;
  item.key.clear();
  item.value.clear();
}

bool tlgen::details::DictionaryFieldDictionaryIntWriteJSON(std::ostream& s, const ::tlgen::DictionaryField<std::map<std::string, int32_t>>& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.value.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWriteJSON(s, item.value)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::DictionaryFieldDictionaryIntRead(::tlgen::basictl::tl_istream & s, ::tlgen::DictionaryField<std::map<std::string, int32_t>>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntRead(s, item.value)) { return false; }
  return true;
}

bool tlgen::details::DictionaryFieldDictionaryIntWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::DictionaryField<std::map<std::string, int32_t>>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWrite(s, item.value)) { return false; }
  return true;
}

bool tlgen::details::DictionaryFieldDictionaryIntReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::DictionaryField<std::map<std::string, int32_t>>& item) {
  if (!s.nat_read_exact_tag(0x239c1b62)) { return false; }
  return tlgen::details::DictionaryFieldDictionaryIntRead(s, item);
}

bool tlgen::details::DictionaryFieldDictionaryIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::DictionaryField<std::map<std::string, int32_t>>& item) {
  if (!s.nat_write(0x239c1b62)) { return false; }
  return tlgen::details::DictionaryFieldDictionaryIntWrite(s, item);
}

void tlgen::details::DictionaryFieldIntReset(::tlgen::DictionaryField<int32_t>& item) noexcept {
  (void)item;
  item.key.clear();
  item.value = 0;
}

bool tlgen::details::DictionaryFieldIntWriteJSON(std::ostream& s, const ::tlgen::DictionaryField<int32_t>& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.value != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << item.value;
  }
  s << "}";
  return true;
}

bool tlgen::details::DictionaryFieldIntRead(::tlgen::basictl::tl_istream & s, ::tlgen::DictionaryField<int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::DictionaryFieldIntWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::DictionaryField<int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::DictionaryFieldIntReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::DictionaryField<int32_t>& item) {
  if (!s.nat_read_exact_tag(0x239c1b62)) { return false; }
  return tlgen::details::DictionaryFieldIntRead(s, item);
}

bool tlgen::details::DictionaryFieldIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::DictionaryField<int32_t>& item) {
  if (!s.nat_write(0x239c1b62)) { return false; }
  return tlgen::details::DictionaryFieldIntWrite(s, item);
}

void tlgen::details::DictionaryFieldStringReset(::tlgen::DictionaryField<std::string>& item) noexcept {
  (void)item;
  item.key.clear();
  item.value.clear();
}

bool tlgen::details::DictionaryFieldStringWriteJSON(std::ostream& s, const ::tlgen::DictionaryField<std::string>& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.value.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << "\"" << item.value << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::DictionaryFieldStringRead(::tlgen::basictl::tl_istream & s, ::tlgen::DictionaryField<std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.string_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::DictionaryFieldStringWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::DictionaryField<std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.string_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::DictionaryFieldStringReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::DictionaryField<std::string>& item) {
  if (!s.nat_read_exact_tag(0x239c1b62)) { return false; }
  return tlgen::details::DictionaryFieldStringRead(s, item);
}

bool tlgen::details::DictionaryFieldStringWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::DictionaryField<std::string>& item) {
  if (!s.nat_write(0x239c1b62)) { return false; }
  return tlgen::details::DictionaryFieldStringWrite(s, item);
}

void tlgen::details::DictionaryIntReset(std::map<std::string, int32_t>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::DictionaryIntWriteJSON(std::ostream& s, const std::map<std::string, int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::DictionaryIntRead(::tlgen::basictl::tl_istream & s, std::map<std::string, int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::DictionaryIntWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::DictionaryIntReadBoxed(::tlgen::basictl::tl_istream & s, std::map<std::string, int32_t>& item) {
  if (!s.nat_read_exact_tag(0x1f4c618f)) { return false; }
  return tlgen::details::DictionaryIntRead(s, item);
}

bool tlgen::details::DictionaryIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::map<std::string, int32_t>& item) {
  if (!s.nat_write(0x1f4c618f)) { return false; }
  return tlgen::details::DictionaryIntWrite(s, item);
}

void tlgen::details::DoubleReset(double& item) noexcept {
  (void)item;
  item = 0;
}

bool tlgen::details::DoubleWriteJSON(std::ostream& s, const double& item) noexcept {
  (void)s;
  (void)item;
  s << item;
  return true;
}

bool tlgen::details::DoubleRead(::tlgen::basictl::tl_istream & s, double& item) noexcept {
  (void)s;
  (void)item;
  if (!s.double_read(item)) { return false; }
  return true;
}

bool tlgen::details::DoubleWrite(::tlgen::basictl::tl_ostream & s, const double& item) noexcept {
  (void)s;
  (void)item;
  if (!s.double_write(item)) { return false;}
  return true;
}

bool tlgen::details::DoubleReadBoxed(::tlgen::basictl::tl_istream & s, double& item) {
  if (!s.nat_read_exact_tag(0x2210c154)) { return false; }
  return tlgen::details::DoubleRead(s, item);
}

bool tlgen::details::DoubleWriteBoxed(::tlgen::basictl::tl_ostream & s, const double& item) {
  if (!s.nat_write(0x2210c154)) { return false; }
  return tlgen::details::DoubleWrite(s, item);
}

bool tlgen::FieldConflict1::write_json(std::ostream& s)const {
  if (!::tlgen::details::FieldConflict1WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::FieldConflict1::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::FieldConflict1Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::FieldConflict1::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::FieldConflict1Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::FieldConflict1::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::FieldConflict1::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::FieldConflict1::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::FieldConflict1ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::FieldConflict1::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::FieldConflict1WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::FieldConflict1::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::FieldConflict1::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::FieldConflict1Reset(::tlgen::FieldConflict1& item) noexcept {
  (void)item;
  item.x = 0;
  item.set_x = 0;
}

bool tlgen::details::FieldConflict1WriteJSON(std::ostream& s, const ::tlgen::FieldConflict1& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.x != 0) {
    add_comma = true;
    s << "\"x\":";
    s << item.x;
  }
  if (item.set_x != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"set_x\":";
    s << item.set_x;
  }
  s << "}";
  return true;
}

bool tlgen::details::FieldConflict1Read(::tlgen::basictl::tl_istream & s, ::tlgen::FieldConflict1& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  if (!s.int_read(item.set_x)) { return false; }
  return true;
}

bool tlgen::details::FieldConflict1Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::FieldConflict1& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  if (!s.int_write(item.set_x)) { return false;}
  return true;
}

bool tlgen::details::FieldConflict1ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::FieldConflict1& item) {
  if (!s.nat_read_exact_tag(0xf314bd09)) { return false; }
  return tlgen::details::FieldConflict1Read(s, item);
}

bool tlgen::details::FieldConflict1WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::FieldConflict1& item) {
  if (!s.nat_write(0xf314bd09)) { return false; }
  return tlgen::details::FieldConflict1Write(s, item);
}

bool tlgen::FieldConflict2::write_json(std::ostream& s)const {
  if (!::tlgen::details::FieldConflict2WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::FieldConflict2::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::FieldConflict2Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::FieldConflict2::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::FieldConflict2Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::FieldConflict2::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::FieldConflict2::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::FieldConflict2::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::FieldConflict2ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::FieldConflict2::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::FieldConflict2WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::FieldConflict2::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::FieldConflict2::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::FieldConflict2Reset(::tlgen::FieldConflict2& item) noexcept {
  (void)item;
  item.x = 0;
  item.setX = 0;
}

bool tlgen::details::FieldConflict2WriteJSON(std::ostream& s, const ::tlgen::FieldConflict2& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.x != 0) {
    add_comma = true;
    s << "\"x\":";
    s << item.x;
  }
  if (item.setX != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"setX\":";
    s << item.setX;
  }
  s << "}";
  return true;
}

bool tlgen::details::FieldConflict2Read(::tlgen::basictl::tl_istream & s, ::tlgen::FieldConflict2& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  if (!s.int_read(item.setX)) { return false; }
  return true;
}

bool tlgen::details::FieldConflict2Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::FieldConflict2& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  if (!s.int_write(item.setX)) { return false;}
  return true;
}

bool tlgen::details::FieldConflict2ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::FieldConflict2& item) {
  if (!s.nat_read_exact_tag(0x1bba76b8)) { return false; }
  return tlgen::details::FieldConflict2Read(s, item);
}

bool tlgen::details::FieldConflict2WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::FieldConflict2& item) {
  if (!s.nat_write(0x1bba76b8)) { return false; }
  return tlgen::details::FieldConflict2Write(s, item);
}

bool tlgen::FieldConflict3::write_json(std::ostream& s)const {
  if (!::tlgen::details::FieldConflict3WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::FieldConflict3::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::FieldConflict3Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::FieldConflict3::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::FieldConflict3Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::FieldConflict3::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::FieldConflict3::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::FieldConflict3::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::FieldConflict3ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::FieldConflict3::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::FieldConflict3WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::FieldConflict3::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::FieldConflict3::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::FieldConflict3Reset(::tlgen::FieldConflict3& item) noexcept {
  (void)item;
  item.x = 0;
  item.SetX = 0;
}

bool tlgen::details::FieldConflict3WriteJSON(std::ostream& s, const ::tlgen::FieldConflict3& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.x != 0) {
    add_comma = true;
    s << "\"x\":";
    s << item.x;
  }
  if (item.SetX != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"SetX\":";
    s << item.SetX;
  }
  s << "}";
  return true;
}

bool tlgen::details::FieldConflict3Read(::tlgen::basictl::tl_istream & s, ::tlgen::FieldConflict3& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  if (!s.int_read(item.SetX)) { return false; }
  return true;
}

bool tlgen::details::FieldConflict3Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::FieldConflict3& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  if (!s.int_write(item.SetX)) { return false;}
  return true;
}

bool tlgen::details::FieldConflict3ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::FieldConflict3& item) {
  if (!s.nat_read_exact_tag(0x2cf6e157)) { return false; }
  return tlgen::details::FieldConflict3Read(s, item);
}

bool tlgen::details::FieldConflict3WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::FieldConflict3& item) {
  if (!s.nat_write(0x2cf6e157)) { return false; }
  return tlgen::details::FieldConflict3Write(s, item);
}

bool tlgen::FieldConflict4::write_json(std::ostream& s)const {
  if (!::tlgen::details::FieldConflict4WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::FieldConflict4::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::FieldConflict4Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::FieldConflict4::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::FieldConflict4Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::FieldConflict4::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::FieldConflict4::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::FieldConflict4::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::FieldConflict4ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::FieldConflict4::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::FieldConflict4WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::FieldConflict4::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::FieldConflict4::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::FieldConflict4Reset(::tlgen::FieldConflict4& item) noexcept {
  (void)item;
  item.X = 0;
  item.SetX = 0;
}

bool tlgen::details::FieldConflict4WriteJSON(std::ostream& s, const ::tlgen::FieldConflict4& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.X != 0) {
    add_comma = true;
    s << "\"X\":";
    s << item.X;
  }
  if (item.SetX != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"SetX\":";
    s << item.SetX;
  }
  s << "}";
  return true;
}

bool tlgen::details::FieldConflict4Read(::tlgen::basictl::tl_istream & s, ::tlgen::FieldConflict4& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.X)) { return false; }
  if (!s.int_read(item.SetX)) { return false; }
  return true;
}

bool tlgen::details::FieldConflict4Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::FieldConflict4& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.X)) { return false;}
  if (!s.int_write(item.SetX)) { return false;}
  return true;
}

bool tlgen::details::FieldConflict4ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::FieldConflict4& item) {
  if (!s.nat_read_exact_tag(0xd93c186a)) { return false; }
  return tlgen::details::FieldConflict4Read(s, item);
}

bool tlgen::details::FieldConflict4WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::FieldConflict4& item) {
  if (!s.nat_write(0xd93c186a)) { return false; }
  return tlgen::details::FieldConflict4Write(s, item);
}

void tlgen::details::FloatReset(float& item) noexcept {
  (void)item;
  item = 0;
}

bool tlgen::details::FloatWriteJSON(std::ostream& s, const float& item) noexcept {
  (void)s;
  (void)item;
  s << item;
  return true;
}

bool tlgen::details::FloatRead(::tlgen::basictl::tl_istream & s, float& item) noexcept {
  (void)s;
  (void)item;
  if (!s.float_read(item)) { return false; }
  return true;
}

bool tlgen::details::FloatWrite(::tlgen::basictl::tl_ostream & s, const float& item) noexcept {
  (void)s;
  (void)item;
  if (!s.float_write(item)) { return false;}
  return true;
}

bool tlgen::details::FloatReadBoxed(::tlgen::basictl::tl_istream & s, float& item) {
  if (!s.nat_read_exact_tag(0x824dab22)) { return false; }
  return tlgen::details::FloatRead(s, item);
}

bool tlgen::details::FloatWriteBoxed(::tlgen::basictl::tl_ostream & s, const float& item) {
  if (!s.nat_write(0x824dab22)) { return false; }
  return tlgen::details::FloatWrite(s, item);
}

bool tlgen::Get_arrays::write_json(std::ostream& s)const {
  if (!::tlgen::details::GetArraysWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::Get_arrays::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetArraysRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::Get_arrays::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetArraysWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::Get_arrays::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::Get_arrays::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::Get_arrays::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetArraysReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::Get_arrays::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetArraysWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::Get_arrays::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::Get_arrays::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::GetArraysReset(::tlgen::Get_arrays& item) noexcept {
  (void)item;
  item.n = 0;
  item.a.clear();
  ::tlgen::details::BuiltinTuple5IntReset(item.b);
}

bool tlgen::details::GetArraysWriteJSON(std::ostream& s, const ::tlgen::Get_arrays& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.n != 0) {
    add_comma = true;
    s << "\"n\":";
    s << item.n;
  }
  if ((item.a.size() != 0) || (item.n != 0)) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a\":";
    if (!::tlgen::details::BuiltinTupleIntWriteJSON(s, item.a, item.n)) { return false; }
  }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"b\":";
  if (!::tlgen::details::BuiltinTuple5IntWriteJSON(s, item.b)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::GetArraysRead(::tlgen::basictl::tl_istream & s, ::tlgen::Get_arrays& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntRead(s, item.a, item.n)) { return false; }
  if (!::tlgen::details::BuiltinTuple5IntRead(s, item.b)) { return false; }
  return true;
}

bool tlgen::details::GetArraysWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::Get_arrays& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  if (!::tlgen::details::BuiltinTupleIntWrite(s, item.a, item.n)) { return false; }
  if (!::tlgen::details::BuiltinTuple5IntWrite(s, item.b)) { return false; }
  return true;
}

bool tlgen::details::GetArraysReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::Get_arrays& item) {
  if (!s.nat_read_exact_tag(0x90658cdb)) { return false; }
  return tlgen::details::GetArraysRead(s, item);
}

bool tlgen::details::GetArraysWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::Get_arrays& item) {
  if (!s.nat_write(0x90658cdb)) { return false; }
  return tlgen::details::GetArraysWrite(s, item);
}

bool tlgen::details::GetArraysReadResult(::tlgen::basictl::tl_istream & s, const tlgen::Get_arrays& item, std::array<int32_t, 5>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTuple5IntRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::GetArraysWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::Get_arrays& item, const std::array<int32_t, 5>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTuple5IntWrite(s, result)) { return false; }
  return true;
}

bool tlgen::Get_arrays::read_result(::tlgen::basictl::tl_istream & s, std::array<int32_t, 5> & result) const noexcept {
  bool success = tlgen::details::GetArraysReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::Get_arrays::write_result(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 5> & result) const noexcept {
  bool success = tlgen::details::GetArraysWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::Get_arrays::read_result(::tlgen::basictl::tl_throwable_istream & s, std::array<int32_t, 5> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::Get_arrays::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::array<int32_t, 5> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::GetDouble::write_json(std::ostream& s)const {
  if (!::tlgen::details::GetDoubleWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::GetDouble::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetDoubleRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetDouble::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetDoubleWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetDouble::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::GetDouble::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::GetDouble::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetDoubleReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetDouble::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetDoubleWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetDouble::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::GetDouble::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::GetDoubleReset(::tlgen::GetDouble& item) noexcept {
  (void)item;
  item.x = 0;
}

bool tlgen::details::GetDoubleWriteJSON(std::ostream& s, const ::tlgen::GetDouble& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    s << item.x;
  }
  s << "}";
  return true;
}

bool tlgen::details::GetDoubleRead(::tlgen::basictl::tl_istream & s, ::tlgen::GetDouble& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0x2210c154)) { return false; }
  if (!s.double_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::GetDoubleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetDouble& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0x2210c154)) { return false; }
  if (!s.double_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::GetDoubleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::GetDouble& item) {
  if (!s.nat_read_exact_tag(0x39711d7b)) { return false; }
  return tlgen::details::GetDoubleRead(s, item);
}

bool tlgen::details::GetDoubleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetDouble& item) {
  if (!s.nat_write(0x39711d7b)) { return false; }
  return tlgen::details::GetDoubleWrite(s, item);
}

bool tlgen::details::GetDoubleReadResult(::tlgen::basictl::tl_istream & s, const tlgen::GetDouble& item, double& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x2210c154)) { return false; }
  if (!s.double_read(result)) { return false; }
  return true;
}
bool tlgen::details::GetDoubleWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::GetDouble& item, const double& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x2210c154)) { return false; }
  if (!s.double_write(result)) { return false;}
  return true;
}

bool tlgen::GetDouble::read_result(::tlgen::basictl::tl_istream & s, double & result) const noexcept {
  bool success = tlgen::details::GetDoubleReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::GetDouble::write_result(::tlgen::basictl::tl_ostream & s, const double & result) const noexcept {
  bool success = tlgen::details::GetDoubleWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::GetDouble::read_result(::tlgen::basictl::tl_throwable_istream & s, double & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::GetDouble::write_result(::tlgen::basictl::tl_throwable_ostream & s, const double & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::GetFloat::write_json(std::ostream& s)const {
  if (!::tlgen::details::GetFloatWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::GetFloat::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetFloatRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetFloat::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetFloatWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetFloat::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::GetFloat::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::GetFloat::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetFloatReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetFloat::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetFloatWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetFloat::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::GetFloat::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::GetFloatReset(::tlgen::GetFloat& item) noexcept {
  (void)item;
  item.x = 0;
}

bool tlgen::details::GetFloatWriteJSON(std::ostream& s, const ::tlgen::GetFloat& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    s << item.x;
  }
  s << "}";
  return true;
}

bool tlgen::details::GetFloatRead(::tlgen::basictl::tl_istream & s, ::tlgen::GetFloat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.float_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::GetFloatWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetFloat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.float_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::GetFloatReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::GetFloat& item) {
  if (!s.nat_read_exact_tag(0x25a7bc68)) { return false; }
  return tlgen::details::GetFloatRead(s, item);
}

bool tlgen::details::GetFloatWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetFloat& item) {
  if (!s.nat_write(0x25a7bc68)) { return false; }
  return tlgen::details::GetFloatWrite(s, item);
}

bool tlgen::details::GetFloatReadResult(::tlgen::basictl::tl_istream & s, const tlgen::GetFloat& item, float& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x824dab22)) { return false; }
  if (!s.float_read(result)) { return false; }
  return true;
}
bool tlgen::details::GetFloatWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::GetFloat& item, const float& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x824dab22)) { return false; }
  if (!s.float_write(result)) { return false;}
  return true;
}

bool tlgen::GetFloat::read_result(::tlgen::basictl::tl_istream & s, float & result) const noexcept {
  bool success = tlgen::details::GetFloatReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::GetFloat::write_result(::tlgen::basictl::tl_ostream & s, const float & result) const noexcept {
  bool success = tlgen::details::GetFloatWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::GetFloat::read_result(::tlgen::basictl::tl_throwable_istream & s, float & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::GetFloat::write_result(::tlgen::basictl::tl_throwable_ostream & s, const float & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::GetMyDictOfInt::write_json(std::ostream& s)const {
  if (!::tlgen::details::GetMyDictOfIntWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::GetMyDictOfInt::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetMyDictOfIntRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetMyDictOfInt::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetMyDictOfIntWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetMyDictOfInt::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::GetMyDictOfInt::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::GetMyDictOfInt::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetMyDictOfIntReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetMyDictOfInt::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetMyDictOfIntWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetMyDictOfInt::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::GetMyDictOfInt::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::GetMyDictOfIntReset(::tlgen::GetMyDictOfInt& item) noexcept {
  (void)item;
  ::tlgen::details::MyDictOfIntReset(item.x);
}

bool tlgen::details::GetMyDictOfIntWriteJSON(std::ostream& s, const ::tlgen::GetMyDictOfInt& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x.size() != 0) {
    s << "\"x\":";
    if (!::tlgen::details::MyDictOfIntWriteJSON(s, item.x)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::GetMyDictOfIntRead(::tlgen::basictl::tl_istream & s, ::tlgen::GetMyDictOfInt& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyDictOfIntReadBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::GetMyDictOfIntWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetMyDictOfInt& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyDictOfIntWriteBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::GetMyDictOfIntReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::GetMyDictOfInt& item) {
  if (!s.nat_read_exact_tag(0x166f962c)) { return false; }
  return tlgen::details::GetMyDictOfIntRead(s, item);
}

bool tlgen::details::GetMyDictOfIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetMyDictOfInt& item) {
  if (!s.nat_write(0x166f962c)) { return false; }
  return tlgen::details::GetMyDictOfIntWrite(s, item);
}

bool tlgen::details::GetMyDictOfIntReadResult(::tlgen::basictl::tl_istream & s, const tlgen::GetMyDictOfInt& item, ::tlgen::MyDictOfInt& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::MyDictOfIntReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::GetMyDictOfIntWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::GetMyDictOfInt& item, const ::tlgen::MyDictOfInt& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::MyDictOfIntWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::GetMyDictOfInt::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::MyDictOfInt & result) const noexcept {
  bool success = tlgen::details::GetMyDictOfIntReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::GetMyDictOfInt::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyDictOfInt & result) const noexcept {
  bool success = tlgen::details::GetMyDictOfIntWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::GetMyDictOfInt::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::MyDictOfInt & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::GetMyDictOfInt::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::MyDictOfInt & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::GetMyDouble::write_json(std::ostream& s)const {
  if (!::tlgen::details::GetMyDoubleWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::GetMyDouble::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetMyDoubleRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetMyDouble::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetMyDoubleWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetMyDouble::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::GetMyDouble::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::GetMyDouble::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetMyDoubleReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetMyDouble::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetMyDoubleWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetMyDouble::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::GetMyDouble::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::GetMyDoubleReset(::tlgen::GetMyDouble& item) noexcept {
  (void)item;
  ::tlgen::details::MyDoubleReset(item.x);
}

bool tlgen::details::GetMyDoubleWriteJSON(std::ostream& s, const ::tlgen::GetMyDouble& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    if (!::tlgen::details::MyDoubleWriteJSON(s, item.x)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::GetMyDoubleRead(::tlgen::basictl::tl_istream & s, ::tlgen::GetMyDouble& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyDoubleRead(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::GetMyDoubleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetMyDouble& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyDoubleWrite(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::GetMyDoubleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::GetMyDouble& item) {
  if (!s.nat_read_exact_tag(0xb660ad10)) { return false; }
  return tlgen::details::GetMyDoubleRead(s, item);
}

bool tlgen::details::GetMyDoubleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetMyDouble& item) {
  if (!s.nat_write(0xb660ad10)) { return false; }
  return tlgen::details::GetMyDoubleWrite(s, item);
}

bool tlgen::details::GetMyDoubleReadResult(::tlgen::basictl::tl_istream & s, const tlgen::GetMyDouble& item, ::tlgen::MyDouble& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::MyDoubleReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::GetMyDoubleWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::GetMyDouble& item, const ::tlgen::MyDouble& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::MyDoubleWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::GetMyDouble::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::MyDouble & result) const noexcept {
  bool success = tlgen::details::GetMyDoubleReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::GetMyDouble::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyDouble & result) const noexcept {
  bool success = tlgen::details::GetMyDoubleWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::GetMyDouble::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::MyDouble & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::GetMyDouble::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::MyDouble & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::GetMyValue::write_json(std::ostream& s)const {
  if (!::tlgen::details::GetMyValueWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::GetMyValue::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetMyValueRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetMyValue::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetMyValueWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetMyValue::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::GetMyValue::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::GetMyValue::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetMyValueReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetMyValue::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetMyValueWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetMyValue::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::GetMyValue::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::GetMyValueReset(::tlgen::GetMyValue& item) noexcept {
  (void)item;
  ::tlgen::details::MyValueReset(item.x);
}

bool tlgen::details::GetMyValueWriteJSON(std::ostream& s, const ::tlgen::GetMyValue& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::MyValueWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::GetMyValueRead(::tlgen::basictl::tl_istream & s, ::tlgen::GetMyValue& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyValueReadBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::GetMyValueWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetMyValue& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyValueWriteBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::GetMyValueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::GetMyValue& item) {
  if (!s.nat_read_exact_tag(0xb3df27fe)) { return false; }
  return tlgen::details::GetMyValueRead(s, item);
}

bool tlgen::details::GetMyValueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetMyValue& item) {
  if (!s.nat_write(0xb3df27fe)) { return false; }
  return tlgen::details::GetMyValueWrite(s, item);
}

bool tlgen::details::GetMyValueReadResult(::tlgen::basictl::tl_istream & s, const tlgen::GetMyValue& item, ::tlgen::MyValue& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::MyValueReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::GetMyValueWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::GetMyValue& item, const ::tlgen::MyValue& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::MyValueWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::GetMyValue::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::MyValue & result) const noexcept {
  bool success = tlgen::details::GetMyValueReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::GetMyValue::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyValue & result) const noexcept {
  bool success = tlgen::details::GetMyValueWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::GetMyValue::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::MyValue & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::GetMyValue::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::MyValue & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::GetNonOptNat::write_json(std::ostream& s)const {
  if (!::tlgen::details::GetNonOptNatWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::GetNonOptNat::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetNonOptNatRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetNonOptNat::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetNonOptNatWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetNonOptNat::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::GetNonOptNat::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::GetNonOptNat::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetNonOptNatReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetNonOptNat::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetNonOptNatWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetNonOptNat::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::GetNonOptNat::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::GetNonOptNatReset(::tlgen::GetNonOptNat& item) noexcept {
  (void)item;
  item.n = 0;
  item.xs.clear();
}

bool tlgen::details::GetNonOptNatWriteJSON(std::ostream& s, const ::tlgen::GetNonOptNat& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.n != 0) {
    add_comma = true;
    s << "\"n\":";
    s << item.n;
  }
  if ((item.xs.size() != 0) || (item.n != 0)) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"xs\":";
    if (!::tlgen::details::BuiltinTupleIntWriteJSON(s, item.xs, item.n)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::GetNonOptNatRead(::tlgen::basictl::tl_istream & s, ::tlgen::GetNonOptNat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntRead(s, item.xs, item.n)) { return false; }
  return true;
}

bool tlgen::details::GetNonOptNatWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetNonOptNat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntWrite(s, item.xs, item.n)) { return false; }
  return true;
}

bool tlgen::details::GetNonOptNatReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::GetNonOptNat& item) {
  if (!s.nat_read_exact_tag(0x67665961)) { return false; }
  return tlgen::details::GetNonOptNatRead(s, item);
}

bool tlgen::details::GetNonOptNatWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetNonOptNat& item) {
  if (!s.nat_write(0x67665961)) { return false; }
  return tlgen::details::GetNonOptNatWrite(s, item);
}

bool tlgen::details::GetNonOptNatReadResult(::tlgen::basictl::tl_istream & s, const tlgen::GetNonOptNat& item, std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntRead(s, result, item.n)) { return false; }
  return true;
}
bool tlgen::details::GetNonOptNatWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::GetNonOptNat& item, const std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntWrite(s, result, item.n)) { return false; }
  return true;
}

bool tlgen::GetNonOptNat::read_result(::tlgen::basictl::tl_istream & s, std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::GetNonOptNatReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::GetNonOptNat::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::GetNonOptNatWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::GetNonOptNat::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::GetNonOptNat::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

void tlgen::details::IntReset(int32_t& item) noexcept {
  (void)item;
  item = 0;
}

bool tlgen::details::IntWriteJSON(std::ostream& s, const int32_t& item) noexcept {
  (void)s;
  (void)item;
  s << item;
  return true;
}

bool tlgen::details::IntRead(::tlgen::basictl::tl_istream & s, int32_t& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item)) { return false; }
  return true;
}

bool tlgen::details::IntWrite(::tlgen::basictl::tl_ostream & s, const int32_t& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item)) { return false;}
  return true;
}

bool tlgen::details::IntReadBoxed(::tlgen::basictl::tl_istream & s, int32_t& item) {
  if (!s.nat_read_exact_tag(0xa8509bda)) { return false; }
  return tlgen::details::IntRead(s, item);
}

bool tlgen::details::IntWriteBoxed(::tlgen::basictl::tl_ostream & s, const int32_t& item) {
  if (!s.nat_write(0xa8509bda)) { return false; }
  return tlgen::details::IntWrite(s, item);
}

bool tlgen::details::IntMaybeWriteJSON(std::ostream & s, const std::optional<int32_t>& item) {
  s << "{";
  if (item) {
    s << "\"ok\":true";
    if((*item) != 0) {
      s << ",\"value\":";
      s << *item;
    }
  }
  s << "}";
  return true;
}
bool tlgen::details::IntMaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<int32_t>& item) {
  bool has_item = false;
  if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
  if (has_item) {
    if (!item) {
      item.emplace();
    }
    if (!s.int_read(*item)) { return false; }
    return true;
  }
  item.reset();
  return true;
}

bool tlgen::details::IntMaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<int32_t>& item) {
  if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
  if (item) {
    if (!s.int_write(*item)) { return false;}
  }
  return true;
}

bool tlgen::Integer::write_json(std::ostream& s)const {
  if (!::tlgen::details::IntegerWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::Integer::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::IntegerRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::Integer::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::IntegerWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::Integer::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::Integer::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::Integer::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::IntegerReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::Integer::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::IntegerWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::Integer::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::Integer::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::IntegerReset(::tlgen::Integer& item) noexcept {
  (void)item;
  item.value = 0;
}

bool tlgen::details::IntegerWriteJSON(std::ostream& s, const ::tlgen::Integer& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.value != 0) {
    s << "\"value\":";
    s << item.value;
  }
  s << "}";
  return true;
}

bool tlgen::details::IntegerRead(::tlgen::basictl::tl_istream & s, ::tlgen::Integer& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::IntegerWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::Integer& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::IntegerReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::Integer& item) {
  if (!s.nat_read_exact_tag(0x7e194796)) { return false; }
  return tlgen::details::IntegerRead(s, item);
}

bool tlgen::details::IntegerWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::Integer& item) {
  if (!s.nat_write(0x7e194796)) { return false; }
  return tlgen::details::IntegerWrite(s, item);
}

void tlgen::details::LongReset(int64_t& item) noexcept {
  (void)item;
  item = 0;
}

bool tlgen::details::LongWriteJSON(std::ostream& s, const int64_t& item) noexcept {
  (void)s;
  (void)item;
  s << item;
  return true;
}

bool tlgen::details::LongRead(::tlgen::basictl::tl_istream & s, int64_t& item) noexcept {
  (void)s;
  (void)item;
  if (!s.long_read(item)) { return false; }
  return true;
}

bool tlgen::details::LongWrite(::tlgen::basictl::tl_ostream & s, const int64_t& item) noexcept {
  (void)s;
  (void)item;
  if (!s.long_write(item)) { return false;}
  return true;
}

bool tlgen::details::LongReadBoxed(::tlgen::basictl::tl_istream & s, int64_t& item) {
  if (!s.nat_read_exact_tag(0x22076cba)) { return false; }
  return tlgen::details::LongRead(s, item);
}

bool tlgen::details::LongWriteBoxed(::tlgen::basictl::tl_ostream & s, const int64_t& item) {
  if (!s.nat_write(0x22076cba)) { return false; }
  return tlgen::details::LongWrite(s, item);
}

bool tlgen::MyBoxedArray::write_json(std::ostream& s)const {
  if (!::tlgen::details::MyBoxedArrayWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::MyBoxedArray::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyBoxedArrayRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyBoxedArray::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyBoxedArrayWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyBoxedArray::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::MyBoxedArray::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::MyBoxedArray::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyBoxedArrayReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyBoxedArray::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyBoxedArrayWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyBoxedArray::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::MyBoxedArray::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::MyBoxedArrayReset(::tlgen::MyBoxedArray& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple2IntBoxedReset(item.data);
}

bool tlgen::details::MyBoxedArrayWriteJSON(std::ostream& s, const ::tlgen::MyBoxedArray& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"data\":";
  if (!::tlgen::details::BuiltinTuple2IntBoxedWriteJSON(s, item.data)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::MyBoxedArrayRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyBoxedArray& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTuple2IntBoxedRead(s, item.data)) { return false; }
  return true;
}

bool tlgen::details::MyBoxedArrayWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyBoxedArray& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTuple2IntBoxedWrite(s, item.data)) { return false; }
  return true;
}

bool tlgen::details::MyBoxedArrayReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyBoxedArray& item) {
  if (!s.nat_read_exact_tag(0x288f64f0)) { return false; }
  return tlgen::details::MyBoxedArrayRead(s, item);
}

bool tlgen::details::MyBoxedArrayWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyBoxedArray& item) {
  if (!s.nat_write(0x288f64f0)) { return false; }
  return tlgen::details::MyBoxedArrayWrite(s, item);
}

bool tlgen::MyBoxedTupleSlice::write_json(std::ostream& s)const {
  if (!::tlgen::details::MyBoxedTupleSliceWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::MyBoxedTupleSlice::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyBoxedTupleSliceRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyBoxedTupleSlice::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyBoxedTupleSliceWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyBoxedTupleSlice::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::MyBoxedTupleSlice::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::MyBoxedTupleSlice::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyBoxedTupleSliceReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyBoxedTupleSlice::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyBoxedTupleSliceWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyBoxedTupleSlice::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::MyBoxedTupleSlice::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::MyBoxedTupleSliceReset(::tlgen::MyBoxedTupleSlice& item) noexcept {
  (void)item;
  item.n = 0;
  item.data.clear();
}

bool tlgen::details::MyBoxedTupleSliceWriteJSON(std::ostream& s, const ::tlgen::MyBoxedTupleSlice& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.n != 0) {
    add_comma = true;
    s << "\"n\":";
    s << item.n;
  }
  if ((item.data.size() != 0) || (item.n != 0)) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"data\":";
    if (!::tlgen::details::BuiltinTupleIntBoxedWriteJSON(s, item.data, item.n)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::MyBoxedTupleSliceRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyBoxedTupleSlice& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntBoxedRead(s, item.data, item.n)) { return false; }
  return true;
}

bool tlgen::details::MyBoxedTupleSliceWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyBoxedTupleSlice& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntBoxedWrite(s, item.data, item.n)) { return false; }
  return true;
}

bool tlgen::details::MyBoxedTupleSliceReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyBoxedTupleSlice& item) {
  if (!s.nat_read_exact_tag(0x25d1a1be)) { return false; }
  return tlgen::details::MyBoxedTupleSliceRead(s, item);
}

bool tlgen::details::MyBoxedTupleSliceWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyBoxedTupleSlice& item) {
  if (!s.nat_write(0x25d1a1be)) { return false; }
  return tlgen::details::MyBoxedTupleSliceWrite(s, item);
}

bool tlgen::MyBoxedVectorSlice::write_json(std::ostream& s)const {
  if (!::tlgen::details::MyBoxedVectorSliceWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::MyBoxedVectorSlice::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyBoxedVectorSliceRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyBoxedVectorSlice::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyBoxedVectorSliceWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyBoxedVectorSlice::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::MyBoxedVectorSlice::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::MyBoxedVectorSlice::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyBoxedVectorSliceReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyBoxedVectorSlice::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyBoxedVectorSliceWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyBoxedVectorSlice::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::MyBoxedVectorSlice::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::MyBoxedVectorSliceReset(::tlgen::MyBoxedVectorSlice& item) noexcept {
  (void)item;
  item.data.clear();
}

bool tlgen::details::MyBoxedVectorSliceWriteJSON(std::ostream& s, const ::tlgen::MyBoxedVectorSlice& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.data.size() != 0) {
    s << "\"data\":";
    if (!::tlgen::details::BuiltinVectorIntBoxedWriteJSON(s, item.data)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::MyBoxedVectorSliceRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyBoxedVectorSlice& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntBoxedRead(s, item.data)) { return false; }
  return true;
}

bool tlgen::details::MyBoxedVectorSliceWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyBoxedVectorSlice& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntBoxedWrite(s, item.data)) { return false; }
  return true;
}

bool tlgen::details::MyBoxedVectorSliceReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyBoxedVectorSlice& item) {
  if (!s.nat_read_exact_tag(0x57d164bb)) { return false; }
  return tlgen::details::MyBoxedVectorSliceRead(s, item);
}

bool tlgen::details::MyBoxedVectorSliceWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyBoxedVectorSlice& item) {
  if (!s.nat_write(0x57d164bb)) { return false; }
  return tlgen::details::MyBoxedVectorSliceWrite(s, item);
}

void tlgen::details::MyDictOfIntReset(::tlgen::MyDictOfInt& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::MyDictOfIntWriteJSON(std::ostream& s, const ::tlgen::MyDictOfInt& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyDictOfIntRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyDictOfInt& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyDictOfIntWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyDictOfInt& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyDictOfIntReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyDictOfInt& item) {
  if (!s.nat_read_exact_tag(0xb8019a3d)) { return false; }
  return tlgen::details::MyDictOfIntRead(s, item);
}

bool tlgen::details::MyDictOfIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyDictOfInt& item) {
  if (!s.nat_write(0xb8019a3d)) { return false; }
  return tlgen::details::MyDictOfIntWrite(s, item);
}

void tlgen::details::MyDoubleReset(::tlgen::MyDouble& item) noexcept {
  (void)item;
  item = 0;
}

bool tlgen::details::MyDoubleWriteJSON(std::ostream& s, const ::tlgen::MyDouble& item) noexcept {
  (void)s;
  (void)item;
  s << item;
  return true;
}

bool tlgen::details::MyDoubleRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyDouble& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0x2210c154)) { return false; }
  if (!s.double_read(item)) { return false; }
  return true;
}

bool tlgen::details::MyDoubleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyDouble& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0x2210c154)) { return false; }
  if (!s.double_write(item)) { return false;}
  return true;
}

bool tlgen::details::MyDoubleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyDouble& item) {
  if (!s.nat_read_exact_tag(0x90a6c726)) { return false; }
  return tlgen::details::MyDoubleRead(s, item);
}

bool tlgen::details::MyDoubleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyDouble& item) {
  if (!s.nat_write(0x90a6c726)) { return false; }
  return tlgen::details::MyDoubleWrite(s, item);
}

bool tlgen::MyInt::write_json(std::ostream& s)const {
  if (!::tlgen::details::MyIntWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::MyInt::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyIntRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyInt::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyIntWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyInt::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::MyInt::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::MyInt::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyIntReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyInt::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyIntWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyInt::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::MyInt::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::MyIntReset(::tlgen::MyInt& item) noexcept {
  (void)item;
  item.val1 = 0;
}

bool tlgen::details::MyIntWriteJSON(std::ostream& s, const ::tlgen::MyInt& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.val1 != 0) {
    s << "\"val1\":";
    s << item.val1;
  }
  s << "}";
  return true;
}

bool tlgen::details::MyIntRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyInt& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0xa8509bda)) { return false; }
  if (!s.int_read(item.val1)) { return false; }
  return true;
}

bool tlgen::details::MyIntWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyInt& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0xa8509bda)) { return false; }
  if (!s.int_write(item.val1)) { return false;}
  return true;
}

bool tlgen::details::MyIntReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyInt& item) {
  if (!s.nat_read_exact_tag(0xc12375b7)) { return false; }
  return tlgen::details::MyIntRead(s, item);
}

bool tlgen::details::MyIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyInt& item) {
  if (!s.nat_write(0xc12375b7)) { return false; }
  return tlgen::details::MyIntWrite(s, item);
}

void tlgen::details::MyMaybe1Reset(::tlgen::MyMaybe1& item) noexcept {
  (void)item;
  item.reset();
}

bool tlgen::details::MyMaybe1WriteJSON(std::ostream& s, const ::tlgen::MyMaybe1& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyTuple10MaybeWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyMaybe1Read(::tlgen::basictl::tl_istream & s, ::tlgen::MyMaybe1& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyTuple10MaybeReadBoxed(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyMaybe1Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyMaybe1& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyTuple10MaybeWriteBoxed(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyMaybe1ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyMaybe1& item) {
  if (!s.nat_read_exact_tag(0x32c541fe)) { return false; }
  return tlgen::details::MyMaybe1Read(s, item);
}

bool tlgen::details::MyMaybe1WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyMaybe1& item) {
  if (!s.nat_write(0x32c541fe)) { return false; }
  return tlgen::details::MyMaybe1Write(s, item);
}

void tlgen::details::MyMaybe2Reset(::tlgen::MyMaybe2& item) noexcept {
  (void)item;
  item.reset();
}

bool tlgen::details::MyMaybe2WriteJSON(std::ostream& s, const ::tlgen::MyMaybe2& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyTuple10MaybeWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyMaybe2Read(::tlgen::basictl::tl_istream & s, ::tlgen::MyMaybe2& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyTuple10MaybeReadBoxed(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyMaybe2Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyMaybe2& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::MyTuple10MaybeWriteBoxed(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyMaybe2ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyMaybe2& item) {
  if (!s.nat_read_exact_tag(0xef6d355c)) { return false; }
  return tlgen::details::MyMaybe2Read(s, item);
}

bool tlgen::details::MyMaybe2WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyMaybe2& item) {
  if (!s.nat_write(0xef6d355c)) { return false; }
  return tlgen::details::MyMaybe2Write(s, item);
}

bool tlgen::MyString::write_json(std::ostream& s)const {
  if (!::tlgen::details::MyStringWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::MyString::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyStringRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyString::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyStringWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyString::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::MyString::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::MyString::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyStringReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyString::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyStringWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyString::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::MyString::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::MyStringReset(::tlgen::MyString& item) noexcept {
  (void)item;
  item.val2.clear();
}

bool tlgen::details::MyStringWriteJSON(std::ostream& s, const ::tlgen::MyString& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.val2.size() != 0) {
    s << "\"val2\":";
    s << "\"" << item.val2 << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::MyStringRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyString& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0xb5286e24)) { return false; }
  if (!s.string_read(item.val2)) { return false; }
  return true;
}

bool tlgen::details::MyStringWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyString& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0xb5286e24)) { return false; }
  if (!s.string_write(item.val2)) { return false;}
  return true;
}

bool tlgen::details::MyStringReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyString& item) {
  if (!s.nat_read_exact_tag(0xc8bfa969)) { return false; }
  return tlgen::details::MyStringRead(s, item);
}

bool tlgen::details::MyStringWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyString& item) {
  if (!s.nat_write(0xc8bfa969)) { return false; }
  return tlgen::details::MyStringWrite(s, item);
}

void tlgen::details::MyTuple10Reset(::tlgen::MyTuplen<10>& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple10IntBoxedReset(item);
}

bool tlgen::details::MyTuple10WriteJSON(std::ostream& s, const ::tlgen::MyTuplen<10>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple10IntBoxedWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyTuple10Read(::tlgen::basictl::tl_istream & s, ::tlgen::MyTuplen<10>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTuple10IntBoxedRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyTuple10Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyTuplen<10>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTuple10IntBoxedWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyTuple10ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyTuplen<10>& item) {
  if (!s.nat_read_exact_tag(0x62c51172)) { return false; }
  return tlgen::details::MyTuple10Read(s, item);
}

bool tlgen::details::MyTuple10WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyTuplen<10>& item) {
  if (!s.nat_write(0x62c51172)) { return false; }
  return tlgen::details::MyTuple10Write(s, item);
}

bool tlgen::details::MyTuple10MaybeWriteJSON(std::ostream & s, const std::optional<::tlgen::MyTuplen<10>>& item) {
  s << "{";
  if (item) {
    s << "\"ok\":true";
    s << ",\"value\":";
    if (!::tlgen::details::MyTuple10WriteJSON(s, *item)) { return false; }
  }
  s << "}";
  return true;
}
bool tlgen::details::MyTuple10MaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::MyTuplen<10>>& item) {
  bool has_item = false;
  if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
  if (has_item) {
    if (!item) {
      item.emplace();
    }
    if (!::tlgen::details::MyTuple10Read(s, *item)) { return s.set_error_unknown_scenario(); }
    return true;
  }
  item.reset();
  return true;
}

bool tlgen::details::MyTuple10MaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::MyTuplen<10>>& item) {
  if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
  if (item) {
    if (!::tlgen::details::MyTuple10Write(s, *item)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::MyTwoDicts::write_json(std::ostream& s)const {
  if (!::tlgen::details::MyTwoDictsWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::MyTwoDicts::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyTwoDictsRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyTwoDicts::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyTwoDictsWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyTwoDicts::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::MyTwoDicts::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::MyTwoDicts::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyTwoDictsReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyTwoDicts::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyTwoDictsWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyTwoDicts::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::MyTwoDicts::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::MyTwoDictsReset(::tlgen::MyTwoDicts& item) noexcept {
  (void)item;
  item.a.clear();
  item.b.clear();
}

bool tlgen::details::MyTwoDictsWriteJSON(std::ostream& s, const ::tlgen::MyTwoDicts& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.a.size() != 0) {
    add_comma = true;
    s << "\"a\":";
    if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWriteJSON(s, item.a)) { return false; }
  }
  if (item.b.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"b\":";
    if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWriteJSON(s, item.b)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::MyTwoDictsRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyTwoDicts& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntRead(s, item.a)) { return false; }
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntRead(s, item.b)) { return false; }
  return true;
}

bool tlgen::details::MyTwoDictsWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyTwoDicts& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWrite(s, item.a)) { return false; }
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWrite(s, item.b)) { return false; }
  return true;
}

bool tlgen::details::MyTwoDictsReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyTwoDicts& item) {
  if (!s.nat_read_exact_tag(0xa859581d)) { return false; }
  return tlgen::details::MyTwoDictsRead(s, item);
}

bool tlgen::details::MyTwoDictsWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyTwoDicts& item) {
  if (!s.nat_write(0xa859581d)) { return false; }
  return tlgen::details::MyTwoDictsWrite(s, item);
}

static const std::string_view MyValue_tbl_tl_name[]{"myInt", "myString"};
static const uint32_t MyValue_tbl_tl_tag[]{0xc12375b7, 0xc8bfa969};

bool tlgen::MyValue::write_json(std::ostream & s)const {
  if (!::tlgen::details::MyValueWriteJSON(s, *this)) { return false; }
  return true;
}
bool tlgen::MyValue::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyValueReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::MyValue::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::MyValueWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  return true;
}

void tlgen::MyValue::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::MyValue::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

std::string_view tlgen::MyValue::tl_name() const {
  return MyValue_tbl_tl_name[value.index()];
}
uint32_t tlgen::MyValue::tl_tag() const {
  return MyValue_tbl_tl_tag[value.index()];
}


void tlgen::details::MyValueReset(::tlgen::MyValue& item) noexcept{
  item.value.emplace<0>(); // TODO - optimize, if already 0, call Reset function
}

bool tlgen::details::MyValueWriteJSON(std::ostream & s, const ::tlgen::MyValue& item) noexcept {
  s << "{";
  s << "\"type\":";
  s << "\"" << MyValue_tbl_tl_name[item.value.index()] << "\"";
  switch (item.value.index()) {
  case 0:
    s << ",\"value\":";
    if (!::tlgen::details::MyIntWriteJSON(s, std::get<0>(item.value))) { return false; }
    break;
  case 1:
    s << ",\"value\":";
    if (!::tlgen::details::MyStringWriteJSON(s, std::get<1>(item.value))) { return false; }
    break;
  }
  s << "}";
  return true;
}
bool tlgen::details::MyValueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyValue& item) noexcept {
  uint32_t nat;
  if (!s.nat_read(nat)) { return false; }
  switch (nat) {
  case 0xc12375b7:
    if (item.value.index() != 0) { item.value.emplace<0>(); }
    if (!::tlgen::details::MyIntRead(s, std::get<0>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  case 0xc8bfa969:
    if (item.value.index() != 1) { item.value.emplace<1>(); }
    if (!::tlgen::details::MyStringRead(s, std::get<1>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  default:
    return s.set_error_union_tag();
    }
  return true;
}

bool tlgen::details::MyValueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyValue& item) noexcept{
  if (!s.nat_write(MyValue_tbl_tl_tag[item.value.index()])) { return false; }
  switch (item.value.index()) {
  case 0:
    if (!::tlgen::details::MyIntWrite(s, std::get<0>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  case 1:
    if (!::tlgen::details::MyStringWrite(s, std::get<1>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  }
  return true;
}

bool tlgen::NonOptNat::write_json(std::ostream& s)const {
  if (!::tlgen::details::NonOptNatWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::NonOptNat::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::NonOptNatRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::NonOptNat::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::NonOptNatWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::NonOptNat::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::NonOptNat::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::NonOptNat::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::NonOptNatReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::NonOptNat::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::NonOptNatWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::NonOptNat::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::NonOptNat::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::NonOptNatReset(::tlgen::NonOptNat& item) noexcept {
  (void)item;
  item.n = 0;
  item.xs.clear();
}

bool tlgen::details::NonOptNatWriteJSON(std::ostream& s, const ::tlgen::NonOptNat& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.n != 0) {
    add_comma = true;
    s << "\"n\":";
    s << item.n;
  }
  if ((item.xs.size() != 0) || (item.n != 0)) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"xs\":";
    if (!::tlgen::details::BuiltinTupleIntWriteJSON(s, item.xs, item.n)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::NonOptNatRead(::tlgen::basictl::tl_istream & s, ::tlgen::NonOptNat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntRead(s, item.xs, item.n)) { return false; }
  return true;
}

bool tlgen::details::NonOptNatWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::NonOptNat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntWrite(s, item.xs, item.n)) { return false; }
  return true;
}

bool tlgen::details::NonOptNatReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::NonOptNat& item) {
  if (!s.nat_read_exact_tag(0x45366605)) { return false; }
  return tlgen::details::NonOptNatRead(s, item);
}

bool tlgen::details::NonOptNatWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::NonOptNat& item) {
  if (!s.nat_write(0x45366605)) { return false; }
  return tlgen::details::NonOptNatWrite(s, item);
}

bool tlgen::RpcInvokeReqExtra::write_json(std::ostream& s)const {
  if (!::tlgen::details::RpcInvokeReqExtraWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::RpcInvokeReqExtra::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::RpcInvokeReqExtraRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::RpcInvokeReqExtra::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::RpcInvokeReqExtraWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::RpcInvokeReqExtra::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::RpcInvokeReqExtra::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::RpcInvokeReqExtra::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::RpcInvokeReqExtraReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::RpcInvokeReqExtra::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::RpcInvokeReqExtraWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::RpcInvokeReqExtra::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::RpcInvokeReqExtra::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::RpcInvokeReqExtraReset(::tlgen::RpcInvokeReqExtra& item) noexcept {
  (void)item;
  item.fields_mask = 0;
  ::tlgen::details::TrueReset(item.query);
  ::tlgen::details::TrueReset(item.sort);
  ::tlgen::details::TrueReset(item.sort_reverse);
  item.wait_binlog_pos = 0;
  item.string_forward_keys.clear();
}

bool tlgen::details::RpcInvokeReqExtraWriteJSON(std::ostream& s, const ::tlgen::RpcInvokeReqExtra& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.fields_mask != 0) {
    add_comma = true;
    s << "\"fields_mask\":";
    s << item.fields_mask;
  }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"query\":";
    if (!::tlgen::details::TrueWriteJSON(s, item.query)) { return false; }
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"sort\":";
    if (!::tlgen::details::TrueWriteJSON(s, item.sort)) { return false; }
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"sort_reverse\":";
    if (!::tlgen::details::TrueWriteJSON(s, item.sort_reverse)) { return false; }
  }
  if ((item.fields_mask & (1<<16)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"wait_binlog_pos\":";
    s << item.wait_binlog_pos;
  }
  if ((item.fields_mask & (1<<18)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"string_forward_keys\":";
    if (!::tlgen::details::BuiltinVectorStringWriteJSON(s, item.string_forward_keys)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::RpcInvokeReqExtraRead(::tlgen::basictl::tl_istream & s, ::tlgen::RpcInvokeReqExtra& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.fields_mask)) { return false; }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (!::tlgen::details::TrueRead(s, item.query)) { return s.set_error_unknown_scenario(); }
  } else {
      ::tlgen::details::TrueReset(item.query);
  }
  if ((item.fields_mask & (1<<1)) != 0) {
    if (!::tlgen::details::TrueRead(s, item.sort)) { return s.set_error_unknown_scenario(); }
  } else {
      ::tlgen::details::TrueReset(item.sort);
  }
  if ((item.fields_mask & (1<<2)) != 0) {
    if (!::tlgen::details::TrueRead(s, item.sort_reverse)) { return s.set_error_unknown_scenario(); }
  } else {
      ::tlgen::details::TrueReset(item.sort_reverse);
  }
  if ((item.fields_mask & (1<<16)) != 0) {
    if (!s.long_read(item.wait_binlog_pos)) { return false; }
  } else {
      item.wait_binlog_pos = 0;
  }
  if ((item.fields_mask & (1<<18)) != 0) {
    if (!::tlgen::details::BuiltinVectorStringRead(s, item.string_forward_keys)) { return false; }
  } else {
      item.string_forward_keys.clear();
  }
  return true;
}

bool tlgen::details::RpcInvokeReqExtraWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::RpcInvokeReqExtra& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.fields_mask)) { return false;}
  if ((item.fields_mask & (1<<0)) != 0) {
      if (!::tlgen::details::TrueWrite(s, item.query)) { return s.set_error_unknown_scenario(); }
  }
  if ((item.fields_mask & (1<<1)) != 0) {
      if (!::tlgen::details::TrueWrite(s, item.sort)) { return s.set_error_unknown_scenario(); }
  }
  if ((item.fields_mask & (1<<2)) != 0) {
      if (!::tlgen::details::TrueWrite(s, item.sort_reverse)) { return s.set_error_unknown_scenario(); }
  }
  if ((item.fields_mask & (1<<16)) != 0) {
      if (!s.long_write(item.wait_binlog_pos)) { return false;}
  }
  if ((item.fields_mask & (1<<18)) != 0) {
      if (!::tlgen::details::BuiltinVectorStringWrite(s, item.string_forward_keys)) { return false; }
  }
  return true;
}

bool tlgen::details::RpcInvokeReqExtraReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::RpcInvokeReqExtra& item) {
  if (!s.nat_read_exact_tag(0xf3ef81a9)) { return false; }
  return tlgen::details::RpcInvokeReqExtraRead(s, item);
}

bool tlgen::details::RpcInvokeReqExtraWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::RpcInvokeReqExtra& item) {
  if (!s.nat_write(0xf3ef81a9)) { return false; }
  return tlgen::details::RpcInvokeReqExtraWrite(s, item);
}

bool tlgen::StatOne::write_json(std::ostream& s)const {
  if (!::tlgen::details::StatOneWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::StatOne::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::StatOneRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::StatOne::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::StatOneWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::StatOne::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::StatOne::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::StatOne::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::StatOneReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::StatOne::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::StatOneWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::StatOne::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::StatOne::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::StatOneReset(::tlgen::StatOne& item) noexcept {
  (void)item;
  item.key.clear();
  item.value.clear();
}

bool tlgen::details::StatOneWriteJSON(std::ostream& s, const ::tlgen::StatOne& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.value.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << "\"" << item.value << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::StatOneRead(::tlgen::basictl::tl_istream & s, ::tlgen::StatOne& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.string_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::StatOneWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::StatOne& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.string_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::StatOneReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::StatOne& item) {
  if (!s.nat_read_exact_tag(0x74b0604b)) { return false; }
  return tlgen::details::StatOneRead(s, item);
}

bool tlgen::details::StatOneWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::StatOne& item) {
  if (!s.nat_write(0x74b0604b)) { return false; }
  return tlgen::details::StatOneWrite(s, item);
}

void tlgen::details::StringReset(std::string& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::StringWriteJSON(std::ostream& s, const std::string& item) noexcept {
  (void)s;
  (void)item;
  s << "\"" << item << "\"";
  return true;
}

bool tlgen::details::StringRead(::tlgen::basictl::tl_istream & s, std::string& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item)) { return false; }
  return true;
}

bool tlgen::details::StringWrite(::tlgen::basictl::tl_ostream & s, const std::string& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item)) { return false;}
  return true;
}

bool tlgen::details::StringReadBoxed(::tlgen::basictl::tl_istream & s, std::string& item) {
  if (!s.nat_read_exact_tag(0xb5286e24)) { return false; }
  return tlgen::details::StringRead(s, item);
}

bool tlgen::details::StringWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::string& item) {
  if (!s.nat_write(0xb5286e24)) { return false; }
  return tlgen::details::StringWrite(s, item);
}

bool tlgen::True::write_json(std::ostream& s)const {
  if (!::tlgen::details::TrueWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::True::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TrueRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::True::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::TrueWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::True::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::True::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::True::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TrueReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::True::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::TrueWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::True::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::True::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TrueReset(::tlgen::True& item) noexcept {
  (void)item;
}

bool tlgen::details::TrueWriteJSON(std::ostream& s, const ::tlgen::True& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::TrueRead(::tlgen::basictl::tl_istream & s, ::tlgen::True& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TrueWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::True& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::TrueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::True& item) {
  if (!s.nat_read_exact_tag(0x3fedd339)) { return false; }
  return tlgen::details::TrueRead(s, item);
}

bool tlgen::details::TrueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::True& item) {
  if (!s.nat_write(0x3fedd339)) { return false; }
  return tlgen::details::TrueWrite(s, item);
}

void tlgen::details::TupleIntReset(std::vector<int32_t>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::TupleIntWriteJSON(std::ostream& s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTupleIntWriteJSON(s, item, nat_n)) { return false; }
  return true;
}

bool tlgen::details::TupleIntRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTupleIntRead(s, item, nat_n)) { return false; }
  return true;
}

bool tlgen::details::TupleIntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTupleIntWrite(s, item, nat_n)) { return false; }
  return true;
}

bool tlgen::details::TupleIntReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) {
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  return tlgen::details::TupleIntRead(s, item, nat_n);
}

bool tlgen::details::TupleIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) {
  if (!s.nat_write(0x9770768a)) { return false; }
  return tlgen::details::TupleIntWrite(s, item, nat_n);
}

void tlgen::details::TupleInt3Reset(std::array<int32_t, 3>& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple3IntReset(item);
}

bool tlgen::details::TupleInt3WriteJSON(std::ostream& s, const std::array<int32_t, 3>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple3IntWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleInt3Read(::tlgen::basictl::tl_istream & s, std::array<int32_t, 3>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple3IntRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleInt3Write(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 3>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple3IntWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleInt3ReadBoxed(::tlgen::basictl::tl_istream & s, std::array<int32_t, 3>& item) {
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  return tlgen::details::TupleInt3Read(s, item);
}

bool tlgen::details::TupleInt3WriteBoxed(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 3>& item) {
  if (!s.nat_write(0x9770768a)) { return false; }
  return tlgen::details::TupleInt3Write(s, item);
}

void tlgen::details::TupleIntBoxedReset(std::vector<int32_t>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::TupleIntBoxedWriteJSON(std::ostream& s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTupleIntBoxedWriteJSON(s, item, nat_n)) { return false; }
  return true;
}

bool tlgen::details::TupleIntBoxedRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTupleIntBoxedRead(s, item, nat_n)) { return false; }
  return true;
}

bool tlgen::details::TupleIntBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTupleIntBoxedWrite(s, item, nat_n)) { return false; }
  return true;
}

bool tlgen::details::TupleIntBoxedReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) {
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  return tlgen::details::TupleIntBoxedRead(s, item, nat_n);
}

bool tlgen::details::TupleIntBoxedWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n) {
  if (!s.nat_write(0x9770768a)) { return false; }
  return tlgen::details::TupleIntBoxedWrite(s, item, nat_n);
}

void tlgen::details::TupleIntBoxed10Reset(std::array<int32_t, 10>& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple10IntBoxedReset(item);
}

bool tlgen::details::TupleIntBoxed10WriteJSON(std::ostream& s, const std::array<int32_t, 10>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple10IntBoxedWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleIntBoxed10Read(::tlgen::basictl::tl_istream & s, std::array<int32_t, 10>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple10IntBoxedRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleIntBoxed10Write(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 10>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple10IntBoxedWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleIntBoxed10ReadBoxed(::tlgen::basictl::tl_istream & s, std::array<int32_t, 10>& item) {
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  return tlgen::details::TupleIntBoxed10Read(s, item);
}

bool tlgen::details::TupleIntBoxed10WriteBoxed(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 10>& item) {
  if (!s.nat_write(0x9770768a)) { return false; }
  return tlgen::details::TupleIntBoxed10Write(s, item);
}

void tlgen::details::TupleIntBoxed2Reset(std::array<int32_t, 2>& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple2IntBoxedReset(item);
}

bool tlgen::details::TupleIntBoxed2WriteJSON(std::ostream& s, const std::array<int32_t, 2>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple2IntBoxedWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleIntBoxed2Read(::tlgen::basictl::tl_istream & s, std::array<int32_t, 2>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple2IntBoxedRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleIntBoxed2Write(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 2>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple2IntBoxedWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleIntBoxed2ReadBoxed(::tlgen::basictl::tl_istream & s, std::array<int32_t, 2>& item) {
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  return tlgen::details::TupleIntBoxed2Read(s, item);
}

bool tlgen::details::TupleIntBoxed2WriteBoxed(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 2>& item) {
  if (!s.nat_write(0x9770768a)) { return false; }
  return tlgen::details::TupleIntBoxed2Write(s, item);
}

void tlgen::details::VectorDictionaryFieldIntReset(std::map<std::string, int32_t>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorDictionaryFieldIntWriteJSON(std::ostream& s, const std::map<std::string, int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorDictionaryFieldIntRead(::tlgen::basictl::tl_istream & s, std::map<std::string, int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorDictionaryFieldIntWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorDictionaryFieldIntReadBoxed(::tlgen::basictl::tl_istream & s, std::map<std::string, int32_t>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorDictionaryFieldIntRead(s, item);
}

bool tlgen::details::VectorDictionaryFieldIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::map<std::string, int32_t>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorDictionaryFieldIntWrite(s, item);
}

void tlgen::details::VectorIntReset(std::vector<int32_t>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorIntWriteJSON(std::ostream& s, const std::vector<int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorIntRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorIntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorIntReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorIntRead(s, item);
}

bool tlgen::details::VectorIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorIntWrite(s, item);
}

void tlgen::details::VectorIntBoxedReset(std::vector<int32_t>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorIntBoxedWriteJSON(std::ostream& s, const std::vector<int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntBoxedWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorIntBoxedRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntBoxedRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorIntBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntBoxedWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorIntBoxedReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorIntBoxedRead(s, item);
}

bool tlgen::details::VectorIntBoxedWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorIntBoxedWrite(s, item);
}

void tlgen::details::VectorIntegerReset(std::vector<::tlgen::Integer>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorIntegerWriteJSON(std::ostream& s, const std::vector<::tlgen::Integer>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntegerWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorIntegerRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::Integer>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntegerRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorIntegerWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::Integer>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorIntegerWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorIntegerReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::Integer>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorIntegerRead(s, item);
}

bool tlgen::details::VectorIntegerWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::Integer>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorIntegerWrite(s, item);
}

void tlgen::details::VectorLongBoxedReset(std::vector<int64_t>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorLongBoxedWriteJSON(std::ostream& s, const std::vector<int64_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorLongBoxedWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorLongBoxedRead(::tlgen::basictl::tl_istream & s, std::vector<int64_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorLongBoxedRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorLongBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int64_t>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorLongBoxedWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorLongBoxedReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<int64_t>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorLongBoxedRead(s, item);
}

bool tlgen::details::VectorLongBoxedWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<int64_t>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorLongBoxedWrite(s, item);
}

void tlgen::details::VectorStringReset(std::vector<std::string>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorStringWriteJSON(std::ostream& s, const std::vector<std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorStringWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorStringRead(::tlgen::basictl::tl_istream & s, std::vector<std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorStringRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorStringWrite(::tlgen::basictl::tl_ostream & s, const std::vector<std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorStringWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorStringReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<std::string>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorStringRead(s, item);
}

bool tlgen::details::VectorStringWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<std::string>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorStringWrite(s, item);
}

bool tlgen::WithFloat::write_json(std::ostream& s)const {
  if (!::tlgen::details::WithFloatWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::WithFloat::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::WithFloatRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::WithFloat::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::WithFloatWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::WithFloat::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::WithFloat::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::WithFloat::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::WithFloatReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::WithFloat::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::WithFloatWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::WithFloat::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::WithFloat::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::WithFloatReset(::tlgen::WithFloat& item) noexcept {
  (void)item;
  item.x = 0;
  item.y = 0;
  item.z = 0;
}

bool tlgen::details::WithFloatWriteJSON(std::ostream& s, const ::tlgen::WithFloat& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.x != 0) {
    add_comma = true;
    s << "\"x\":";
    s << item.x;
  }
  if (item.y != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"y\":";
    s << item.y;
  }
  if (item.z != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"z\":";
    s << item.z;
  }
  s << "}";
  return true;
}

bool tlgen::details::WithFloatRead(::tlgen::basictl::tl_istream & s, ::tlgen::WithFloat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.float_read(item.x)) { return false; }
  if (!s.nat_read_exact_tag(0x824dab22)) { return false; }
  if (!s.float_read(item.y)) { return false; }
  if (!s.float_read(item.z)) { return false; }
  return true;
}

bool tlgen::details::WithFloatWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::WithFloat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.float_write(item.x)) { return false;}
  if (!s.nat_write(0x824dab22)) { return false; }
  if (!s.float_write(item.y)) { return false;}
  if (!s.float_write(item.z)) { return false;}
  return true;
}

bool tlgen::details::WithFloatReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::WithFloat& item) {
  if (!s.nat_read_exact_tag(0x071b8685)) { return false; }
  return tlgen::details::WithFloatRead(s, item);
}

bool tlgen::details::WithFloatWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::WithFloat& item) {
  if (!s.nat_write(0x071b8685)) { return false; }
  return tlgen::details::WithFloatWrite(s, item);
}
