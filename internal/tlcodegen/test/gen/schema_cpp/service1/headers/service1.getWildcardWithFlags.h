// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "service1/functions/service1.getWildcardWithFlags.h"
#include "service1/types/service1.Value.h"
#include "__common_namespace/types/dictionaryField.h"

namespace tlgen { namespace details { 

void Service1GetWildcardWithFlagsReset(::tlgen::service1::GetWildcardWithFlags& item) noexcept;

bool Service1GetWildcardWithFlagsWriteJSON(std::ostream& s, const ::tlgen::service1::GetWildcardWithFlags& item) noexcept;
bool Service1GetWildcardWithFlagsRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcardWithFlags& item) noexcept; 
bool Service1GetWildcardWithFlagsWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcardWithFlags& item) noexcept;
bool Service1GetWildcardWithFlagsReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcardWithFlags& item);
bool Service1GetWildcardWithFlagsWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcardWithFlags& item);

bool Service1GetWildcardWithFlagsReadResult(::tlgen::basictl::tl_istream & s, const ::tlgen::service1::GetWildcardWithFlags& item, std::map<std::string, ::tlgen::service1::Value>& result);
bool Service1GetWildcardWithFlagsWriteResult(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcardWithFlags& item, const std::map<std::string, ::tlgen::service1::Value>& result);
    
}} // namespace tlgen::details

