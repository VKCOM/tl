// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "service1/functions/service1.getExpireTime.h"
#include "__common_namespace/types/int.h"

namespace tlgen { namespace details { 

void Service1GetExpireTimeReset(::tlgen::service1::GetExpireTime& item) noexcept;

bool Service1GetExpireTimeWriteJSON(std::ostream& s, const ::tlgen::service1::GetExpireTime& item) noexcept;
bool Service1GetExpireTimeRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetExpireTime& item) noexcept; 
bool Service1GetExpireTimeWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetExpireTime& item) noexcept;
bool Service1GetExpireTimeReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetExpireTime& item);
bool Service1GetExpireTimeWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetExpireTime& item);

bool Service1GetExpireTimeReadResult(::tlgen::basictl::tl_istream & s, const ::tlgen::service1::GetExpireTime& item, std::optional<int32_t>& result);
bool Service1GetExpireTimeWriteResult(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetExpireTime& item, const std::optional<int32_t>& result);
    
}} // namespace tlgen::details

