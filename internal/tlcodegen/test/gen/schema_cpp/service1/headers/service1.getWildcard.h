// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "service1/functions/service1.getWildcard.h"
#include "__common_namespace/types/map.h"

namespace tlgen { namespace details { 

void Service1GetWildcardReset(::tlgen::service1::GetWildcard& item) noexcept;

bool Service1GetWildcardWriteJSON(std::ostream& s, const ::tlgen::service1::GetWildcard& item) noexcept;
bool Service1GetWildcardRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcard& item) noexcept; 
bool Service1GetWildcardWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcard& item) noexcept;
bool Service1GetWildcardReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcard& item);
bool Service1GetWildcardWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcard& item);

bool Service1GetWildcardReadResult(::tlgen::basictl::tl_istream & s, const ::tlgen::service1::GetWildcard& item, std::vector<::tlgen::Map<std::string, std::string>>& result);
bool Service1GetWildcardWriteResult(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcard& item, const std::vector<::tlgen::Map<std::string, std::string>>& result);
    
}} // namespace tlgen::details

