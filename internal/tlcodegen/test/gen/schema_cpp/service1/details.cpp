// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "service1/headers/service1_vector.h"
#include "service1/headers/service1_tuple.h"
#include "service1/headers/service1.Value.h"
#include "service1/headers/service1.touch.h"
#include "service1/headers/service1.setOrIncr.h"
#include "service1/headers/service1.set.h"
#include "service1/headers/service1.replaceOrIncr.h"
#include "service1/headers/service1.replace.h"
#include "service1/headers/service1.keysStat.h"
#include "service1/headers/service1.incr.h"
#include "service1/headers/service1.getWildcardWithFlags.h"
#include "service1/headers/service1.getWildcardList.h"
#include "service1/headers/service1.getWildcardDict.h"
#include "service1/headers/service1.getWildcard.h"
#include "service1/headers/service1.getKeysStatPeriods.h"
#include "service1/headers/service1.getKeysStat.h"
#include "service1/headers/service1.getExpireTime.h"
#include "service1/headers/service1.get.h"
#include "service1/headers/service1.exists.h"
#include "service1/headers/service1.enableKeysStat.h"
#include "service1/headers/service1.enableExpiration.h"
#include "service1/headers/service1.disableKeysStat.h"
#include "service1/headers/service1.disableExpiration.h"
#include "service1/headers/service1.delete.h"
#include "service1/headers/service1.decr.h"
#include "service1/headers/service1.cas.h"
#include "service1/headers/service1.append.h"
#include "service1/headers/service1.addOrIncr.h"
#include "service1/headers/service1.addOrGet.h"
#include "service1/headers/service1.add.h"
#include "service1/headers/service1_myMcValueVector.h"
#include "service1/headers/service1_myMcValueTuple.h"
#include "service1/headers/service1_myMcValue.h"
#include "service1/headers/service1_myAnonMcValue.h"
#include "service1/headers/service1_map.h"
#include "__common_namespace/headers/int.h"
#include "service1/headers/service1_getMaybeIface.h"
#include "service1/headers/service1.strvalueWithTime.h"
#include "service1/headers/service1.strvalue.h"
#include "service1/headers/service1.not_found.h"
#include "service1/headers/service1.longvalueWithTime.h"
#include "service1/headers/service1.longvalue.h"
#include "__common_namespace/headers/dictionaryField.h"
#include "service1/headers/service1_dictionaryField.h"
#include "service1/headers/service1_dictionary.h"
#include "__common_namespace/headers/string.h"
#include "__common_namespace/headers/Bool.h"


void tlgen::details::BuiltinTuple3Service1ValueReset(std::array<::tlgen::service1::Value, 3>& item) {
  for(auto && el : item) {
    ::tlgen::details::Service1ValueReset(el);
  }
}

bool tlgen::details::BuiltinTuple3Service1ValueWriteJSON(std::ostream &s, const std::array<::tlgen::service1::Value, 3>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    if (!::tlgen::details::Service1ValueWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple3Service1ValueRead(::tlgen::basictl::tl_istream & s, std::array<::tlgen::service1::Value, 3>& item) {
  for(auto && el : item) {
    if (!::tlgen::details::Service1ValueReadBoxed(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::details::BuiltinTuple3Service1ValueWrite(::tlgen::basictl::tl_ostream & s, const std::array<::tlgen::service1::Value, 3>& item) {
  for(const auto & el : item) {
    if (!::tlgen::details::Service1ValueWriteBoxed(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntReset(std::map<std::string, std::map<std::string, int32_t>>& item) {
  item.clear(); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntWriteJSON(std::ostream & s, const std::map<std::string, std::map<std::string, int32_t>>& item) {
  s << "{";
  size_t index = 0;
  for(const auto & el : item) {
    s << "\"" << el.first << "\"";
    s << ":";
    if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWriteJSON(s, el.second)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "}";
  return true;
}

bool tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntRead(::tlgen::basictl::tl_istream & s, std::map<std::string, std::map<std::string, int32_t>>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  item.clear();
  for(uint32_t i = 0; i < len; i++) {
    ::tlgen::DictionaryField<std::map<std::string, int32_t>> el;
    if (!::tlgen::details::DictionaryFieldDictionaryIntRead(s, el)) { return s.set_error_unknown_scenario(); }
    item[el.key] = el.value;
  }
  return true;
}

bool tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::map<std::string, int32_t>>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    ::tlgen::DictionaryField<std::map<std::string, int32_t>> el2{.key= el.first, .value= el.second};
    if (!::tlgen::details::DictionaryFieldDictionaryIntWrite(s, el2)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::BuiltinVectorDictionaryFieldService1ValueReset(std::map<std::string, ::tlgen::service1::Value>& item) {
  item.clear(); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorDictionaryFieldService1ValueWriteJSON(std::ostream & s, const std::map<std::string, ::tlgen::service1::Value>& item) {
  s << "{";
  size_t index = 0;
  for(const auto & el : item) {
    s << "\"" << el.first << "\"";
    s << ":";
    if (!::tlgen::details::Service1ValueWriteJSON(s, el.second)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "}";
  return true;
}

bool tlgen::details::BuiltinVectorDictionaryFieldService1ValueRead(::tlgen::basictl::tl_istream & s, std::map<std::string, ::tlgen::service1::Value>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  item.clear();
  for(uint32_t i = 0; i < len; i++) {
    ::tlgen::DictionaryField<::tlgen::service1::Value> el;
    if (!::tlgen::details::DictionaryFieldService1ValueRead(s, el)) { return s.set_error_unknown_scenario(); }
    item[el.key] = el.value;
  }
  return true;
}

bool tlgen::details::BuiltinVectorDictionaryFieldService1ValueWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, ::tlgen::service1::Value>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    ::tlgen::DictionaryField<::tlgen::service1::Value> el2{.key= el.first, .value= el.second};
    if (!::tlgen::details::DictionaryFieldService1ValueWrite(s, el2)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::BuiltinVectorDictionaryFieldStringReset(std::map<std::string, std::string>& item) {
  item.clear(); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorDictionaryFieldStringWriteJSON(std::ostream & s, const std::map<std::string, std::string>& item) {
  s << "{";
  size_t index = 0;
  for(const auto & el : item) {
    s << "\"" << el.first << "\"";
    s << ":";
    s << "\"" << el.second << "\"";
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "}";
  return true;
}

bool tlgen::details::BuiltinVectorDictionaryFieldStringRead(::tlgen::basictl::tl_istream & s, std::map<std::string, std::string>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  item.clear();
  for(uint32_t i = 0; i < len; i++) {
    ::tlgen::DictionaryField<std::string> el;
    if (!::tlgen::details::DictionaryFieldStringRead(s, el)) { return s.set_error_unknown_scenario(); }
    item[el.key] = el.value;
  }
  return true;
}

bool tlgen::details::BuiltinVectorDictionaryFieldStringWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::string>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    ::tlgen::DictionaryField<std::string> el2{.key= el.first, .value= el.second};
    if (!::tlgen::details::DictionaryFieldStringWrite(s, el2)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::BuiltinVectorMapStringStringReset(std::vector<::tlgen::Map<std::string, std::string>>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorMapStringStringWriteJSON(std::ostream & s, const std::vector<::tlgen::Map<std::string, std::string>>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    if (!::tlgen::details::MapStringStringWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorMapStringStringRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::Map<std::string, std::string>>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!::tlgen::details::MapStringStringRead(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::details::BuiltinVectorMapStringStringWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::Map<std::string, std::string>>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!::tlgen::details::MapStringStringWrite(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::BuiltinVectorService1ValueReset(std::vector<::tlgen::service1::Value>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorService1ValueWriteJSON(std::ostream & s, const std::vector<::tlgen::service1::Value>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    if (!::tlgen::details::Service1ValueWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorService1ValueRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::service1::Value>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!::tlgen::details::Service1ValueReadBoxed(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::details::BuiltinVectorService1ValueWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::service1::Value>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!::tlgen::details::Service1ValueWriteBoxed(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::DictionaryDictionaryIntReset(std::map<std::string, std::map<std::string, int32_t>>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::DictionaryDictionaryIntWriteJSON(std::ostream& s, const std::map<std::string, std::map<std::string, int32_t>>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::DictionaryDictionaryIntRead(::tlgen::basictl::tl_istream & s, std::map<std::string, std::map<std::string, int32_t>>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::DictionaryDictionaryIntWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::map<std::string, int32_t>>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::DictionaryDictionaryIntReadBoxed(::tlgen::basictl::tl_istream & s, std::map<std::string, std::map<std::string, int32_t>>& item) {
  if (!s.nat_read_exact_tag(0x1f4c618f)) { return false; }
  return tlgen::details::DictionaryDictionaryIntRead(s, item);
}

bool tlgen::details::DictionaryDictionaryIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::map<std::string, int32_t>>& item) {
  if (!s.nat_write(0x1f4c618f)) { return false; }
  return tlgen::details::DictionaryDictionaryIntWrite(s, item);
}

void tlgen::details::DictionaryFieldService1ValueReset(::tlgen::DictionaryField<::tlgen::service1::Value>& item) noexcept {
  (void)item;
  item.key.clear();
  ::tlgen::details::Service1ValueReset(item.value);
}

bool tlgen::details::DictionaryFieldService1ValueWriteJSON(std::ostream& s, const ::tlgen::DictionaryField<::tlgen::service1::Value>& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"value\":";
  if (!::tlgen::details::Service1ValueWriteJSON(s, item.value)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::DictionaryFieldService1ValueRead(::tlgen::basictl::tl_istream & s, ::tlgen::DictionaryField<::tlgen::service1::Value>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!::tlgen::details::Service1ValueReadBoxed(s, item.value)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::DictionaryFieldService1ValueWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::DictionaryField<::tlgen::service1::Value>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!::tlgen::details::Service1ValueWriteBoxed(s, item.value)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::DictionaryFieldService1ValueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::DictionaryField<::tlgen::service1::Value>& item) {
  if (!s.nat_read_exact_tag(0x239c1b62)) { return false; }
  return tlgen::details::DictionaryFieldService1ValueRead(s, item);
}

bool tlgen::details::DictionaryFieldService1ValueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::DictionaryField<::tlgen::service1::Value>& item) {
  if (!s.nat_write(0x239c1b62)) { return false; }
  return tlgen::details::DictionaryFieldService1ValueWrite(s, item);
}

bool tlgen::GetMaybeIface::write_json(std::ostream& s)const {
  if (!::tlgen::details::GetMaybeIfaceWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::GetMaybeIface::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetMaybeIfaceRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetMaybeIface::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetMaybeIfaceWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetMaybeIface::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::GetMaybeIface::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::GetMaybeIface::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::GetMaybeIfaceReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::GetMaybeIface::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::GetMaybeIfaceWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::GetMaybeIface::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::GetMaybeIface::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::GetMaybeIfaceReset(::tlgen::GetMaybeIface& item) noexcept {
  (void)item;
  ::tlgen::details::Service1ValueReset(item.x);
}

bool tlgen::details::GetMaybeIfaceWriteJSON(std::ostream& s, const ::tlgen::GetMaybeIface& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::Service1ValueWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::GetMaybeIfaceRead(::tlgen::basictl::tl_istream & s, ::tlgen::GetMaybeIface& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Service1ValueReadBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::GetMaybeIfaceWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetMaybeIface& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Service1ValueWriteBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::GetMaybeIfaceReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::GetMaybeIface& item) {
  if (!s.nat_read_exact_tag(0x6b055ae4)) { return false; }
  return tlgen::details::GetMaybeIfaceRead(s, item);
}

bool tlgen::details::GetMaybeIfaceWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::GetMaybeIface& item) {
  if (!s.nat_write(0x6b055ae4)) { return false; }
  return tlgen::details::GetMaybeIfaceWrite(s, item);
}

bool tlgen::details::GetMaybeIfaceReadResult(::tlgen::basictl::tl_istream & s, const tlgen::GetMaybeIface& item, std::optional<::tlgen::service1::Value>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueBoxedMaybeReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::GetMaybeIfaceWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::GetMaybeIface& item, const std::optional<::tlgen::service1::Value>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueBoxedMaybeWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::GetMaybeIface::read_result(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::service1::Value> & result) const noexcept {
  bool success = tlgen::details::GetMaybeIfaceReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::GetMaybeIface::write_result(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::service1::Value> & result) const noexcept {
  bool success = tlgen::details::GetMaybeIfaceWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::GetMaybeIface::read_result(::tlgen::basictl::tl_throwable_istream & s, std::optional<::tlgen::service1::Value> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::GetMaybeIface::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::optional<::tlgen::service1::Value> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

void tlgen::details::MapStringStringReset(::tlgen::Map<std::string, std::string>& item) noexcept {
  (void)item;
  item.key.clear();
  item.value.clear();
}

bool tlgen::details::MapStringStringWriteJSON(std::ostream& s, const ::tlgen::Map<std::string, std::string>& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.value.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << "\"" << item.value << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::MapStringStringRead(::tlgen::basictl::tl_istream & s, ::tlgen::Map<std::string, std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.string_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::MapStringStringWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::Map<std::string, std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.string_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::MapStringStringReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::Map<std::string, std::string>& item) {
  if (!s.nat_read_exact_tag(0x79c473a4)) { return false; }
  return tlgen::details::MapStringStringRead(s, item);
}

bool tlgen::details::MapStringStringWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::Map<std::string, std::string>& item) {
  if (!s.nat_write(0x79c473a4)) { return false; }
  return tlgen::details::MapStringStringWrite(s, item);
}

void tlgen::details::MyAnonMcValueReset(::tlgen::MyAnonMcValue& item) noexcept {
  (void)item;
  ::tlgen::details::Service1ValueReset(item);
}

bool tlgen::details::MyAnonMcValueWriteJSON(std::ostream& s, const ::tlgen::MyAnonMcValue& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Service1ValueWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::MyAnonMcValueRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyAnonMcValue& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Service1ValueReadBoxed(s, item)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::MyAnonMcValueWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyAnonMcValue& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Service1ValueWriteBoxed(s, item)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::MyAnonMcValueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyAnonMcValue& item) {
  if (!s.nat_read_exact_tag(0x569310db)) { return false; }
  return tlgen::details::MyAnonMcValueRead(s, item);
}

bool tlgen::details::MyAnonMcValueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyAnonMcValue& item) {
  if (!s.nat_write(0x569310db)) { return false; }
  return tlgen::details::MyAnonMcValueWrite(s, item);
}

bool tlgen::MyMcValue::write_json(std::ostream& s)const {
  if (!::tlgen::details::MyMcValueWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::MyMcValue::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyMcValueRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyMcValue::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyMcValueWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyMcValue::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::MyMcValue::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::MyMcValue::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyMcValueReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyMcValue::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyMcValueWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyMcValue::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::MyMcValue::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::MyMcValueReset(::tlgen::MyMcValue& item) noexcept {
  (void)item;
  ::tlgen::details::Service1ValueReset(item.x);
}

bool tlgen::details::MyMcValueWriteJSON(std::ostream& s, const ::tlgen::MyMcValue& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::Service1ValueWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::MyMcValueRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyMcValue& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Service1ValueReadBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::MyMcValueWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyMcValue& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Service1ValueWriteBoxed(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::MyMcValueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyMcValue& item) {
  if (!s.nat_read_exact_tag(0xe2ffd978)) { return false; }
  return tlgen::details::MyMcValueRead(s, item);
}

bool tlgen::details::MyMcValueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyMcValue& item) {
  if (!s.nat_write(0xe2ffd978)) { return false; }
  return tlgen::details::MyMcValueWrite(s, item);
}

bool tlgen::MyMcValueTuple::write_json(std::ostream& s)const {
  if (!::tlgen::details::MyMcValueTupleWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::MyMcValueTuple::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyMcValueTupleRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyMcValueTuple::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyMcValueTupleWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyMcValueTuple::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::MyMcValueTuple::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::MyMcValueTuple::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyMcValueTupleReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyMcValueTuple::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyMcValueTupleWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyMcValueTuple::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::MyMcValueTuple::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::MyMcValueTupleReset(::tlgen::MyMcValueTuple& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple3Service1ValueReset(item.xs);
}

bool tlgen::details::MyMcValueTupleWriteJSON(std::ostream& s, const ::tlgen::MyMcValueTuple& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"xs\":";
  if (!::tlgen::details::BuiltinTuple3Service1ValueWriteJSON(s, item.xs)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::MyMcValueTupleRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyMcValueTuple& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple3Service1ValueRead(s, item.xs)) { return false; }
  return true;
}

bool tlgen::details::MyMcValueTupleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyMcValueTuple& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple3Service1ValueWrite(s, item.xs)) { return false; }
  return true;
}

bool tlgen::details::MyMcValueTupleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyMcValueTuple& item) {
  if (!s.nat_read_exact_tag(0x1287d116)) { return false; }
  return tlgen::details::MyMcValueTupleRead(s, item);
}

bool tlgen::details::MyMcValueTupleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyMcValueTuple& item) {
  if (!s.nat_write(0x1287d116)) { return false; }
  return tlgen::details::MyMcValueTupleWrite(s, item);
}

bool tlgen::MyMcValueVector::write_json(std::ostream& s)const {
  if (!::tlgen::details::MyMcValueVectorWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::MyMcValueVector::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyMcValueVectorRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyMcValueVector::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyMcValueVectorWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyMcValueVector::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::MyMcValueVector::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::MyMcValueVector::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::MyMcValueVectorReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::MyMcValueVector::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::MyMcValueVectorWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::MyMcValueVector::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::MyMcValueVector::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::MyMcValueVectorReset(::tlgen::MyMcValueVector& item) noexcept {
  (void)item;
  item.xs.clear();
}

bool tlgen::details::MyMcValueVectorWriteJSON(std::ostream& s, const ::tlgen::MyMcValueVector& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.xs.size() != 0) {
    s << "\"xs\":";
    if (!::tlgen::details::BuiltinVectorService1ValueWriteJSON(s, item.xs)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::MyMcValueVectorRead(::tlgen::basictl::tl_istream & s, ::tlgen::MyMcValueVector& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorService1ValueRead(s, item.xs)) { return false; }
  return true;
}

bool tlgen::details::MyMcValueVectorWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyMcValueVector& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorService1ValueWrite(s, item.xs)) { return false; }
  return true;
}

bool tlgen::details::MyMcValueVectorReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::MyMcValueVector& item) {
  if (!s.nat_read_exact_tag(0x761d6d58)) { return false; }
  return tlgen::details::MyMcValueVectorRead(s, item);
}

bool tlgen::details::MyMcValueVectorWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::MyMcValueVector& item) {
  if (!s.nat_write(0x761d6d58)) { return false; }
  return tlgen::details::MyMcValueVectorWrite(s, item);
}

bool tlgen::service1::Add::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1AddWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Add::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1AddRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Add::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1AddWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Add::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Add::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Add::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1AddReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Add::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1AddWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Add::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Add::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1AddReset(::tlgen::service1::Add& item) noexcept {
  (void)item;
  item.key.clear();
  item.flags = 0;
  item.delay = 0;
  item.value.clear();
}

bool tlgen::details::Service1AddWriteJSON(std::ostream& s, const ::tlgen::service1::Add& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.delay != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"delay\":";
    s << item.delay;
  }
  if (item.value.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << "\"" << item.value << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1AddRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Add& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.delay)) { return false; }
  if (!s.string_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::Service1AddWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Add& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.delay)) { return false;}
  if (!s.string_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::Service1AddReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Add& item) {
  if (!s.nat_read_exact_tag(0x481df8be)) { return false; }
  return tlgen::details::Service1AddRead(s, item);
}

bool tlgen::details::Service1AddWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Add& item) {
  if (!s.nat_write(0x481df8be)) { return false; }
  return tlgen::details::Service1AddWrite(s, item);
}

bool tlgen::details::Service1AddReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Add& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1AddWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Add& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::Add::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1AddReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Add::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1AddWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Add::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Add::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::AddOrGet::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1AddOrGetWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::AddOrGet::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1AddOrGetRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::AddOrGet::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1AddOrGetWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::AddOrGet::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::AddOrGet::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::AddOrGet::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1AddOrGetReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::AddOrGet::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1AddOrGetWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::AddOrGet::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::AddOrGet::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1AddOrGetReset(::tlgen::service1::AddOrGet& item) noexcept {
  (void)item;
  item.key.clear();
  item.flags = 0;
  item.delay = 0;
  item.value.clear();
}

bool tlgen::details::Service1AddOrGetWriteJSON(std::ostream& s, const ::tlgen::service1::AddOrGet& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.delay != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"delay\":";
    s << item.delay;
  }
  if (item.value.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << "\"" << item.value << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1AddOrGetRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::AddOrGet& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.delay)) { return false; }
  if (!s.string_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::Service1AddOrGetWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::AddOrGet& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.delay)) { return false;}
  if (!s.string_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::Service1AddOrGetReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::AddOrGet& item) {
  if (!s.nat_read_exact_tag(0x6a42faad)) { return false; }
  return tlgen::details::Service1AddOrGetRead(s, item);
}

bool tlgen::details::Service1AddOrGetWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::AddOrGet& item) {
  if (!s.nat_write(0x6a42faad)) { return false; }
  return tlgen::details::Service1AddOrGetWrite(s, item);
}

bool tlgen::details::Service1AddOrGetReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::AddOrGet& item, ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::Service1AddOrGetWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::AddOrGet& item, const ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::service1::AddOrGet::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1AddOrGetReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::AddOrGet::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1AddOrGetWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::AddOrGet::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::AddOrGet::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::AddOrIncr::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1AddOrIncrWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::AddOrIncr::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1AddOrIncrRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::AddOrIncr::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1AddOrIncrWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::AddOrIncr::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::AddOrIncr::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::AddOrIncr::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1AddOrIncrReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::AddOrIncr::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1AddOrIncrWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::AddOrIncr::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::AddOrIncr::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1AddOrIncrReset(::tlgen::service1::AddOrIncr& item) noexcept {
  (void)item;
  item.key.clear();
  item.flags = 0;
  item.delay = 0;
  item.value = 0;
}

bool tlgen::details::Service1AddOrIncrWriteJSON(std::ostream& s, const ::tlgen::service1::AddOrIncr& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.delay != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"delay\":";
    s << item.delay;
  }
  if (item.value != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << item.value;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1AddOrIncrRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::AddOrIncr& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.delay)) { return false; }
  if (!s.long_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::Service1AddOrIncrWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::AddOrIncr& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.delay)) { return false;}
  if (!s.long_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::Service1AddOrIncrReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::AddOrIncr& item) {
  if (!s.nat_read_exact_tag(0x90c4b402)) { return false; }
  return tlgen::details::Service1AddOrIncrRead(s, item);
}

bool tlgen::details::Service1AddOrIncrWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::AddOrIncr& item) {
  if (!s.nat_write(0x90c4b402)) { return false; }
  return tlgen::details::Service1AddOrIncrWrite(s, item);
}

bool tlgen::details::Service1AddOrIncrReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::AddOrIncr& item, ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::Service1AddOrIncrWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::AddOrIncr& item, const ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::service1::AddOrIncr::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1AddOrIncrReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::AddOrIncr::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1AddOrIncrWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::AddOrIncr::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::AddOrIncr::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::Append::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1AppendWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Append::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1AppendRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Append::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1AppendWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Append::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Append::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Append::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1AppendReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Append::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1AppendWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Append::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Append::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1AppendReset(::tlgen::service1::Append& item) noexcept {
  (void)item;
  item.key.clear();
  item.flags = 0;
  item.delay = 0;
  item.suffix.clear();
}

bool tlgen::details::Service1AppendWriteJSON(std::ostream& s, const ::tlgen::service1::Append& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.delay != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"delay\":";
    s << item.delay;
  }
  if (item.suffix.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"suffix\":";
    s << "\"" << item.suffix << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1AppendRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Append& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.delay)) { return false; }
  if (!s.string_read(item.suffix)) { return false; }
  return true;
}

bool tlgen::details::Service1AppendWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Append& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.delay)) { return false;}
  if (!s.string_write(item.suffix)) { return false;}
  return true;
}

bool tlgen::details::Service1AppendReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Append& item) {
  if (!s.nat_read_exact_tag(0x04dec671)) { return false; }
  return tlgen::details::Service1AppendRead(s, item);
}

bool tlgen::details::Service1AppendWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Append& item) {
  if (!s.nat_write(0x04dec671)) { return false; }
  return tlgen::details::Service1AppendWrite(s, item);
}

bool tlgen::details::Service1AppendReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Append& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1AppendWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Append& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::Append::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1AppendReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Append::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1AppendWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Append::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Append::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::Cas::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1CasWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Cas::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1CasRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Cas::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1CasWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Cas::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Cas::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Cas::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1CasReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Cas::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1CasWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Cas::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Cas::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1CasReset(::tlgen::service1::Cas& item) noexcept {
  (void)item;
  item.key.clear();
  item.flags = 0;
  item.delay = 0;
  item.casToken.clear();
  item.newValue.clear();
}

bool tlgen::details::Service1CasWriteJSON(std::ostream& s, const ::tlgen::service1::Cas& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.delay != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"delay\":";
    s << item.delay;
  }
  if (item.casToken.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"casToken\":";
    s << "\"" << item.casToken << "\"";
  }
  if (item.newValue.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"newValue\":";
    s << "\"" << item.newValue << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1CasRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Cas& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.delay)) { return false; }
  if (!s.string_read(item.casToken)) { return false; }
  if (!s.string_read(item.newValue)) { return false; }
  return true;
}

bool tlgen::details::Service1CasWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Cas& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.delay)) { return false;}
  if (!s.string_write(item.casToken)) { return false;}
  if (!s.string_write(item.newValue)) { return false;}
  return true;
}

bool tlgen::details::Service1CasReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Cas& item) {
  if (!s.nat_read_exact_tag(0x51851964)) { return false; }
  return tlgen::details::Service1CasRead(s, item);
}

bool tlgen::details::Service1CasWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Cas& item) {
  if (!s.nat_write(0x51851964)) { return false; }
  return tlgen::details::Service1CasWrite(s, item);
}

bool tlgen::details::Service1CasReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Cas& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1CasWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Cas& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::Cas::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1CasReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Cas::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1CasWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Cas::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Cas::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::Decr::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1DecrWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Decr::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1DecrRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Decr::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1DecrWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Decr::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Decr::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Decr::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1DecrReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Decr::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1DecrWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Decr::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Decr::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1DecrReset(::tlgen::service1::Decr& item) noexcept {
  (void)item;
  item.key.clear();
  item.value = 0;
}

bool tlgen::details::Service1DecrWriteJSON(std::ostream& s, const ::tlgen::service1::Decr& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.value != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << item.value;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1DecrRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Decr& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.long_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::Service1DecrWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Decr& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.long_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::Service1DecrReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Decr& item) {
  if (!s.nat_read_exact_tag(0xeb179ce7)) { return false; }
  return tlgen::details::Service1DecrRead(s, item);
}

bool tlgen::details::Service1DecrWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Decr& item) {
  if (!s.nat_write(0xeb179ce7)) { return false; }
  return tlgen::details::Service1DecrWrite(s, item);
}

bool tlgen::details::Service1DecrReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Decr& item, ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::Service1DecrWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Decr& item, const ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::service1::Decr::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1DecrReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Decr::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1DecrWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Decr::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Decr::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::Delete::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1DeleteWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Delete::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1DeleteRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Delete::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1DeleteWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Delete::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Delete::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Delete::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1DeleteReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Delete::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1DeleteWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Delete::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Delete::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1DeleteReset(::tlgen::service1::Delete& item) noexcept {
  (void)item;
  item.key.clear();
}

bool tlgen::details::Service1DeleteWriteJSON(std::ostream& s, const ::tlgen::service1::Delete& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.key.size() != 0) {
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1DeleteRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Delete& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  return true;
}

bool tlgen::details::Service1DeleteWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Delete& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  return true;
}

bool tlgen::details::Service1DeleteReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Delete& item) {
  if (!s.nat_read_exact_tag(0x83277767)) { return false; }
  return tlgen::details::Service1DeleteRead(s, item);
}

bool tlgen::details::Service1DeleteWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Delete& item) {
  if (!s.nat_write(0x83277767)) { return false; }
  return tlgen::details::Service1DeleteWrite(s, item);
}

bool tlgen::details::Service1DeleteReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Delete& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1DeleteWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Delete& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::Delete::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1DeleteReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Delete::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1DeleteWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Delete::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Delete::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::DisableExpiration::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1DisableExpirationWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::DisableExpiration::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1DisableExpirationRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::DisableExpiration::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1DisableExpirationWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::DisableExpiration::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::DisableExpiration::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::DisableExpiration::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1DisableExpirationReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::DisableExpiration::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1DisableExpirationWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::DisableExpiration::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::DisableExpiration::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1DisableExpirationReset(::tlgen::service1::DisableExpiration& item) noexcept {
  (void)item;
  item.prefix.clear();
}

bool tlgen::details::Service1DisableExpirationWriteJSON(std::ostream& s, const ::tlgen::service1::DisableExpiration& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.prefix.size() != 0) {
    s << "\"prefix\":";
    s << "\"" << item.prefix << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1DisableExpirationRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::DisableExpiration& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.prefix)) { return false; }
  return true;
}

bool tlgen::details::Service1DisableExpirationWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::DisableExpiration& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.prefix)) { return false;}
  return true;
}

bool tlgen::details::Service1DisableExpirationReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::DisableExpiration& item) {
  if (!s.nat_read_exact_tag(0xf1c39c2d)) { return false; }
  return tlgen::details::Service1DisableExpirationRead(s, item);
}

bool tlgen::details::Service1DisableExpirationWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::DisableExpiration& item) {
  if (!s.nat_write(0xf1c39c2d)) { return false; }
  return tlgen::details::Service1DisableExpirationWrite(s, item);
}

bool tlgen::details::Service1DisableExpirationReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::DisableExpiration& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1DisableExpirationWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::DisableExpiration& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::DisableExpiration::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1DisableExpirationReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::DisableExpiration::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1DisableExpirationWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::DisableExpiration::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::DisableExpiration::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::DisableKeysStat::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1DisableKeysStatWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::DisableKeysStat::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1DisableKeysStatRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::DisableKeysStat::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1DisableKeysStatWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::DisableKeysStat::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::DisableKeysStat::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::DisableKeysStat::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1DisableKeysStatReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::DisableKeysStat::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1DisableKeysStatWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::DisableKeysStat::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::DisableKeysStat::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1DisableKeysStatReset(::tlgen::service1::DisableKeysStat& item) noexcept {
  (void)item;
  item.period = 0;
}

bool tlgen::details::Service1DisableKeysStatWriteJSON(std::ostream& s, const ::tlgen::service1::DisableKeysStat& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.period != 0) {
    s << "\"period\":";
    s << item.period;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1DisableKeysStatRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::DisableKeysStat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.period)) { return false; }
  return true;
}

bool tlgen::details::Service1DisableKeysStatWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::DisableKeysStat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.period)) { return false;}
  return true;
}

bool tlgen::details::Service1DisableKeysStatReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::DisableKeysStat& item) {
  if (!s.nat_read_exact_tag(0x79d6160f)) { return false; }
  return tlgen::details::Service1DisableKeysStatRead(s, item);
}

bool tlgen::details::Service1DisableKeysStatWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::DisableKeysStat& item) {
  if (!s.nat_write(0x79d6160f)) { return false; }
  return tlgen::details::Service1DisableKeysStatWrite(s, item);
}

bool tlgen::details::Service1DisableKeysStatReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::DisableKeysStat& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1DisableKeysStatWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::DisableKeysStat& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::DisableKeysStat::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1DisableKeysStatReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::DisableKeysStat::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1DisableKeysStatWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::DisableKeysStat::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::DisableKeysStat::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::EnableExpiration::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1EnableExpirationWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::EnableExpiration::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1EnableExpirationRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::EnableExpiration::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1EnableExpirationWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::EnableExpiration::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::EnableExpiration::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::EnableExpiration::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1EnableExpirationReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::EnableExpiration::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1EnableExpirationWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::EnableExpiration::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::EnableExpiration::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1EnableExpirationReset(::tlgen::service1::EnableExpiration& item) noexcept {
  (void)item;
  item.prefix.clear();
}

bool tlgen::details::Service1EnableExpirationWriteJSON(std::ostream& s, const ::tlgen::service1::EnableExpiration& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.prefix.size() != 0) {
    s << "\"prefix\":";
    s << "\"" << item.prefix << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1EnableExpirationRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::EnableExpiration& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.prefix)) { return false; }
  return true;
}

bool tlgen::details::Service1EnableExpirationWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::EnableExpiration& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.prefix)) { return false;}
  return true;
}

bool tlgen::details::Service1EnableExpirationReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::EnableExpiration& item) {
  if (!s.nat_read_exact_tag(0x2b51ad67)) { return false; }
  return tlgen::details::Service1EnableExpirationRead(s, item);
}

bool tlgen::details::Service1EnableExpirationWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::EnableExpiration& item) {
  if (!s.nat_write(0x2b51ad67)) { return false; }
  return tlgen::details::Service1EnableExpirationWrite(s, item);
}

bool tlgen::details::Service1EnableExpirationReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::EnableExpiration& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1EnableExpirationWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::EnableExpiration& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::EnableExpiration::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1EnableExpirationReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::EnableExpiration::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1EnableExpirationWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::EnableExpiration::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::EnableExpiration::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::EnableKeysStat::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1EnableKeysStatWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::EnableKeysStat::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1EnableKeysStatRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::EnableKeysStat::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1EnableKeysStatWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::EnableKeysStat::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::EnableKeysStat::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::EnableKeysStat::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1EnableKeysStatReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::EnableKeysStat::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1EnableKeysStatWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::EnableKeysStat::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::EnableKeysStat::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1EnableKeysStatReset(::tlgen::service1::EnableKeysStat& item) noexcept {
  (void)item;
  item.period = 0;
}

bool tlgen::details::Service1EnableKeysStatWriteJSON(std::ostream& s, const ::tlgen::service1::EnableKeysStat& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.period != 0) {
    s << "\"period\":";
    s << item.period;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1EnableKeysStatRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::EnableKeysStat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.period)) { return false; }
  return true;
}

bool tlgen::details::Service1EnableKeysStatWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::EnableKeysStat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.period)) { return false;}
  return true;
}

bool tlgen::details::Service1EnableKeysStatReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::EnableKeysStat& item) {
  if (!s.nat_read_exact_tag(0x29a7090e)) { return false; }
  return tlgen::details::Service1EnableKeysStatRead(s, item);
}

bool tlgen::details::Service1EnableKeysStatWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::EnableKeysStat& item) {
  if (!s.nat_write(0x29a7090e)) { return false; }
  return tlgen::details::Service1EnableKeysStatWrite(s, item);
}

bool tlgen::details::Service1EnableKeysStatReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::EnableKeysStat& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1EnableKeysStatWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::EnableKeysStat& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::EnableKeysStat::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1EnableKeysStatReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::EnableKeysStat::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1EnableKeysStatWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::EnableKeysStat::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::EnableKeysStat::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::Exists::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1ExistsWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Exists::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1ExistsRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Exists::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1ExistsWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Exists::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Exists::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Exists::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1ExistsReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Exists::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1ExistsWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Exists::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Exists::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1ExistsReset(::tlgen::service1::Exists& item) noexcept {
  (void)item;
  item.key.clear();
}

bool tlgen::details::Service1ExistsWriteJSON(std::ostream& s, const ::tlgen::service1::Exists& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.key.size() != 0) {
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1ExistsRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Exists& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  return true;
}

bool tlgen::details::Service1ExistsWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Exists& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  return true;
}

bool tlgen::details::Service1ExistsReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Exists& item) {
  if (!s.nat_read_exact_tag(0xe0284c9e)) { return false; }
  return tlgen::details::Service1ExistsRead(s, item);
}

bool tlgen::details::Service1ExistsWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Exists& item) {
  if (!s.nat_write(0xe0284c9e)) { return false; }
  return tlgen::details::Service1ExistsWrite(s, item);
}

bool tlgen::details::Service1ExistsReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Exists& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1ExistsWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Exists& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::Exists::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1ExistsReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Exists::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1ExistsWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Exists::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Exists::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::Get::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1GetWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Get::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Get::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Get::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Get::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Get::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Get::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Get::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Get::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1GetReset(::tlgen::service1::Get& item) noexcept {
  (void)item;
  item.key.clear();
}

bool tlgen::details::Service1GetWriteJSON(std::ostream& s, const ::tlgen::service1::Get& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.key.size() != 0) {
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1GetRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Get& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  return true;
}

bool tlgen::details::Service1GetWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Get& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  return true;
}

bool tlgen::details::Service1GetReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Get& item) {
  if (!s.nat_read_exact_tag(0x29099b19)) { return false; }
  return tlgen::details::Service1GetRead(s, item);
}

bool tlgen::details::Service1GetWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Get& item) {
  if (!s.nat_write(0x29099b19)) { return false; }
  return tlgen::details::Service1GetWrite(s, item);
}

bool tlgen::details::Service1GetReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Get& item, ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::Service1GetWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Get& item, const ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::service1::Get::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1GetReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Get::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1GetWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Get::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Get::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::GetExpireTime::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1GetExpireTimeWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::GetExpireTime::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetExpireTimeRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetExpireTime::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetExpireTimeWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetExpireTime::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetExpireTime::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::GetExpireTime::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetExpireTimeReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetExpireTime::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetExpireTimeWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetExpireTime::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetExpireTime::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1GetExpireTimeReset(::tlgen::service1::GetExpireTime& item) noexcept {
  (void)item;
  item.key.clear();
}

bool tlgen::details::Service1GetExpireTimeWriteJSON(std::ostream& s, const ::tlgen::service1::GetExpireTime& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.key.size() != 0) {
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1GetExpireTimeRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetExpireTime& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  return true;
}

bool tlgen::details::Service1GetExpireTimeWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetExpireTime& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  return true;
}

bool tlgen::details::Service1GetExpireTimeReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetExpireTime& item) {
  if (!s.nat_read_exact_tag(0x5a731070)) { return false; }
  return tlgen::details::Service1GetExpireTimeRead(s, item);
}

bool tlgen::details::Service1GetExpireTimeWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetExpireTime& item) {
  if (!s.nat_write(0x5a731070)) { return false; }
  return tlgen::details::Service1GetExpireTimeWrite(s, item);
}

bool tlgen::details::Service1GetExpireTimeReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::GetExpireTime& item, std::optional<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::IntMaybeReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1GetExpireTimeWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::GetExpireTime& item, const std::optional<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::IntMaybeWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::GetExpireTime::read_result(::tlgen::basictl::tl_istream & s, std::optional<int32_t> & result) const noexcept {
  bool success = tlgen::details::Service1GetExpireTimeReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::GetExpireTime::write_result(::tlgen::basictl::tl_ostream & s, const std::optional<int32_t> & result) const noexcept {
  bool success = tlgen::details::Service1GetExpireTimeWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::GetExpireTime::read_result(::tlgen::basictl::tl_throwable_istream & s, std::optional<int32_t> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::GetExpireTime::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::optional<int32_t> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::GetKeysStat::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1GetKeysStatWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::GetKeysStat::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetKeysStatRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetKeysStat::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetKeysStatWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetKeysStat::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetKeysStat::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::GetKeysStat::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetKeysStatReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetKeysStat::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetKeysStatWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetKeysStat::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetKeysStat::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1GetKeysStatReset(::tlgen::service1::GetKeysStat& item) noexcept {
  (void)item;
  item.period = 0;
}

bool tlgen::details::Service1GetKeysStatWriteJSON(std::ostream& s, const ::tlgen::service1::GetKeysStat& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.period != 0) {
    s << "\"period\":";
    s << item.period;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1GetKeysStatRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetKeysStat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.period)) { return false; }
  return true;
}

bool tlgen::details::Service1GetKeysStatWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetKeysStat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.period)) { return false;}
  return true;
}

bool tlgen::details::Service1GetKeysStatReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetKeysStat& item) {
  if (!s.nat_read_exact_tag(0x06cecd58)) { return false; }
  return tlgen::details::Service1GetKeysStatRead(s, item);
}

bool tlgen::details::Service1GetKeysStatWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetKeysStat& item) {
  if (!s.nat_write(0x06cecd58)) { return false; }
  return tlgen::details::Service1GetKeysStatWrite(s, item);
}

bool tlgen::details::Service1GetKeysStatReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::GetKeysStat& item, std::optional<::tlgen::service1::KeysStat>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1KeysStatMaybeReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1GetKeysStatWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::GetKeysStat& item, const std::optional<::tlgen::service1::KeysStat>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1KeysStatMaybeWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::GetKeysStat::read_result(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::service1::KeysStat> & result) const noexcept {
  bool success = tlgen::details::Service1GetKeysStatReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::GetKeysStat::write_result(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::service1::KeysStat> & result) const noexcept {
  bool success = tlgen::details::Service1GetKeysStatWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::GetKeysStat::read_result(::tlgen::basictl::tl_throwable_istream & s, std::optional<::tlgen::service1::KeysStat> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::GetKeysStat::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::optional<::tlgen::service1::KeysStat> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::GetKeysStatPeriods::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1GetKeysStatPeriodsWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::GetKeysStatPeriods::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetKeysStatPeriodsRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetKeysStatPeriods::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetKeysStatPeriodsWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetKeysStatPeriods::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetKeysStatPeriods::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::GetKeysStatPeriods::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetKeysStatPeriodsReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetKeysStatPeriods::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetKeysStatPeriodsWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetKeysStatPeriods::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetKeysStatPeriods::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1GetKeysStatPeriodsReset(::tlgen::service1::GetKeysStatPeriods& item) noexcept {
  (void)item;
}

bool tlgen::details::Service1GetKeysStatPeriodsWriteJSON(std::ostream& s, const ::tlgen::service1::GetKeysStatPeriods& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::Service1GetKeysStatPeriodsRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetKeysStatPeriods& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::Service1GetKeysStatPeriodsWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetKeysStatPeriods& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::Service1GetKeysStatPeriodsReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetKeysStatPeriods& item) {
  if (!s.nat_read_exact_tag(0x8cdf39e3)) { return false; }
  return tlgen::details::Service1GetKeysStatPeriodsRead(s, item);
}

bool tlgen::details::Service1GetKeysStatPeriodsWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetKeysStatPeriods& item) {
  if (!s.nat_write(0x8cdf39e3)) { return false; }
  return tlgen::details::Service1GetKeysStatPeriodsWrite(s, item);
}

bool tlgen::details::Service1GetKeysStatPeriodsReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::GetKeysStatPeriods& item, std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1GetKeysStatPeriodsWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::GetKeysStatPeriods& item, const std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntWrite(s, result)) { return false; }
  return true;
}

bool tlgen::service1::GetKeysStatPeriods::read_result(::tlgen::basictl::tl_istream & s, std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::Service1GetKeysStatPeriodsReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::GetKeysStatPeriods::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::Service1GetKeysStatPeriodsWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::GetKeysStatPeriods::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::GetKeysStatPeriods::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::GetWildcard::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1GetWildcardWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::GetWildcard::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetWildcardRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetWildcard::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetWildcardWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetWildcard::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetWildcard::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::GetWildcard::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetWildcardReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetWildcard::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetWildcardWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetWildcard::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetWildcard::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1GetWildcardReset(::tlgen::service1::GetWildcard& item) noexcept {
  (void)item;
  item.prefix.clear();
}

bool tlgen::details::Service1GetWildcardWriteJSON(std::ostream& s, const ::tlgen::service1::GetWildcard& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.prefix.size() != 0) {
    s << "\"prefix\":";
    s << "\"" << item.prefix << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1GetWildcardRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcard& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.prefix)) { return false; }
  return true;
}

bool tlgen::details::Service1GetWildcardWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcard& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.prefix)) { return false;}
  return true;
}

bool tlgen::details::Service1GetWildcardReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcard& item) {
  if (!s.nat_read_exact_tag(0x2f2abf13)) { return false; }
  return tlgen::details::Service1GetWildcardRead(s, item);
}

bool tlgen::details::Service1GetWildcardWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcard& item) {
  if (!s.nat_write(0x2f2abf13)) { return false; }
  return tlgen::details::Service1GetWildcardWrite(s, item);
}

bool tlgen::details::Service1GetWildcardReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::GetWildcard& item, std::vector<::tlgen::Map<std::string, std::string>>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorMapStringStringRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1GetWildcardWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::GetWildcard& item, const std::vector<::tlgen::Map<std::string, std::string>>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorMapStringStringWrite(s, result)) { return false; }
  return true;
}

bool tlgen::service1::GetWildcard::read_result(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::Map<std::string, std::string>> & result) const noexcept {
  bool success = tlgen::details::Service1GetWildcardReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::GetWildcard::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::Map<std::string, std::string>> & result) const noexcept {
  bool success = tlgen::details::Service1GetWildcardWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::GetWildcard::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<::tlgen::Map<std::string, std::string>> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::GetWildcard::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<::tlgen::Map<std::string, std::string>> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::GetWildcardDict::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1GetWildcardDictWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::GetWildcardDict::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetWildcardDictRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetWildcardDict::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetWildcardDictWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetWildcardDict::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetWildcardDict::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::GetWildcardDict::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetWildcardDictReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetWildcardDict::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetWildcardDictWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetWildcardDict::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetWildcardDict::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1GetWildcardDictReset(::tlgen::service1::GetWildcardDict& item) noexcept {
  (void)item;
  item.prefix.clear();
}

bool tlgen::details::Service1GetWildcardDictWriteJSON(std::ostream& s, const ::tlgen::service1::GetWildcardDict& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.prefix.size() != 0) {
    s << "\"prefix\":";
    s << "\"" << item.prefix << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1GetWildcardDictRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcardDict& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.prefix)) { return false; }
  return true;
}

bool tlgen::details::Service1GetWildcardDictWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcardDict& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.prefix)) { return false;}
  return true;
}

bool tlgen::details::Service1GetWildcardDictReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcardDict& item) {
  if (!s.nat_read_exact_tag(0x72bbc81b)) { return false; }
  return tlgen::details::Service1GetWildcardDictRead(s, item);
}

bool tlgen::details::Service1GetWildcardDictWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcardDict& item) {
  if (!s.nat_write(0x72bbc81b)) { return false; }
  return tlgen::details::Service1GetWildcardDictWrite(s, item);
}

bool tlgen::details::Service1GetWildcardDictReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::GetWildcardDict& item, std::map<std::string, std::string>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x1f4c618f)) { return false; }
  if (!::tlgen::details::BuiltinVectorDictionaryFieldStringRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1GetWildcardDictWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::GetWildcardDict& item, const std::map<std::string, std::string>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x1f4c618f)) { return false; }
  if (!::tlgen::details::BuiltinVectorDictionaryFieldStringWrite(s, result)) { return false; }
  return true;
}

bool tlgen::service1::GetWildcardDict::read_result(::tlgen::basictl::tl_istream & s, std::map<std::string, std::string> & result) const noexcept {
  bool success = tlgen::details::Service1GetWildcardDictReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::GetWildcardDict::write_result(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::string> & result) const noexcept {
  bool success = tlgen::details::Service1GetWildcardDictWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::GetWildcardDict::read_result(::tlgen::basictl::tl_throwable_istream & s, std::map<std::string, std::string> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::GetWildcardDict::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::map<std::string, std::string> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::GetWildcardList::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1GetWildcardListWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::GetWildcardList::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetWildcardListRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetWildcardList::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetWildcardListWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetWildcardList::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetWildcardList::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::GetWildcardList::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetWildcardListReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetWildcardList::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetWildcardListWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetWildcardList::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetWildcardList::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1GetWildcardListReset(::tlgen::service1::GetWildcardList& item) noexcept {
  (void)item;
  item.prefix.clear();
}

bool tlgen::details::Service1GetWildcardListWriteJSON(std::ostream& s, const ::tlgen::service1::GetWildcardList& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.prefix.size() != 0) {
    s << "\"prefix\":";
    s << "\"" << item.prefix << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1GetWildcardListRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcardList& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.prefix)) { return false; }
  return true;
}

bool tlgen::details::Service1GetWildcardListWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcardList& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.prefix)) { return false;}
  return true;
}

bool tlgen::details::Service1GetWildcardListReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcardList& item) {
  if (!s.nat_read_exact_tag(0x56b6ead4)) { return false; }
  return tlgen::details::Service1GetWildcardListRead(s, item);
}

bool tlgen::details::Service1GetWildcardListWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcardList& item) {
  if (!s.nat_write(0x56b6ead4)) { return false; }
  return tlgen::details::Service1GetWildcardListWrite(s, item);
}

bool tlgen::details::Service1GetWildcardListReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::GetWildcardList& item, std::vector<std::string>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorStringRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1GetWildcardListWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::GetWildcardList& item, const std::vector<std::string>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorStringWrite(s, result)) { return false; }
  return true;
}

bool tlgen::service1::GetWildcardList::read_result(::tlgen::basictl::tl_istream & s, std::vector<std::string> & result) const noexcept {
  bool success = tlgen::details::Service1GetWildcardListReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::GetWildcardList::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<std::string> & result) const noexcept {
  bool success = tlgen::details::Service1GetWildcardListWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::GetWildcardList::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<std::string> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::GetWildcardList::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<std::string> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::GetWildcardWithFlags::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1GetWildcardWithFlagsWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::GetWildcardWithFlags::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetWildcardWithFlagsRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetWildcardWithFlags::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetWildcardWithFlagsWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetWildcardWithFlags::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetWildcardWithFlags::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::GetWildcardWithFlags::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1GetWildcardWithFlagsReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::GetWildcardWithFlags::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1GetWildcardWithFlagsWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::GetWildcardWithFlags::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::GetWildcardWithFlags::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1GetWildcardWithFlagsReset(::tlgen::service1::GetWildcardWithFlags& item) noexcept {
  (void)item;
  item.prefix.clear();
}

bool tlgen::details::Service1GetWildcardWithFlagsWriteJSON(std::ostream& s, const ::tlgen::service1::GetWildcardWithFlags& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.prefix.size() != 0) {
    s << "\"prefix\":";
    s << "\"" << item.prefix << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1GetWildcardWithFlagsRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcardWithFlags& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.prefix)) { return false; }
  return true;
}

bool tlgen::details::Service1GetWildcardWithFlagsWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcardWithFlags& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.prefix)) { return false;}
  return true;
}

bool tlgen::details::Service1GetWildcardWithFlagsReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::GetWildcardWithFlags& item) {
  if (!s.nat_read_exact_tag(0x5f6a1f78)) { return false; }
  return tlgen::details::Service1GetWildcardWithFlagsRead(s, item);
}

bool tlgen::details::Service1GetWildcardWithFlagsWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::GetWildcardWithFlags& item) {
  if (!s.nat_write(0x5f6a1f78)) { return false; }
  return tlgen::details::Service1GetWildcardWithFlagsWrite(s, item);
}

bool tlgen::details::Service1GetWildcardWithFlagsReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::GetWildcardWithFlags& item, std::map<std::string, ::tlgen::service1::Value>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x1f4c618f)) { return false; }
  if (!::tlgen::details::BuiltinVectorDictionaryFieldService1ValueRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1GetWildcardWithFlagsWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::GetWildcardWithFlags& item, const std::map<std::string, ::tlgen::service1::Value>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x1f4c618f)) { return false; }
  if (!::tlgen::details::BuiltinVectorDictionaryFieldService1ValueWrite(s, result)) { return false; }
  return true;
}

bool tlgen::service1::GetWildcardWithFlags::read_result(::tlgen::basictl::tl_istream & s, std::map<std::string, ::tlgen::service1::Value> & result) const noexcept {
  bool success = tlgen::details::Service1GetWildcardWithFlagsReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::GetWildcardWithFlags::write_result(::tlgen::basictl::tl_ostream & s, const std::map<std::string, ::tlgen::service1::Value> & result) const noexcept {
  bool success = tlgen::details::Service1GetWildcardWithFlagsWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::GetWildcardWithFlags::read_result(::tlgen::basictl::tl_throwable_istream & s, std::map<std::string, ::tlgen::service1::Value> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::GetWildcardWithFlags::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::map<std::string, ::tlgen::service1::Value> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::Incr::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1IncrWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Incr::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1IncrRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Incr::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1IncrWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Incr::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Incr::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Incr::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1IncrReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Incr::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1IncrWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Incr::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Incr::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1IncrReset(::tlgen::service1::Incr& item) noexcept {
  (void)item;
  item.key.clear();
  item.value = 0;
}

bool tlgen::details::Service1IncrWriteJSON(std::ostream& s, const ::tlgen::service1::Incr& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.value != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << item.value;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1IncrRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Incr& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.long_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::Service1IncrWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Incr& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.long_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::Service1IncrReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Incr& item) {
  if (!s.nat_read_exact_tag(0x0f96b56e)) { return false; }
  return tlgen::details::Service1IncrRead(s, item);
}

bool tlgen::details::Service1IncrWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Incr& item) {
  if (!s.nat_write(0x0f96b56e)) { return false; }
  return tlgen::details::Service1IncrWrite(s, item);
}

bool tlgen::details::Service1IncrReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Incr& item, ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::Service1IncrWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Incr& item, const ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::service1::Incr::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1IncrReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Incr::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1IncrWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Incr::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Incr::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::KeysStat::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1KeysStatWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::KeysStat::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1KeysStatRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::KeysStat::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1KeysStatWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::KeysStat::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::KeysStat::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::KeysStat::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1KeysStatReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::KeysStat::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1KeysStatWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::KeysStat::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::KeysStat::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1KeysStatReset(::tlgen::service1::KeysStat& item) noexcept {
  (void)item;
  item.start_time = 0;
  item.keys_tops.clear();
}

bool tlgen::details::Service1KeysStatWriteJSON(std::ostream& s, const ::tlgen::service1::KeysStat& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.start_time != 0) {
    add_comma = true;
    s << "\"start_time\":";
    s << item.start_time;
  }
  if (item.keys_tops.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"keys_tops\":";
    if (!::tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntWriteJSON(s, item.keys_tops)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1KeysStatRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::KeysStat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.start_time)) { return false; }
  if (!::tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntRead(s, item.keys_tops)) { return false; }
  return true;
}

bool tlgen::details::Service1KeysStatWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::KeysStat& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.start_time)) { return false;}
  if (!::tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntWrite(s, item.keys_tops)) { return false; }
  return true;
}

bool tlgen::details::Service1KeysStatReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::KeysStat& item) {
  if (!s.nat_read_exact_tag(0xf0f6bc68)) { return false; }
  return tlgen::details::Service1KeysStatRead(s, item);
}

bool tlgen::details::Service1KeysStatWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::KeysStat& item) {
  if (!s.nat_write(0xf0f6bc68)) { return false; }
  return tlgen::details::Service1KeysStatWrite(s, item);
}

bool tlgen::details::Service1KeysStatMaybeWriteJSON(std::ostream & s, const std::optional<::tlgen::service1::KeysStat>& item) {
  s << "{";
  if (item) {
    s << "\"ok\":true";
    s << ",\"value\":";
    if (!::tlgen::details::Service1KeysStatWriteJSON(s, *item)) { return false; }
  }
  s << "}";
  return true;
}
bool tlgen::details::Service1KeysStatMaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::service1::KeysStat>& item) {
  bool has_item = false;
  if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
  if (has_item) {
    if (!item) {
      item.emplace();
    }
    if (!::tlgen::details::Service1KeysStatRead(s, *item)) { return s.set_error_unknown_scenario(); }
    return true;
  }
  item.reset();
  return true;
}

bool tlgen::details::Service1KeysStatMaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::service1::KeysStat>& item) {
  if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
  if (item) {
    if (!::tlgen::details::Service1KeysStatWrite(s, *item)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::service1::Longvalue::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1LongvalueWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Longvalue::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1LongvalueRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Longvalue::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1LongvalueWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Longvalue::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Longvalue::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Longvalue::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1LongvalueReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Longvalue::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1LongvalueWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Longvalue::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Longvalue::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1LongvalueReset(::tlgen::service1::Longvalue& item) noexcept {
  (void)item;
  item.value = 0;
  item.flags = 0;
}

bool tlgen::details::Service1LongvalueWriteJSON(std::ostream& s, const ::tlgen::service1::Longvalue& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.value != 0) {
    add_comma = true;
    s << "\"value\":";
    s << item.value;
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1LongvalueRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Longvalue& item) noexcept {
  (void)s;
  (void)item;
  if (!s.long_read(item.value)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  return true;
}

bool tlgen::details::Service1LongvalueWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Longvalue& item) noexcept {
  (void)s;
  (void)item;
  if (!s.long_write(item.value)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  return true;
}

bool tlgen::details::Service1LongvalueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Longvalue& item) {
  if (!s.nat_read_exact_tag(0x082e0945)) { return false; }
  return tlgen::details::Service1LongvalueRead(s, item);
}

bool tlgen::details::Service1LongvalueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Longvalue& item) {
  if (!s.nat_write(0x082e0945)) { return false; }
  return tlgen::details::Service1LongvalueWrite(s, item);
}

bool tlgen::service1::LongvalueWithTime::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1LongvalueWithTimeWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::LongvalueWithTime::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1LongvalueWithTimeRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::LongvalueWithTime::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1LongvalueWithTimeWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::LongvalueWithTime::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::LongvalueWithTime::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::LongvalueWithTime::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1LongvalueWithTimeReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::LongvalueWithTime::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1LongvalueWithTimeWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::LongvalueWithTime::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::LongvalueWithTime::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1LongvalueWithTimeReset(::tlgen::service1::LongvalueWithTime& item) noexcept {
  (void)item;
  item.value = 0;
  item.flags = 0;
  item.modificationTime = 0;
}

bool tlgen::details::Service1LongvalueWithTimeWriteJSON(std::ostream& s, const ::tlgen::service1::LongvalueWithTime& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.value != 0) {
    add_comma = true;
    s << "\"value\":";
    s << item.value;
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.modificationTime != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"modificationTime\":";
    s << item.modificationTime;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1LongvalueWithTimeRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::LongvalueWithTime& item) noexcept {
  (void)s;
  (void)item;
  if (!s.long_read(item.value)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.modificationTime)) { return false; }
  return true;
}

bool tlgen::details::Service1LongvalueWithTimeWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::LongvalueWithTime& item) noexcept {
  (void)s;
  (void)item;
  if (!s.long_write(item.value)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.modificationTime)) { return false;}
  return true;
}

bool tlgen::details::Service1LongvalueWithTimeReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::LongvalueWithTime& item) {
  if (!s.nat_read_exact_tag(0xa04606ec)) { return false; }
  return tlgen::details::Service1LongvalueWithTimeRead(s, item);
}

bool tlgen::details::Service1LongvalueWithTimeWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::LongvalueWithTime& item) {
  if (!s.nat_write(0xa04606ec)) { return false; }
  return tlgen::details::Service1LongvalueWithTimeWrite(s, item);
}

bool tlgen::service1::Not_found::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1NotFoundWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Not_found::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1NotFoundRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Not_found::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1NotFoundWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Not_found::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Not_found::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Not_found::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1NotFoundReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Not_found::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1NotFoundWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Not_found::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Not_found::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1NotFoundReset(::tlgen::service1::Not_found& item) noexcept {
  (void)item;
}

bool tlgen::details::Service1NotFoundWriteJSON(std::ostream& s, const ::tlgen::service1::Not_found& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::Service1NotFoundRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Not_found& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::Service1NotFoundWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Not_found& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::Service1NotFoundReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Not_found& item) {
  if (!s.nat_read_exact_tag(0x1d670b96)) { return false; }
  return tlgen::details::Service1NotFoundRead(s, item);
}

bool tlgen::details::Service1NotFoundWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Not_found& item) {
  if (!s.nat_write(0x1d670b96)) { return false; }
  return tlgen::details::Service1NotFoundWrite(s, item);
}

bool tlgen::service1::Replace::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1ReplaceWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Replace::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1ReplaceRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Replace::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1ReplaceWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Replace::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Replace::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Replace::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1ReplaceReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Replace::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1ReplaceWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Replace::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Replace::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1ReplaceReset(::tlgen::service1::Replace& item) noexcept {
  (void)item;
  item.key.clear();
  item.flags = 0;
  item.delay = 0;
  item.value.clear();
}

bool tlgen::details::Service1ReplaceWriteJSON(std::ostream& s, const ::tlgen::service1::Replace& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.delay != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"delay\":";
    s << item.delay;
  }
  if (item.value.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << "\"" << item.value << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1ReplaceRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Replace& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.delay)) { return false; }
  if (!s.string_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::Service1ReplaceWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Replace& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.delay)) { return false;}
  if (!s.string_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::Service1ReplaceReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Replace& item) {
  if (!s.nat_read_exact_tag(0x7f2c447d)) { return false; }
  return tlgen::details::Service1ReplaceRead(s, item);
}

bool tlgen::details::Service1ReplaceWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Replace& item) {
  if (!s.nat_write(0x7f2c447d)) { return false; }
  return tlgen::details::Service1ReplaceWrite(s, item);
}

bool tlgen::details::Service1ReplaceReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Replace& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1ReplaceWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Replace& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::Replace::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1ReplaceReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Replace::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1ReplaceWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Replace::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Replace::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::ReplaceOrIncr::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1ReplaceOrIncrWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::ReplaceOrIncr::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1ReplaceOrIncrRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::ReplaceOrIncr::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1ReplaceOrIncrWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::ReplaceOrIncr::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::ReplaceOrIncr::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::ReplaceOrIncr::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1ReplaceOrIncrReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::ReplaceOrIncr::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1ReplaceOrIncrWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::ReplaceOrIncr::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::ReplaceOrIncr::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1ReplaceOrIncrReset(::tlgen::service1::ReplaceOrIncr& item) noexcept {
  (void)item;
  item.key.clear();
  item.flags = 0;
  item.delay = 0;
  item.value = 0;
}

bool tlgen::details::Service1ReplaceOrIncrWriteJSON(std::ostream& s, const ::tlgen::service1::ReplaceOrIncr& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.delay != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"delay\":";
    s << item.delay;
  }
  if (item.value != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << item.value;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1ReplaceOrIncrRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::ReplaceOrIncr& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.delay)) { return false; }
  if (!s.long_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::Service1ReplaceOrIncrWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::ReplaceOrIncr& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.delay)) { return false;}
  if (!s.long_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::Service1ReplaceOrIncrReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::ReplaceOrIncr& item) {
  if (!s.nat_read_exact_tag(0x9d1bdcfd)) { return false; }
  return tlgen::details::Service1ReplaceOrIncrRead(s, item);
}

bool tlgen::details::Service1ReplaceOrIncrWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::ReplaceOrIncr& item) {
  if (!s.nat_write(0x9d1bdcfd)) { return false; }
  return tlgen::details::Service1ReplaceOrIncrWrite(s, item);
}

bool tlgen::details::Service1ReplaceOrIncrReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::ReplaceOrIncr& item, ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::Service1ReplaceOrIncrWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::ReplaceOrIncr& item, const ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::service1::ReplaceOrIncr::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1ReplaceOrIncrReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::ReplaceOrIncr::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1ReplaceOrIncrWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::ReplaceOrIncr::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::ReplaceOrIncr::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::Set::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1SetWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Set::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1SetRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Set::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1SetWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Set::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Set::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Set::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1SetReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Set::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1SetWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Set::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Set::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1SetReset(::tlgen::service1::Set& item) noexcept {
  (void)item;
  item.key.clear();
  item.flags = 0;
  item.delay = 0;
  item.value.clear();
}

bool tlgen::details::Service1SetWriteJSON(std::ostream& s, const ::tlgen::service1::Set& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.delay != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"delay\":";
    s << item.delay;
  }
  if (item.value.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << "\"" << item.value << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1SetRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Set& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.delay)) { return false; }
  if (!s.string_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::Service1SetWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Set& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.delay)) { return false;}
  if (!s.string_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::Service1SetReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Set& item) {
  if (!s.nat_read_exact_tag(0x05ae5f66)) { return false; }
  return tlgen::details::Service1SetRead(s, item);
}

bool tlgen::details::Service1SetWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Set& item) {
  if (!s.nat_write(0x05ae5f66)) { return false; }
  return tlgen::details::Service1SetWrite(s, item);
}

bool tlgen::details::Service1SetReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Set& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1SetWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Set& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::Set::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1SetReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Set::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1SetWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Set::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Set::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::SetOrIncr::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1SetOrIncrWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::SetOrIncr::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1SetOrIncrRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::SetOrIncr::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1SetOrIncrWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::SetOrIncr::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::SetOrIncr::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::SetOrIncr::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1SetOrIncrReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::SetOrIncr::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1SetOrIncrWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::SetOrIncr::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::SetOrIncr::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1SetOrIncrReset(::tlgen::service1::SetOrIncr& item) noexcept {
  (void)item;
  item.key.clear();
  item.flags = 0;
  item.delay = 0;
  item.value = 0;
}

bool tlgen::details::Service1SetOrIncrWriteJSON(std::ostream& s, const ::tlgen::service1::SetOrIncr& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.delay != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"delay\":";
    s << item.delay;
  }
  if (item.value != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"value\":";
    s << item.value;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1SetOrIncrRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::SetOrIncr& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.delay)) { return false; }
  if (!s.long_read(item.value)) { return false; }
  return true;
}

bool tlgen::details::Service1SetOrIncrWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::SetOrIncr& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.delay)) { return false;}
  if (!s.long_write(item.value)) { return false;}
  return true;
}

bool tlgen::details::Service1SetOrIncrReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::SetOrIncr& item) {
  if (!s.nat_read_exact_tag(0x772e390d)) { return false; }
  return tlgen::details::Service1SetOrIncrRead(s, item);
}

bool tlgen::details::Service1SetOrIncrWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::SetOrIncr& item) {
  if (!s.nat_write(0x772e390d)) { return false; }
  return tlgen::details::Service1SetOrIncrWrite(s, item);
}

bool tlgen::details::Service1SetOrIncrReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::SetOrIncr& item, ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::Service1SetOrIncrWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::SetOrIncr& item, const ::tlgen::service1::Value& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::Service1ValueWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::service1::SetOrIncr::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1SetOrIncrReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::SetOrIncr::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Value & result) const noexcept {
  bool success = tlgen::details::Service1SetOrIncrWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::SetOrIncr::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::SetOrIncr::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::service1::Value & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::service1::Strvalue::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1StrvalueWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Strvalue::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1StrvalueRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Strvalue::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1StrvalueWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Strvalue::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Strvalue::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Strvalue::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1StrvalueReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Strvalue::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1StrvalueWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Strvalue::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Strvalue::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1StrvalueReset(::tlgen::service1::Strvalue& item) noexcept {
  (void)item;
  item.value.clear();
  item.flags = 0;
}

bool tlgen::details::Service1StrvalueWriteJSON(std::ostream& s, const ::tlgen::service1::Strvalue& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.value.size() != 0) {
    add_comma = true;
    s << "\"value\":";
    s << "\"" << item.value << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1StrvalueRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Strvalue& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.value)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  return true;
}

bool tlgen::details::Service1StrvalueWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Strvalue& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.value)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  return true;
}

bool tlgen::details::Service1StrvalueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Strvalue& item) {
  if (!s.nat_read_exact_tag(0x5faa0c52)) { return false; }
  return tlgen::details::Service1StrvalueRead(s, item);
}

bool tlgen::details::Service1StrvalueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Strvalue& item) {
  if (!s.nat_write(0x5faa0c52)) { return false; }
  return tlgen::details::Service1StrvalueWrite(s, item);
}

bool tlgen::service1::StrvalueWithTime::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1StrvalueWithTimeWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::StrvalueWithTime::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1StrvalueWithTimeRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::StrvalueWithTime::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1StrvalueWithTimeWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::StrvalueWithTime::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::StrvalueWithTime::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::StrvalueWithTime::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1StrvalueWithTimeReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::StrvalueWithTime::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1StrvalueWithTimeWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::StrvalueWithTime::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::StrvalueWithTime::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1StrvalueWithTimeReset(::tlgen::service1::StrvalueWithTime& item) noexcept {
  (void)item;
  item.value.clear();
  item.flags = 0;
  item.modificationTime = 0;
}

bool tlgen::details::Service1StrvalueWithTimeWriteJSON(std::ostream& s, const ::tlgen::service1::StrvalueWithTime& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.value.size() != 0) {
    add_comma = true;
    s << "\"value\":";
    s << "\"" << item.value << "\"";
  }
  if (item.flags != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"flags\":";
    s << item.flags;
  }
  if (item.modificationTime != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"modificationTime\":";
    s << item.modificationTime;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1StrvalueWithTimeRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::StrvalueWithTime& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.value)) { return false; }
  if (!s.int_read(item.flags)) { return false; }
  if (!s.int_read(item.modificationTime)) { return false; }
  return true;
}

bool tlgen::details::Service1StrvalueWithTimeWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::StrvalueWithTime& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.value)) { return false;}
  if (!s.int_write(item.flags)) { return false;}
  if (!s.int_write(item.modificationTime)) { return false;}
  return true;
}

bool tlgen::details::Service1StrvalueWithTimeReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::StrvalueWithTime& item) {
  if (!s.nat_read_exact_tag(0x98b1a484)) { return false; }
  return tlgen::details::Service1StrvalueWithTimeRead(s, item);
}

bool tlgen::details::Service1StrvalueWithTimeWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::StrvalueWithTime& item) {
  if (!s.nat_write(0x98b1a484)) { return false; }
  return tlgen::details::Service1StrvalueWithTimeWrite(s, item);
}

bool tlgen::service1::Touch::write_json(std::ostream& s)const {
  if (!::tlgen::details::Service1TouchWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::service1::Touch::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1TouchRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Touch::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1TouchWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Touch::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::service1::Touch::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::service1::Touch::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1TouchReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::service1::Touch::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Service1TouchWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::service1::Touch::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Touch::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Service1TouchReset(::tlgen::service1::Touch& item) noexcept {
  (void)item;
  item.key.clear();
  item.delay = 0;
}

bool tlgen::details::Service1TouchWriteJSON(std::ostream& s, const ::tlgen::service1::Touch& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.key.size() != 0) {
    add_comma = true;
    s << "\"key\":";
    s << "\"" << item.key << "\"";
  }
  if (item.delay != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"delay\":";
    s << item.delay;
  }
  s << "}";
  return true;
}

bool tlgen::details::Service1TouchRead(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Touch& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_read(item.key)) { return false; }
  if (!s.int_read(item.delay)) { return false; }
  return true;
}

bool tlgen::details::Service1TouchWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Touch& item) noexcept {
  (void)s;
  (void)item;
  if (!s.string_write(item.key)) { return false;}
  if (!s.int_write(item.delay)) { return false;}
  return true;
}

bool tlgen::details::Service1TouchReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Touch& item) {
  if (!s.nat_read_exact_tag(0xb737aa03)) { return false; }
  return tlgen::details::Service1TouchRead(s, item);
}

bool tlgen::details::Service1TouchWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Touch& item) {
  if (!s.nat_write(0xb737aa03)) { return false; }
  return tlgen::details::Service1TouchWrite(s, item);
}

bool tlgen::details::Service1TouchReadResult(::tlgen::basictl::tl_istream & s, const tlgen::service1::Touch& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::Service1TouchWriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::service1::Touch& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::service1::Touch::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::Service1TouchReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::service1::Touch::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::Service1TouchWriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::service1::Touch::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::service1::Touch::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

static const std::string_view Service1Value_tbl_tl_name[]{"service1.not_found", "service1.strvalue", "service1.longvalue", "service1.strvalueWithTime", "service1.longvalueWithTime"};
static const uint32_t Service1Value_tbl_tl_tag[]{0x1d670b96, 0x5faa0c52, 0x082e0945, 0x98b1a484, 0xa04606ec};

bool tlgen::service1::Value::write_json(std::ostream & s)const {
  if (!::tlgen::details::Service1ValueWriteJSON(s, *this)) { return false; }
  return true;
}
bool tlgen::service1::Value::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Service1ValueReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::service1::Value::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::Service1ValueWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  return true;
}

void tlgen::service1::Value::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::service1::Value::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

std::string_view tlgen::service1::Value::tl_name() const {
  return Service1Value_tbl_tl_name[value.index()];
}
uint32_t tlgen::service1::Value::tl_tag() const {
  return Service1Value_tbl_tl_tag[value.index()];
}


void tlgen::details::Service1ValueReset(::tlgen::service1::Value& item) noexcept{
  item.value.emplace<0>(); // TODO - optimize, if already 0, call Reset function
}

bool tlgen::details::Service1ValueWriteJSON(std::ostream & s, const ::tlgen::service1::Value& item) noexcept {
  s << "{";
  s << "\"type\":";
  s << "\"" << Service1Value_tbl_tl_name[item.value.index()] << "\"";
  switch (item.value.index()) {
  case 1:
    s << ",\"value\":";
    if (!::tlgen::details::Service1StrvalueWriteJSON(s, std::get<1>(item.value))) { return false; }
    break;
  case 2:
    s << ",\"value\":";
    if (!::tlgen::details::Service1LongvalueWriteJSON(s, std::get<2>(item.value))) { return false; }
    break;
  case 3:
    s << ",\"value\":";
    if (!::tlgen::details::Service1StrvalueWithTimeWriteJSON(s, std::get<3>(item.value))) { return false; }
    break;
  case 4:
    s << ",\"value\":";
    if (!::tlgen::details::Service1LongvalueWithTimeWriteJSON(s, std::get<4>(item.value))) { return false; }
    break;
  }
  s << "}";
  return true;
}
bool tlgen::details::Service1ValueReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::service1::Value& item) noexcept {
  uint32_t nat;
  if (!s.nat_read(nat)) { return false; }
  switch (nat) {
  case 0x1d670b96:
    if (item.value.index() != 0) { item.value.emplace<0>(); }
    break;
  case 0x5faa0c52:
    if (item.value.index() != 1) { item.value.emplace<1>(); }
    if (!::tlgen::details::Service1StrvalueRead(s, std::get<1>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  case 0x082e0945:
    if (item.value.index() != 2) { item.value.emplace<2>(); }
    if (!::tlgen::details::Service1LongvalueRead(s, std::get<2>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  case 0x98b1a484:
    if (item.value.index() != 3) { item.value.emplace<3>(); }
    if (!::tlgen::details::Service1StrvalueWithTimeRead(s, std::get<3>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  case 0xa04606ec:
    if (item.value.index() != 4) { item.value.emplace<4>(); }
    if (!::tlgen::details::Service1LongvalueWithTimeRead(s, std::get<4>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  default:
    return s.set_error_union_tag();
    }
  return true;
}

bool tlgen::details::Service1ValueWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::service1::Value& item) noexcept{
  if (!s.nat_write(Service1Value_tbl_tl_tag[item.value.index()])) { return false; }
  switch (item.value.index()) {
  case 1:
    if (!::tlgen::details::Service1StrvalueWrite(s, std::get<1>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  case 2:
    if (!::tlgen::details::Service1LongvalueWrite(s, std::get<2>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  case 3:
    if (!::tlgen::details::Service1StrvalueWithTimeWrite(s, std::get<3>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  case 4:
    if (!::tlgen::details::Service1LongvalueWithTimeWrite(s, std::get<4>(item.value))) { return s.set_error_unknown_scenario(); }
    break;
  }
  return true;
}

bool tlgen::details::Service1ValueBoxedMaybeWriteJSON(std::ostream & s, const std::optional<::tlgen::service1::Value>& item) {
  s << "{";
  if (item) {
    s << "\"ok\":true";
    s << ",\"value\":";
    if (!::tlgen::details::Service1ValueWriteJSON(s, *item)) { return false; }
  }
  s << "}";
  return true;
}
bool tlgen::details::Service1ValueBoxedMaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::service1::Value>& item) {
  bool has_item = false;
  if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
  if (has_item) {
    if (!item) {
      item.emplace();
    }
    if (!::tlgen::details::Service1ValueReadBoxed(s, *item)) { return s.set_error_unknown_scenario(); }
    return true;
  }
  item.reset();
  return true;
}

bool tlgen::details::Service1ValueBoxedMaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::service1::Value>& item) {
  if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
  if (item) {
    if (!::tlgen::details::Service1ValueWriteBoxed(s, *item)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::TupleService1Value3Reset(std::array<::tlgen::service1::Value, 3>& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple3Service1ValueReset(item);
}

bool tlgen::details::TupleService1Value3WriteJSON(std::ostream& s, const std::array<::tlgen::service1::Value, 3>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple3Service1ValueWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleService1Value3Read(::tlgen::basictl::tl_istream & s, std::array<::tlgen::service1::Value, 3>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple3Service1ValueRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleService1Value3Write(::tlgen::basictl::tl_ostream & s, const std::array<::tlgen::service1::Value, 3>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple3Service1ValueWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleService1Value3ReadBoxed(::tlgen::basictl::tl_istream & s, std::array<::tlgen::service1::Value, 3>& item) {
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  return tlgen::details::TupleService1Value3Read(s, item);
}

bool tlgen::details::TupleService1Value3WriteBoxed(::tlgen::basictl::tl_ostream & s, const std::array<::tlgen::service1::Value, 3>& item) {
  if (!s.nat_write(0x9770768a)) { return false; }
  return tlgen::details::TupleService1Value3Write(s, item);
}

void tlgen::details::VectorDictionaryFieldDictionaryIntReset(std::map<std::string, std::map<std::string, int32_t>>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorDictionaryFieldDictionaryIntWriteJSON(std::ostream& s, const std::map<std::string, std::map<std::string, int32_t>>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorDictionaryFieldDictionaryIntRead(::tlgen::basictl::tl_istream & s, std::map<std::string, std::map<std::string, int32_t>>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorDictionaryFieldDictionaryIntWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::map<std::string, int32_t>>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldDictionaryIntWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorDictionaryFieldDictionaryIntReadBoxed(::tlgen::basictl::tl_istream & s, std::map<std::string, std::map<std::string, int32_t>>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorDictionaryFieldDictionaryIntRead(s, item);
}

bool tlgen::details::VectorDictionaryFieldDictionaryIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::map<std::string, int32_t>>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorDictionaryFieldDictionaryIntWrite(s, item);
}

void tlgen::details::VectorService1ValueReset(std::vector<::tlgen::service1::Value>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorService1ValueWriteJSON(std::ostream& s, const std::vector<::tlgen::service1::Value>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorService1ValueWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorService1ValueRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::service1::Value>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorService1ValueRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorService1ValueWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::service1::Value>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorService1ValueWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorService1ValueReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::service1::Value>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorService1ValueRead(s, item);
}

bool tlgen::details::VectorService1ValueWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::service1::Value>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorService1ValueWrite(s, item);
}
