// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func (item UnionArgsXXX1Int) AsUnion() UnionArgsXXXInt {
	var ret UnionArgsXXXInt
	ret.Set1(item)
	return ret
}

type UnionArgsXXX1Int struct {
	X []int32
}

func (UnionArgsXXX1Int) TLName() string { return "unionArgsXXX1" }
func (UnionArgsXXX1Int) TLTag() uint32  { return 0xe7978c97 }

func (item *UnionArgsXXX1Int) Reset() {
	item.X = item.X[:0]
}

func (item *UnionArgsXXX1Int) FillRandom(rg *basictl.RandGenerator, nat_Y uint32) {
	BuiltinTupleIntFillRandom(rg, &item.X, nat_Y)
}

func (item *UnionArgsXXX1Int) Read(w []byte, nat_Y uint32) (_ []byte, err error) {
	return BuiltinTupleIntRead(w, &item.X, nat_Y)
}

// This method is general version of Write, use it instead!
func (item *UnionArgsXXX1Int) WriteGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.Write(w, nat_Y)
}

func (item *UnionArgsXXX1Int) Write(w []byte, nat_Y uint32) (_ []byte, err error) {
	if w, err = BuiltinTupleIntWrite(w, item.X, nat_Y); err != nil {
		return w, err
	}
	return w, nil
}

func (item *UnionArgsXXX1Int) ReadBoxed(w []byte, nat_Y uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe7978c97); err != nil {
		return w, err
	}
	return item.Read(w, nat_Y)
}

// This method is general version of WriteBoxed, use it instead!
func (item *UnionArgsXXX1Int) WriteBoxedGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_Y)
}

func (item *UnionArgsXXX1Int) WriteBoxed(w []byte, nat_Y uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xe7978c97)
	return item.Write(w, nat_Y)
}

func (item *UnionArgsXXX1Int) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_Y uint32) error {
	var rawX []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if rawX != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("unionArgsXXX1", "x")
				}
				rawX = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("unionArgsXXX1", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inXPointer *basictl.JsonLexer
	inX := basictl.JsonLexer{Data: rawX}
	if rawX != nil {
		inXPointer = &inX
	}
	if err := BuiltinTupleIntReadJSON(legacyTypeNames, inXPointer, &item.X, nat_Y); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UnionArgsXXX1Int) WriteJSONGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_Y)
}

func (item *UnionArgsXXX1Int) WriteJSON(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_Y)
}
func (item *UnionArgsXXX1Int) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_Y uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	if w, err = BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.X, nat_Y); err != nil {
		return w, err
	}
	if (len(item.X) != 0) == false {
		w = w[:backupIndexX]
	}
	return append(w, '}'), nil
}

func (item *UnionArgsXXX1Int) CalculateLayout(sizes []int, nat_Y uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0
	currentPosition := len(sizes)

	// calculate layout for item.X
	if len(item.X) != 0 {
		sizes = BuiltinTupleIntCalculateLayout(sizes, &item.X, nat_Y)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *UnionArgsXXX1Int) InternalWriteTL2(w []byte, sizes []int, nat_Y uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.X
	if len(item.X) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 1)
			w, sizes = BuiltinTupleIntInternalWriteTL2(w, sizes, &item.X, nat_Y)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *UnionArgsXXX1Int) ReadTL2(r []byte, nat_Y uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.X
		if block&(1<<1) != 0 {
			if r, err = BuiltinTupleIntReadTL2(r, &item.X, nat_Y); err != nil {
				return r, err
			}
		} else {
			item.X = item.X[:0]
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item UnionArgsXXX1Long) AsUnion() UnionArgsXXXLong {
	var ret UnionArgsXXXLong
	ret.Set1(item)
	return ret
}

type UnionArgsXXX1Long struct {
	X []int64
}

func (UnionArgsXXX1Long) TLName() string { return "unionArgsXXX1" }
func (UnionArgsXXX1Long) TLTag() uint32  { return 0xe7978c97 }

func (item *UnionArgsXXX1Long) Reset() {
	item.X = item.X[:0]
}

func (item *UnionArgsXXX1Long) FillRandom(rg *basictl.RandGenerator, nat_Y uint32) {
	BuiltinTupleLongFillRandom(rg, &item.X, nat_Y)
}

func (item *UnionArgsXXX1Long) Read(w []byte, nat_Y uint32) (_ []byte, err error) {
	return BuiltinTupleLongRead(w, &item.X, nat_Y)
}

// This method is general version of Write, use it instead!
func (item *UnionArgsXXX1Long) WriteGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.Write(w, nat_Y)
}

func (item *UnionArgsXXX1Long) Write(w []byte, nat_Y uint32) (_ []byte, err error) {
	if w, err = BuiltinTupleLongWrite(w, item.X, nat_Y); err != nil {
		return w, err
	}
	return w, nil
}

func (item *UnionArgsXXX1Long) ReadBoxed(w []byte, nat_Y uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe7978c97); err != nil {
		return w, err
	}
	return item.Read(w, nat_Y)
}

// This method is general version of WriteBoxed, use it instead!
func (item *UnionArgsXXX1Long) WriteBoxedGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_Y)
}

func (item *UnionArgsXXX1Long) WriteBoxed(w []byte, nat_Y uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xe7978c97)
	return item.Write(w, nat_Y)
}

func (item *UnionArgsXXX1Long) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_Y uint32) error {
	var rawX []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if rawX != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("unionArgsXXX1", "x")
				}
				rawX = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("unionArgsXXX1", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inXPointer *basictl.JsonLexer
	inX := basictl.JsonLexer{Data: rawX}
	if rawX != nil {
		inXPointer = &inX
	}
	if err := BuiltinTupleLongReadJSON(legacyTypeNames, inXPointer, &item.X, nat_Y); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UnionArgsXXX1Long) WriteJSONGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_Y)
}

func (item *UnionArgsXXX1Long) WriteJSON(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_Y)
}
func (item *UnionArgsXXX1Long) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_Y uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	if w, err = BuiltinTupleLongWriteJSONOpt(newTypeNames, short, w, item.X, nat_Y); err != nil {
		return w, err
	}
	if (len(item.X) != 0) == false {
		w = w[:backupIndexX]
	}
	return append(w, '}'), nil
}

func (item *UnionArgsXXX1Long) CalculateLayout(sizes []int, nat_Y uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0
	currentPosition := len(sizes)

	// calculate layout for item.X
	if len(item.X) != 0 {
		sizes = BuiltinTupleLongCalculateLayout(sizes, &item.X, nat_Y)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *UnionArgsXXX1Long) InternalWriteTL2(w []byte, sizes []int, nat_Y uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.X
	if len(item.X) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 1)
			w, sizes = BuiltinTupleLongInternalWriteTL2(w, sizes, &item.X, nat_Y)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *UnionArgsXXX1Long) ReadTL2(r []byte, nat_Y uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.X
		if block&(1<<1) != 0 {
			if r, err = BuiltinTupleLongReadTL2(r, &item.X, nat_Y); err != nil {
				return r, err
			}
		} else {
			item.X = item.X[:0]
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item UnionArgsXXX2Int) AsUnion() UnionArgsXXXInt {
	var ret UnionArgsXXXInt
	ret.Set2(item)
	return ret
}

type UnionArgsXXX2Int struct {
	A int32
}

func (UnionArgsXXX2Int) TLName() string { return "unionArgsXXX2" }
func (UnionArgsXXX2Int) TLTag() uint32  { return 0x6daed784 }

func (item *UnionArgsXXX2Int) Reset() {
	item.A = 0
}

func (item *UnionArgsXXX2Int) FillRandom(rg *basictl.RandGenerator, nat_Y uint32) {
	item.A = basictl.RandomInt(rg)
}

func (item *UnionArgsXXX2Int) Read(w []byte, nat_Y uint32) (_ []byte, err error) {
	return basictl.IntRead(w, &item.A)
}

// This method is general version of Write, use it instead!
func (item *UnionArgsXXX2Int) WriteGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.Write(w, nat_Y), nil
}

func (item *UnionArgsXXX2Int) Write(w []byte, nat_Y uint32) []byte {
	w = basictl.IntWrite(w, item.A)
	return w
}

func (item *UnionArgsXXX2Int) ReadBoxed(w []byte, nat_Y uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6daed784); err != nil {
		return w, err
	}
	return item.Read(w, nat_Y)
}

// This method is general version of WriteBoxed, use it instead!
func (item *UnionArgsXXX2Int) WriteBoxedGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_Y), nil
}

func (item *UnionArgsXXX2Int) WriteBoxed(w []byte, nat_Y uint32) []byte {
	w = basictl.NatWrite(w, 0x6daed784)
	return item.Write(w, nat_Y)
}

func (item *UnionArgsXXX2Int) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_Y uint32) error {
	var propAPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("unionArgsXXX2", "a")
				}
				if err := Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			default:
				return ErrorInvalidJSONExcessElement("unionArgsXXX2", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UnionArgsXXX2Int) WriteJSONGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_Y), nil
}

func (item *UnionArgsXXX2Int) WriteJSON(w []byte, nat_Y uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_Y)
}
func (item *UnionArgsXXX2Int) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_Y uint32) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	return append(w, '}')
}

func (item *UnionArgsXXX2Int) CalculateLayout(sizes []int, nat_Y uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// add constructor No for union type in case of non first option
	lastUsedByte = 1
	currentSize += basictl.TL2CalculateSize(1)

	// calculate layout for item.A
	if item.A != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *UnionArgsXXX2Int) InternalWriteTL2(w []byte, sizes []int, nat_Y uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// add constructor No for union type in case of non first option
	currentBlock |= (1 << 0)

	w = basictl.TL2WriteSize(w, 1)
	serializedSize += basictl.TL2CalculateSize(1)
	// write item.A
	if item.A != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, item.A)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *UnionArgsXXX2Int) ReadTL2(r []byte, nat_Y uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.A
		if block&(1<<1) != 0 {
			if r, err = basictl.IntRead(r, &item.A); err != nil {
				return r, err
			}
		} else {
			item.A = 0
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item UnionArgsXXX2Long) AsUnion() UnionArgsXXXLong {
	var ret UnionArgsXXXLong
	ret.Set2(item)
	return ret
}

type UnionArgsXXX2Long struct {
	A int32
}

func (UnionArgsXXX2Long) TLName() string { return "unionArgsXXX2" }
func (UnionArgsXXX2Long) TLTag() uint32  { return 0x6daed784 }

func (item *UnionArgsXXX2Long) Reset() {
	item.A = 0
}

func (item *UnionArgsXXX2Long) FillRandom(rg *basictl.RandGenerator, nat_Y uint32) {
	item.A = basictl.RandomInt(rg)
}

func (item *UnionArgsXXX2Long) Read(w []byte, nat_Y uint32) (_ []byte, err error) {
	return basictl.IntRead(w, &item.A)
}

// This method is general version of Write, use it instead!
func (item *UnionArgsXXX2Long) WriteGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.Write(w, nat_Y), nil
}

func (item *UnionArgsXXX2Long) Write(w []byte, nat_Y uint32) []byte {
	w = basictl.IntWrite(w, item.A)
	return w
}

func (item *UnionArgsXXX2Long) ReadBoxed(w []byte, nat_Y uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6daed784); err != nil {
		return w, err
	}
	return item.Read(w, nat_Y)
}

// This method is general version of WriteBoxed, use it instead!
func (item *UnionArgsXXX2Long) WriteBoxedGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_Y), nil
}

func (item *UnionArgsXXX2Long) WriteBoxed(w []byte, nat_Y uint32) []byte {
	w = basictl.NatWrite(w, 0x6daed784)
	return item.Write(w, nat_Y)
}

func (item *UnionArgsXXX2Long) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_Y uint32) error {
	var propAPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("unionArgsXXX2", "a")
				}
				if err := Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			default:
				return ErrorInvalidJSONExcessElement("unionArgsXXX2", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UnionArgsXXX2Long) WriteJSONGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_Y), nil
}

func (item *UnionArgsXXX2Long) WriteJSON(w []byte, nat_Y uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_Y)
}
func (item *UnionArgsXXX2Long) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_Y uint32) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	return append(w, '}')
}

func (item *UnionArgsXXX2Long) CalculateLayout(sizes []int, nat_Y uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// add constructor No for union type in case of non first option
	lastUsedByte = 1
	currentSize += basictl.TL2CalculateSize(1)

	// calculate layout for item.A
	if item.A != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *UnionArgsXXX2Long) InternalWriteTL2(w []byte, sizes []int, nat_Y uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// add constructor No for union type in case of non first option
	currentBlock |= (1 << 0)

	w = basictl.TL2WriteSize(w, 1)
	serializedSize += basictl.TL2CalculateSize(1)
	// write item.A
	if item.A != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, item.A)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *UnionArgsXXX2Long) ReadTL2(r []byte, nat_Y uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.A
		if block&(1<<1) != 0 {
			if r, err = basictl.IntRead(r, &item.A); err != nil {
				return r, err
			}
		} else {
			item.A = 0
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

var _UnionArgsXXXInt = [2]UnionElement{
	{TLTag: 0xe7978c97, TLName: "unionArgsXXX1", TLString: "unionArgsXXX1#e7978c97"},
	{TLTag: 0x6daed784, TLName: "unionArgsXXX2", TLString: "unionArgsXXX2#6daed784"},
}

type UnionArgsXXXInt struct {
	value1 UnionArgsXXX1Int
	value2 UnionArgsXXX2Int
	index  int
}

func (item UnionArgsXXXInt) TLName() string { return _UnionArgsXXXInt[item.index].TLName }
func (item UnionArgsXXXInt) TLTag() uint32  { return _UnionArgsXXXInt[item.index].TLTag }

func (item *UnionArgsXXXInt) Reset() { item.ResetTo1() }
func (item *UnionArgsXXXInt) FillRandom(rg *basictl.RandGenerator, nat_Y uint32) {
	index := basictl.RandomUint(rg) % 2
	switch index {
	case 0:
		item.index = 0
		item.value1.FillRandom(rg, nat_Y)
	case 1:
		item.index = 1
		item.value2.FillRandom(rg, nat_Y)
	default:
	}
}

func (item *UnionArgsXXXInt) Is1() bool { return item.index == 0 }

func (item *UnionArgsXXXInt) As1() (*UnionArgsXXX1Int, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.value1, true
}
func (item *UnionArgsXXXInt) ResetTo1() *UnionArgsXXX1Int {
	item.index = 0
	item.value1.Reset()
	return &item.value1
}
func (item *UnionArgsXXXInt) Set1(value UnionArgsXXX1Int) {
	item.index = 0
	item.value1 = value
}

func (item *UnionArgsXXXInt) Is2() bool { return item.index == 1 }

func (item *UnionArgsXXXInt) As2() (*UnionArgsXXX2Int, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.value2, true
}
func (item *UnionArgsXXXInt) ResetTo2() *UnionArgsXXX2Int {
	item.index = 1
	item.value2.Reset()
	return &item.value2
}
func (item *UnionArgsXXXInt) Set2(value UnionArgsXXX2Int) {
	item.index = 1
	item.value2 = value
}

func (item *UnionArgsXXXInt) ReadBoxed(w []byte, nat_Y uint32) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0xe7978c97:
		item.index = 0
		return item.value1.Read(w, nat_Y)
	case 0x6daed784:
		item.index = 1
		return item.value2.Read(w, nat_Y)
	default:
		return w, ErrorInvalidUnionTag("UnionArgsXXX", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *UnionArgsXXXInt) WriteBoxedGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_Y)
}

func (item *UnionArgsXXXInt) WriteBoxed(w []byte, nat_Y uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, _UnionArgsXXXInt[item.index].TLTag)
	switch item.index {
	case 0:
		if w, err = item.value1.Write(w, nat_Y); err != nil {
			return w, err
		}
	case 1:
		w = item.value2.Write(w, nat_Y)
	}
	return w, nil
}

func (item *UnionArgsXXXInt) CalculateLayout(sizes []int, nat_Y uint32) []int {
	switch item.index {
	case 0:
		sizes = item.value1.CalculateLayout(sizes, nat_Y)
	case 1:
		sizes = item.value2.CalculateLayout(sizes, nat_Y)
	}
	return sizes
}

func (item *UnionArgsXXXInt) InternalWriteTL2(w []byte, sizes []int, nat_Y uint32) ([]byte, []int) {
	switch item.index {
	case 0:
		w, sizes = item.value1.InternalWriteTL2(w, sizes, nat_Y)
	case 1:
		w, sizes = item.value2.InternalWriteTL2(w, sizes, nat_Y)
	}
	return w, sizes
}

func (item *UnionArgsXXXInt) ReadTL2(r []byte, nat_Y uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.index = 0
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if r, item.index, err = basictl.TL2ParseSize(r); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	switch item.index {
	case 0:
		r = saveR
		if r, err = item.value1.ReadTL2(r, nat_Y); err != nil {
			return r, err
		}
	case 1:
		r = saveR
		if r, err = item.value2.ReadTL2(r, nat_Y); err != nil {
			return r, err
		}
	}
	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item *UnionArgsXXXInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_Y uint32) error {
	_tag, _value, err := Json2ReadUnion("UnionArgsXXX", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "unionArgsXXX1#e7978c97", "unionArgsXXX1", "#e7978c97":
		if !legacyTypeNames && _tag == "unionArgsXXX1#e7978c97" {
			return ErrorInvalidUnionLegacyTagJSON("UnionArgsXXX", "unionArgsXXX1#e7978c97")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.value1.ReadJSON(legacyTypeNames, in2Pointer, nat_Y); err != nil {
			return err
		}
	case "unionArgsXXX2#6daed784", "unionArgsXXX2", "#6daed784":
		if !legacyTypeNames && _tag == "unionArgsXXX2#6daed784" {
			return ErrorInvalidUnionLegacyTagJSON("UnionArgsXXX", "unionArgsXXX2#6daed784")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.value2.ReadJSON(legacyTypeNames, in2Pointer, nat_Y); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("UnionArgsXXX", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UnionArgsXXXInt) WriteJSONGeneral(w []byte, nat_Y uint32) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w, nat_Y)
}

func (item *UnionArgsXXXInt) WriteJSON(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_Y)
}
func (item *UnionArgsXXXInt) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_Y uint32) (_ []byte, err error) {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"unionArgsXXX1"`...)
		} else {
			w = append(w, `{"type":"unionArgsXXX1#e7978c97"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.value1.WriteJSONOpt(newTypeNames, short, w, nat_Y); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"unionArgsXXX2"`...)
		} else {
			w = append(w, `{"type":"unionArgsXXX2#6daed784"`...)
		}
		w = append(w, `,"value":`...)
		w = item.value2.WriteJSONOpt(newTypeNames, short, w, nat_Y)
		return append(w, '}'), nil
	default: // Impossible due to panic above
		return w, nil
	}
}

var _UnionArgsXXXLong = [2]UnionElement{
	{TLTag: 0xe7978c97, TLName: "unionArgsXXX1", TLString: "unionArgsXXX1#e7978c97"},
	{TLTag: 0x6daed784, TLName: "unionArgsXXX2", TLString: "unionArgsXXX2#6daed784"},
}

type UnionArgsXXXLong struct {
	value1 UnionArgsXXX1Long
	value2 UnionArgsXXX2Long
	index  int
}

func (item UnionArgsXXXLong) TLName() string { return _UnionArgsXXXLong[item.index].TLName }
func (item UnionArgsXXXLong) TLTag() uint32  { return _UnionArgsXXXLong[item.index].TLTag }

func (item *UnionArgsXXXLong) Reset() { item.ResetTo1() }
func (item *UnionArgsXXXLong) FillRandom(rg *basictl.RandGenerator, nat_Y uint32) {
	index := basictl.RandomUint(rg) % 2
	switch index {
	case 0:
		item.index = 0
		item.value1.FillRandom(rg, nat_Y)
	case 1:
		item.index = 1
		item.value2.FillRandom(rg, nat_Y)
	default:
	}
}

func (item *UnionArgsXXXLong) Is1() bool { return item.index == 0 }

func (item *UnionArgsXXXLong) As1() (*UnionArgsXXX1Long, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.value1, true
}
func (item *UnionArgsXXXLong) ResetTo1() *UnionArgsXXX1Long {
	item.index = 0
	item.value1.Reset()
	return &item.value1
}
func (item *UnionArgsXXXLong) Set1(value UnionArgsXXX1Long) {
	item.index = 0
	item.value1 = value
}

func (item *UnionArgsXXXLong) Is2() bool { return item.index == 1 }

func (item *UnionArgsXXXLong) As2() (*UnionArgsXXX2Long, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.value2, true
}
func (item *UnionArgsXXXLong) ResetTo2() *UnionArgsXXX2Long {
	item.index = 1
	item.value2.Reset()
	return &item.value2
}
func (item *UnionArgsXXXLong) Set2(value UnionArgsXXX2Long) {
	item.index = 1
	item.value2 = value
}

func (item *UnionArgsXXXLong) ReadBoxed(w []byte, nat_Y uint32) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0xe7978c97:
		item.index = 0
		return item.value1.Read(w, nat_Y)
	case 0x6daed784:
		item.index = 1
		return item.value2.Read(w, nat_Y)
	default:
		return w, ErrorInvalidUnionTag("UnionArgsXXX", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *UnionArgsXXXLong) WriteBoxedGeneral(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_Y)
}

func (item *UnionArgsXXXLong) WriteBoxed(w []byte, nat_Y uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, _UnionArgsXXXLong[item.index].TLTag)
	switch item.index {
	case 0:
		if w, err = item.value1.Write(w, nat_Y); err != nil {
			return w, err
		}
	case 1:
		w = item.value2.Write(w, nat_Y)
	}
	return w, nil
}

func (item *UnionArgsXXXLong) CalculateLayout(sizes []int, nat_Y uint32) []int {
	switch item.index {
	case 0:
		sizes = item.value1.CalculateLayout(sizes, nat_Y)
	case 1:
		sizes = item.value2.CalculateLayout(sizes, nat_Y)
	}
	return sizes
}

func (item *UnionArgsXXXLong) InternalWriteTL2(w []byte, sizes []int, nat_Y uint32) ([]byte, []int) {
	switch item.index {
	case 0:
		w, sizes = item.value1.InternalWriteTL2(w, sizes, nat_Y)
	case 1:
		w, sizes = item.value2.InternalWriteTL2(w, sizes, nat_Y)
	}
	return w, sizes
}

func (item *UnionArgsXXXLong) ReadTL2(r []byte, nat_Y uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.index = 0
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if r, item.index, err = basictl.TL2ParseSize(r); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	switch item.index {
	case 0:
		r = saveR
		if r, err = item.value1.ReadTL2(r, nat_Y); err != nil {
			return r, err
		}
	case 1:
		r = saveR
		if r, err = item.value2.ReadTL2(r, nat_Y); err != nil {
			return r, err
		}
	}
	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item *UnionArgsXXXLong) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_Y uint32) error {
	_tag, _value, err := Json2ReadUnion("UnionArgsXXX", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "unionArgsXXX1#e7978c97", "unionArgsXXX1", "#e7978c97":
		if !legacyTypeNames && _tag == "unionArgsXXX1#e7978c97" {
			return ErrorInvalidUnionLegacyTagJSON("UnionArgsXXX", "unionArgsXXX1#e7978c97")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.value1.ReadJSON(legacyTypeNames, in2Pointer, nat_Y); err != nil {
			return err
		}
	case "unionArgsXXX2#6daed784", "unionArgsXXX2", "#6daed784":
		if !legacyTypeNames && _tag == "unionArgsXXX2#6daed784" {
			return ErrorInvalidUnionLegacyTagJSON("UnionArgsXXX", "unionArgsXXX2#6daed784")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.value2.ReadJSON(legacyTypeNames, in2Pointer, nat_Y); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("UnionArgsXXX", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UnionArgsXXXLong) WriteJSONGeneral(w []byte, nat_Y uint32) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w, nat_Y)
}

func (item *UnionArgsXXXLong) WriteJSON(w []byte, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_Y)
}
func (item *UnionArgsXXXLong) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_Y uint32) (_ []byte, err error) {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"unionArgsXXX1"`...)
		} else {
			w = append(w, `{"type":"unionArgsXXX1#e7978c97"`...)
		}
		w = append(w, `,"value":`...)
		if w, err = item.value1.WriteJSONOpt(newTypeNames, short, w, nat_Y); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"unionArgsXXX2"`...)
		} else {
			w = append(w, `{"type":"unionArgsXXX2#6daed784"`...)
		}
		w = append(w, `,"value":`...)
		w = item.value2.WriteJSONOpt(newTypeNames, short, w, nat_Y)
		return append(w, '}'), nil
	default: // Impossible due to panic above
		return w, nil
	}
}
