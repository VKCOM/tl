// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple0IntReset(vec *[0]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple0IntFillRandom(rg *basictl.RandGenerator, vec *[0]int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple0IntRead(w []byte, vec *[0]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple0IntWrite(w []byte, vec *[0]int32) []byte {
	for _, elem := range *vec {
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple0IntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[0]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[0]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 0 {
				return ErrorWrongSequenceLength("[0]int32", index+1, 0)
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[0]int32", "expected json array's end")
		}
	}
	if index != 0 {
		return ErrorWrongSequenceLength("[0]int32", index+1, 0)
	}
	return nil
}

func BuiltinTuple0IntWriteJSON(w []byte, vec *[0]int32) []byte {
	return BuiltinTuple0IntWriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple0IntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[0]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinTuple0IntBoxedReset(vec *[0]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple0IntBoxedFillRandom(rg *basictl.RandGenerator, vec *[0]int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple0IntBoxedRead(w []byte, vec *[0]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
			return w, err
		}
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple0IntBoxedWrite(w []byte, vec *[0]int32) []byte {
	for _, elem := range *vec {
		w = basictl.NatWrite(w, 0xa8509bda)
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple0IntBoxedReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[0]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[0]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 0 {
				return ErrorWrongSequenceLength("[0]int32", index+1, 0)
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[0]int32", "expected json array's end")
		}
	}
	if index != 0 {
		return ErrorWrongSequenceLength("[0]int32", index+1, 0)
	}
	return nil
}

func BuiltinTuple0IntBoxedWriteJSON(w []byte, vec *[0]int32) []byte {
	return BuiltinTuple0IntBoxedWriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple0IntBoxedWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[0]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinTuple3IntReset(vec *[3]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple3IntFillRandom(rg *basictl.RandGenerator, vec *[3]int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3IntRead(w []byte, vec *[3]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3IntWrite(w []byte, vec *[3]int32) []byte {
	for _, elem := range *vec {
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple3IntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[3]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]int32", index+1, 3)
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]int32", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]int32", index+1, 3)
	}
	return nil
}

func BuiltinTuple3IntWriteJSON(w []byte, vec *[3]int32) []byte {
	return BuiltinTuple3IntWriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple3IntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[3]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinTuple3IntBoxedReset(vec *[3]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple3IntBoxedFillRandom(rg *basictl.RandGenerator, vec *[3]int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3IntBoxedRead(w []byte, vec *[3]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
			return w, err
		}
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3IntBoxedWrite(w []byte, vec *[3]int32) []byte {
	for _, elem := range *vec {
		w = basictl.NatWrite(w, 0xa8509bda)
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple3IntBoxedReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[3]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]int32", index+1, 3)
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]int32", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]int32", index+1, 3)
	}
	return nil
}

func BuiltinTuple3IntBoxedWriteJSON(w []byte, vec *[3]int32) []byte {
	return BuiltinTuple3IntBoxedWriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple3IntBoxedWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[3]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinTupleIntFillRandom(rg *basictl.RandGenerator, vec *[]int32, nat_n uint32) {
	rg.IncreaseDepth()
	*vec = make([]int32, nat_n)
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTupleIntRead(w []byte, vec *[]int32, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]int32, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleIntWrite(w []byte, vec []int32, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]int32", len(vec), nat_n)
	}
	for _, elem := range vec {
		w = basictl.IntWrite(w, elem)
	}
	return w, nil
}

func BuiltinTupleIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]int32, nat_n uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]int32, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[]int32", "array is longer than expected")
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int32", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[]int32", index, nat_n)
	}
	return nil
}

func BuiltinTupleIntWriteJSON(w []byte, vec []int32, nat_n uint32) (_ []byte, err error) {
	return BuiltinTupleIntWriteJSONOpt(true, false, w, vec, nat_n)
}
func BuiltinTupleIntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []int32, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]int32", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']'), nil
}

func BuiltinTupleTuple3IntFillRandom(rg *basictl.RandGenerator, vec *[][3]int32, nat_n uint32) {
	rg.IncreaseDepth()
	*vec = make([][3]int32, nat_n)
	for i := range *vec {
		BuiltinTuple3IntFillRandom(rg, &(*vec)[i])
	}
	rg.DecreaseDepth()
}

func BuiltinTupleTuple3IntRead(w []byte, vec *[][3]int32, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([][3]int32, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = BuiltinTuple3IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTuple3IntWrite(w []byte, vec [][3]int32, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[][3]int32", len(vec), nat_n)
	}
	for _, elem := range vec {
		w = BuiltinTuple3IntWrite(w, &elem)
	}
	return w, nil
}

func BuiltinTupleTuple3IntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[][3]int32, nat_n uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([][3]int32, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[][3]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[][3]int32", "array is longer than expected")
			}
			if err := BuiltinTuple3IntReadJSON(legacyTypeNames, in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[][3]int32", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[][3]int32", index, nat_n)
	}
	return nil
}

func BuiltinTupleTuple3IntWriteJSON(w []byte, vec [][3]int32, nat_n uint32) (_ []byte, err error) {
	return BuiltinTupleTuple3IntWriteJSONOpt(true, false, w, vec, nat_n)
}
func BuiltinTupleTuple3IntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec [][3]int32, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[][3]int32", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = BuiltinTuple3IntWriteJSONOpt(newTypeNames, short, w, &elem)
	}
	return append(w, ']'), nil
}

func BuiltinTupleTupleIntFillRandom(rg *basictl.RandGenerator, vec *[][]int32, nat_n uint32, nat_t uint32) {
	rg.IncreaseDepth()
	*vec = make([][]int32, nat_n)
	for i := range *vec {
		BuiltinTupleIntFillRandom(rg, &(*vec)[i], nat_t)
	}
	rg.DecreaseDepth()
}

func BuiltinTupleTupleIntRead(w []byte, vec *[][]int32, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([][]int32, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = BuiltinTupleIntRead(w, &(*vec)[i], nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTupleIntWrite(w []byte, vec [][]int32, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[][]int32", len(vec), nat_n)
	}
	for _, elem := range vec {
		if w, err = BuiltinTupleIntWrite(w, elem, nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTupleIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[][]int32, nat_n uint32, nat_t uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([][]int32, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[][]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[][]int32", "array is longer than expected")
			}
			if err := BuiltinTupleIntReadJSON(legacyTypeNames, in, &(*vec)[index], nat_t); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[][]int32", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[][]int32", index, nat_n)
	}
	return nil
}

func BuiltinTupleTupleIntWriteJSON(w []byte, vec [][]int32, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	return BuiltinTupleTupleIntWriteJSONOpt(true, false, w, vec, nat_n, nat_t)
}
func BuiltinTupleTupleIntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec [][]int32, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[][]int32", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, elem, nat_t); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

func BuiltinVectorIntFillRandom(rg *basictl.RandGenerator, vec *[]int32) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]int32, l)
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorIntRead(w []byte, vec *[]int32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]int32, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorIntWrite(w []byte, vec []int32) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinVectorIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]int32) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue int32
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int32", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorIntWriteJSON(w []byte, vec []int32) []byte {
	return BuiltinVectorIntWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorIntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []int32) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinVectorVectorIntFillRandom(rg *basictl.RandGenerator, vec *[][]int32) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([][]int32, l)
	for i := range *vec {
		BuiltinVectorIntFillRandom(rg, &(*vec)[i])
	}
	rg.DecreaseDepth()
}
func BuiltinVectorVectorIntRead(w []byte, vec *[][]int32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([][]int32, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = BuiltinVectorIntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorVectorIntWrite(w []byte, vec [][]int32) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = BuiltinVectorIntWrite(w, elem)
	}
	return w
}

func BuiltinVectorVectorIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[][]int32) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[][]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue []int32
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := BuiltinVectorIntReadJSON(legacyTypeNames, in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[][]int32", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorVectorIntWriteJSON(w []byte, vec [][]int32) []byte {
	return BuiltinVectorVectorIntWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorVectorIntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec [][]int32) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, elem)
	}
	return append(w, ']')
}

func BuiltinVectorVectorVectorIntFillRandom(rg *basictl.RandGenerator, vec *[][][]int32) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([][][]int32, l)
	for i := range *vec {
		BuiltinVectorVectorIntFillRandom(rg, &(*vec)[i])
	}
	rg.DecreaseDepth()
}
func BuiltinVectorVectorVectorIntRead(w []byte, vec *[][][]int32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([][][]int32, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = BuiltinVectorVectorIntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorVectorVectorIntWrite(w []byte, vec [][][]int32) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = BuiltinVectorVectorIntWrite(w, elem)
	}
	return w
}

func BuiltinVectorVectorVectorIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[][][]int32) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[][][]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue [][]int32
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := BuiltinVectorVectorIntReadJSON(legacyTypeNames, in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[][][]int32", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorVectorVectorIntWriteJSON(w []byte, vec [][][]int32) []byte {
	return BuiltinVectorVectorVectorIntWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorVectorVectorIntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec [][][]int32) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = BuiltinVectorVectorIntWriteJSONOpt(newTypeNames, short, w, elem)
	}
	return append(w, ']')
}

type Int int32

func (Int) TLName() string { return "int" }
func (Int) TLTag() uint32  { return 0xa8509bda }

func (item *Int) Reset() {
	ptr := (*int32)(item)
	*ptr = 0
}

func (item *Int) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*int32)(item)
	*ptr = basictl.RandomInt(rg)
}

func (item *Int) Read(w []byte) (_ []byte, err error) {
	ptr := (*int32)(item)
	return basictl.IntRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *Int) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Int) Write(w []byte) []byte {
	ptr := (*int32)(item)
	return basictl.IntWrite(w, *ptr)
}

func (item *Int) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Int) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Int) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa8509bda)
	return item.Write(w)
}

func (item *Int) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Int) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*int32)(item)
	if err := Json2ReadInt32(in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Int) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *Int) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *Int) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*int32)(item)
	w = basictl.JSONWriteInt32(w, *ptr)
	return w
}
func (item *Int) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Int) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("int", err.Error())
	}
	return nil
}

type IntBoxedMaybe struct {
	Value int32 // not deterministic if !Ok
	Ok    bool
}

func (item *IntBoxedMaybe) Reset() {
	item.Ok = false
}
func (item *IntBoxedMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		item.Value = basictl.RandomInt(rg)
	} else {
		item.Ok = false
	}
}

func (item *IntBoxedMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
			return w, err
		}
		return basictl.IntRead(w, &item.Value)
	}
	return w, nil
}

// This method is general version of WriteBoxed, use it instead!
func (item *IntBoxedMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *IntBoxedMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		w = basictl.NatWrite(w, 0xa8509bda)
		return basictl.IntWrite(w, item.Value)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *IntBoxedMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := Json2ReadInt32(in2Pointer, &item.Value); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *IntBoxedMaybe) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *IntBoxedMaybe) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *IntBoxedMaybe) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	if item.Value != 0 {
		w = append(w, `,"value":`...)
		w = basictl.JSONWriteInt32(w, item.Value)
	}
	return append(w, '}')
}

func (item *IntBoxedMaybe) String() string {
	return string(item.WriteJSON(nil))
}

type IntMaybe struct {
	Value int32 // not deterministic if !Ok
	Ok    bool
}

func (item *IntMaybe) Reset() {
	item.Ok = false
}
func (item *IntMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		item.Value = basictl.RandomInt(rg)
	} else {
		item.Ok = false
	}
}

func (item *IntMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		return basictl.IntRead(w, &item.Value)
	}
	return w, nil
}

// This method is general version of WriteBoxed, use it instead!
func (item *IntMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *IntMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		return basictl.IntWrite(w, item.Value)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *IntMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := Json2ReadInt32(in2Pointer, &item.Value); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *IntMaybe) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *IntMaybe) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *IntMaybe) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	if item.Value != 0 {
		w = append(w, `,"value":`...)
		w = basictl.JSONWriteInt32(w, item.Value)
	}
	return append(w, '}')
}

func (item *IntMaybe) String() string {
	return string(item.WriteJSON(nil))
}
