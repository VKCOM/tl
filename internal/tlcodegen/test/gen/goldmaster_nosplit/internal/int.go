// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple0IntReset(vec *[0]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple0IntFillRandom(rg *basictl.RandGenerator, vec *[0]int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple0IntRead(w []byte, vec *[0]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple0IntWrite(w []byte, vec *[0]int32) []byte {
	for _, elem := range *vec {
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple0IntCalculateLayout(sizes []int, vec *[0]int32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 0 != 0 {
		currentSize += basictl.TL2CalculateSize(0)
	}

	for i := 0; i < 0; i++ {

		currentSize += 4
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple0IntInternalWriteTL2(w []byte, sizes []int, vec *[0]int32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 0 != 0 {
		w = basictl.TL2WriteSize(w, 0)
	}

	for i := 0; i < 0; i++ {
		w = basictl.IntWrite(w, (*vec)[i])
	}
	return w, sizes
}

func BuiltinTuple0IntInternalReadTL2(r []byte, vec *[0]int32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 0 {
		lastIndex = 0
	}
	for i := 0; i < lastIndex; i++ {
		if currentR, err = basictl.IntRead(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 0; i++ {
		(*vec)[i] = 0
	}

	return r, nil
}

func BuiltinTuple0IntReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[0]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[0]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 0 {
				return ErrorWrongSequenceLength("[0]int32", index+1, 0)
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[0]int32", "expected json array's end")
		}
	}
	if index != 0 {
		return ErrorWrongSequenceLength("[0]int32", index+1, 0)
	}
	return nil
}

func BuiltinTuple0IntWriteJSON(w []byte, vec *[0]int32) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTuple0IntWriteJSONOpt(&tctx, w, vec)
}
func BuiltinTuple0IntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *[0]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinTuple0IntBoxedReset(vec *[0]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple0IntBoxedFillRandom(rg *basictl.RandGenerator, vec *[0]int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple0IntBoxedRead(w []byte, vec *[0]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
			return w, err
		}
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple0IntBoxedWrite(w []byte, vec *[0]int32) []byte {
	for _, elem := range *vec {
		w = basictl.NatWrite(w, 0xa8509bda)
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple0IntBoxedCalculateLayout(sizes []int, vec *[0]int32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 0 != 0 {
		currentSize += basictl.TL2CalculateSize(0)
	}

	for i := 0; i < 0; i++ {

		currentSize += 4
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple0IntBoxedInternalWriteTL2(w []byte, sizes []int, vec *[0]int32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 0 != 0 {
		w = basictl.TL2WriteSize(w, 0)
	}

	for i := 0; i < 0; i++ {
		w = basictl.IntWrite(w, (*vec)[i])
	}
	return w, sizes
}

func BuiltinTuple0IntBoxedInternalReadTL2(r []byte, vec *[0]int32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 0 {
		lastIndex = 0
	}
	for i := 0; i < lastIndex; i++ {
		if currentR, err = basictl.IntRead(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 0; i++ {
		(*vec)[i] = 0
	}

	return r, nil
}

func BuiltinTuple0IntBoxedReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[0]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[0]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 0 {
				return ErrorWrongSequenceLength("[0]int32", index+1, 0)
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[0]int32", "expected json array's end")
		}
	}
	if index != 0 {
		return ErrorWrongSequenceLength("[0]int32", index+1, 0)
	}
	return nil
}

func BuiltinTuple0IntBoxedWriteJSON(w []byte, vec *[0]int32) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTuple0IntBoxedWriteJSONOpt(&tctx, w, vec)
}
func BuiltinTuple0IntBoxedWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *[0]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinTuple3IntReset(vec *[3]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple3IntFillRandom(rg *basictl.RandGenerator, vec *[3]int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3IntRead(w []byte, vec *[3]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3IntWrite(w []byte, vec *[3]int32) []byte {
	for _, elem := range *vec {
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple3IntCalculateLayout(sizes []int, vec *[3]int32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 3 != 0 {
		currentSize += basictl.TL2CalculateSize(3)
	}

	for i := 0; i < 3; i++ {

		currentSize += 4
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple3IntInternalWriteTL2(w []byte, sizes []int, vec *[3]int32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 3 != 0 {
		w = basictl.TL2WriteSize(w, 3)
	}

	for i := 0; i < 3; i++ {
		w = basictl.IntWrite(w, (*vec)[i])
	}
	return w, sizes
}

func BuiltinTuple3IntInternalReadTL2(r []byte, vec *[3]int32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 3 {
		lastIndex = 3
	}
	for i := 0; i < lastIndex; i++ {
		if currentR, err = basictl.IntRead(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 3; i++ {
		(*vec)[i] = 0
	}

	return r, nil
}

func BuiltinTuple3IntReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[3]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]int32", index+1, 3)
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]int32", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]int32", index+1, 3)
	}
	return nil
}

func BuiltinTuple3IntWriteJSON(w []byte, vec *[3]int32) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTuple3IntWriteJSONOpt(&tctx, w, vec)
}
func BuiltinTuple3IntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *[3]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinTuple3IntBoxedReset(vec *[3]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple3IntBoxedFillRandom(rg *basictl.RandGenerator, vec *[3]int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3IntBoxedRead(w []byte, vec *[3]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
			return w, err
		}
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3IntBoxedWrite(w []byte, vec *[3]int32) []byte {
	for _, elem := range *vec {
		w = basictl.NatWrite(w, 0xa8509bda)
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple3IntBoxedCalculateLayout(sizes []int, vec *[3]int32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 3 != 0 {
		currentSize += basictl.TL2CalculateSize(3)
	}

	for i := 0; i < 3; i++ {

		currentSize += 4
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple3IntBoxedInternalWriteTL2(w []byte, sizes []int, vec *[3]int32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 3 != 0 {
		w = basictl.TL2WriteSize(w, 3)
	}

	for i := 0; i < 3; i++ {
		w = basictl.IntWrite(w, (*vec)[i])
	}
	return w, sizes
}

func BuiltinTuple3IntBoxedInternalReadTL2(r []byte, vec *[3]int32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 3 {
		lastIndex = 3
	}
	for i := 0; i < lastIndex; i++ {
		if currentR, err = basictl.IntRead(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 3; i++ {
		(*vec)[i] = 0
	}

	return r, nil
}

func BuiltinTuple3IntBoxedReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[3]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]int32", index+1, 3)
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]int32", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]int32", index+1, 3)
	}
	return nil
}

func BuiltinTuple3IntBoxedWriteJSON(w []byte, vec *[3]int32) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTuple3IntBoxedWriteJSONOpt(&tctx, w, vec)
}
func BuiltinTuple3IntBoxedWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *[3]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinTupleIntFillRandom(rg *basictl.RandGenerator, vec *[]int32, nat_n uint32) {
	rg.IncreaseDepth()
	*vec = make([]int32, nat_n)
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTupleIntRead(w []byte, vec *[]int32, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]int32, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleIntWrite(w []byte, vec []int32, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]int32", len(vec), nat_n)
	}
	for _, elem := range vec {
		w = basictl.IntWrite(w, elem)
	}
	return w, nil
}

func BuiltinTupleIntCalculateLayout(sizes []int, vec *[]int32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		currentSize += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {

		currentSize += 4
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTupleIntInternalWriteTL2(w []byte, sizes []int, vec *[]int32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w = basictl.IntWrite(w, elem)
	}
	return w, sizes
}

func BuiltinTupleIntInternalReadTL2(r []byte, vec *[]int32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([]int32, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		if currentR, err = basictl.IntRead(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}
	return r, nil
}
func BuiltinTupleIntReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[]int32, nat_n uint32) error {
	isTL2 := tctx != nil && tctx.IsTL2
	if isTL2 {
		nat_n = uint32(len(*vec))
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]int32, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				if isTL2 {
					var newValue int32
					*vec = append(*vec, newValue)
					*vec = (*vec)[:cap(*vec)]
					nat_n = uint32(len(*vec))
				} else {
					return ErrorInvalidJSON("[]int32", "array is longer than expected")
				}
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int32", "expected json array's end")
		}
	}
	if isTL2 {
		*vec = (*vec)[:index]
	} else {
		if uint32(index) != nat_n {
			return ErrorWrongSequenceLength("[]int32", index, nat_n)
		}
	}
	return nil
}

func BuiltinTupleIntWriteJSON(w []byte, vec []int32, nat_n uint32) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTupleIntWriteJSONOpt(&tctx, w, vec, nat_n)
}
func BuiltinTupleIntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec []int32, nat_n uint32) (_ []byte, err error) {
	if tctx != nil && tctx.IsTL2 {
		nat_n = uint32(len(vec))
	}
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]int32", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']'), nil
}

func BuiltinVectorIntFillRandom(rg *basictl.RandGenerator, vec *[]int32) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]int32, l)
	for i := range *vec {
		(*vec)[i] = basictl.RandomInt(rg)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorIntRead(w []byte, vec *[]int32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]int32, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorIntWrite(w []byte, vec []int32) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinVectorIntCalculateLayout(sizes []int, vec *[]int32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		currentSize += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {

		currentSize += 4
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinVectorIntInternalWriteTL2(w []byte, sizes []int, vec *[]int32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w = basictl.IntWrite(w, elem)
	}
	return w, sizes
}

func BuiltinVectorIntInternalReadTL2(r []byte, vec *[]int32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([]int32, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		if currentR, err = basictl.IntRead(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}
	return r, nil
}

func BuiltinVectorIntReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[]int32) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue int32
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int32", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorIntWriteJSON(w []byte, vec []int32) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorIntWriteJSONOpt(&tctx, w, vec)
}
func BuiltinVectorIntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec []int32) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

type Int int32

func (Int) TLName() string { return "int" }
func (Int) TLTag() uint32  { return 0xa8509bda }

func (item *Int) Reset() {
	ptr := (*int32)(item)
	*ptr = 0
}

func (item *Int) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*int32)(item)
	*ptr = basictl.RandomInt(rg)
}

func (item *Int) Read(w []byte) (_ []byte, err error) {
	ptr := (*int32)(item)
	return basictl.IntRead(w, ptr)
}

func (item *Int) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Int) Write(w []byte) []byte {
	ptr := (*int32)(item)
	return basictl.IntWrite(w, *ptr)
}

func (item *Int) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Int) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Int) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa8509bda)
	return item.Write(w)
}

func (item Int) String() string {
	return string(item.WriteJSON(nil))
}
func (item *Int) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *Int) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	ptr := (*int32)(item)
	if err := Json2ReadInt32(in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Int) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *Int) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}

func (item *Int) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*int32)(item)
	w = basictl.JSONWriteInt32(w, *ptr)
	return w
}
func (item *Int) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Int) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("int", err.Error())
	}
	return nil
}

func (item *Int) CalculateLayout(sizes []int) []int {

	return sizes
}

func (item *Int) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*int32)(item)
	w = basictl.IntWrite(w, *ptr)
	return w, sizes
}

func (item *Int) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *Int) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*int32)(item)
	if r, err = basictl.IntRead(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *Int) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type IntBoxedMaybe struct {
	Value int32 // not deterministic if !Ok
	Ok    bool
}

func (item *IntBoxedMaybe) Reset() {
	item.Ok = false
}
func (item *IntBoxedMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		item.Value = basictl.RandomInt(rg)
	} else {
		item.Ok = false
	}
}

func (item *IntBoxedMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
			return w, err
		}
		return basictl.IntRead(w, &item.Value)
	}
	return w, nil
}

func (item *IntBoxedMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *IntBoxedMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		w = basictl.NatWrite(w, 0xa8509bda)
		return basictl.IntWrite(w, item.Value)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *IntBoxedMaybe) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if item.Ok {
		sizes[sizePosition] += 1
		sizes[sizePosition] += basictl.TL2CalculateSize(1)
		if item.Value != 0 {

			sizes[sizePosition] += 4
		}
	}
	return sizes
}

func (item *IntBoxedMaybe) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	if item.Ok {
		currentPosition := len(w)
		w = append(w, 1)
		w = basictl.TL2WriteSize(w, 1)
		if item.Value != 0 {
			if 4 != 0 {
				w[currentPosition] |= (1 << 1)
				w = basictl.IntWrite(w, item.Value)
			}
		}
	}
	return w, sizes
}

func (item *IntBoxedMaybe) InternalReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Ok = false
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		if block&1 == 0 {
			return r, basictl.TL2Error("must have constructor bytes")
		}
		var index int
		if r, index, err = basictl.TL2ParseSize(r); err != nil {
			return r, err
		}
		if index != 1 {
			return r, basictl.TL2Error("expected 1")
		}
		item.Ok = true
		if block&(1<<1) != 0 {
			if r, err = basictl.IntRead(r, &item.Value); err != nil {
				return r, err
			}
		} else {
			item.Value = 0
		}
	}
	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item *IntBoxedMaybe) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := Json2ReadInt32(in2Pointer, &item.Value); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *IntBoxedMaybe) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *IntBoxedMaybe) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *IntBoxedMaybe) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	if item.Value != 0 {
		w = append(w, `,"value":`...)
		w = basictl.JSONWriteInt32(w, item.Value)
	}
	return append(w, '}')
}

func (item IntBoxedMaybe) String() string {
	return string(item.WriteJSON(nil))
}

type IntMaybe struct {
	Value int32 // not deterministic if !Ok
	Ok    bool
}

func (item *IntMaybe) Reset() {
	item.Ok = false
}
func (item *IntMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		item.Value = basictl.RandomInt(rg)
	} else {
		item.Ok = false
	}
}

func (item *IntMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		return basictl.IntRead(w, &item.Value)
	}
	return w, nil
}

func (item *IntMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *IntMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		return basictl.IntWrite(w, item.Value)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *IntMaybe) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if item.Ok {
		sizes[sizePosition] += 1
		sizes[sizePosition] += basictl.TL2CalculateSize(1)
		if item.Value != 0 {

			sizes[sizePosition] += 4
		}
	}
	return sizes
}

func (item *IntMaybe) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	if item.Ok {
		currentPosition := len(w)
		w = append(w, 1)
		w = basictl.TL2WriteSize(w, 1)
		if item.Value != 0 {
			if 4 != 0 {
				w[currentPosition] |= (1 << 1)
				w = basictl.IntWrite(w, item.Value)
			}
		}
	}
	return w, sizes
}

func (item *IntMaybe) InternalReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Ok = false
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		if block&1 == 0 {
			return r, basictl.TL2Error("must have constructor bytes")
		}
		var index int
		if r, index, err = basictl.TL2ParseSize(r); err != nil {
			return r, err
		}
		if index != 1 {
			return r, basictl.TL2Error("expected 1")
		}
		item.Ok = true
		if block&(1<<1) != 0 {
			if r, err = basictl.IntRead(r, &item.Value); err != nil {
				return r, err
			}
		} else {
			item.Value = 0
		}
	}
	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item *IntMaybe) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := Json2ReadInt32(in2Pointer, &item.Value); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *IntMaybe) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *IntMaybe) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *IntMaybe) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	if item.Value != 0 {
		w = append(w, `,"value":`...)
		w = basictl.JSONWriteInt32(w, item.Value)
	}
	return append(w, '}')
}

func (item IntMaybe) String() string {
	return string(item.WriteJSON(nil))
}
