// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type UseStr struct {
	X string
}

func (UseStr) TLName() string { return "useStr" }
func (UseStr) TLTag() uint32  { return 0x9aa3dee5 }

func (item *UseStr) Reset() {
	item.X = ""
}

func (item *UseStr) FillRandom(rg *basictl.RandGenerator) {
	item.X = basictl.RandomString(rg)
}

func (item *UseStr) Read(w []byte) (_ []byte, err error) {
	return basictl.StringRead(w, &item.X)
}

// This method is general version of Write, use it instead!
func (item *UseStr) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *UseStr) Write(w []byte) []byte {
	w = basictl.StringWrite(w, item.X)
	return w
}

func (item *UseStr) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9aa3dee5); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *UseStr) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *UseStr) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x9aa3dee5)
	return item.Write(w)
}

func (item *UseStr) String() string {
	return string(item.WriteJSON(nil))
}

func (item *UseStr) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propXPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if propXPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("useStr", "x")
				}
				if err := Json2ReadString(in, &item.X); err != nil {
					return err
				}
				propXPresented = true
			default:
				return ErrorInvalidJSONExcessElement("useStr", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propXPresented {
		item.X = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UseStr) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *UseStr) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *UseStr) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	w = basictl.JSONWriteString(w, item.X)
	if (len(item.X) != 0) == false {
		w = w[:backupIndexX]
	}
	return append(w, '}')
}

func (item *UseStr) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *UseStr) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("useStr", err.Error())
	}
	return nil
}

type UseStrBytes struct {
	X []byte
}

func (UseStrBytes) TLName() string { return "useStr" }
func (UseStrBytes) TLTag() uint32  { return 0x9aa3dee5 }

func (item *UseStrBytes) Reset() {
	item.X = item.X[:0]
}

func (item *UseStrBytes) FillRandom(rg *basictl.RandGenerator) {
	item.X = basictl.RandomStringBytes(rg)
}

func (item *UseStrBytes) Read(w []byte) (_ []byte, err error) {
	return basictl.StringReadBytes(w, &item.X)
}

// This method is general version of Write, use it instead!
func (item *UseStrBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *UseStrBytes) Write(w []byte) []byte {
	w = basictl.StringWriteBytes(w, item.X)
	return w
}

func (item *UseStrBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9aa3dee5); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *UseStrBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *UseStrBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x9aa3dee5)
	return item.Write(w)
}

func (item *UseStrBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *UseStrBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propXPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if propXPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("useStr", "x")
				}
				if err := Json2ReadStringBytes(in, &item.X); err != nil {
					return err
				}
				propXPresented = true
			default:
				return ErrorInvalidJSONExcessElement("useStr", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propXPresented {
		item.X = item.X[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UseStrBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *UseStrBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *UseStrBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	w = basictl.JSONWriteStringBytes(w, item.X)
	if (len(item.X) != 0) == false {
		w = w[:backupIndexX]
	}
	return append(w, '}')
}

func (item *UseStrBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *UseStrBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("useStr", err.Error())
	}
	return nil
}
