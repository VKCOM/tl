// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type DictionaryString map[string]string

func (DictionaryString) TLName() string { return "dictionary" }
func (DictionaryString) TLTag() uint32  { return 0x1f4c618f }

func (item *DictionaryString) Reset() {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringReset(*ptr)
}

func (item *DictionaryString) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringFillRandom(rg, ptr)
}

func (item *DictionaryString) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *DictionaryString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryString) Write(w []byte) []byte {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringWrite(w, *ptr)
}

func (item *DictionaryString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1f4c618f); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *DictionaryString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1f4c618f)
	return item.Write(w)
}

func (item DictionaryString) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*map[string]string)(item)
	if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *DictionaryString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *DictionaryString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*map[string]string)(item)
	w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *DictionaryString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionary", err.Error())
	}
	return nil
}

type DictionaryStringBytes []DictionaryFieldStringBytes

func (DictionaryStringBytes) TLName() string { return "dictionary" }
func (DictionaryStringBytes) TLTag() uint32  { return 0x1f4c618f }

func (item *DictionaryStringBytes) Reset() {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *DictionaryStringBytes) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	BuiltinVectorDictionaryFieldStringBytesFillRandom(rg, ptr)
}

func (item *DictionaryStringBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	return BuiltinVectorDictionaryFieldStringBytesRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *DictionaryStringBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryStringBytes) Write(w []byte) []byte {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	return BuiltinVectorDictionaryFieldStringBytesWrite(w, *ptr)
}

func (item *DictionaryStringBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1f4c618f); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *DictionaryStringBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryStringBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1f4c618f)
	return item.Write(w)
}

func (item DictionaryStringBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryStringBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	if err := BuiltinVectorDictionaryFieldStringBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryStringBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *DictionaryStringBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *DictionaryStringBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	w = BuiltinVectorDictionaryFieldStringBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *DictionaryStringBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryStringBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionary", err.Error())
	}
	return nil
}

type DictionaryUsefulServiceUserEntityPaymentItemBoxed map[string]UsefulServiceUserEntityPaymentItem

func (DictionaryUsefulServiceUserEntityPaymentItemBoxed) TLName() string { return "dictionary" }
func (DictionaryUsefulServiceUserEntityPaymentItemBoxed) TLTag() uint32  { return 0x1f4c618f }

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) Reset() {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReset(*ptr)
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) FillRandom(rg *basictl.RandGenerator, nat_t uint32) {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedFillRandom(rg, ptr, nat_t)
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	return BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(w, ptr, nat_t)
}

// This method is general version of Write, use it instead!
func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) WriteGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.Write(w, nat_t), nil
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) Write(w []byte, nat_t uint32) []byte {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	return BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(w, *ptr, nat_t)
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1f4c618f); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

// This method is general version of WriteBoxed, use it instead!
func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) WriteBoxed(w []byte, nat_t uint32) []byte {
	w = basictl.NatWrite(w, 0x1f4c618f)
	return item.Write(w, nat_t)
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	if err := BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReadJSON(legacyTypeNames, in, ptr, nat_t); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSON(w, nat_t), nil
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxed) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) []byte {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	w = BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSONOpt(newTypeNames, short, w, *ptr, nat_t)
	return w
}

type DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe struct {
	Value map[string]UsefulServiceUserEntityPaymentItem // not deterministic if !Ok
	Ok    bool
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe) Reset() {
	item.Ok = false
}
func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe) FillRandom(rg *basictl.RandGenerator, nat_t uint32) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedFillRandom(rg, &item.Value, nat_t)
	} else {
		item.Ok = false
	}
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		if w, err = basictl.NatReadExactTag(w, 0x1f4c618f); err != nil {
			return w, err
		}
		return BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(w, &item.Value, nat_t)
	}
	return w, nil
}

// This method is general version of WriteBoxed, use it instead!
func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe) WriteBoxed(w []byte, nat_t uint32) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		w = basictl.NatWrite(w, 0x1f4c618f)
		return BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(w, item.Value, nat_t)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReadJSON(legacyTypeNames, in2Pointer, &item.Value, nat_t); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_t), nil
}

func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}
func (item *DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	if len(item.Value) != 0 {
		w = append(w, `,"value":`...)
		w = BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSONOpt(newTypeNames, short, w, item.Value, nat_t)
	}
	return append(w, '}')
}
