// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type Hren struct {
	Next *HrenMaybe
}

func (Hren) TLName() string { return "hren" }
func (Hren) TLTag() uint32  { return 0x12ab5219 }

func (item *Hren) Reset() {
	if item.Next != nil {
		item.Next.Reset()
	}
}

func (item *Hren) FillRandom(rg *basictl.RandGenerator) {
	rg.IncreaseDepth()
	if item.Next == nil {
		var value HrenMaybe
		item.Next = &value
	}
	item.Next.FillRandom(rg)
	rg.DecreaseDepth()
}

func (item *Hren) Read(w []byte) (_ []byte, err error) {
	if item.Next == nil {
		var value HrenMaybe
		item.Next = &value
	}
	return item.Next.ReadBoxed(w)
}

func (item *Hren) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Hren) Write(w []byte) []byte {
	if item.Next == nil {
		var tmpValue HrenMaybe
		w = (&tmpValue).WriteBoxed(w)
	} else {
		w = item.Next.WriteBoxed(w)
	}
	return w
}

func (item *Hren) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x12ab5219); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Hren) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Hren) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x12ab5219)
	return item.Write(w)
}

func (item Hren) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Hren) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNextPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "next":
				if propNextPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("hren", "next")
				}
				if item.Next == nil {
					var value HrenMaybe
					item.Next = &value
				}
				if err := item.Next.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propNextPresented = true
			default:
				return ErrorInvalidJSONExcessElement("hren", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNextPresented {
		if item.Next != nil {
			item.Next.Reset()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Hren) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *Hren) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *Hren) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexNext := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"next":`...)
	w = item.Next.WriteJSONOpt(tctx, w)
	if (item.Next != nil && item.Next.Ok) == false {
		w = w[:backupIndexNext]
	}
	return append(w, '}')
}

func (item *Hren) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Hren) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("hren", err.Error())
	}
	return nil
}

func (item *Hren) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Next
	currentPosition := len(sizes)
	if item.Next != nil && item.Next.Ok {
		sizes = (*item.Next).CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *Hren) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Next
	if item.Next != nil && item.Next.Ok {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 1)
			w, sizes = (*item.Next).InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *Hren) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *Hren) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Next
	if block&(1<<1) != 0 {
		if item.Next == nil {
			var newValue HrenMaybe
			item.Next = &newValue
		}
		if currentR, err = (*item.Next).InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		if item.Next == nil {
			var newValue HrenMaybe
			item.Next = &newValue
		}
		item.Next.Reset()
	}

	return r, nil
}

func (item *Hren) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type HrenMaybe struct {
	Value Hren // not deterministic if !Ok
	Ok    bool
}

func (item *HrenMaybe) Reset() {
	item.Ok = false
}
func (item *HrenMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		item.Value.FillRandom(rg)
	} else {
		item.Ok = false
	}
}

func (item *HrenMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		return item.Value.Read(w)
	}
	return w, nil
}

func (item *HrenMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *HrenMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		return item.Value.Write(w)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *HrenMaybe) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if item.Ok {
		sizes[sizePosition] += 1
		sizes[sizePosition] += basictl.TL2CalculateSize(1)
		currentPosition := len(sizes)
		sizes = item.Value.CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			sizes[sizePosition] += sizes[currentPosition]
			sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
		}
	}
	return sizes
}

func (item *HrenMaybe) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	if item.Ok {
		currentPosition := len(w)
		w = append(w, 1)
		w = basictl.TL2WriteSize(w, 1)
		if sizes[0] != 0 {
			w[currentPosition] |= (1 << 1)
			w, sizes = item.Value.InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	return w, sizes
}

func (item *HrenMaybe) InternalReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Ok = false
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		if block&1 == 0 {
			return r, basictl.TL2Error("must have constructor bytes")
		}
		var index int
		if r, index, err = basictl.TL2ParseSize(r); err != nil {
			return r, err
		}
		if index != 1 {
			return r, basictl.TL2Error("expected 1")
		}
		item.Ok = true
		if block&(1<<1) != 0 {
			if r, err = item.Value.InternalReadTL2(r); err != nil {
				return r, err
			}
		} else {
			item.Value.Reset()
		}
	}
	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item *HrenMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := item.Value.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *HrenMaybe) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *HrenMaybe) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *HrenMaybe) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	w = append(w, `,"value":`...)
	w = item.Value.WriteJSONOpt(tctx, w)
	return append(w, '}')
}

func (item HrenMaybe) String() string {
	return string(item.WriteJSON(nil))
}
