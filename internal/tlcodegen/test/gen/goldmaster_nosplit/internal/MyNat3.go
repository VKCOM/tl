// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

var _MyNat3 = [2]UnionElement{
	{TLTag: 0x103a40cf, TLName: "myZero3", TLString: "myZero3#103a40cf"},
	{TLTag: 0x692c291b, TLName: "myPlus3", TLString: "myPlus3#692c291b"},
}

type MyNat3 struct {
	valueMyPlus3 *MyPlus3
	index        int
}

func (item MyNat3) TLName() string { return _MyNat3[item.index].TLName }
func (item MyNat3) TLTag() uint32  { return _MyNat3[item.index].TLTag }

func (item *MyNat3) Reset() { item.index = 0 }
func (item *MyNat3) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 2
	switch index {
	case 0:
		item.index = 0
	case 1:
		item.index = 1
		if item.valueMyPlus3 == nil {
			var value MyPlus3
			value.FillRandom(rg)
			item.valueMyPlus3 = &value
		}
	default:
	}
}

func (item *MyNat3) IsMyZero3() bool { return item.index == 0 }

func (item *MyNat3) AsMyZero3() (MyZero3, bool) {
	var value MyZero3
	return value, item.index == 0
}
func (item *MyNat3) ResetToMyZero3() { item.index = 0 }
func (item *MyNat3) SetMyZero3()     { item.index = 0 }

func (item *MyNat3) IsMyPlus3() bool { return item.index == 1 }

func (item *MyNat3) AsMyPlus3() (*MyPlus3, bool) {
	if item.index != 1 {
		return nil, false
	}
	return item.valueMyPlus3, true
}
func (item *MyNat3) ResetToMyPlus3() *MyPlus3 {
	item.index = 1
	if item.valueMyPlus3 == nil {
		var value MyPlus3
		item.valueMyPlus3 = &value
	} else {
		item.valueMyPlus3.Reset()
	}
	return item.valueMyPlus3
}
func (item *MyNat3) SetMyPlus3(value MyPlus3) {
	item.index = 1
	if item.valueMyPlus3 == nil {
		item.valueMyPlus3 = &value
	} else {
		*item.valueMyPlus3 = value
	}
}

func (item *MyNat3) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x103a40cf:
		item.index = 0
		return w, nil
	case 0x692c291b:
		item.index = 1
		if item.valueMyPlus3 == nil {
			var value MyPlus3
			item.valueMyPlus3 = &value
		}
		return item.valueMyPlus3.Read(w)
	default:
		return w, ErrorInvalidUnionTag("MyNat3", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *MyNat3) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MyNat3) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _MyNat3[item.index].TLTag)
	switch item.index {
	case 0:
		return w
	case 1:
		w = item.valueMyPlus3.Write(w)
	}
	return w
}

func (item *MyNat3) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("MyNat3", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "myZero3#103a40cf", "myZero3", "#103a40cf":
		if !legacyTypeNames && _tag == "myZero3#103a40cf" {
			return ErrorInvalidUnionLegacyTagJSON("MyNat3", "myZero3#103a40cf")
		}
		item.index = 0
	case "myPlus3#692c291b", "myPlus3", "#692c291b":
		if !legacyTypeNames && _tag == "myPlus3#692c291b" {
			return ErrorInvalidUnionLegacyTagJSON("MyNat3", "myPlus3#692c291b")
		}
		item.index = 1
		if item.valueMyPlus3 == nil {
			var value MyPlus3
			item.valueMyPlus3 = &value
		}
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueMyPlus3.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("MyNat3", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MyNat3) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *MyNat3) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *MyNat3) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"myZero3"`...)
		} else {
			w = append(w, `{"type":"myZero3#103a40cf"`...)
		}
		return append(w, '}')
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"myPlus3"`...)
		} else {
			w = append(w, `{"type":"myPlus3#692c291b"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueMyPlus3.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item *MyNat3) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MyNat3) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MyNat3) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("MyNat3", err.Error())
	}
	return nil
}

func (item MyPlus3) AsUnion() MyNat3 {
	var ret MyNat3
	ret.SetMyPlus3(item)
	return ret
}

type MyPlus3 MyNat3

func (MyPlus3) TLName() string { return "myPlus3" }
func (MyPlus3) TLTag() uint32  { return 0x692c291b }

func (item *MyPlus3) Reset() {
	ptr := (*MyNat3)(item)
	ptr.Reset()
}

func (item *MyPlus3) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*MyNat3)(item)
	ptr.FillRandom(rg)
}

func (item *MyPlus3) Read(w []byte) (_ []byte, err error) {
	ptr := (*MyNat3)(item)
	return ptr.ReadBoxed(w)
}

// This method is general version of Write, use it instead!
func (item *MyPlus3) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MyPlus3) Write(w []byte) []byte {
	ptr := (*MyNat3)(item)
	return ptr.WriteBoxed(w)
}

func (item *MyPlus3) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x692c291b); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MyPlus3) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MyPlus3) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x692c291b)
	return item.Write(w)
}

func (item *MyPlus3) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MyPlus3) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*MyNat3)(item)
	if err := ptr.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MyPlus3) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *MyPlus3) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *MyPlus3) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*MyNat3)(item)
	w = ptr.WriteJSONOpt(newTypeNames, short, w)
	return w
}
func (item *MyPlus3) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MyPlus3) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("myPlus3", err.Error())
	}
	return nil
}

func (item MyZero3) AsUnion() MyNat3 {
	var ret MyNat3
	ret.SetMyZero3()
	return ret
}

type MyZero3 struct {
}

func (MyZero3) TLName() string { return "myZero3" }
func (MyZero3) TLTag() uint32  { return 0x103a40cf }

func (item *MyZero3) Reset() {}

func (item *MyZero3) FillRandom(rg *basictl.RandGenerator) {}

func (item *MyZero3) Read(w []byte) (_ []byte, err error) { return w, nil }

// This method is general version of Write, use it instead!
func (item *MyZero3) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MyZero3) Write(w []byte) []byte {
	return w
}

func (item *MyZero3) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x103a40cf); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MyZero3) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MyZero3) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x103a40cf)
	return item.Write(w)
}

func (item *MyZero3) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MyZero3) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("myZero3", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MyZero3) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *MyZero3) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *MyZero3) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *MyZero3) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MyZero3) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("myZero3", err.Error())
	}
	return nil
}
