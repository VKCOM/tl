// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTupleReplace11ElemLongFillRandom(rg *basictl.RandGenerator, vec *[]Replace11ElemLong, nat_n uint32, nat_tn uint32, nat_tk uint32) {
	rg.IncreaseDepth()
	*vec = make([]Replace11ElemLong, nat_n)
	for i := range *vec {
		(*vec)[i].FillRandom(rg, nat_tn, nat_tk)
	}
	rg.DecreaseDepth()
}

func BuiltinTupleReplace11ElemLongRead(w []byte, vec *[]Replace11ElemLong, nat_n uint32, nat_tn uint32, nat_tk uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]Replace11ElemLong, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w, nat_tn, nat_tk); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleReplace11ElemLongWrite(w []byte, vec []Replace11ElemLong, nat_n uint32, nat_tn uint32, nat_tk uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]Replace11ElemLong", len(vec), nat_n)
	}
	for _, elem := range vec {
		if w, err = elem.Write(w, nat_tn, nat_tk); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleReplace11ElemLongCalculateLayout(sizes []int, vec *[]Replace11ElemLong, nat_n uint32, nat_tn uint32, nat_tk uint32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if nat_n != 0 {
		currentSize += basictl.TL2CalculateSize(int(nat_n))
	}

	lastIndex := uint32(len(*vec))
	if lastIndex > nat_n {
		lastIndex = nat_n
	}

	for i := uint32(0); i < lastIndex; i++ {
		currentPosition := len(sizes)
		sizes = (*vec)[i].CalculateLayout(sizes, nat_tn, nat_tk)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}

	// append empty objects if not enough
	for i := lastIndex; i < nat_n; i++ {
		var elem Replace11ElemLong
		currentPosition := len(sizes)
		sizes = elem.CalculateLayout(sizes, nat_tn, nat_tk)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTupleReplace11ElemLongInternalWriteTL2(w []byte, sizes []int, vec *[]Replace11ElemLong, nat_n uint32, nat_tn uint32, nat_tk uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if nat_n != 0 {
		w = basictl.TL2WriteSize(w, int(nat_n))
	}

	lastIndex := uint32(len(*vec))
	if lastIndex > nat_n {
		lastIndex = nat_n
	}

	for i := uint32(0); i < lastIndex; i++ {
		w, sizes = (*vec)[i].InternalWriteTL2(w, sizes, nat_tn, nat_tk)
	}

	// append empty objects if not enough
	for i := lastIndex; i < nat_n; i++ {
		var elem Replace11ElemLong
		w, sizes = elem.InternalWriteTL2(w, sizes, nat_tn, nat_tk)
	}
	return w, sizes
}

func BuiltinTupleReplace11ElemLongInternalReadTL2(r []byte, vec *[]Replace11ElemLong, nat_n uint32, nat_tn uint32, nat_tk uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if uint32(cap(*vec)) < nat_n {
		*vec = make([]Replace11ElemLong, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}

	lastIndex := uint32(elementCount)
	if lastIndex > nat_n {
		lastIndex = nat_n
	}

	for i := uint32(0); i < lastIndex; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR, nat_tn, nat_tk); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < nat_n; i++ {
		(*vec)[i].Reset()
	}

	return r, nil
}
func BuiltinTupleReplace11ElemLongReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]Replace11ElemLong, nat_n uint32, nat_tn uint32, nat_tk uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]Replace11ElemLong, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]Replace11ElemLong", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[]Replace11ElemLong", "array is longer than expected")
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in, nat_tn, nat_tk); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]Replace11ElemLong", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[]Replace11ElemLong", index, nat_n)
	}
	return nil
}

func BuiltinTupleReplace11ElemLongWriteJSON(w []byte, vec []Replace11ElemLong, nat_n uint32, nat_tn uint32, nat_tk uint32) (_ []byte, err error) {
	return BuiltinTupleReplace11ElemLongWriteJSONOpt(true, false, w, vec, nat_n, nat_tn, nat_tk)
}
func BuiltinTupleReplace11ElemLongWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []Replace11ElemLong, nat_n uint32, nat_tn uint32, nat_tk uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]Replace11ElemLong", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w, nat_tn, nat_tk); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

type Replace11ElemLong struct {
	B [3]PairIntLong // Conditional: nat_n.0
	C []int32
}

func (item *Replace11ElemLong) SetB(v [3]PairIntLong, nat_n *uint32) {
	item.B = v
	if nat_n != nil {
		*nat_n |= 1 << 0
	}
}
func (item *Replace11ElemLong) ClearB(nat_n *uint32) {
	BuiltinTuple3PairBoxedIntLongReset(&item.B)
	if nat_n != nil {
		*nat_n &^= 1 << 0
	}
}
func (item *Replace11ElemLong) IsSetB(nat_n uint32) bool { return nat_n&(1<<0) != 0 }

func (item *Replace11ElemLong) Reset() {
	BuiltinTuple3PairBoxedIntLongReset(&item.B)
	item.C = item.C[:0]
}

func (item *Replace11ElemLong) FillRandom(rg *basictl.RandGenerator, nat_n uint32, nat_k uint32) {
	if nat_n&(1<<0) != 0 {
		BuiltinTuple3PairBoxedIntLongFillRandom(rg, &item.B)
	} else {
		BuiltinTuple3PairBoxedIntLongReset(&item.B)
	}
	BuiltinTupleIntFillRandom(rg, &item.C, nat_n)
}

func (item *Replace11ElemLong) Read(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	if nat_n&(1<<0) != 0 {
		if w, err = BuiltinTuple3PairBoxedIntLongRead(w, &item.B); err != nil {
			return w, err
		}
	} else {
		BuiltinTuple3PairBoxedIntLongReset(&item.B)
	}
	return BuiltinTupleIntRead(w, &item.C, nat_n)
}

func (item *Replace11ElemLong) WriteGeneral(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	return item.Write(w, nat_n, nat_k)
}

func (item *Replace11ElemLong) Write(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	if nat_n&(1<<0) != 0 {
		w = BuiltinTuple3PairBoxedIntLongWrite(w, &item.B)
	}
	if w, err = BuiltinTupleIntWrite(w, item.C, nat_n); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Replace11ElemLong) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_n uint32, nat_k uint32) error {
	var propBPresented bool
	var rawC []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("replace11Elem", "b")
				}
				if nat_n&(1<<0) == 0 {
					return ErrorInvalidJSON("replace11Elem", "field 'b' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := BuiltinTuple3PairBoxedIntLongReadJSON(legacyTypeNames, in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			case "c":
				if rawC != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("replace11Elem", "c")
				}
				rawC = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("replace11Elem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propBPresented {
		BuiltinTuple3PairBoxedIntLongReset(&item.B)
	}
	var inCPointer *basictl.JsonLexer
	inC := basictl.JsonLexer{Data: rawC}
	if rawC != nil {
		inCPointer = &inC
	}
	if err := BuiltinTupleIntReadJSON(legacyTypeNames, inCPointer, &item.C, nat_n); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Replace11ElemLong) WriteJSONGeneral(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n, nat_k)
}

func (item *Replace11ElemLong) WriteJSON(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n, nat_k)
}
func (item *Replace11ElemLong) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	w = append(w, '{')
	if nat_n&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"b":`...)
		w = BuiltinTuple3PairBoxedIntLongWriteJSONOpt(newTypeNames, short, w, &item.B)
	}
	backupIndexC := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"c":`...)
	if w, err = BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.C, nat_n); err != nil {
		return w, err
	}
	if (len(item.C) != 0) == false {
		w = w[:backupIndexC]
	}
	return append(w, '}'), nil
}

func (item *Replace11ElemLong) CalculateLayout(sizes []int, nat_n uint32, nat_k uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.B
	currentPosition := len(sizes)
	if nat_n&(1<<0) != 0 {
		sizes = BuiltinTuple3PairBoxedIntLongCalculateLayout(sizes, &item.B)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.C
	currentPosition = len(sizes)
	if len(item.C) != 0 {
		sizes = BuiltinTupleIntCalculateLayout(sizes, &item.C, nat_n)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *Replace11ElemLong) InternalWriteTL2(w []byte, sizes []int, nat_n uint32, nat_k uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.B
	if nat_n&(1<<0) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 1)
			w, sizes = BuiltinTuple3PairBoxedIntLongInternalWriteTL2(w, sizes, &item.B)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.C
	if len(item.C) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 2)
			w, sizes = BuiltinTupleIntInternalWriteTL2(w, sizes, &item.C, nat_n)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *Replace11ElemLong) WriteTL2(w []byte, ctx *basictl.TL2WriteContext, nat_n uint32, nat_k uint32) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0], nat_n, nat_k)
	w, _ = item.InternalWriteTL2(w, sizes, nat_n, nat_k)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *Replace11ElemLong) InternalReadTL2(r []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.B
	if block&(1<<1) != 0 {
		if nat_n&(1<<0) != 0 {
			if currentR, err = BuiltinTuple3PairBoxedIntLongInternalReadTL2(currentR, &item.B); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "B" + "is presented but depending bit is absent")
		}
	} else {
		BuiltinTuple3PairBoxedIntLongReset(&item.B)
	}

	// read item.C
	if block&(1<<2) != 0 {
		if currentR, err = BuiltinTupleIntInternalReadTL2(currentR, &item.C, nat_n); err != nil {
			return currentR, err
		}
	} else {
		item.C = item.C[:0]
	}

	return r, nil
}

func (item *Replace11ElemLong) ReadTL2(r []byte, ctx *basictl.TL2ReadContext, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	return item.InternalReadTL2(r, nat_n, nat_k)
}
