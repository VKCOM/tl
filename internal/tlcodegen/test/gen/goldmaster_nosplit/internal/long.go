// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTupleLongFillRandom(rg *basictl.RandGenerator, vec *[]int64, nat_n uint32) {
	rg.IncreaseDepth()
	*vec = make([]int64, nat_n)
	for i := range *vec {
		(*vec)[i] = basictl.RandomLong(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTupleLongRead(w []byte, vec *[]int64, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]int64, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = basictl.LongRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleLongWrite(w []byte, vec []int64, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]int64", len(vec), nat_n)
	}
	for _, elem := range vec {
		w = basictl.LongWrite(w, elem)
	}
	return w, nil
}

func BuiltinTupleLongCalculateLayout(sizes []int, vec *[]int64) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		currentSize += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {

		currentSize += 8
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTupleLongInternalWriteTL2(w []byte, sizes []int, vec *[]int64) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w = basictl.LongWrite(w, elem)
	}
	return w, sizes
}

func BuiltinTupleLongInternalReadTL2(r []byte, vec *[]int64) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([]int64, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		if currentR, err = basictl.LongRead(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}
	return r, nil
}
func BuiltinTupleLongReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[]int64, nat_n uint32) error {
	isTL2 := tctx != nil && tctx.IsTL2
	if isTL2 {
		nat_n = uint32(len(*vec))
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]int64, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int64", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				if isTL2 {
					var newValue int64
					*vec = append(*vec, newValue)
					*vec = (*vec)[:cap(*vec)]
					nat_n = uint32(len(*vec))
				} else {
					return ErrorInvalidJSON("[]int64", "array is longer than expected")
				}
			}
			if err := Json2ReadInt64(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int64", "expected json array's end")
		}
	}
	if isTL2 {
		*vec = (*vec)[:index]
	} else {
		if uint32(index) != nat_n {
			return ErrorWrongSequenceLength("[]int64", index, nat_n)
		}
	}
	return nil
}

func BuiltinTupleLongWriteJSON(w []byte, vec []int64, nat_n uint32) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTupleLongWriteJSONOpt(&tctx, w, vec, nat_n)
}
func BuiltinTupleLongWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec []int64, nat_n uint32) (_ []byte, err error) {
	if tctx != nil && tctx.IsTL2 {
		nat_n = uint32(len(vec))
	}
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]int64", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt64(w, elem)
	}
	return append(w, ']'), nil
}

type Long int64

func (Long) TLName() string { return "long" }
func (Long) TLTag() uint32  { return 0x22076cba }

func (item *Long) Reset() {
	ptr := (*int64)(item)
	*ptr = 0
}

func (item *Long) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*int64)(item)
	*ptr = basictl.RandomLong(rg)
}

func (item *Long) Read(w []byte) (_ []byte, err error) {
	ptr := (*int64)(item)
	return basictl.LongRead(w, ptr)
}

func (item *Long) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Long) Write(w []byte) []byte {
	ptr := (*int64)(item)
	return basictl.LongWrite(w, *ptr)
}

func (item *Long) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x22076cba); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Long) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Long) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x22076cba)
	return item.Write(w)
}

func (item Long) String() string {
	return string(item.WriteJSON(nil))
}
func (item *Long) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *Long) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	ptr := (*int64)(item)
	if err := Json2ReadInt64(in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Long) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *Long) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}

func (item *Long) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*int64)(item)
	w = basictl.JSONWriteInt64(w, *ptr)
	return w
}
func (item *Long) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Long) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("long", err.Error())
	}
	return nil
}

func (item *Long) CalculateLayout(sizes []int) []int {

	return sizes
}

func (item *Long) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*int64)(item)
	w = basictl.LongWrite(w, *ptr)
	return w, sizes
}

func (item *Long) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *Long) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*int64)(item)
	if r, err = basictl.LongRead(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *Long) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
