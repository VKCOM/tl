// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple3InnerBoxedReset(vec *[3]Inner) {
	for i := range *vec {
		(*vec)[i].Reset()
	}
}

func BuiltinTuple3InnerBoxedFillRandom(rg *basictl.RandGenerator, vec *[3]Inner, nat_t uint32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i].FillRandom(rg, nat_t)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3InnerBoxedRead(w []byte, vec *[3]Inner, nat_t uint32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w, nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3InnerBoxedWrite(w []byte, vec *[3]Inner, nat_t uint32) []byte {
	for _, elem := range *vec {
		w = elem.WriteBoxed(w, nat_t)
	}
	return w
}

func BuiltinTuple3InnerBoxedReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[3]Inner, nat_t uint32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]Inner", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]Inner", index+1, 3)
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in, nat_t); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]Inner", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]Inner", index+1, 3)
	}
	return nil
}

func BuiltinTuple3InnerBoxedWriteJSON(w []byte, vec *[3]Inner, nat_t uint32) []byte {
	return BuiltinTuple3InnerBoxedWriteJSONOpt(true, false, w, vec, nat_t)
}
func BuiltinTuple3InnerBoxedWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[3]Inner, nat_t uint32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w, nat_t)
	}
	return append(w, ']')
}

func BuiltinTupleTuple3InnerBoxedFillRandom(rg *basictl.RandGenerator, vec *[][3]Inner, nat_n uint32, nat_t uint32) {
	rg.IncreaseDepth()
	*vec = make([][3]Inner, nat_n)
	for i := range *vec {
		BuiltinTuple3InnerBoxedFillRandom(rg, &(*vec)[i], nat_t)
	}
	rg.DecreaseDepth()
}

func BuiltinTupleTuple3InnerBoxedRead(w []byte, vec *[][3]Inner, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([][3]Inner, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = BuiltinTuple3InnerBoxedRead(w, &(*vec)[i], nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTuple3InnerBoxedWrite(w []byte, vec [][3]Inner, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[][3]Inner", len(vec), nat_n)
	}
	for _, elem := range vec {
		w = BuiltinTuple3InnerBoxedWrite(w, &elem, nat_t)
	}
	return w, nil
}

func BuiltinTupleTuple3InnerBoxedReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[][3]Inner, nat_n uint32, nat_t uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([][3]Inner, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[][3]Inner", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[][3]Inner", "array is longer than expected")
			}
			if err := BuiltinTuple3InnerBoxedReadJSON(legacyTypeNames, in, &(*vec)[index], nat_t); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[][3]Inner", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[][3]Inner", index, nat_n)
	}
	return nil
}

func BuiltinTupleTuple3InnerBoxedWriteJSON(w []byte, vec [][3]Inner, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	return BuiltinTupleTuple3InnerBoxedWriteJSONOpt(true, false, w, vec, nat_n, nat_t)
}
func BuiltinTupleTuple3InnerBoxedWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec [][3]Inner, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[][3]Inner", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = BuiltinTuple3InnerBoxedWriteJSONOpt(newTypeNames, short, w, &elem, nat_t)
	}
	return append(w, ']'), nil
}

type Inner struct {
	A int32
}

func (Inner) TLName() string { return "inner" }
func (Inner) TLTag() uint32  { return 0x3b53db83 }

func (item *Inner) Reset() {
	item.A = 0
}

func (item *Inner) FillRandom(rg *basictl.RandGenerator, nat_X uint32) {
	item.A = basictl.RandomInt(rg)
}

func (item *Inner) Read(w []byte, nat_X uint32) (_ []byte, err error) {
	return basictl.IntRead(w, &item.A)
}

// This method is general version of Write, use it instead!
func (item *Inner) WriteGeneral(w []byte, nat_X uint32) (_ []byte, err error) {
	return item.Write(w, nat_X), nil
}

func (item *Inner) Write(w []byte, nat_X uint32) []byte {
	w = basictl.IntWrite(w, item.A)
	return w
}

func (item *Inner) ReadBoxed(w []byte, nat_X uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3b53db83); err != nil {
		return w, err
	}
	return item.Read(w, nat_X)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Inner) WriteBoxedGeneral(w []byte, nat_X uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_X), nil
}

func (item *Inner) WriteBoxed(w []byte, nat_X uint32) []byte {
	w = basictl.NatWrite(w, 0x3b53db83)
	return item.Write(w, nat_X)
}

func (item *Inner) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_X uint32) error {
	var propAPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("inner", "a")
				}
				if err := Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			default:
				return ErrorInvalidJSONExcessElement("inner", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Inner) WriteJSONGeneral(w []byte, nat_X uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_X), nil
}

func (item *Inner) WriteJSON(w []byte, nat_X uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_X)
}
func (item *Inner) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_X uint32) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	return append(w, '}')
}
