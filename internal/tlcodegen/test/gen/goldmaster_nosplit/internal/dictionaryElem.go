// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"sort"

	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorDictionaryElemIntPairIntIntReset(m map[int32]PairIntInt) {
	for k := range m {
		delete(m, k)
	}
}

func BuiltinVectorDictionaryElemIntPairIntIntFillRandom(rg *basictl.RandGenerator, m *map[int32]PairIntInt) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*m = make(map[int32]PairIntInt, l)
	for i := 0; i < int(l); i++ {
		var elem DictionaryElemIntPairIntInt
		elem.FillRandom(rg)
		(*m)[elem.Key] = elem.Value
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemIntPairIntIntRead(w []byte, m *map[int32]PairIntInt) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	var data map[int32]PairIntInt
	if *m == nil {
		if l == 0 {
			return w, nil
		}
		data = make(map[int32]PairIntInt, l)
		*m = data
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	for i := 0; i < int(l); i++ {
		var elem DictionaryElemIntPairIntInt
		if w, err = elem.Read(w); err != nil {
			return w, err
		}
		data[elem.Key] = elem.Value
	}
	return w, nil
}

func BuiltinVectorDictionaryElemIntPairIntIntWrite(w []byte, m map[int32]PairIntInt) []byte {
	w = basictl.NatWrite(w, uint32(len(m)))
	if len(m) == 0 {
		return w
	}
	keys := make([]int32, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})
	for _, key := range keys {
		val := m[key]
		elem := DictionaryElemIntPairIntInt{Key: key, Value: val}
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryElemIntPairIntIntCalculateLayout(sizes []int, m *map[int32]PairIntInt) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*m) != 0 {
		sizes[sizePosition] += basictl.TL2CalculateSize(len(*m))
	}

	keys := make([]int32, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})

	for i := 0; i < len(keys); i++ {
		elem := DictionaryElemIntPairIntInt{Key: keys[i], Value: (*m)[keys[i]]}
		currentPosition := len(sizes)
		sizes = elem.CalculateLayout(sizes)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinVectorDictionaryElemIntPairIntIntInternalWriteTL2(w []byte, sizes []int, m *map[int32]PairIntInt) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*m) != 0 {
		w = basictl.TL2WriteSize(w, len(*m))
	}

	keys := make([]int32, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})

	for i := 0; i < len(keys); i++ {
		elem := DictionaryElemIntPairIntInt{Key: keys[i], Value: (*m)[keys[i]]}
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemIntPairIntIntInternalReadTL2(r []byte, m *map[int32]PairIntInt) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if *m == nil {
		*m = make(map[int32]PairIntInt)
	}

	for key := range *m {
		delete(*m, key)
	}

	data := *m

	for i := 0; i < elementCount; i++ {
		elem := DictionaryElemIntPairIntInt{}
		if currentR, err = elem.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
		data[elem.Key] = elem.Value
	}
	return r, nil
}

func BuiltinVectorDictionaryElemIntPairIntIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, m *map[int32]PairIntInt) error {
	var data map[int32]PairIntInt
	if *m == nil {
		*m = make(map[int32]PairIntInt, 0)
		data = *m
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return ErrorInvalidJSON("map[int32]PairIntInt", "expected json object")
		}
		for !in.IsDelim('}') {
			keyBytes := []byte(in.UnsafeFieldName(false))
			in.WantColon()
			if !in.Ok() {
				return ErrorInvalidJSON("map[int32]PairIntInt", "expected correct json value in key")
			}
			in2 := basictl.JsonLexer{Data: keyBytes}
			var key int32
			if err := Json2ReadInt32(&in2, &key); err != nil {
				return err
			}
			var value PairIntInt
			if err := value.ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			data[key] = value
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return ErrorInvalidJSON("map[int32]PairIntInt", "expected json object's end")
		}
	}
	return nil
}

func BuiltinVectorDictionaryElemIntPairIntIntWriteJSON(w []byte, m map[int32]PairIntInt) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorDictionaryElemIntPairIntIntWriteJSONOpt(&tctx, w, m)
}
func BuiltinVectorDictionaryElemIntPairIntIntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, m map[int32]PairIntInt) []byte {
	keys := make([]int32, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})
	w = append(w, '{')
	for _, key := range keys {
		value := m[key]
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"`...)
		w = basictl.JSONWriteInt32(w, key)
		w = append(w, `":`...)
		w = value.WriteJSONOpt(tctx, w)
	}
	return append(w, '}')
}

func BuiltinVectorDictionaryElemLongPairIntIntReset(m map[int64]PairIntInt) {
	for k := range m {
		delete(m, k)
	}
}

func BuiltinVectorDictionaryElemLongPairIntIntFillRandom(rg *basictl.RandGenerator, m *map[int64]PairIntInt) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*m = make(map[int64]PairIntInt, l)
	for i := 0; i < int(l); i++ {
		var elem DictionaryElemLongPairIntInt
		elem.FillRandom(rg)
		(*m)[elem.Key] = elem.Value
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemLongPairIntIntRead(w []byte, m *map[int64]PairIntInt) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	var data map[int64]PairIntInt
	if *m == nil {
		if l == 0 {
			return w, nil
		}
		data = make(map[int64]PairIntInt, l)
		*m = data
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	for i := 0; i < int(l); i++ {
		var elem DictionaryElemLongPairIntInt
		if w, err = elem.Read(w); err != nil {
			return w, err
		}
		data[elem.Key] = elem.Value
	}
	return w, nil
}

func BuiltinVectorDictionaryElemLongPairIntIntWrite(w []byte, m map[int64]PairIntInt) []byte {
	w = basictl.NatWrite(w, uint32(len(m)))
	if len(m) == 0 {
		return w
	}
	keys := make([]int64, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})
	for _, key := range keys {
		val := m[key]
		elem := DictionaryElemLongPairIntInt{Key: key, Value: val}
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryElemLongPairIntIntCalculateLayout(sizes []int, m *map[int64]PairIntInt) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*m) != 0 {
		sizes[sizePosition] += basictl.TL2CalculateSize(len(*m))
	}

	keys := make([]int64, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})

	for i := 0; i < len(keys); i++ {
		elem := DictionaryElemLongPairIntInt{Key: keys[i], Value: (*m)[keys[i]]}
		currentPosition := len(sizes)
		sizes = elem.CalculateLayout(sizes)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinVectorDictionaryElemLongPairIntIntInternalWriteTL2(w []byte, sizes []int, m *map[int64]PairIntInt) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*m) != 0 {
		w = basictl.TL2WriteSize(w, len(*m))
	}

	keys := make([]int64, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})

	for i := 0; i < len(keys); i++ {
		elem := DictionaryElemLongPairIntInt{Key: keys[i], Value: (*m)[keys[i]]}
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemLongPairIntIntInternalReadTL2(r []byte, m *map[int64]PairIntInt) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if *m == nil {
		*m = make(map[int64]PairIntInt)
	}

	for key := range *m {
		delete(*m, key)
	}

	data := *m

	for i := 0; i < elementCount; i++ {
		elem := DictionaryElemLongPairIntInt{}
		if currentR, err = elem.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
		data[elem.Key] = elem.Value
	}
	return r, nil
}

func BuiltinVectorDictionaryElemLongPairIntIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, m *map[int64]PairIntInt) error {
	var data map[int64]PairIntInt
	if *m == nil {
		*m = make(map[int64]PairIntInt, 0)
		data = *m
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return ErrorInvalidJSON("map[int64]PairIntInt", "expected json object")
		}
		for !in.IsDelim('}') {
			keyBytes := []byte(in.UnsafeFieldName(false))
			in.WantColon()
			if !in.Ok() {
				return ErrorInvalidJSON("map[int64]PairIntInt", "expected correct json value in key")
			}
			in2 := basictl.JsonLexer{Data: keyBytes}
			var key int64
			if err := Json2ReadInt64(&in2, &key); err != nil {
				return err
			}
			var value PairIntInt
			if err := value.ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			data[key] = value
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return ErrorInvalidJSON("map[int64]PairIntInt", "expected json object's end")
		}
	}
	return nil
}

func BuiltinVectorDictionaryElemLongPairIntIntWriteJSON(w []byte, m map[int64]PairIntInt) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorDictionaryElemLongPairIntIntWriteJSONOpt(&tctx, w, m)
}
func BuiltinVectorDictionaryElemLongPairIntIntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, m map[int64]PairIntInt) []byte {
	keys := make([]int64, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})
	w = append(w, '{')
	for _, key := range keys {
		value := m[key]
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"`...)
		w = basictl.JSONWriteInt64(w, key)
		w = append(w, `":`...)
		w = value.WriteJSONOpt(tctx, w)
	}
	return append(w, '}')
}

func BuiltinVectorDictionaryElemPairBoolAColorIntFillRandom(rg *basictl.RandGenerator, vec *[]DictionaryElemPairBoolAColorInt) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]DictionaryElemPairBoolAColorInt, l)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemPairBoolAColorIntRead(w []byte, vec *[]DictionaryElemPairBoolAColorInt) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]DictionaryElemPairBoolAColorInt, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorDictionaryElemPairBoolAColorIntWrite(w []byte, vec []DictionaryElemPairBoolAColorInt) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryElemPairBoolAColorIntCalculateLayout(sizes []int, vec *[]DictionaryElemPairBoolAColorInt) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		currentSize += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {
		currentPosition := len(sizes)
		elem := (*vec)[i]
		sizes = elem.CalculateLayout(sizes)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinVectorDictionaryElemPairBoolAColorIntInternalWriteTL2(w []byte, sizes []int, vec *[]DictionaryElemPairBoolAColorInt) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemPairBoolAColorIntInternalReadTL2(r []byte, vec *[]DictionaryElemPairBoolAColorInt) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([]DictionaryElemPairBoolAColorInt, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	}
	return r, nil
}

func BuiltinVectorDictionaryElemPairBoolAColorIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]DictionaryElemPairBoolAColorInt) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemPairBoolAColorInt", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue DictionaryElemPairBoolAColorInt
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemPairBoolAColorInt", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorDictionaryElemPairBoolAColorIntWriteJSON(w []byte, vec []DictionaryElemPairBoolAColorInt) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorDictionaryElemPairBoolAColorIntWriteJSONOpt(&tctx, w, vec)
}
func BuiltinVectorDictionaryElemPairBoolAColorIntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec []DictionaryElemPairBoolAColorInt) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(tctx, w)
	}
	return append(w, ']')
}

func BuiltinVectorDictionaryElemPairFloatDoubleIntFillRandom(rg *basictl.RandGenerator, vec *[]DictionaryElemPairFloatDoubleInt) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]DictionaryElemPairFloatDoubleInt, l)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemPairFloatDoubleIntRead(w []byte, vec *[]DictionaryElemPairFloatDoubleInt) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]DictionaryElemPairFloatDoubleInt, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorDictionaryElemPairFloatDoubleIntWrite(w []byte, vec []DictionaryElemPairFloatDoubleInt) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryElemPairFloatDoubleIntCalculateLayout(sizes []int, vec *[]DictionaryElemPairFloatDoubleInt) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		currentSize += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {
		currentPosition := len(sizes)
		elem := (*vec)[i]
		sizes = elem.CalculateLayout(sizes)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinVectorDictionaryElemPairFloatDoubleIntInternalWriteTL2(w []byte, sizes []int, vec *[]DictionaryElemPairFloatDoubleInt) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemPairFloatDoubleIntInternalReadTL2(r []byte, vec *[]DictionaryElemPairFloatDoubleInt) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([]DictionaryElemPairFloatDoubleInt, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	}
	return r, nil
}

func BuiltinVectorDictionaryElemPairFloatDoubleIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]DictionaryElemPairFloatDoubleInt) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemPairFloatDoubleInt", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue DictionaryElemPairFloatDoubleInt
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemPairFloatDoubleInt", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorDictionaryElemPairFloatDoubleIntWriteJSON(w []byte, vec []DictionaryElemPairFloatDoubleInt) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorDictionaryElemPairFloatDoubleIntWriteJSONOpt(&tctx, w, vec)
}
func BuiltinVectorDictionaryElemPairFloatDoubleIntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec []DictionaryElemPairFloatDoubleInt) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(tctx, w)
	}
	return append(w, ']')
}

func BuiltinVectorDictionaryElemPairIntIntIntFillRandom(rg *basictl.RandGenerator, vec *[]DictionaryElemPairIntIntInt) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]DictionaryElemPairIntIntInt, l)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemPairIntIntIntRead(w []byte, vec *[]DictionaryElemPairIntIntInt) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]DictionaryElemPairIntIntInt, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorDictionaryElemPairIntIntIntWrite(w []byte, vec []DictionaryElemPairIntIntInt) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryElemPairIntIntIntCalculateLayout(sizes []int, vec *[]DictionaryElemPairIntIntInt) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		currentSize += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {
		currentPosition := len(sizes)
		elem := (*vec)[i]
		sizes = elem.CalculateLayout(sizes)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinVectorDictionaryElemPairIntIntIntInternalWriteTL2(w []byte, sizes []int, vec *[]DictionaryElemPairIntIntInt) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemPairIntIntIntInternalReadTL2(r []byte, vec *[]DictionaryElemPairIntIntInt) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([]DictionaryElemPairIntIntInt, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	}
	return r, nil
}

func BuiltinVectorDictionaryElemPairIntIntIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]DictionaryElemPairIntIntInt) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemPairIntIntInt", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue DictionaryElemPairIntIntInt
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemPairIntIntInt", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorDictionaryElemPairIntIntIntWriteJSON(w []byte, vec []DictionaryElemPairIntIntInt) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorDictionaryElemPairIntIntIntWriteJSONOpt(&tctx, w, vec)
}
func BuiltinVectorDictionaryElemPairIntIntIntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec []DictionaryElemPairIntIntInt) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(tctx, w)
	}
	return append(w, ']')
}

func BuiltinVectorDictionaryElemPairIntPairMultiPointStringIntFillRandom(rg *basictl.RandGenerator, vec *[]DictionaryElemPairIntPairMultiPointStringInt) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]DictionaryElemPairIntPairMultiPointStringInt, l)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemPairIntPairMultiPointStringIntRead(w []byte, vec *[]DictionaryElemPairIntPairMultiPointStringInt) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]DictionaryElemPairIntPairMultiPointStringInt, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorDictionaryElemPairIntPairMultiPointStringIntWrite(w []byte, vec []DictionaryElemPairIntPairMultiPointStringInt) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryElemPairIntPairMultiPointStringIntCalculateLayout(sizes []int, vec *[]DictionaryElemPairIntPairMultiPointStringInt) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		currentSize += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {
		currentPosition := len(sizes)
		elem := (*vec)[i]
		sizes = elem.CalculateLayout(sizes)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinVectorDictionaryElemPairIntPairMultiPointStringIntInternalWriteTL2(w []byte, sizes []int, vec *[]DictionaryElemPairIntPairMultiPointStringInt) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemPairIntPairMultiPointStringIntInternalReadTL2(r []byte, vec *[]DictionaryElemPairIntPairMultiPointStringInt) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([]DictionaryElemPairIntPairMultiPointStringInt, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	}
	return r, nil
}

func BuiltinVectorDictionaryElemPairIntPairMultiPointStringIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]DictionaryElemPairIntPairMultiPointStringInt) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemPairIntPairMultiPointStringInt", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue DictionaryElemPairIntPairMultiPointStringInt
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemPairIntPairMultiPointStringInt", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorDictionaryElemPairIntPairMultiPointStringIntWriteJSON(w []byte, vec []DictionaryElemPairIntPairMultiPointStringInt) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorDictionaryElemPairIntPairMultiPointStringIntWriteJSONOpt(&tctx, w, vec)
}
func BuiltinVectorDictionaryElemPairIntPairMultiPointStringIntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec []DictionaryElemPairIntPairMultiPointStringInt) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(tctx, w)
	}
	return append(w, ']')
}

func BuiltinVectorDictionaryElemStringPairIntIntReset(m map[string]PairIntInt) {
	for k := range m {
		delete(m, k)
	}
}

func BuiltinVectorDictionaryElemStringPairIntIntFillRandom(rg *basictl.RandGenerator, m *map[string]PairIntInt) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*m = make(map[string]PairIntInt, l)
	for i := 0; i < int(l); i++ {
		var elem DictionaryElemStringPairIntInt
		elem.FillRandom(rg)
		(*m)[elem.Key] = elem.Value
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemStringPairIntIntRead(w []byte, m *map[string]PairIntInt) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	var data map[string]PairIntInt
	if *m == nil {
		if l == 0 {
			return w, nil
		}
		data = make(map[string]PairIntInt, l)
		*m = data
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	for i := 0; i < int(l); i++ {
		var elem DictionaryElemStringPairIntInt
		if w, err = elem.Read(w); err != nil {
			return w, err
		}
		data[elem.Key] = elem.Value
	}
	return w, nil
}

func BuiltinVectorDictionaryElemStringPairIntIntWrite(w []byte, m map[string]PairIntInt) []byte {
	w = basictl.NatWrite(w, uint32(len(m)))
	if len(m) == 0 {
		return w
	}
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	for _, key := range keys {
		val := m[key]
		elem := DictionaryElemStringPairIntInt{Key: key, Value: val}
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryElemStringPairIntIntCalculateLayout(sizes []int, m *map[string]PairIntInt) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*m) != 0 {
		sizes[sizePosition] += basictl.TL2CalculateSize(len(*m))
	}

	keys := make([]string, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	for i := 0; i < len(keys); i++ {
		elem := DictionaryElemStringPairIntInt{Key: keys[i], Value: (*m)[keys[i]]}
		currentPosition := len(sizes)
		sizes = elem.CalculateLayout(sizes)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinVectorDictionaryElemStringPairIntIntInternalWriteTL2(w []byte, sizes []int, m *map[string]PairIntInt) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*m) != 0 {
		w = basictl.TL2WriteSize(w, len(*m))
	}

	keys := make([]string, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	for i := 0; i < len(keys); i++ {
		elem := DictionaryElemStringPairIntInt{Key: keys[i], Value: (*m)[keys[i]]}
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemStringPairIntIntInternalReadTL2(r []byte, m *map[string]PairIntInt) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if *m == nil {
		*m = make(map[string]PairIntInt)
	}

	for key := range *m {
		delete(*m, key)
	}

	data := *m

	for i := 0; i < elementCount; i++ {
		elem := DictionaryElemStringPairIntInt{}
		if currentR, err = elem.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
		data[elem.Key] = elem.Value
	}
	return r, nil
}

func BuiltinVectorDictionaryElemStringPairIntIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, m *map[string]PairIntInt) error {
	var data map[string]PairIntInt
	if *m == nil {
		*m = make(map[string]PairIntInt, 0)
		data = *m
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return ErrorInvalidJSON("map[string]PairIntInt", "expected json object")
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			var value PairIntInt
			if err := value.ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			data[key] = value
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return ErrorInvalidJSON("map[string]PairIntInt", "expected json object's end")
		}
	}
	return nil
}

func BuiltinVectorDictionaryElemStringPairIntIntWriteJSON(w []byte, m map[string]PairIntInt) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorDictionaryElemStringPairIntIntWriteJSONOpt(&tctx, w, m)
}
func BuiltinVectorDictionaryElemStringPairIntIntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, m map[string]PairIntInt) []byte {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	w = append(w, '{')
	for _, key := range keys {
		value := m[key]
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteString(w, key)
		w = append(w, ':')
		w = value.WriteJSONOpt(tctx, w)
	}
	return append(w, '}')
}

func BuiltinVectorDictionaryElemTupleStringIntFillRandom(rg *basictl.RandGenerator, vec *[]DictionaryElemTupleStringInt, nat_t uint32) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]DictionaryElemTupleStringInt, l)
	for i := range *vec {
		(*vec)[i].FillRandom(rg, nat_t)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemTupleStringIntRead(w []byte, vec *[]DictionaryElemTupleStringInt, nat_t uint32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]DictionaryElemTupleStringInt, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w, nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorDictionaryElemTupleStringIntWrite(w []byte, vec []DictionaryElemTupleStringInt, nat_t uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w, nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorDictionaryElemTupleStringIntCalculateLayout(sizes []int, vec *[]DictionaryElemTupleStringInt, nat_t uint32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		currentSize += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {
		currentPosition := len(sizes)
		elem := (*vec)[i]
		sizes = elem.CalculateLayout(sizes, nat_t)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinVectorDictionaryElemTupleStringIntInternalWriteTL2(w []byte, sizes []int, vec *[]DictionaryElemTupleStringInt, nat_t uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w, sizes = elem.InternalWriteTL2(w, sizes, nat_t)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemTupleStringIntInternalReadTL2(r []byte, vec *[]DictionaryElemTupleStringInt, nat_t uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([]DictionaryElemTupleStringInt, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR, nat_t); err != nil {
			return currentR, err
		}
	}
	return r, nil
}

func BuiltinVectorDictionaryElemTupleStringIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]DictionaryElemTupleStringInt, nat_t uint32) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemTupleStringInt", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue DictionaryElemTupleStringInt
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in, nat_t); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemTupleStringInt", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorDictionaryElemTupleStringIntWriteJSON(w []byte, vec []DictionaryElemTupleStringInt, nat_t uint32) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorDictionaryElemTupleStringIntWriteJSONOpt(&tctx, w, vec, nat_t)
}
func BuiltinVectorDictionaryElemTupleStringIntWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec []DictionaryElemTupleStringInt, nat_t uint32) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(tctx, w, nat_t); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

type DictionaryElemIntPairIntInt struct {
	Key   int32
	Value PairIntInt
}

func (DictionaryElemIntPairIntInt) TLName() string { return "dictionaryElem" }
func (DictionaryElemIntPairIntInt) TLTag() uint32  { return 0xa69d7dd0 }

func (item *DictionaryElemIntPairIntInt) Reset() {
	item.Key = 0
	item.Value.Reset()
}

func (item *DictionaryElemIntPairIntInt) FillRandom(rg *basictl.RandGenerator) {
	item.Key = basictl.RandomInt(rg)
	item.Value.FillRandom(rg)
}

func (item *DictionaryElemIntPairIntInt) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Key); err != nil {
		return w, err
	}
	return item.Value.Read(w)
}

func (item *DictionaryElemIntPairIntInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryElemIntPairIntInt) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.Key)
	w = item.Value.Write(w)
	return w
}

func (item *DictionaryElemIntPairIntInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa69d7dd0); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *DictionaryElemIntPairIntInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryElemIntPairIntInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa69d7dd0)
	return item.Write(w)
}

func (item DictionaryElemIntPairIntInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryElemIntPairIntInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "key")
				}
				if err := Json2ReadInt32(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "value")
				}
				if err := item.Value.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryElem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = 0
	}
	if !propValuePresented {
		item.Value.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemIntPairIntInt) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *DictionaryElemIntPairIntInt) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *DictionaryElemIntPairIntInt) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteInt32(w, item.Key)
	if (item.Key != 0) == false {
		w = w[:backupIndexKey]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = item.Value.WriteJSONOpt(tctx, w)
	return append(w, '}')
}

func (item *DictionaryElemIntPairIntInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryElemIntPairIntInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionaryElem", err.Error())
	}
	return nil
}

func (item *DictionaryElemIntPairIntInt) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	if item.Key != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.Value
	currentPosition := len(sizes)
	sizes = item.Value.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryElemIntPairIntInt) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	if item.Key != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, item.Key)
		}
	}
	// write item.Value
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = item.Value.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryElemIntPairIntInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryElemIntPairIntInt) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.Key); err != nil {
			return currentR, err
		}
	} else {
		item.Key = 0
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = item.Value.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.Value.Reset()
	}

	return r, nil
}

func (item *DictionaryElemIntPairIntInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionaryElemLongPairIntInt struct {
	Key   int64
	Value PairIntInt
}

func (DictionaryElemLongPairIntInt) TLName() string { return "dictionaryElem" }
func (DictionaryElemLongPairIntInt) TLTag() uint32  { return 0xa69d7dd0 }

func (item *DictionaryElemLongPairIntInt) Reset() {
	item.Key = 0
	item.Value.Reset()
}

func (item *DictionaryElemLongPairIntInt) FillRandom(rg *basictl.RandGenerator) {
	item.Key = basictl.RandomLong(rg)
	item.Value.FillRandom(rg)
}

func (item *DictionaryElemLongPairIntInt) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.Key); err != nil {
		return w, err
	}
	return item.Value.Read(w)
}

func (item *DictionaryElemLongPairIntInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryElemLongPairIntInt) Write(w []byte) []byte {
	w = basictl.LongWrite(w, item.Key)
	w = item.Value.Write(w)
	return w
}

func (item *DictionaryElemLongPairIntInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa69d7dd0); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *DictionaryElemLongPairIntInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryElemLongPairIntInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa69d7dd0)
	return item.Write(w)
}

func (item DictionaryElemLongPairIntInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryElemLongPairIntInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "key")
				}
				if err := Json2ReadInt64(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "value")
				}
				if err := item.Value.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryElem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = 0
	}
	if !propValuePresented {
		item.Value.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemLongPairIntInt) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *DictionaryElemLongPairIntInt) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *DictionaryElemLongPairIntInt) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteInt64(w, item.Key)
	if (item.Key != 0) == false {
		w = w[:backupIndexKey]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = item.Value.WriteJSONOpt(tctx, w)
	return append(w, '}')
}

func (item *DictionaryElemLongPairIntInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryElemLongPairIntInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionaryElem", err.Error())
	}
	return nil
}

func (item *DictionaryElemLongPairIntInt) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	if item.Key != 0 {

		lastUsedByte = 1
		currentSize += 8
	}

	// calculate layout for item.Value
	currentPosition := len(sizes)
	sizes = item.Value.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryElemLongPairIntInt) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	if item.Key != 0 {
		serializedSize += 8
		if 8 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.LongWrite(w, item.Key)
		}
	}
	// write item.Value
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = item.Value.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryElemLongPairIntInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryElemLongPairIntInt) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = basictl.LongRead(currentR, &item.Key); err != nil {
			return currentR, err
		}
	} else {
		item.Key = 0
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = item.Value.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.Value.Reset()
	}

	return r, nil
}

func (item *DictionaryElemLongPairIntInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionaryElemPairBoolAColorInt struct {
	Key   PairBoolAColor
	Value int32
}

func (DictionaryElemPairBoolAColorInt) TLName() string { return "dictionaryElem" }
func (DictionaryElemPairBoolAColorInt) TLTag() uint32  { return 0xa69d7dd0 }

func (item *DictionaryElemPairBoolAColorInt) Reset() {
	item.Key.Reset()
	item.Value = 0
}

func (item *DictionaryElemPairBoolAColorInt) FillRandom(rg *basictl.RandGenerator) {
	item.Key.FillRandom(rg)
	item.Value = basictl.RandomInt(rg)
}

func (item *DictionaryElemPairBoolAColorInt) Read(w []byte) (_ []byte, err error) {
	if w, err = item.Key.Read(w); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Value)
}

func (item *DictionaryElemPairBoolAColorInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryElemPairBoolAColorInt) Write(w []byte) []byte {
	w = item.Key.Write(w)
	w = basictl.IntWrite(w, item.Value)
	return w
}

func (item *DictionaryElemPairBoolAColorInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa69d7dd0); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *DictionaryElemPairBoolAColorInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryElemPairBoolAColorInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa69d7dd0)
	return item.Write(w)
}

func (item DictionaryElemPairBoolAColorInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryElemPairBoolAColorInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "key")
				}
				if err := item.Key.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "value")
				}
				if err := Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryElem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key.Reset()
	}
	if !propValuePresented {
		item.Value = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemPairBoolAColorInt) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *DictionaryElemPairBoolAColorInt) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *DictionaryElemPairBoolAColorInt) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = item.Key.WriteJSONOpt(tctx, w)
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *DictionaryElemPairBoolAColorInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryElemPairBoolAColorInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionaryElem", err.Error())
	}
	return nil
}

func (item *DictionaryElemPairBoolAColorInt) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	currentPosition := len(sizes)
	sizes = item.Key.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.Value
	if item.Value != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryElemPairBoolAColorInt) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.Key.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.Value
	if item.Value != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.IntWrite(w, item.Value)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryElemPairBoolAColorInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryElemPairBoolAColorInt) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = item.Key.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.Key.Reset()
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.Value); err != nil {
			return currentR, err
		}
	} else {
		item.Value = 0
	}

	return r, nil
}

func (item *DictionaryElemPairBoolAColorInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionaryElemPairFloatDoubleInt struct {
	Key   PairFloatDouble
	Value int32
}

func (DictionaryElemPairFloatDoubleInt) TLName() string { return "dictionaryElem" }
func (DictionaryElemPairFloatDoubleInt) TLTag() uint32  { return 0xa69d7dd0 }

func (item *DictionaryElemPairFloatDoubleInt) Reset() {
	item.Key.Reset()
	item.Value = 0
}

func (item *DictionaryElemPairFloatDoubleInt) FillRandom(rg *basictl.RandGenerator) {
	item.Key.FillRandom(rg)
	item.Value = basictl.RandomInt(rg)
}

func (item *DictionaryElemPairFloatDoubleInt) Read(w []byte) (_ []byte, err error) {
	if w, err = item.Key.Read(w); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Value)
}

func (item *DictionaryElemPairFloatDoubleInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryElemPairFloatDoubleInt) Write(w []byte) []byte {
	w = item.Key.Write(w)
	w = basictl.IntWrite(w, item.Value)
	return w
}

func (item *DictionaryElemPairFloatDoubleInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa69d7dd0); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *DictionaryElemPairFloatDoubleInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryElemPairFloatDoubleInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa69d7dd0)
	return item.Write(w)
}

func (item DictionaryElemPairFloatDoubleInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryElemPairFloatDoubleInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "key")
				}
				if err := item.Key.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "value")
				}
				if err := Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryElem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key.Reset()
	}
	if !propValuePresented {
		item.Value = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemPairFloatDoubleInt) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *DictionaryElemPairFloatDoubleInt) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *DictionaryElemPairFloatDoubleInt) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = item.Key.WriteJSONOpt(tctx, w)
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *DictionaryElemPairFloatDoubleInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryElemPairFloatDoubleInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionaryElem", err.Error())
	}
	return nil
}

func (item *DictionaryElemPairFloatDoubleInt) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	currentPosition := len(sizes)
	sizes = item.Key.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.Value
	if item.Value != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryElemPairFloatDoubleInt) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.Key.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.Value
	if item.Value != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.IntWrite(w, item.Value)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryElemPairFloatDoubleInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryElemPairFloatDoubleInt) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = item.Key.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.Key.Reset()
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.Value); err != nil {
			return currentR, err
		}
	} else {
		item.Value = 0
	}

	return r, nil
}

func (item *DictionaryElemPairFloatDoubleInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionaryElemPairIntIntInt struct {
	Key   PairIntInt
	Value int32
}

func (DictionaryElemPairIntIntInt) TLName() string { return "dictionaryElem" }
func (DictionaryElemPairIntIntInt) TLTag() uint32  { return 0xa69d7dd0 }

func (item *DictionaryElemPairIntIntInt) Reset() {
	item.Key.Reset()
	item.Value = 0
}

func (item *DictionaryElemPairIntIntInt) FillRandom(rg *basictl.RandGenerator) {
	item.Key.FillRandom(rg)
	item.Value = basictl.RandomInt(rg)
}

func (item *DictionaryElemPairIntIntInt) Read(w []byte) (_ []byte, err error) {
	if w, err = item.Key.Read(w); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Value)
}

func (item *DictionaryElemPairIntIntInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryElemPairIntIntInt) Write(w []byte) []byte {
	w = item.Key.Write(w)
	w = basictl.IntWrite(w, item.Value)
	return w
}

func (item *DictionaryElemPairIntIntInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa69d7dd0); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *DictionaryElemPairIntIntInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryElemPairIntIntInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa69d7dd0)
	return item.Write(w)
}

func (item DictionaryElemPairIntIntInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryElemPairIntIntInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "key")
				}
				if err := item.Key.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "value")
				}
				if err := Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryElem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key.Reset()
	}
	if !propValuePresented {
		item.Value = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemPairIntIntInt) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *DictionaryElemPairIntIntInt) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *DictionaryElemPairIntIntInt) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = item.Key.WriteJSONOpt(tctx, w)
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *DictionaryElemPairIntIntInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryElemPairIntIntInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionaryElem", err.Error())
	}
	return nil
}

func (item *DictionaryElemPairIntIntInt) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	currentPosition := len(sizes)
	sizes = item.Key.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.Value
	if item.Value != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryElemPairIntIntInt) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.Key.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.Value
	if item.Value != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.IntWrite(w, item.Value)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryElemPairIntIntInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryElemPairIntIntInt) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = item.Key.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.Key.Reset()
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.Value); err != nil {
			return currentR, err
		}
	} else {
		item.Value = 0
	}

	return r, nil
}

func (item *DictionaryElemPairIntIntInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionaryElemPairIntPairMultiPointStringInt struct {
	Key   PairIntPairMultiPointString
	Value int32
}

func (DictionaryElemPairIntPairMultiPointStringInt) TLName() string { return "dictionaryElem" }
func (DictionaryElemPairIntPairMultiPointStringInt) TLTag() uint32  { return 0xa69d7dd0 }

func (item *DictionaryElemPairIntPairMultiPointStringInt) Reset() {
	item.Key.Reset()
	item.Value = 0
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) FillRandom(rg *basictl.RandGenerator) {
	item.Key.FillRandom(rg)
	item.Value = basictl.RandomInt(rg)
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) Read(w []byte) (_ []byte, err error) {
	if w, err = item.Key.Read(w); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Value)
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) Write(w []byte) []byte {
	w = item.Key.Write(w)
	w = basictl.IntWrite(w, item.Value)
	return w
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa69d7dd0); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa69d7dd0)
	return item.Write(w)
}

func (item DictionaryElemPairIntPairMultiPointStringInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "key")
				}
				if err := item.Key.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "value")
				}
				if err := Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryElem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key.Reset()
	}
	if !propValuePresented {
		item.Value = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemPairIntPairMultiPointStringInt) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *DictionaryElemPairIntPairMultiPointStringInt) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = item.Key.WriteJSONOpt(tctx, w)
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionaryElem", err.Error())
	}
	return nil
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	currentPosition := len(sizes)
	sizes = item.Key.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.Value
	if item.Value != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.Key.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.Value
	if item.Value != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.IntWrite(w, item.Value)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = item.Key.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.Key.Reset()
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.Value); err != nil {
			return currentR, err
		}
	} else {
		item.Value = 0
	}

	return r, nil
}

func (item *DictionaryElemPairIntPairMultiPointStringInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionaryElemStringPairIntInt struct {
	Key   string
	Value PairIntInt
}

func (DictionaryElemStringPairIntInt) TLName() string { return "dictionaryElem" }
func (DictionaryElemStringPairIntInt) TLTag() uint32  { return 0xa69d7dd0 }

func (item *DictionaryElemStringPairIntInt) Reset() {
	item.Key = ""
	item.Value.Reset()
}

func (item *DictionaryElemStringPairIntInt) FillRandom(rg *basictl.RandGenerator) {
	item.Key = basictl.RandomString(rg)
	item.Value.FillRandom(rg)
}

func (item *DictionaryElemStringPairIntInt) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.Key); err != nil {
		return w, err
	}
	return item.Value.Read(w)
}

func (item *DictionaryElemStringPairIntInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryElemStringPairIntInt) Write(w []byte) []byte {
	w = basictl.StringWrite(w, item.Key)
	w = item.Value.Write(w)
	return w
}

func (item *DictionaryElemStringPairIntInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa69d7dd0); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *DictionaryElemStringPairIntInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryElemStringPairIntInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa69d7dd0)
	return item.Write(w)
}

func (item DictionaryElemStringPairIntInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryElemStringPairIntInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "key")
				}
				if err := Json2ReadString(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "value")
				}
				if err := item.Value.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryElem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = ""
	}
	if !propValuePresented {
		item.Value.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemStringPairIntInt) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *DictionaryElemStringPairIntInt) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *DictionaryElemStringPairIntInt) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteString(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = item.Value.WriteJSONOpt(tctx, w)
	return append(w, '}')
}

func (item *DictionaryElemStringPairIntInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryElemStringPairIntInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionaryElem", err.Error())
	}
	return nil
}

func (item *DictionaryElemStringPairIntInt) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	if len(item.Key) != 0 {

		if len(item.Key) != 0 {
			lastUsedByte = 1
			currentSize += len(item.Key)
			currentSize += basictl.TL2CalculateSize(len(item.Key))
		}
	}

	// calculate layout for item.Value
	currentPosition := len(sizes)
	sizes = item.Value.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryElemStringPairIntInt) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	if len(item.Key) != 0 {
		serializedSize += len(item.Key)
		if len(item.Key) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.Key))
			currentBlock |= (1 << 1)
			w = basictl.StringWriteTL2(w, item.Key)
		}
	}
	// write item.Value
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = item.Value.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryElemStringPairIntInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryElemStringPairIntInt) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = basictl.StringReadTL2(currentR, &item.Key); err != nil {
			return currentR, err
		}
	} else {
		item.Key = ""
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = item.Value.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.Value.Reset()
	}

	return r, nil
}

func (item *DictionaryElemStringPairIntInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionaryElemTupleStringInt struct {
	Key   []string
	Value int32
}

func (DictionaryElemTupleStringInt) TLName() string { return "dictionaryElem" }
func (DictionaryElemTupleStringInt) TLTag() uint32  { return 0xa69d7dd0 }

func (item *DictionaryElemTupleStringInt) Reset() {
	item.Key = item.Key[:0]
	item.Value = 0
}

func (item *DictionaryElemTupleStringInt) FillRandom(rg *basictl.RandGenerator, nat_k uint32) {
	BuiltinTupleStringFillRandom(rg, &item.Key, nat_k)
	item.Value = basictl.RandomInt(rg)
}

func (item *DictionaryElemTupleStringInt) Read(w []byte, nat_k uint32) (_ []byte, err error) {
	if w, err = BuiltinTupleStringRead(w, &item.Key, nat_k); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Value)
}

func (item *DictionaryElemTupleStringInt) WriteGeneral(w []byte, nat_k uint32) (_ []byte, err error) {
	return item.Write(w, nat_k)
}

func (item *DictionaryElemTupleStringInt) Write(w []byte, nat_k uint32) (_ []byte, err error) {
	if w, err = BuiltinTupleStringWrite(w, item.Key, nat_k); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.Value)
	return w, nil
}

func (item *DictionaryElemTupleStringInt) ReadBoxed(w []byte, nat_k uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa69d7dd0); err != nil {
		return w, err
	}
	return item.Read(w, nat_k)
}

func (item *DictionaryElemTupleStringInt) WriteBoxedGeneral(w []byte, nat_k uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_k)
}

func (item *DictionaryElemTupleStringInt) WriteBoxed(w []byte, nat_k uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xa69d7dd0)
	return item.Write(w, nat_k)
}

func (item *DictionaryElemTupleStringInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_k uint32) error {
	var rawKey []byte
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if rawKey != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "key")
				}
				rawKey = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElem", "value")
				}
				if err := Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryElem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propValuePresented {
		item.Value = 0
	}
	var inKeyPointer *basictl.JsonLexer
	inKey := basictl.JsonLexer{Data: rawKey}
	if rawKey != nil {
		inKeyPointer = &inKey
	}
	if err := BuiltinTupleStringReadJSON(legacyTypeNames, inKeyPointer, &item.Key, nat_k); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemTupleStringInt) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte, nat_k uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w, nat_k)
}

func (item *DictionaryElemTupleStringInt) WriteJSON(w []byte, nat_k uint32) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w, nat_k)
}
func (item *DictionaryElemTupleStringInt) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_k uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	if w, err = BuiltinTupleStringWriteJSONOpt(tctx, w, item.Key, nat_k); err != nil {
		return w, err
	}
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}'), nil
}

func (item *DictionaryElemTupleStringInt) CalculateLayout(sizes []int, nat_k uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	currentPosition := len(sizes)
	if len(item.Key) != 0 {
		sizes = BuiltinTupleStringCalculateLayout(sizes, &item.Key, nat_k)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.Value
	if item.Value != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryElemTupleStringInt) InternalWriteTL2(w []byte, sizes []int, nat_k uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	if len(item.Key) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 1)
			w, sizes = BuiltinTupleStringInternalWriteTL2(w, sizes, &item.Key, nat_k)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.Value
	if item.Value != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.IntWrite(w, item.Value)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryElemTupleStringInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext, nat_k uint32) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0], nat_k)
	w, _ = item.InternalWriteTL2(w, sizes, nat_k)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryElemTupleStringInt) InternalReadTL2(r []byte, nat_k uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = BuiltinTupleStringInternalReadTL2(currentR, &item.Key, nat_k); err != nil {
			return currentR, err
		}
	} else {
		item.Key = item.Key[:0]
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.Value); err != nil {
			return currentR, err
		}
	} else {
		item.Value = 0
	}

	return r, nil
}

func (item *DictionaryElemTupleStringInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext, nat_k uint32) (_ []byte, err error) {
	return item.InternalReadTL2(r, nat_k)
}
