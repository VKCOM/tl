// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"sort"

	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorDictionaryFieldStringReset(m map[string]string) {
	for k := range m {
		delete(m, k)
	}
}

func BuiltinVectorDictionaryFieldStringFillRandom(rg *basictl.RandGenerator, m *map[string]string) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*m = make(map[string]string, l)
	for i := 0; i < int(l); i++ {
		var elem DictionaryFieldString
		elem.FillRandom(rg)
		(*m)[elem.Key] = elem.Value
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryFieldStringRead(w []byte, m *map[string]string) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	var data map[string]string
	if *m == nil {
		if l == 0 {
			return w, nil
		}
		data = make(map[string]string, l)
		*m = data
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	for i := 0; i < int(l); i++ {
		var elem DictionaryFieldString
		if w, err = elem.Read(w); err != nil {
			return w, err
		}
		data[elem.Key] = elem.Value
	}
	return w, nil
}

func BuiltinVectorDictionaryFieldStringWrite(w []byte, m map[string]string) []byte {
	w = basictl.NatWrite(w, uint32(len(m)))
	if len(m) == 0 {
		return w
	}
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	for _, key := range keys {
		val := m[key]
		elem := DictionaryFieldString{Key: key, Value: val}
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryFieldStringCalculateLayout(sizes []int, m *map[string]string) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*m) != 0 {
		sizes[sizePosition] += basictl.TL2CalculateSize(len(*m))
	}

	keys := make([]string, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	for i := 0; i < len(keys); i++ {
		elem := DictionaryFieldString{Key: keys[i], Value: (*m)[keys[i]]}
		currentPosition := len(sizes)
		sizes = elem.CalculateLayout(sizes)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinVectorDictionaryFieldStringInternalWriteTL2(w []byte, sizes []int, m *map[string]string) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*m) != 0 {
		w = basictl.TL2WriteSize(w, len(*m))
	}

	keys := make([]string, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	for i := 0; i < len(keys); i++ {
		elem := DictionaryFieldString{Key: keys[i], Value: (*m)[keys[i]]}
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryFieldStringInternalReadTL2(r []byte, m *map[string]string) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if *m == nil {
		*m = make(map[string]string)
	}

	for key := range *m {
		delete(*m, key)
	}

	data := *m

	for i := 0; i < elementCount; i++ {
		elem := DictionaryFieldString{}
		if currentR, err = elem.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
		data[elem.Key] = elem.Value
	}
	return r, nil
}

func BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, m *map[string]string) error {
	var data map[string]string
	if *m == nil {
		*m = make(map[string]string, 0)
		data = *m
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return ErrorInvalidJSON("map[string]string", "expected json object")
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			var value string
			if err := Json2ReadString(in, &value); err != nil {
				return err
			}
			data[key] = value
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return ErrorInvalidJSON("map[string]string", "expected json object's end")
		}
	}
	return nil
}

func BuiltinVectorDictionaryFieldStringWriteJSON(w []byte, m map[string]string) []byte {
	return BuiltinVectorDictionaryFieldStringWriteJSONOpt(true, false, w, m)
}
func BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames bool, short bool, w []byte, m map[string]string) []byte {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	w = append(w, '{')
	for _, key := range keys {
		value := m[key]
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteString(w, key)
		w = append(w, ':')
		w = basictl.JSONWriteString(w, value)
	}
	return append(w, '}')
}

func BuiltinVectorDictionaryFieldStringBytesFillRandom(rg *basictl.RandGenerator, vec *[]DictionaryFieldStringBytes) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]DictionaryFieldStringBytes, l)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinVectorDictionaryFieldStringBytesRead(w []byte, vec *[]DictionaryFieldStringBytes) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]DictionaryFieldStringBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorDictionaryFieldStringBytesWrite(w []byte, vec []DictionaryFieldStringBytes) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryFieldStringBytesCalculateLayout(sizes []int, vec *[]DictionaryFieldStringBytes) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		sizes[sizePosition] += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {
		currentPosition := len(sizes)
		elem := (*vec)[i]
		sizes = elem.CalculateLayout(sizes)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinVectorDictionaryFieldStringBytesInternalWriteTL2(w []byte, sizes []int, vec *[]DictionaryFieldStringBytes) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinVectorDictionaryFieldStringBytesInternalReadTL2(r []byte, vec *[]DictionaryFieldStringBytes) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([]DictionaryFieldStringBytes, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		elem := (*vec)[i]
		if currentR, err = elem.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	}
	return r, nil
}

func BuiltinVectorDictionaryFieldStringBytesReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]DictionaryFieldStringBytes) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryFieldStringBytes", "expected json object")
		}
		for ; !in.IsDelim('}'); index++ {
			if len(*vec) <= index {
				var newValue DictionaryFieldStringBytes
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			(*vec)[index].Key = append((*vec)[index].Key[:0], in.UnsafeFieldName(true)...)
			in.WantColon()
			if err := Json2ReadStringBytes(in, &(*vec)[index].Value); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryFieldStringBytes", "expected json object's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorDictionaryFieldStringBytesWriteJSON(w []byte, vec []DictionaryFieldStringBytes) []byte {
	return BuiltinVectorDictionaryFieldStringBytesWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorDictionaryFieldStringBytesWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []DictionaryFieldStringBytes) []byte {
	w = append(w, '{')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteStringBytes(w, elem.Key)
		w = append(w, ':')
		w = basictl.JSONWriteStringBytes(w, elem.Value)
	}
	return append(w, '}')
}

func BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReset(m map[string]UsefulServiceUserEntityPaymentItem) {
	for k := range m {
		delete(m, k)
	}
}

func BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedFillRandom(rg *basictl.RandGenerator, m *map[string]UsefulServiceUserEntityPaymentItem, nat_t uint32) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*m = make(map[string]UsefulServiceUserEntityPaymentItem, l)
	for i := 0; i < int(l); i++ {
		var elem DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed
		elem.FillRandom(rg, nat_t)
		(*m)[elem.Key] = elem.Value
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(w []byte, m *map[string]UsefulServiceUserEntityPaymentItem, nat_t uint32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	var data map[string]UsefulServiceUserEntityPaymentItem
	if *m == nil {
		if l == 0 {
			return w, nil
		}
		data = make(map[string]UsefulServiceUserEntityPaymentItem, l)
		*m = data
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	for i := 0; i < int(l); i++ {
		var elem DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed
		if w, err = elem.Read(w, nat_t); err != nil {
			return w, err
		}
		data[elem.Key] = elem.Value
	}
	return w, nil
}

func BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(w []byte, m map[string]UsefulServiceUserEntityPaymentItem, nat_t uint32) []byte {
	w = basictl.NatWrite(w, uint32(len(m)))
	if len(m) == 0 {
		return w
	}
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	for _, key := range keys {
		val := m[key]
		elem := DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed{Key: key, Value: val}
		w = elem.Write(w, nat_t)
	}
	return w
}

func BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedCalculateLayout(sizes []int, m *map[string]UsefulServiceUserEntityPaymentItem, nat_t uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*m) != 0 {
		sizes[sizePosition] += basictl.TL2CalculateSize(len(*m))
	}

	keys := make([]string, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	for i := 0; i < len(keys); i++ {
		elem := DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed{Key: keys[i], Value: (*m)[keys[i]]}
		currentPosition := len(sizes)
		sizes = elem.CalculateLayout(sizes, nat_t)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedInternalWriteTL2(w []byte, sizes []int, m *map[string]UsefulServiceUserEntityPaymentItem, nat_t uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*m) != 0 {
		w = basictl.TL2WriteSize(w, len(*m))
	}

	keys := make([]string, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	for i := 0; i < len(keys); i++ {
		elem := DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed{Key: keys[i], Value: (*m)[keys[i]]}
		w, sizes = elem.InternalWriteTL2(w, sizes, nat_t)
	}
	return w, sizes
}

func BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedInternalReadTL2(r []byte, m *map[string]UsefulServiceUserEntityPaymentItem, nat_t uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if *m == nil {
		*m = make(map[string]UsefulServiceUserEntityPaymentItem)
	}

	for key := range *m {
		delete(*m, key)
	}

	data := *m

	for i := 0; i < elementCount; i++ {
		elem := DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed{}
		if currentR, err = elem.InternalReadTL2(currentR, nat_t); err != nil {
			return currentR, err
		}
		data[elem.Key] = elem.Value
	}
	return r, nil
}

func BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, m *map[string]UsefulServiceUserEntityPaymentItem, nat_t uint32) error {
	var data map[string]UsefulServiceUserEntityPaymentItem
	if *m == nil {
		*m = make(map[string]UsefulServiceUserEntityPaymentItem, 0)
		data = *m
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return ErrorInvalidJSON("map[string]UsefulServiceUserEntityPaymentItem", "expected json object")
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			var value UsefulServiceUserEntityPaymentItem
			if err := value.ReadJSON(legacyTypeNames, in, nat_t); err != nil {
				return err
			}
			data[key] = value
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return ErrorInvalidJSON("map[string]UsefulServiceUserEntityPaymentItem", "expected json object's end")
		}
	}
	return nil
}

func BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSON(w []byte, m map[string]UsefulServiceUserEntityPaymentItem, nat_t uint32) []byte {
	return BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSONOpt(true, false, w, m, nat_t)
}
func BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSONOpt(newTypeNames bool, short bool, w []byte, m map[string]UsefulServiceUserEntityPaymentItem, nat_t uint32) []byte {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	w = append(w, '{')
	for _, key := range keys {
		value := m[key]
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteString(w, key)
		w = append(w, ':')
		w = value.WriteJSONOpt(newTypeNames, short, w, nat_t)
	}
	return append(w, '}')
}

type DictionaryFieldString struct {
	Key   string
	Value string
}

func (DictionaryFieldString) TLName() string { return "dictionaryField" }
func (DictionaryFieldString) TLTag() uint32  { return 0x239c1b62 }

func (item *DictionaryFieldString) Reset() {
	item.Key = ""
	item.Value = ""
}

func (item *DictionaryFieldString) FillRandom(rg *basictl.RandGenerator) {
	item.Key = basictl.RandomString(rg)
	item.Value = basictl.RandomString(rg)
}

func (item *DictionaryFieldString) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.Key); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.Value)
}

func (item *DictionaryFieldString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryFieldString) Write(w []byte) []byte {
	w = basictl.StringWrite(w, item.Key)
	w = basictl.StringWrite(w, item.Value)
	return w
}

func (item *DictionaryFieldString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x239c1b62); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *DictionaryFieldString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryFieldString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x239c1b62)
	return item.Write(w)
}

func (item DictionaryFieldString) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryFieldString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryField", "key")
				}
				if err := Json2ReadString(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryField", "value")
				}
				if err := Json2ReadString(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryField", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = ""
	}
	if !propValuePresented {
		item.Value = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryFieldString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *DictionaryFieldString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *DictionaryFieldString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteString(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteString(w, item.Value)
	if (len(item.Value) != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *DictionaryFieldString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryFieldString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionaryField", err.Error())
	}
	return nil
}

func (item *DictionaryFieldString) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	if len(item.Key) != 0 {

		if len(item.Key) != 0 {
			lastUsedByte = 1
			currentSize += len(item.Key)
			currentSize += basictl.TL2CalculateSize(len(item.Key))
		}
	}

	// calculate layout for item.Value
	if len(item.Value) != 0 {

		if len(item.Value) != 0 {
			lastUsedByte = 1
			currentSize += len(item.Value)
			currentSize += basictl.TL2CalculateSize(len(item.Value))
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryFieldString) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	if len(item.Key) != 0 {
		serializedSize += len(item.Key)
		if len(item.Key) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.Key))
			currentBlock |= (1 << 1)
			w = basictl.StringWriteTL2(w, item.Key)
		}
	}
	// write item.Value
	if len(item.Value) != 0 {
		serializedSize += len(item.Value)
		if len(item.Value) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.Value))
			currentBlock |= (1 << 2)
			w = basictl.StringWriteTL2(w, item.Value)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryFieldString) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryFieldString) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = basictl.StringReadTL2(currentR, &item.Key); err != nil {
			return currentR, err
		}
	} else {
		item.Key = ""
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = basictl.StringReadTL2(currentR, &item.Value); err != nil {
			return currentR, err
		}
	} else {
		item.Value = ""
	}

	return r, nil
}

func (item *DictionaryFieldString) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionaryFieldStringBytes struct {
	Key   []byte
	Value []byte
}

func (DictionaryFieldStringBytes) TLName() string { return "dictionaryField" }
func (DictionaryFieldStringBytes) TLTag() uint32  { return 0x239c1b62 }

func (item *DictionaryFieldStringBytes) Reset() {
	item.Key = item.Key[:0]
	item.Value = item.Value[:0]
}

func (item *DictionaryFieldStringBytes) FillRandom(rg *basictl.RandGenerator) {
	item.Key = basictl.RandomStringBytes(rg)
	item.Value = basictl.RandomStringBytes(rg)
}

func (item *DictionaryFieldStringBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringReadBytes(w, &item.Key); err != nil {
		return w, err
	}
	return basictl.StringReadBytes(w, &item.Value)
}

func (item *DictionaryFieldStringBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryFieldStringBytes) Write(w []byte) []byte {
	w = basictl.StringWriteBytes(w, item.Key)
	w = basictl.StringWriteBytes(w, item.Value)
	return w
}

func (item *DictionaryFieldStringBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x239c1b62); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *DictionaryFieldStringBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryFieldStringBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x239c1b62)
	return item.Write(w)
}

func (item DictionaryFieldStringBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryFieldStringBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryField", "key")
				}
				if err := Json2ReadStringBytes(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryField", "value")
				}
				if err := Json2ReadStringBytes(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryField", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = item.Key[:0]
	}
	if !propValuePresented {
		item.Value = item.Value[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryFieldStringBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *DictionaryFieldStringBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *DictionaryFieldStringBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteStringBytes(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteStringBytes(w, item.Value)
	if (len(item.Value) != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *DictionaryFieldStringBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryFieldStringBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionaryField", err.Error())
	}
	return nil
}

func (item *DictionaryFieldStringBytes) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	if len(item.Key) != 0 {

		if len(item.Key) != 0 {
			lastUsedByte = 1
			currentSize += len(item.Key)
			currentSize += basictl.TL2CalculateSize(len(item.Key))
		}
	}

	// calculate layout for item.Value
	if len(item.Value) != 0 {

		if len(item.Value) != 0 {
			lastUsedByte = 1
			currentSize += len(item.Value)
			currentSize += basictl.TL2CalculateSize(len(item.Value))
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryFieldStringBytes) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	if len(item.Key) != 0 {
		serializedSize += len(item.Key)
		if len(item.Key) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.Key))
			currentBlock |= (1 << 1)
			w = basictl.StringBytesWriteTL2(w, item.Key)
		}
	}
	// write item.Value
	if len(item.Value) != 0 {
		serializedSize += len(item.Value)
		if len(item.Value) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.Value))
			currentBlock |= (1 << 2)
			w = basictl.StringBytesWriteTL2(w, item.Value)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryFieldStringBytes) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryFieldStringBytes) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = basictl.StringReadBytesTL2(currentR, &item.Key); err != nil {
			return currentR, err
		}
	} else {
		item.Key = item.Key[:0]
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = basictl.StringReadBytesTL2(currentR, &item.Value); err != nil {
			return currentR, err
		}
	} else {
		item.Value = item.Value[:0]
	}

	return r, nil
}

func (item *DictionaryFieldStringBytes) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed struct {
	Key   string
	Value UsefulServiceUserEntityPaymentItem
}

func (DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) TLName() string {
	return "dictionaryField"
}
func (DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) TLTag() uint32 { return 0x239c1b62 }

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) Reset() {
	item.Key = ""
	item.Value.Reset()
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) FillRandom(rg *basictl.RandGenerator, nat_t uint32) {
	item.Key = basictl.RandomString(rg)
	item.Value.FillRandom(rg, nat_t)
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.Key); err != nil {
		return w, err
	}
	return item.Value.ReadBoxed(w, nat_t)
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.Write(w, nat_t), nil
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) Write(w []byte, nat_t uint32) []byte {
	w = basictl.StringWrite(w, item.Key)
	w = item.Value.WriteBoxed(w, nat_t)
	return w
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x239c1b62); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteBoxed(w []byte, nat_t uint32) []byte {
	w = basictl.NatWrite(w, 0x239c1b62)
	return item.Write(w, nat_t)
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	var propKeyPresented bool
	var rawValue []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryField", "key")
				}
				if err := Json2ReadString(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if rawValue != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryField", "value")
				}
				rawValue = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("dictionaryField", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = ""
	}
	var inValuePointer *basictl.JsonLexer
	inValue := basictl.JsonLexer{Data: rawValue}
	if rawValue != nil {
		inValuePointer = &inValue
	}
	if err := item.Value.ReadJSON(legacyTypeNames, inValuePointer, nat_t); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_t), nil
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}
func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteString(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = item.Value.WriteJSONOpt(newTypeNames, short, w, nat_t)
	return append(w, '}')
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) CalculateLayout(sizes []int, nat_t uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	if len(item.Key) != 0 {

		if len(item.Key) != 0 {
			lastUsedByte = 1
			currentSize += len(item.Key)
			currentSize += basictl.TL2CalculateSize(len(item.Key))
		}
	}

	// calculate layout for item.Value
	currentPosition := len(sizes)
	sizes = item.Value.CalculateLayout(sizes, nat_t)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) InternalWriteTL2(w []byte, sizes []int, nat_t uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	if len(item.Key) != 0 {
		serializedSize += len(item.Key)
		if len(item.Key) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.Key))
			currentBlock |= (1 << 1)
			w = basictl.StringWriteTL2(w, item.Key)
		}
	}
	// write item.Value
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = item.Value.InternalWriteTL2(w, sizes, nat_t)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) InternalReadTL2(r []byte, nat_t uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = basictl.StringReadTL2(currentR, &item.Key); err != nil {
			return currentR, err
		}
	} else {
		item.Key = ""
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if currentR, err = item.Value.InternalReadTL2(currentR, nat_t); err != nil {
			return currentR, err
		}
	} else {
		item.Value.Reset()
	}

	return r, nil
}
