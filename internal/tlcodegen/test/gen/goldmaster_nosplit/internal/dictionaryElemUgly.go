// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorDictionaryElemUglyIntStringFillRandom(rg *basictl.RandGenerator, vec *[]DictionaryElemUglyIntString, nat_t uint32) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]DictionaryElemUglyIntString, l)
	for i := range *vec {
		(*vec)[i].FillRandom(rg, nat_t)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemUglyIntStringRead(w []byte, vec *[]DictionaryElemUglyIntString, nat_t uint32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]DictionaryElemUglyIntString, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w, nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorDictionaryElemUglyIntStringWrite(w []byte, vec []DictionaryElemUglyIntString, nat_t uint32) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w, nat_t)
	}
	return w
}

func BuiltinVectorDictionaryElemUglyIntStringReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]DictionaryElemUglyIntString, nat_t uint32) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemUglyIntString", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue DictionaryElemUglyIntString
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in, nat_t); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]DictionaryElemUglyIntString", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorDictionaryElemUglyIntStringWriteJSON(w []byte, vec []DictionaryElemUglyIntString, nat_t uint32) []byte {
	return BuiltinVectorDictionaryElemUglyIntStringWriteJSONOpt(true, false, w, vec, nat_t)
}
func BuiltinVectorDictionaryElemUglyIntStringWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []DictionaryElemUglyIntString, nat_t uint32) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w, nat_t)
	}
	return append(w, ']')
}

type DictionaryElemUglyIntString struct {
	Key   int32  // Conditional: nat_f.0
	Value string // Conditional: nat_f.1
}

func (DictionaryElemUglyIntString) TLName() string { return "dictionaryElemUgly" }
func (DictionaryElemUglyIntString) TLTag() uint32  { return 0xe6790546 }

func (item *DictionaryElemUglyIntString) SetKey(v int32, nat_f *uint32) {
	item.Key = v
	if nat_f != nil {
		*nat_f |= 1 << 0
	}
}
func (item *DictionaryElemUglyIntString) ClearKey(nat_f *uint32) {
	item.Key = 0
	if nat_f != nil {
		*nat_f &^= 1 << 0
	}
}
func (item *DictionaryElemUglyIntString) IsSetKey(nat_f uint32) bool { return nat_f&(1<<0) != 0 }

func (item *DictionaryElemUglyIntString) SetValue(v string, nat_f *uint32) {
	item.Value = v
	if nat_f != nil {
		*nat_f |= 1 << 1
	}
}
func (item *DictionaryElemUglyIntString) ClearValue(nat_f *uint32) {
	item.Value = ""
	if nat_f != nil {
		*nat_f &^= 1 << 1
	}
}
func (item *DictionaryElemUglyIntString) IsSetValue(nat_f uint32) bool { return nat_f&(1<<1) != 0 }

func (item *DictionaryElemUglyIntString) Reset() {
	item.Key = 0
	item.Value = ""
}

func (item *DictionaryElemUglyIntString) FillRandom(rg *basictl.RandGenerator, nat_f uint32) {
	if nat_f&(1<<0) != 0 {
		item.Key = basictl.RandomInt(rg)
	} else {
		item.Key = 0
	}
	if nat_f&(1<<1) != 0 {
		item.Value = basictl.RandomString(rg)
	} else {
		item.Value = ""
	}
}

func (item *DictionaryElemUglyIntString) Read(w []byte, nat_f uint32) (_ []byte, err error) {
	if nat_f&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.Key); err != nil {
			return w, err
		}
	} else {
		item.Key = 0
	}
	if nat_f&(1<<1) != 0 {
		if w, err = basictl.StringRead(w, &item.Value); err != nil {
			return w, err
		}
	} else {
		item.Value = ""
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *DictionaryElemUglyIntString) WriteGeneral(w []byte, nat_f uint32) (_ []byte, err error) {
	return item.Write(w, nat_f), nil
}

func (item *DictionaryElemUglyIntString) Write(w []byte, nat_f uint32) []byte {
	if nat_f&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.Key)
	}
	if nat_f&(1<<1) != 0 {
		w = basictl.StringWrite(w, item.Value)
	}
	return w
}

func (item *DictionaryElemUglyIntString) ReadBoxed(w []byte, nat_f uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe6790546); err != nil {
		return w, err
	}
	return item.Read(w, nat_f)
}

// This method is general version of WriteBoxed, use it instead!
func (item *DictionaryElemUglyIntString) WriteBoxedGeneral(w []byte, nat_f uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_f), nil
}

func (item *DictionaryElemUglyIntString) WriteBoxed(w []byte, nat_f uint32) []byte {
	w = basictl.NatWrite(w, 0xe6790546)
	return item.Write(w, nat_f)
}

func (item *DictionaryElemUglyIntString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_f uint32) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElemUgly", "key")
				}
				if nat_f&(1<<0) == 0 {
					return ErrorInvalidJSON("dictionaryElemUgly", "field 'key' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := Json2ReadInt32(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElemUgly", "value")
				}
				if nat_f&(1<<1) == 0 {
					return ErrorInvalidJSON("dictionaryElemUgly", "field 'value' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := Json2ReadString(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryElemUgly", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = 0
	}
	if !propValuePresented {
		item.Value = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemUglyIntString) WriteJSONGeneral(w []byte, nat_f uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_f), nil
}

func (item *DictionaryElemUglyIntString) WriteJSON(w []byte, nat_f uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_f)
}
func (item *DictionaryElemUglyIntString) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_f uint32) []byte {
	w = append(w, '{')
	if nat_f&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"key":`...)
		w = basictl.JSONWriteInt32(w, item.Key)
	}
	if nat_f&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"value":`...)
		w = basictl.JSONWriteString(w, item.Value)
	}
	return append(w, '}')
}
