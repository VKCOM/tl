// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple3Int32Reset(vec *[3]Int32) {
	for i := range *vec {
		(*vec)[i].Reset()
	}
}

func BuiltinTuple3Int32FillRandom(rg *basictl.RandGenerator, vec *[3]Int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3Int32Read(w []byte, vec *[3]Int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3Int32Write(w []byte, vec *[3]Int32) []byte {
	for _, elem := range *vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinTuple3Int32CalculateLayout(sizes []int, vec *[3]Int32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 3 != 0 {
		currentSize += basictl.TL2CalculateSize(3)
	}

	for i := 0; i < 3; i++ {
		sizes = (*vec)[i].CalculateLayout(sizes)
		currentSize += 4
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple3Int32InternalWriteTL2(w []byte, sizes []int, vec *[3]Int32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 3 != 0 {
		w = basictl.TL2WriteSize(w, 3)
	}

	for i := 0; i < 3; i++ {
		w, sizes = (*vec)[i].InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinTuple3Int32InternalReadTL2(r []byte, vec *[3]Int32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 3 {
		lastIndex = 3
	}
	for i := 0; i < lastIndex; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 3; i++ {
		(*vec)[i].Reset()
	}

	return r, nil
}

func BuiltinTuple3Int32ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[3]Int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]Int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]Int32", index+1, 3)
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]Int32", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]Int32", index+1, 3)
	}
	return nil
}

func BuiltinTuple3Int32WriteJSON(w []byte, vec *[3]Int32) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTuple3Int32WriteJSONOpt(&tctx, w, vec)
}
func BuiltinTuple3Int32WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *[3]Int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(tctx, w)
	}
	return append(w, ']')
}

func BuiltinTuple3Int32BoxedReset(vec *[3]Int32) {
	for i := range *vec {
		(*vec)[i].Reset()
	}
}

func BuiltinTuple3Int32BoxedFillRandom(rg *basictl.RandGenerator, vec *[3]Int32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3Int32BoxedRead(w []byte, vec *[3]Int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3Int32BoxedWrite(w []byte, vec *[3]Int32) []byte {
	for _, elem := range *vec {
		w = elem.WriteBoxed(w)
	}
	return w
}

func BuiltinTuple3Int32BoxedCalculateLayout(sizes []int, vec *[3]Int32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 3 != 0 {
		currentSize += basictl.TL2CalculateSize(3)
	}

	for i := 0; i < 3; i++ {
		sizes = (*vec)[i].CalculateLayout(sizes)
		currentSize += 4
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple3Int32BoxedInternalWriteTL2(w []byte, sizes []int, vec *[3]Int32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 3 != 0 {
		w = basictl.TL2WriteSize(w, 3)
	}

	for i := 0; i < 3; i++ {
		w, sizes = (*vec)[i].InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinTuple3Int32BoxedInternalReadTL2(r []byte, vec *[3]Int32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 3 {
		lastIndex = 3
	}
	for i := 0; i < lastIndex; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 3; i++ {
		(*vec)[i].Reset()
	}

	return r, nil
}

func BuiltinTuple3Int32BoxedReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[3]Int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]Int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]Int32", index+1, 3)
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]Int32", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]Int32", index+1, 3)
	}
	return nil
}

func BuiltinTuple3Int32BoxedWriteJSON(w []byte, vec *[3]Int32) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTuple3Int32BoxedWriteJSONOpt(&tctx, w, vec)
}
func BuiltinTuple3Int32BoxedWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *[3]Int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(tctx, w)
	}
	return append(w, ']')
}

type Int32 int32

func (Int32) TLName() string { return "int32" }
func (Int32) TLTag() uint32  { return 0x7934e71f }

func (item *Int32) Reset() {
	ptr := (*int32)(item)
	*ptr = 0
}

func (item *Int32) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*int32)(item)
	*ptr = basictl.RandomInt(rg)
}

func (item *Int32) Read(w []byte) (_ []byte, err error) {
	ptr := (*int32)(item)
	return basictl.IntRead(w, ptr)
}

func (item *Int32) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Int32) Write(w []byte) []byte {
	ptr := (*int32)(item)
	return basictl.IntWrite(w, *ptr)
}

func (item *Int32) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x7934e71f); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Int32) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Int32) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x7934e71f)
	return item.Write(w)
}

func (item Int32) String() string {
	return string(item.WriteJSON(nil))
}
func (item *Int32) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*int32)(item)
	if err := Json2ReadInt32(in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Int32) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *Int32) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}

func (item *Int32) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*int32)(item)
	w = basictl.JSONWriteInt32(w, *ptr)
	return w
}
func (item *Int32) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Int32) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("int32", err.Error())
	}
	return nil
}

func (item *Int32) CalculateLayout(sizes []int) []int {

	return sizes
}

func (item *Int32) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*int32)(item)
	w = basictl.IntWrite(w, *ptr)
	return w, sizes
}

func (item *Int32) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *Int32) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*int32)(item)
	if r, err = basictl.IntRead(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *Int32) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
