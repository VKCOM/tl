// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"sort"

	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorDictionaryElemStrangeStringReset(m map[uint32]string) {
	for k := range m {
		delete(m, k)
	}
}

func BuiltinVectorDictionaryElemStrangeStringFillRandom(rg *basictl.RandGenerator, m *map[uint32]string) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*m = make(map[uint32]string, l)
	for i := 0; i < int(l); i++ {
		var elem DictionaryElemStrangeString
		elem.FillRandom(rg)
		(*m)[elem.Key] = elem.Value
	}
	rg.DecreaseDepth()
}
func BuiltinVectorDictionaryElemStrangeStringRead(w []byte, m *map[uint32]string) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	var data map[uint32]string
	if *m == nil {
		if l == 0 {
			return w, nil
		}
		data = make(map[uint32]string, l)
		*m = data
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	for i := 0; i < int(l); i++ {
		var elem DictionaryElemStrangeString
		if w, err = elem.Read(w); err != nil {
			return w, err
		}
		data[elem.Key] = elem.Value
	}
	return w, nil
}

func BuiltinVectorDictionaryElemStrangeStringWrite(w []byte, m map[uint32]string) []byte {
	w = basictl.NatWrite(w, uint32(len(m)))
	if len(m) == 0 {
		return w
	}
	keys := make([]uint32, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})
	for _, key := range keys {
		val := m[key]
		elem := DictionaryElemStrangeString{Key: key, Value: val}
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryElemStrangeStringCalculateLayout(sizes []int, m *map[uint32]string) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	keys := make([]uint32, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})

	for i := 0; i < len(keys); i++ {
		key := keys[i]

		sizes[sizePosition] += 4
		value := (*m)[key]

		sizes[sizePosition] += len(value)
		sizes[sizePosition] += basictl.TL2CalculateSize(len(value))
	}
	return sizes
}

func BuiltinVectorDictionaryElemStrangeStringInternalWriteTL2(w []byte, sizes []int, m *map[uint32]string) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	keys := make([]uint32, 0, len(*m))
	for k := range *m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})

	for i := 0; i < len(keys); i++ {
		key := keys[i]
		w = basictl.NatWrite(w, key)
		value := (*m)[key]
		w = basictl.StringWriteTL2(w, value)
	}
	return w, sizes
}

func BuiltinVectorDictionaryElemStrangeStringReadTL2(r []byte, m *map[uint32]string) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if *m == nil {
		*m = make(map[uint32]string)
	}

	for key := range *m {
		delete(*m, key)
	}

	data := *m

	for len(currentR) > 0 {
		var key uint32
		var value string
		if currentR, err = basictl.NatRead(currentR, &key); err != nil {
			return currentR, err
		}
		if currentR, err = basictl.StringReadTL2(currentR, &value); err != nil {
			return currentR, err
		}
		data[key] = value
	}
	return r, nil
}

func BuiltinVectorDictionaryElemStrangeStringReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, m *map[uint32]string) error {
	var data map[uint32]string
	if *m == nil {
		*m = make(map[uint32]string, 0)
		data = *m
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return ErrorInvalidJSON("map[uint32]string", "expected json object")
		}
		for !in.IsDelim('}') {
			keyBytes := []byte(in.UnsafeFieldName(false))
			in.WantColon()
			if !in.Ok() {
				return ErrorInvalidJSON("map[uint32]string", "expected correct json value in key")
			}
			in2 := basictl.JsonLexer{Data: keyBytes}
			var key uint32
			if err := Json2ReadUint32(&in2, &key); err != nil {
				return err
			}
			var value string
			if err := Json2ReadString(in, &value); err != nil {
				return err
			}
			data[key] = value
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return ErrorInvalidJSON("map[uint32]string", "expected json object's end")
		}
	}
	return nil
}

func BuiltinVectorDictionaryElemStrangeStringWriteJSON(w []byte, m map[uint32]string) []byte {
	return BuiltinVectorDictionaryElemStrangeStringWriteJSONOpt(true, false, w, m)
}
func BuiltinVectorDictionaryElemStrangeStringWriteJSONOpt(newTypeNames bool, short bool, w []byte, m map[uint32]string) []byte {
	keys := make([]uint32, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})
	w = append(w, '{')
	for _, key := range keys {
		value := m[key]
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"`...)
		w = basictl.JSONWriteUint32(w, key)
		w = append(w, `":`...)
		w = basictl.JSONWriteString(w, value)
	}
	return append(w, '}')
}

type DictionaryElemStrangeString struct {
	Key   uint32
	Value string // Conditional: item.Key.31
}

func (DictionaryElemStrangeString) TLName() string { return "dictionaryElemStrange" }
func (DictionaryElemStrangeString) TLTag() uint32  { return 0xe3b2385c }

func (item *DictionaryElemStrangeString) SetValue(v string) {
	item.Value = v
	item.Key |= 1 << 31
}
func (item *DictionaryElemStrangeString) ClearValue() {
	item.Value = ""
	item.Key &^= 1 << 31
}
func (item *DictionaryElemStrangeString) IsSetValue() bool { return item.Key&(1<<31) != 0 }

func (item *DictionaryElemStrangeString) Reset() {
	item.Key = 0
	item.Value = ""
}

func (item *DictionaryElemStrangeString) FillRandom(rg *basictl.RandGenerator) {
	var maskKey uint32
	maskKey = basictl.RandomUint(rg)
	item.Key = 0
	if maskKey&(1<<0) != 0 {
		item.Key |= (1 << 31)
	}
	if item.Key&(1<<31) != 0 {
		item.Value = basictl.RandomString(rg)
	} else {
		item.Value = ""
	}
}

func (item *DictionaryElemStrangeString) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.Key); err != nil {
		return w, err
	}
	if item.Key&(1<<31) != 0 {
		if w, err = basictl.StringRead(w, &item.Value); err != nil {
			return w, err
		}
	} else {
		item.Value = ""
	}
	return w, nil
}

func (item *DictionaryElemStrangeString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryElemStrangeString) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.Key)
	if item.Key&(1<<31) != 0 {
		w = basictl.StringWrite(w, item.Value)
	}
	return w
}

func (item *DictionaryElemStrangeString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe3b2385c); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *DictionaryElemStrangeString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryElemStrangeString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xe3b2385c)
	return item.Write(w)
}

func (item DictionaryElemStrangeString) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryElemStrangeString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElemStrange", "key")
				}
				if err := Json2ReadUint32(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("dictionaryElemStrange", "value")
				}
				if err := Json2ReadString(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("dictionaryElemStrange", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = 0
	}
	if !propValuePresented {
		item.Value = ""
	}
	if propValuePresented {
		item.Key |= 1 << 31
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryElemStrangeString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *DictionaryElemStrangeString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *DictionaryElemStrangeString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteUint32(w, item.Key)
	if (item.Key != 0) == false {
		w = w[:backupIndexKey]
	}
	if item.Key&(1<<31) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"value":`...)
		w = basictl.JSONWriteString(w, item.Value)
	}
	return append(w, '}')
}

func (item *DictionaryElemStrangeString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryElemStrangeString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("dictionaryElemStrange", err.Error())
	}
	return nil
}

func (item *DictionaryElemStrangeString) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Key
	if item.Key != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.Value
	if item.Key&(1<<31) != 0 {
		if len(item.Value) != 0 {

			if len(item.Value) != 0 {
				lastUsedByte = 1
				currentSize += len(item.Value)
				currentSize += basictl.TL2CalculateSize(len(item.Value))
			}
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *DictionaryElemStrangeString) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Key
	if item.Key != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.Key)
		}
	}
	// write item.Value
	if item.Key&(1<<31) != 0 {
		if len(item.Value) != 0 {
			serializedSize += len(item.Value)
			if len(item.Value) != 0 {
				serializedSize += basictl.TL2CalculateSize(len(item.Value))
				currentBlock |= (1 << 2)
				w = basictl.StringWriteTL2(w, item.Value)
			}
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *DictionaryElemStrangeString) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *DictionaryElemStrangeString) ReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var _skip int
		if currentR, err = basictl.TL2ReadSize(currentR, &_skip); err != nil {
			return currentR, err
		}
	}

	// read item.Key
	if block&(1<<1) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.Key); err != nil {
			return currentR, err
		}
	} else {
		item.Key = 0
	}

	// read item.Value
	if block&(1<<2) != 0 {
		if item.Key&(1<<31) != 0 {
			if currentR, err = basictl.StringReadTL2(currentR, &item.Value); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "Value" + "is presented but depending bit is absent")
		}
	} else {
		item.Value = ""
	}

	return r, nil
}
