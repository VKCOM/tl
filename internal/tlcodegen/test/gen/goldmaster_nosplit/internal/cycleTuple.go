// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple2CycleTupleReset(vec *[2]CycleTuple) {
	for i := range *vec {
		(*vec)[i].Reset()
	}
}

func BuiltinTuple2CycleTupleFillRandom(rg *basictl.RandGenerator, vec *[2]CycleTuple) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple2CycleTupleRead(w []byte, vec *[2]CycleTuple) (_ []byte, err error) {
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple2CycleTupleWrite(w []byte, vec *[2]CycleTuple) (_ []byte, err error) {
	for _, elem := range *vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple2CycleTupleReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[2]CycleTuple) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[2]CycleTuple", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 2 {
				return ErrorWrongSequenceLength("[2]CycleTuple", index+1, 2)
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[2]CycleTuple", "expected json array's end")
		}
	}
	if index != 2 {
		return ErrorWrongSequenceLength("[2]CycleTuple", index+1, 2)
	}
	return nil
}

func BuiltinTuple2CycleTupleWriteJSON(w []byte, vec *[2]CycleTuple) (_ []byte, err error) {
	return BuiltinTuple2CycleTupleWriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple2CycleTupleWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[2]CycleTuple) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

func BuiltinTupleCycleTupleFillRandom(rg *basictl.RandGenerator, vec *[]CycleTuple, nat_n uint32) {
	rg.IncreaseDepth()
	*vec = make([]CycleTuple, nat_n)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTupleCycleTupleRead(w []byte, vec *[]CycleTuple, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]CycleTuple, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleCycleTupleWrite(w []byte, vec []CycleTuple, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]CycleTuple", len(vec), nat_n)
	}
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleCycleTupleReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]CycleTuple, nat_n uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]CycleTuple, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]CycleTuple", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[]CycleTuple", "array is longer than expected")
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]CycleTuple", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[]CycleTuple", index, nat_n)
	}
	return nil
}

func BuiltinTupleCycleTupleWriteJSON(w []byte, vec []CycleTuple, nat_n uint32) (_ []byte, err error) {
	return BuiltinTupleCycleTupleWriteJSONOpt(true, false, w, vec, nat_n)
}
func BuiltinTupleCycleTupleWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []CycleTuple, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]CycleTuple", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

type CycleTuple struct {
	N uint32
	A *[2]CycleTuple // Conditional: item.N.0
	B []CycleTuple
	C [3]int32 // Conditional: item.N.2
}

func (CycleTuple) TLName() string { return "cycleTuple" }
func (CycleTuple) TLTag() uint32  { return 0xc867fae3 }

func (item *CycleTuple) SetA(v [2]CycleTuple) {
	if item.A == nil {
		var value [2]CycleTuple
		item.A = &value
	}
	*item.A = v
	item.N |= 1 << 0
}
func (item *CycleTuple) ClearA() {
	if item.A != nil {
		BuiltinTuple2CycleTupleReset(item.A)
	}
	item.N &^= 1 << 0
}
func (item *CycleTuple) IsSetA() bool { return item.N&(1<<0) != 0 }

func (item *CycleTuple) SetC(v [3]int32) {
	item.C = v
	item.N |= 1 << 2
}
func (item *CycleTuple) ClearC() {
	BuiltinTuple3IntReset(&item.C)
	item.N &^= 1 << 2
}
func (item *CycleTuple) IsSetC() bool { return item.N&(1<<2) != 0 }

func (item *CycleTuple) Reset() {
	item.N = 0
	if item.A != nil {
		BuiltinTuple2CycleTupleReset(item.A)
	}
	item.B = item.B[:0]
	BuiltinTuple3IntReset(&item.C)
}

func (item *CycleTuple) FillRandom(rg *basictl.RandGenerator) {
	var maskN uint32
	maskN = basictl.RandomUint(rg)
	maskN = rg.LimitValue(maskN)
	item.N = 0
	if maskN&(1<<0) != 0 {
		item.N |= (1 << 0)
	}
	if maskN&(1<<1) != 0 {
		item.N |= (1 << 2)
	}
	if item.N&(1<<0) != 0 {
		rg.IncreaseDepth()
		if item.A == nil {
			var value [2]CycleTuple
			item.A = &value
		}
		BuiltinTuple2CycleTupleFillRandom(rg, item.A)
		rg.DecreaseDepth()
	} else {
		if item.A != nil {
			BuiltinTuple2CycleTupleReset(item.A)
		}
	}
	BuiltinTupleCycleTupleFillRandom(rg, &item.B, item.N)
	if item.N&(1<<2) != 0 {
		BuiltinTuple3IntFillRandom(rg, &item.C)
	} else {
		BuiltinTuple3IntReset(&item.C)
	}
}

func (item *CycleTuple) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.N); err != nil {
		return w, err
	}
	if item.N&(1<<0) != 0 {
		if item.A == nil {
			var value [2]CycleTuple
			item.A = &value
		}
		if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
			return w, err
		}
		if w, err = BuiltinTuple2CycleTupleRead(w, item.A); err != nil {
			return w, err
		}
	} else {
		if item.A != nil {
			BuiltinTuple2CycleTupleReset(item.A)
		}
	}
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	if w, err = BuiltinTupleCycleTupleRead(w, &item.B, item.N); err != nil {
		return w, err
	}
	if item.N&(1<<2) != 0 {
		if w, err = BuiltinTuple3IntRead(w, &item.C); err != nil {
			return w, err
		}
	} else {
		BuiltinTuple3IntReset(&item.C)
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *CycleTuple) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *CycleTuple) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.N)
	if item.N&(1<<0) != 0 {
		w = basictl.NatWrite(w, 0x9770768a)
		if w, err = BuiltinTuple2CycleTupleWrite(w, item.A); err != nil {
			return w, err
		}
	}
	w = basictl.NatWrite(w, 0x9770768a)
	if w, err = BuiltinTupleCycleTupleWrite(w, item.B, item.N); err != nil {
		return w, err
	}
	if item.N&(1<<2) != 0 {
		w = BuiltinTuple3IntWrite(w, &item.C)
	}
	return w, nil
}

func (item *CycleTuple) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc867fae3); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *CycleTuple) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *CycleTuple) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xc867fae3)
	return item.Write(w)
}

func (item *CycleTuple) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *CycleTuple) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNPresented bool
	var propAPresented bool
	var rawB []byte
	var propCPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "n":
				if propNPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("cycleTuple", "n")
				}
				if err := Json2ReadUint32(in, &item.N); err != nil {
					return err
				}
				propNPresented = true
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("cycleTuple", "a")
				}
				if item.A == nil {
					var value [2]CycleTuple
					item.A = &value
				}
				if err := BuiltinTuple2CycleTupleReadJSON(legacyTypeNames, in, item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if rawB != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("cycleTuple", "b")
				}
				rawB = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "c":
				if propCPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("cycleTuple", "c")
				}
				if err := BuiltinTuple3IntReadJSON(legacyTypeNames, in, &item.C); err != nil {
					return err
				}
				propCPresented = true
			default:
				return ErrorInvalidJSONExcessElement("cycleTuple", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNPresented {
		item.N = 0
	}
	if !propAPresented {
		if item.A != nil {
			BuiltinTuple2CycleTupleReset(item.A)
		}
	}
	if !propCPresented {
		BuiltinTuple3IntReset(&item.C)
	}
	if propAPresented {
		item.N |= 1 << 0
	}
	if propCPresented {
		item.N |= 1 << 2
	}
	var inBPointer *basictl.JsonLexer
	inB := basictl.JsonLexer{Data: rawB}
	if rawB != nil {
		inBPointer = &inB
	}
	if err := BuiltinTupleCycleTupleReadJSON(legacyTypeNames, inBPointer, &item.B, item.N); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CycleTuple) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *CycleTuple) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *CycleTuple) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexN := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"n":`...)
	w = basictl.JSONWriteUint32(w, item.N)
	if (item.N != 0) == false {
		w = w[:backupIndexN]
	}
	if item.N&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"a":`...)
		if w, err = BuiltinTuple2CycleTupleWriteJSONOpt(newTypeNames, short, w, item.A); err != nil {
			return w, err
		}
	}
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	if w, err = BuiltinTupleCycleTupleWriteJSONOpt(newTypeNames, short, w, item.B, item.N); err != nil {
		return w, err
	}
	if (len(item.B) != 0) == false {
		w = w[:backupIndexB]
	}
	if item.N&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"c":`...)
		w = BuiltinTuple3IntWriteJSONOpt(newTypeNames, short, w, &item.C)
	}
	return append(w, '}'), nil
}

func (item *CycleTuple) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *CycleTuple) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("cycleTuple", err.Error())
	}
	return nil
}
