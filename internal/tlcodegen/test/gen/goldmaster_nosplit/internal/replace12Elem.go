// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple3Replace12ElemReset(vec *[3]Replace12Elem) {
	for i := range *vec {
		(*vec)[i].Reset()
	}
}

func BuiltinTuple3Replace12ElemFillRandom(rg *basictl.RandGenerator, vec *[3]Replace12Elem, nat_t uint32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i].FillRandom(rg, nat_t)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3Replace12ElemRead(w []byte, vec *[3]Replace12Elem, nat_t uint32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = (*vec)[i].Read(w, nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3Replace12ElemWrite(w []byte, vec *[3]Replace12Elem, nat_t uint32) []byte {
	for _, elem := range *vec {
		w = elem.Write(w, nat_t)
	}
	return w
}

func BuiltinTuple3Replace12ElemCalculateLayout(sizes []int, vec *[3]Replace12Elem, nat_t uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	for i := 0; i < len(*vec); i++ {
		currentPosition := len(sizes)
		sizes = (*vec)[i].CalculateLayout(sizes, nat_t)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinTuple3Replace12ElemInternalWriteTL2(w []byte, sizes []int, vec *[3]Replace12Elem, nat_t uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	for i := 0; i < len(*vec); i++ {
		w, sizes = (*vec)[i].InternalWriteTL2(w, sizes, nat_t)
	}
	return w, sizes
}

func BuiltinTuple3Replace12ElemReadTL2(r []byte, vec *[3]Replace12Elem, nat_t uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	i := 0
	for len(saveR) < len(r)+shift {
		if i == 3 {
			return r, basictl.TL2Error("more elements than expected")
		}
		if r, err = (*vec)[i].ReadTL2(r, nat_t); err != nil {
			return r, err
		}
		i += 1
	}
	if i != 3 {
		return r, basictl.TL2Error("less elements than expected")
	}
	return r, nil
}

func BuiltinTuple3Replace12ElemReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[3]Replace12Elem, nat_t uint32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]Replace12Elem", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]Replace12Elem", index+1, 3)
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in, nat_t); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]Replace12Elem", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]Replace12Elem", index+1, 3)
	}
	return nil
}

func BuiltinTuple3Replace12ElemWriteJSON(w []byte, vec *[3]Replace12Elem, nat_t uint32) []byte {
	return BuiltinTuple3Replace12ElemWriteJSONOpt(true, false, w, vec, nat_t)
}
func BuiltinTuple3Replace12ElemWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[3]Replace12Elem, nat_t uint32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w, nat_t)
	}
	return append(w, ']')
}

func BuiltinTupleTuple3Replace12ElemFillRandom(rg *basictl.RandGenerator, vec *[][3]Replace12Elem, nat_n uint32, nat_t uint32) {
	rg.IncreaseDepth()
	*vec = make([][3]Replace12Elem, nat_n)
	for i := range *vec {
		BuiltinTuple3Replace12ElemFillRandom(rg, &(*vec)[i], nat_t)
	}
	rg.DecreaseDepth()
}

func BuiltinTupleTuple3Replace12ElemRead(w []byte, vec *[][3]Replace12Elem, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([][3]Replace12Elem, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = BuiltinTuple3Replace12ElemRead(w, &(*vec)[i], nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleTuple3Replace12ElemWrite(w []byte, vec [][3]Replace12Elem, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[][3]Replace12Elem", len(vec), nat_n)
	}
	for _, elem := range vec {
		w = BuiltinTuple3Replace12ElemWrite(w, &elem, nat_t)
	}
	return w, nil
}

func BuiltinTupleTuple3Replace12ElemCalculateLayout(sizes []int, vec *[][3]Replace12Elem, nat_n uint32, nat_t uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	for i := 0; i < len(*vec); i++ {
		currentPosition := len(sizes)
		sizes = BuiltinTuple3Replace12ElemCalculateLayout(sizes, &(*vec)[i], nat_t)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinTupleTuple3Replace12ElemInternalWriteTL2(w []byte, sizes []int, vec *[][3]Replace12Elem, nat_n uint32, nat_t uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	for i := 0; i < len(*vec); i++ {
		w, sizes = BuiltinTuple3Replace12ElemInternalWriteTL2(w, sizes, &(*vec)[i], nat_t)
	}
	return w, sizes
}

func BuiltinTupleTuple3Replace12ElemReadTL2(r []byte, vec *[][3]Replace12Elem, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if uint32(cap(*vec)) < nat_n {
		*vec = make([][3]Replace12Elem, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	i := 0
	for len(saveR) < len(r)+shift {
		if uint32(i) == nat_n {
			return r, basictl.TL2Error("more elements than expected")
		}
		if r, err = BuiltinTuple3Replace12ElemReadTL2(r, &(*vec)[i], nat_t); err != nil {
			return r, err
		}
		i += 1
	}
	if uint32(i) != nat_n {
		return r, basictl.TL2Error("less elements than expected")
	}
	return r, nil
}
func BuiltinTupleTuple3Replace12ElemReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[][3]Replace12Elem, nat_n uint32, nat_t uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([][3]Replace12Elem, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[][3]Replace12Elem", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[][3]Replace12Elem", "array is longer than expected")
			}
			if err := BuiltinTuple3Replace12ElemReadJSON(legacyTypeNames, in, &(*vec)[index], nat_t); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[][3]Replace12Elem", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[][3]Replace12Elem", index, nat_n)
	}
	return nil
}

func BuiltinTupleTuple3Replace12ElemWriteJSON(w []byte, vec [][3]Replace12Elem, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	return BuiltinTupleTuple3Replace12ElemWriteJSONOpt(true, false, w, vec, nat_n, nat_t)
}
func BuiltinTupleTuple3Replace12ElemWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec [][3]Replace12Elem, nat_n uint32, nat_t uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[][3]Replace12Elem", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = BuiltinTuple3Replace12ElemWriteJSONOpt(newTypeNames, short, w, &elem, nat_t)
	}
	return append(w, ']'), nil
}

type Replace12Elem struct {
	A int32 // Conditional: nat_n.0
}

func (item *Replace12Elem) SetA(v int32, nat_n *uint32) {
	item.A = v
	if nat_n != nil {
		*nat_n |= 1 << 0
	}
}
func (item *Replace12Elem) ClearA(nat_n *uint32) {
	item.A = 0
	if nat_n != nil {
		*nat_n &^= 1 << 0
	}
}
func (item *Replace12Elem) IsSetA(nat_n uint32) bool { return nat_n&(1<<0) != 0 }

func (item *Replace12Elem) Reset() {
	item.A = 0
}

func (item *Replace12Elem) FillRandom(rg *basictl.RandGenerator, nat_n uint32) {
	if nat_n&(1<<0) != 0 {
		item.A = basictl.RandomInt(rg)
	} else {
		item.A = 0
	}
}

func (item *Replace12Elem) Read(w []byte, nat_n uint32) (_ []byte, err error) {
	if nat_n&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.A); err != nil {
			return w, err
		}
	} else {
		item.A = 0
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *Replace12Elem) WriteGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.Write(w, nat_n), nil
}

func (item *Replace12Elem) Write(w []byte, nat_n uint32) []byte {
	if nat_n&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.A)
	}
	return w
}

func (item *Replace12Elem) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_n uint32) error {
	var propAPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("replace12Elem", "a")
				}
				if nat_n&(1<<0) == 0 {
					return ErrorInvalidJSON("replace12Elem", "field 'a' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			default:
				return ErrorInvalidJSONExcessElement("replace12Elem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Replace12Elem) WriteJSONGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n), nil
}

func (item *Replace12Elem) WriteJSON(w []byte, nat_n uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_n)
}
func (item *Replace12Elem) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_n uint32) []byte {
	w = append(w, '{')
	if nat_n&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"a":`...)
		w = basictl.JSONWriteInt32(w, item.A)
	}
	return append(w, '}')
}

func (item *Replace12Elem) CalculateLayout(sizes []int, nat_n uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	if nat_n&(1<<0) != 0 {
		if item.A != 0 {

			lastUsedByte = 1
			currentSize += 4
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *Replace12Elem) InternalWriteTL2(w []byte, sizes []int, nat_n uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	if nat_n&(1<<0) != 0 {
		if item.A != 0 {
			serializedSize += 4
			if 4 != 0 {
				currentBlock |= (1 << 1)
				w = basictl.IntWrite(w, item.A)
			}
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *Replace12Elem) ReadTL2(r []byte, nat_n uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.A
		if block&(1<<1) != 0 {
			if nat_n&(1<<0) != 0 {
				if r, err = basictl.IntRead(r, &item.A); err != nil {
					return r, err
				}
			} else {
				return r, basictl.TL2Error("field mask contradiction: field item." + "A" + "is presented but depending bit is absent")
			}
		} else {
			item.A = 0
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}
