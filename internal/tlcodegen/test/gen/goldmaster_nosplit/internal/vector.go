// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type VectorAColor []AColor

func (VectorAColor) TLName() string { return "vector" }
func (VectorAColor) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorAColor) Reset() {
	ptr := (*[]AColor)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorAColor) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]AColor)(item)
	BuiltinVectorAColorFillRandom(rg, ptr)
}

func (item *VectorAColor) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]AColor)(item)
	return BuiltinVectorAColorRead(w, ptr)
}

func (item *VectorAColor) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorAColor) Write(w []byte) []byte {
	ptr := (*[]AColor)(item)
	return BuiltinVectorAColorWrite(w, *ptr)
}

func (item *VectorAColor) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorAColor) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorAColor) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorAColor) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorAColor) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]AColor)(item)
	if err := BuiltinVectorAColorReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorAColor) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *VectorAColor) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}

func (item *VectorAColor) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*[]AColor)(item)
	w = BuiltinVectorAColorWriteJSONOpt(tctx, w, *ptr)
	return w
}
func (item *VectorAColor) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorAColor) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

func (item *VectorAColor) CalculateLayout(sizes []int) []int {
	ptr := (*[]AColor)(item)
	sizes = BuiltinVectorAColorCalculateLayout(sizes, ptr)
	return sizes
}

func (item *VectorAColor) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*[]AColor)(item)
	w, sizes = BuiltinVectorAColorInternalWriteTL2(w, sizes, ptr)
	return w, sizes
}

func (item *VectorAColor) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *VectorAColor) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*[]AColor)(item)
	if r, err = BuiltinVectorAColorInternalReadTL2(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *VectorAColor) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type VectorCyc1MyCycle []Cyc1MyCycle

func (VectorCyc1MyCycle) TLName() string { return "vector" }
func (VectorCyc1MyCycle) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorCyc1MyCycle) Reset() {
	ptr := (*[]Cyc1MyCycle)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorCyc1MyCycle) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]Cyc1MyCycle)(item)
	BuiltinVectorCyc1MyCycleFillRandom(rg, ptr)
}

func (item *VectorCyc1MyCycle) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]Cyc1MyCycle)(item)
	return BuiltinVectorCyc1MyCycleRead(w, ptr)
}

func (item *VectorCyc1MyCycle) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorCyc1MyCycle) Write(w []byte) []byte {
	ptr := (*[]Cyc1MyCycle)(item)
	return BuiltinVectorCyc1MyCycleWrite(w, *ptr)
}

func (item *VectorCyc1MyCycle) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorCyc1MyCycle) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorCyc1MyCycle) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorCyc1MyCycle) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorCyc1MyCycle) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]Cyc1MyCycle)(item)
	if err := BuiltinVectorCyc1MyCycleReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorCyc1MyCycle) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *VectorCyc1MyCycle) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}

func (item *VectorCyc1MyCycle) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*[]Cyc1MyCycle)(item)
	w = BuiltinVectorCyc1MyCycleWriteJSONOpt(tctx, w, *ptr)
	return w
}
func (item *VectorCyc1MyCycle) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorCyc1MyCycle) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

func (item *VectorCyc1MyCycle) CalculateLayout(sizes []int) []int {
	ptr := (*[]Cyc1MyCycle)(item)
	sizes = BuiltinVectorCyc1MyCycleCalculateLayout(sizes, ptr)
	return sizes
}

func (item *VectorCyc1MyCycle) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*[]Cyc1MyCycle)(item)
	w, sizes = BuiltinVectorCyc1MyCycleInternalWriteTL2(w, sizes, ptr)
	return w, sizes
}

func (item *VectorCyc1MyCycle) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *VectorCyc1MyCycle) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*[]Cyc1MyCycle)(item)
	if r, err = BuiltinVectorCyc1MyCycleInternalReadTL2(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *VectorCyc1MyCycle) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type VectorDictionaryFieldString map[string]string

func (VectorDictionaryFieldString) TLName() string { return "vector" }
func (VectorDictionaryFieldString) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldString) Reset() {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringReset(*ptr)
}

func (item *VectorDictionaryFieldString) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringFillRandom(rg, ptr)
}

func (item *VectorDictionaryFieldString) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringRead(w, ptr)
}

func (item *VectorDictionaryFieldString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorDictionaryFieldString) Write(w []byte) []byte {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringWrite(w, *ptr)
}

func (item *VectorDictionaryFieldString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorDictionaryFieldString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorDictionaryFieldString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldString) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorDictionaryFieldString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*map[string]string)(item)
	if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldString) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *VectorDictionaryFieldString) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}

func (item *VectorDictionaryFieldString) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*map[string]string)(item)
	w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(tctx, w, *ptr)
	return w
}
func (item *VectorDictionaryFieldString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorDictionaryFieldString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

func (item *VectorDictionaryFieldString) CalculateLayout(sizes []int) []int {
	ptr := (*map[string]string)(item)
	sizes = BuiltinVectorDictionaryFieldStringCalculateLayout(sizes, ptr)
	return sizes
}

func (item *VectorDictionaryFieldString) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*map[string]string)(item)
	w, sizes = BuiltinVectorDictionaryFieldStringInternalWriteTL2(w, sizes, ptr)
	return w, sizes
}

func (item *VectorDictionaryFieldString) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *VectorDictionaryFieldString) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	if r, err = BuiltinVectorDictionaryFieldStringInternalReadTL2(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *VectorDictionaryFieldString) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type VectorDictionaryFieldStringBytes []DictionaryFieldStringBytes

func (VectorDictionaryFieldStringBytes) TLName() string { return "vector" }
func (VectorDictionaryFieldStringBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldStringBytes) Reset() {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorDictionaryFieldStringBytes) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	BuiltinVectorDictionaryFieldStringBytesFillRandom(rg, ptr)
}

func (item *VectorDictionaryFieldStringBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	return BuiltinVectorDictionaryFieldStringBytesRead(w, ptr)
}

func (item *VectorDictionaryFieldStringBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorDictionaryFieldStringBytes) Write(w []byte) []byte {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	return BuiltinVectorDictionaryFieldStringBytesWrite(w, *ptr)
}

func (item *VectorDictionaryFieldStringBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorDictionaryFieldStringBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorDictionaryFieldStringBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldStringBytes) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorDictionaryFieldStringBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	if err := BuiltinVectorDictionaryFieldStringBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldStringBytes) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *VectorDictionaryFieldStringBytes) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}

func (item *VectorDictionaryFieldStringBytes) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	w = BuiltinVectorDictionaryFieldStringBytesWriteJSONOpt(tctx, w, *ptr)
	return w
}
func (item *VectorDictionaryFieldStringBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorDictionaryFieldStringBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

func (item *VectorDictionaryFieldStringBytes) CalculateLayout(sizes []int) []int {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	sizes = BuiltinVectorDictionaryFieldStringBytesCalculateLayout(sizes, ptr)
	return sizes
}

func (item *VectorDictionaryFieldStringBytes) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	w, sizes = BuiltinVectorDictionaryFieldStringBytesInternalWriteTL2(w, sizes, ptr)
	return w, sizes
}

func (item *VectorDictionaryFieldStringBytes) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *VectorDictionaryFieldStringBytes) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	if r, err = BuiltinVectorDictionaryFieldStringBytesInternalReadTL2(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *VectorDictionaryFieldStringBytes) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed map[string]UsefulServiceUserEntityPaymentItem

func (VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) TLName() string { return "vector" }
func (VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) Reset() {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReset(*ptr)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) FillRandom(rg *basictl.RandGenerator, nat_t uint32) {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedFillRandom(rg, ptr, nat_t)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	return BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(w, ptr, nat_t)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.Write(w, nat_t), nil
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) Write(w []byte, nat_t uint32) []byte {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	return BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(w, *ptr, nat_t)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteBoxed(w []byte, nat_t uint32) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w, nat_t)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	if err := BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReadJSON(legacyTypeNames, in, ptr, nat_t); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w, nat_t), nil
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteJSON(w []byte, nat_t uint32) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w, nat_t)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_t uint32) []byte {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	w = BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSONOpt(tctx, w, *ptr, nat_t)
	return w
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) CalculateLayout(sizes []int, nat_t uint32) []int {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	sizes = BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedCalculateLayout(sizes, ptr, nat_t)
	return sizes
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) InternalWriteTL2(w []byte, sizes []int, nat_t uint32) ([]byte, []int) {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	w, sizes = BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedInternalWriteTL2(w, sizes, ptr, nat_t)
	return w, sizes
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteTL2(w []byte, ctx *basictl.TL2WriteContext, nat_t uint32) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0], nat_t)
	w, _ = item.InternalWriteTL2(w, sizes, nat_t)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) InternalReadTL2(r []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	if r, err = BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedInternalReadTL2(r, ptr, nat_t); err != nil {
		return r, err
	}
	return r, nil
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) ReadTL2(r []byte, ctx *basictl.TL2ReadContext, nat_t uint32) (_ []byte, err error) {
	return item.InternalReadTL2(r, nat_t)
}

type VectorInt []int32

func (VectorInt) TLName() string { return "vector" }
func (VectorInt) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorInt) Reset() {
	ptr := (*[]int32)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorInt) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]int32)(item)
	BuiltinVectorIntFillRandom(rg, ptr)
}

func (item *VectorInt) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	return BuiltinVectorIntRead(w, ptr)
}

func (item *VectorInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorInt) Write(w []byte) []byte {
	ptr := (*[]int32)(item)
	return BuiltinVectorIntWrite(w, *ptr)
}

func (item *VectorInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorInt) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]int32)(item)
	if err := BuiltinVectorIntReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorInt) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *VectorInt) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}

func (item *VectorInt) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*[]int32)(item)
	w = BuiltinVectorIntWriteJSONOpt(tctx, w, *ptr)
	return w
}
func (item *VectorInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

func (item *VectorInt) CalculateLayout(sizes []int) []int {
	ptr := (*[]int32)(item)
	sizes = BuiltinVectorIntCalculateLayout(sizes, ptr)
	return sizes
}

func (item *VectorInt) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*[]int32)(item)
	w, sizes = BuiltinVectorIntInternalWriteTL2(w, sizes, ptr)
	return w, sizes
}

func (item *VectorInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *VectorInt) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	if r, err = BuiltinVectorIntInternalReadTL2(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *VectorInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type VectorIntBoxedMaybe struct {
	Value []int32 // not deterministic if !Ok
	Ok    bool
}

func (item *VectorIntBoxedMaybe) Reset() {
	item.Ok = false
}
func (item *VectorIntBoxedMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		BuiltinVectorIntFillRandom(rg, &item.Value)
	} else {
		item.Ok = false
	}
}

func (item *VectorIntBoxedMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
			return w, err
		}
		return BuiltinVectorIntRead(w, &item.Value)
	}
	return w, nil
}

func (item *VectorIntBoxedMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorIntBoxedMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		w = basictl.NatWrite(w, 0x1cb5c415)
		return BuiltinVectorIntWrite(w, item.Value)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *VectorIntBoxedMaybe) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if item.Ok {
		sizes[sizePosition] += 1
		sizes[sizePosition] += basictl.TL2CalculateSize(1)
		currentPosition := len(sizes)
		if len(item.Value) != 0 {
			sizes = BuiltinVectorIntCalculateLayout(sizes, &item.Value)
			if sizes[currentPosition] != 0 {
				sizes[sizePosition] += sizes[currentPosition]
				sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
			}
		}
	}
	return sizes
}

func (item *VectorIntBoxedMaybe) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	if item.Ok {
		currentPosition := len(w)
		w = append(w, 1)
		w = basictl.TL2WriteSize(w, 1)
		if len(item.Value) != 0 {
			if sizes[0] != 0 {
				w[currentPosition] |= (1 << 1)
				w, sizes = BuiltinVectorIntInternalWriteTL2(w, sizes, &item.Value)
			} else {
				sizes = sizes[1:]
			}
		}
	}
	return w, sizes
}

func (item *VectorIntBoxedMaybe) InternalReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Ok = false
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		if block&1 == 0 {
			return r, basictl.TL2Error("must have constructor bytes")
		}
		var index int
		if r, index, err = basictl.TL2ParseSize(r); err != nil {
			return r, err
		}
		if index != 1 {
			return r, basictl.TL2Error("expected 1")
		}
		item.Ok = true
		if block&(1<<1) != 0 {
			if r, err = BuiltinVectorIntInternalReadTL2(r, &item.Value); err != nil {
				return r, err
			}
		} else {
			item.Value = item.Value[:0]
		}
	}
	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item *VectorIntBoxedMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := BuiltinVectorIntReadJSON(legacyTypeNames, in2Pointer, &item.Value); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorIntBoxedMaybe) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *VectorIntBoxedMaybe) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *VectorIntBoxedMaybe) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	if len(item.Value) != 0 {
		w = append(w, `,"value":`...)
		w = BuiltinVectorIntWriteJSONOpt(tctx, w, item.Value)
	}
	return append(w, '}')
}

func (item VectorIntBoxedMaybe) String() string {
	return string(item.WriteJSON(nil))
}

type VectorIntMaybe struct {
	Value []int32 // not deterministic if !Ok
	Ok    bool
}

func (item *VectorIntMaybe) Reset() {
	item.Ok = false
}
func (item *VectorIntMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		BuiltinVectorIntFillRandom(rg, &item.Value)
	} else {
		item.Ok = false
	}
}

func (item *VectorIntMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		return BuiltinVectorIntRead(w, &item.Value)
	}
	return w, nil
}

func (item *VectorIntMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorIntMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		return BuiltinVectorIntWrite(w, item.Value)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *VectorIntMaybe) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if item.Ok {
		sizes[sizePosition] += 1
		sizes[sizePosition] += basictl.TL2CalculateSize(1)
		currentPosition := len(sizes)
		if len(item.Value) != 0 {
			sizes = BuiltinVectorIntCalculateLayout(sizes, &item.Value)
			if sizes[currentPosition] != 0 {
				sizes[sizePosition] += sizes[currentPosition]
				sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
			}
		}
	}
	return sizes
}

func (item *VectorIntMaybe) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	if item.Ok {
		currentPosition := len(w)
		w = append(w, 1)
		w = basictl.TL2WriteSize(w, 1)
		if len(item.Value) != 0 {
			if sizes[0] != 0 {
				w[currentPosition] |= (1 << 1)
				w, sizes = BuiltinVectorIntInternalWriteTL2(w, sizes, &item.Value)
			} else {
				sizes = sizes[1:]
			}
		}
	}
	return w, sizes
}

func (item *VectorIntMaybe) InternalReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Ok = false
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		if block&1 == 0 {
			return r, basictl.TL2Error("must have constructor bytes")
		}
		var index int
		if r, index, err = basictl.TL2ParseSize(r); err != nil {
			return r, err
		}
		if index != 1 {
			return r, basictl.TL2Error("expected 1")
		}
		item.Ok = true
		if block&(1<<1) != 0 {
			if r, err = BuiltinVectorIntInternalReadTL2(r, &item.Value); err != nil {
				return r, err
			}
		} else {
			item.Value = item.Value[:0]
		}
	}
	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item *VectorIntMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := BuiltinVectorIntReadJSON(legacyTypeNames, in2Pointer, &item.Value); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorIntMaybe) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *VectorIntMaybe) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *VectorIntMaybe) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	if len(item.Value) != 0 {
		w = append(w, `,"value":`...)
		w = BuiltinVectorIntWriteJSONOpt(tctx, w, item.Value)
	}
	return append(w, '}')
}

func (item VectorIntMaybe) String() string {
	return string(item.WriteJSON(nil))
}
