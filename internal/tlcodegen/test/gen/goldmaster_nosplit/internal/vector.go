// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type VectorAColor []AColor

func (VectorAColor) TLName() string { return "vector" }
func (VectorAColor) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorAColor) Reset() {
	ptr := (*[]AColor)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorAColor) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]AColor)(item)
	BuiltinVectorAColorFillRandom(rg, ptr)
}

func (item *VectorAColor) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]AColor)(item)
	return BuiltinVectorAColorRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorAColor) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorAColor) Write(w []byte) []byte {
	ptr := (*[]AColor)(item)
	return BuiltinVectorAColorWrite(w, *ptr)
}

func (item *VectorAColor) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorAColor) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorAColor) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorAColor) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorAColor) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]AColor)(item)
	if err := BuiltinVectorAColorReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorAColor) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorAColor) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorAColor) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]AColor)(item)
	w = BuiltinVectorAColorWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorAColor) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorAColor) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorCyc1MyCycle []Cyc1MyCycle

func (VectorCyc1MyCycle) TLName() string { return "vector" }
func (VectorCyc1MyCycle) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorCyc1MyCycle) Reset() {
	ptr := (*[]Cyc1MyCycle)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorCyc1MyCycle) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]Cyc1MyCycle)(item)
	BuiltinVectorCyc1MyCycleFillRandom(rg, ptr)
}

func (item *VectorCyc1MyCycle) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]Cyc1MyCycle)(item)
	return BuiltinVectorCyc1MyCycleRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorCyc1MyCycle) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorCyc1MyCycle) Write(w []byte) []byte {
	ptr := (*[]Cyc1MyCycle)(item)
	return BuiltinVectorCyc1MyCycleWrite(w, *ptr)
}

func (item *VectorCyc1MyCycle) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorCyc1MyCycle) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorCyc1MyCycle) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorCyc1MyCycle) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorCyc1MyCycle) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]Cyc1MyCycle)(item)
	if err := BuiltinVectorCyc1MyCycleReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorCyc1MyCycle) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorCyc1MyCycle) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorCyc1MyCycle) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]Cyc1MyCycle)(item)
	w = BuiltinVectorCyc1MyCycleWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorCyc1MyCycle) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorCyc1MyCycle) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDictionaryFieldString map[string]string

func (VectorDictionaryFieldString) TLName() string { return "vector" }
func (VectorDictionaryFieldString) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldString) Reset() {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringReset(*ptr)
}

func (item *VectorDictionaryFieldString) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringFillRandom(rg, ptr)
}

func (item *VectorDictionaryFieldString) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorDictionaryFieldString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorDictionaryFieldString) Write(w []byte) []byte {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringWrite(w, *ptr)
}

func (item *VectorDictionaryFieldString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorDictionaryFieldString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorDictionaryFieldString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldString) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorDictionaryFieldString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*map[string]string)(item)
	if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorDictionaryFieldString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorDictionaryFieldString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*map[string]string)(item)
	w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorDictionaryFieldString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorDictionaryFieldString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDictionaryFieldStringBytes []DictionaryFieldStringBytes

func (VectorDictionaryFieldStringBytes) TLName() string { return "vector" }
func (VectorDictionaryFieldStringBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldStringBytes) Reset() {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorDictionaryFieldStringBytes) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	BuiltinVectorDictionaryFieldStringBytesFillRandom(rg, ptr)
}

func (item *VectorDictionaryFieldStringBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	return BuiltinVectorDictionaryFieldStringBytesRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorDictionaryFieldStringBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorDictionaryFieldStringBytes) Write(w []byte) []byte {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	return BuiltinVectorDictionaryFieldStringBytesWrite(w, *ptr)
}

func (item *VectorDictionaryFieldStringBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorDictionaryFieldStringBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorDictionaryFieldStringBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldStringBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorDictionaryFieldStringBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	if err := BuiltinVectorDictionaryFieldStringBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldStringBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorDictionaryFieldStringBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorDictionaryFieldStringBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	w = BuiltinVectorDictionaryFieldStringBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorDictionaryFieldStringBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorDictionaryFieldStringBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed map[string]UsefulServiceUserEntityPaymentItem

func (VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) TLName() string { return "vector" }
func (VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) Reset() {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReset(*ptr)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) FillRandom(rg *basictl.RandGenerator, nat_t uint32) {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedFillRandom(rg, ptr, nat_t)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	return BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(w, ptr, nat_t)
}

// This method is general version of Write, use it instead!
func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.Write(w, nat_t), nil
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) Write(w []byte, nat_t uint32) []byte {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	return BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(w, *ptr, nat_t)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteBoxed(w []byte, nat_t uint32) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w, nat_t)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	if err := BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReadJSON(legacyTypeNames, in, ptr, nat_t); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSON(w, nat_t), nil
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}

func (item *VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxed) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) []byte {
	ptr := (*map[string]UsefulServiceUserEntityPaymentItem)(item)
	w = BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSONOpt(newTypeNames, short, w, *ptr, nat_t)
	return w
}

type VectorInt []int32

func (VectorInt) TLName() string { return "vector" }
func (VectorInt) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorInt) Reset() {
	ptr := (*[]int32)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorInt) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]int32)(item)
	BuiltinVectorIntFillRandom(rg, ptr)
}

func (item *VectorInt) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	return BuiltinVectorIntRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorInt) Write(w []byte) []byte {
	ptr := (*[]int32)(item)
	return BuiltinVectorIntWrite(w, *ptr)
}

func (item *VectorInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]int32)(item)
	if err := BuiltinVectorIntReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorInt) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorInt) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorInt) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]int32)(item)
	w = BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorIntBoxedMaybe struct {
	Value []int32 // not deterministic if !Ok
	Ok    bool
}

func (item *VectorIntBoxedMaybe) Reset() {
	item.Ok = false
}
func (item *VectorIntBoxedMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		BuiltinVectorIntFillRandom(rg, &item.Value)
	} else {
		item.Ok = false
	}
}

func (item *VectorIntBoxedMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
			return w, err
		}
		return BuiltinVectorIntRead(w, &item.Value)
	}
	return w, nil
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorIntBoxedMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorIntBoxedMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		w = basictl.NatWrite(w, 0x1cb5c415)
		return BuiltinVectorIntWrite(w, item.Value)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *VectorIntBoxedMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := BuiltinVectorIntReadJSON(legacyTypeNames, in2Pointer, &item.Value); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorIntBoxedMaybe) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *VectorIntBoxedMaybe) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *VectorIntBoxedMaybe) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	if len(item.Value) != 0 {
		w = append(w, `,"value":`...)
		w = BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, item.Value)
	}
	return append(w, '}')
}

func (item VectorIntBoxedMaybe) String() string {
	return string(item.WriteJSON(nil))
}

type VectorIntMaybe struct {
	Value []int32 // not deterministic if !Ok
	Ok    bool
}

func (item *VectorIntMaybe) Reset() {
	item.Ok = false
}
func (item *VectorIntMaybe) FillRandom(rg *basictl.RandGenerator) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		BuiltinVectorIntFillRandom(rg, &item.Value)
	} else {
		item.Ok = false
	}
}

func (item *VectorIntMaybe) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		return BuiltinVectorIntRead(w, &item.Value)
	}
	return w, nil
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorIntMaybe) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorIntMaybe) WriteBoxed(w []byte) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		return BuiltinVectorIntWrite(w, item.Value)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *VectorIntMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := BuiltinVectorIntReadJSON(legacyTypeNames, in2Pointer, &item.Value); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorIntMaybe) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *VectorIntMaybe) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *VectorIntMaybe) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	if len(item.Value) != 0 {
		w = append(w, `,"value":`...)
		w = BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, item.Value)
	}
	return append(w, '}')
}

func (item VectorIntMaybe) String() string {
	return string(item.WriteJSON(nil))
}
