// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple3PairBoxedIntLongReset(vec *[3]PairIntLong) {
	for i := range *vec {
		(*vec)[i].Reset()
	}
}

func BuiltinTuple3PairBoxedIntLongFillRandom(rg *basictl.RandGenerator, vec *[3]PairIntLong) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3PairBoxedIntLongRead(w []byte, vec *[3]PairIntLong) (_ []byte, err error) {
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3PairBoxedIntLongWrite(w []byte, vec *[3]PairIntLong) []byte {
	for _, elem := range *vec {
		w = elem.WriteBoxed(w)
	}
	return w
}

func BuiltinTuple3PairBoxedIntLongCalculateLayout(sizes []int, vec *[3]PairIntLong) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 3 != 0 {
		currentSize += basictl.TL2CalculateSize(3)
	}

	for i := 0; i < 3; i++ {
		currentPosition := len(sizes)
		sizes = (*vec)[i].CalculateLayout(sizes)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple3PairBoxedIntLongInternalWriteTL2(w []byte, sizes []int, vec *[3]PairIntLong) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 3 != 0 {
		w = basictl.TL2WriteSize(w, 3)
	}

	for i := 0; i < 3; i++ {
		w, sizes = (*vec)[i].InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinTuple3PairBoxedIntLongInternalReadTL2(r []byte, vec *[3]PairIntLong) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 3 {
		lastIndex = 3
	}
	for i := 0; i < lastIndex; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 3; i++ {
		(*vec)[i].Reset()
	}

	return r, nil
}

func BuiltinTuple3PairBoxedIntLongReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[3]PairIntLong) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]PairIntLong", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]PairIntLong", index+1, 3)
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]PairIntLong", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]PairIntLong", index+1, 3)
	}
	return nil
}

func BuiltinTuple3PairBoxedIntLongWriteJSON(w []byte, vec *[3]PairIntLong) []byte {
	return BuiltinTuple3PairBoxedIntLongWriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple3PairBoxedIntLongWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[3]PairIntLong) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']')
}

func BuiltinTuplePairBoxedIntLongFillRandom(rg *basictl.RandGenerator, vec *[]PairIntLong, nat_n uint32) {
	rg.IncreaseDepth()
	*vec = make([]PairIntLong, nat_n)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuplePairBoxedIntLongRead(w []byte, vec *[]PairIntLong, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]PairIntLong, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuplePairBoxedIntLongWrite(w []byte, vec []PairIntLong, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]PairIntLong", len(vec), nat_n)
	}
	for _, elem := range vec {
		w = elem.WriteBoxed(w)
	}
	return w, nil
}

func BuiltinTuplePairBoxedIntLongCalculateLayout(sizes []int, vec *[]PairIntLong, nat_n uint32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if nat_n != 0 {
		currentSize += basictl.TL2CalculateSize(int(nat_n))
	}

	lastIndex := uint32(len(*vec))
	if lastIndex > nat_n {
		lastIndex = nat_n
	}

	for i := uint32(0); i < lastIndex; i++ {
		currentPosition := len(sizes)
		sizes = (*vec)[i].CalculateLayout(sizes)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}

	// append empty objects if not enough
	for i := lastIndex; i < nat_n; i++ {
		var elem PairIntLong
		currentPosition := len(sizes)
		sizes = elem.CalculateLayout(sizes)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuplePairBoxedIntLongInternalWriteTL2(w []byte, sizes []int, vec *[]PairIntLong, nat_n uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if nat_n != 0 {
		w = basictl.TL2WriteSize(w, int(nat_n))
	}

	lastIndex := uint32(len(*vec))
	if lastIndex > nat_n {
		lastIndex = nat_n
	}

	for i := uint32(0); i < lastIndex; i++ {
		w, sizes = (*vec)[i].InternalWriteTL2(w, sizes)
	}

	// append empty objects if not enough
	for i := lastIndex; i < nat_n; i++ {
		var elem PairIntLong
		w, sizes = elem.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinTuplePairBoxedIntLongInternalReadTL2(r []byte, vec *[]PairIntLong, nat_n uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if uint32(cap(*vec)) < nat_n {
		*vec = make([]PairIntLong, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}

	lastIndex := uint32(elementCount)
	if lastIndex > nat_n {
		lastIndex = nat_n
	}

	for i := uint32(0); i < lastIndex; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < nat_n; i++ {
		(*vec)[i].Reset()
	}

	return r, nil
}
func BuiltinTuplePairBoxedIntLongReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]PairIntLong, nat_n uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]PairIntLong, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]PairIntLong", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[]PairIntLong", "array is longer than expected")
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]PairIntLong", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[]PairIntLong", index, nat_n)
	}
	return nil
}

func BuiltinTuplePairBoxedIntLongWriteJSON(w []byte, vec []PairIntLong, nat_n uint32) (_ []byte, err error) {
	return BuiltinTuplePairBoxedIntLongWriteJSONOpt(true, false, w, vec, nat_n)
}
func BuiltinTuplePairBoxedIntLongWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []PairIntLong, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]PairIntLong", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']'), nil
}

type PairAInnerAInner struct {
	A AInner
	B AInner
}

func (PairAInnerAInner) TLName() string { return "pair" }
func (PairAInnerAInner) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairAInnerAInner) Reset() {
	item.A.Reset()
	item.B.Reset()
}

func (item *PairAInnerAInner) FillRandom(rg *basictl.RandGenerator, nat_X uint32, nat_Y uint32) {
	item.A.FillRandom(rg, nat_X)
	item.B.FillRandom(rg, nat_Y)
}

func (item *PairAInnerAInner) Read(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = item.A.Read(w, nat_X); err != nil {
		return w, err
	}
	return item.B.Read(w, nat_Y)
}

func (item *PairAInnerAInner) WriteGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.Write(w, nat_X, nat_Y)
}

func (item *PairAInnerAInner) Write(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = item.A.Write(w, nat_X); err != nil {
		return w, err
	}
	if w, err = item.B.Write(w, nat_Y); err != nil {
		return w, err
	}
	return w, nil
}

func (item *PairAInnerAInner) ReadBoxed(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w, nat_X, nat_Y)
}

func (item *PairAInnerAInner) WriteBoxedGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_X, nat_Y)
}

func (item *PairAInnerAInner) WriteBoxed(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w, nat_X, nat_Y)
}

func (item *PairAInnerAInner) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_X uint32, nat_Y uint32) error {
	var rawA []byte
	var rawB []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if rawA != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				rawA = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "b":
				if rawB != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				rawB = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inAPointer *basictl.JsonLexer
	inA := basictl.JsonLexer{Data: rawA}
	if rawA != nil {
		inAPointer = &inA
	}
	if err := item.A.ReadJSON(legacyTypeNames, inAPointer, nat_X); err != nil {
		return err
	}

	var inBPointer *basictl.JsonLexer
	inB := basictl.JsonLexer{Data: rawB}
	if rawB != nil {
		inBPointer = &inB
	}
	if err := item.B.ReadJSON(legacyTypeNames, inBPointer, nat_Y); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairAInnerAInner) WriteJSONGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_X, nat_Y)
}

func (item *PairAInnerAInner) WriteJSON(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_X, nat_Y)
}
func (item *PairAInnerAInner) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	if w, err = item.A.WriteJSONOpt(newTypeNames, short, w, nat_X); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	if w, err = item.B.WriteJSONOpt(newTypeNames, short, w, nat_Y); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *PairAInnerAInner) CalculateLayout(sizes []int, nat_X uint32, nat_Y uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	currentPosition := len(sizes)
	sizes = item.A.CalculateLayout(sizes, nat_X)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.B
	currentPosition = len(sizes)
	sizes = item.B.CalculateLayout(sizes, nat_Y)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *PairAInnerAInner) InternalWriteTL2(w []byte, sizes []int, nat_X uint32, nat_Y uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.A.InternalWriteTL2(w, sizes, nat_X)
	} else {
		sizes = sizes[1:]
	}
	// write item.B
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = item.B.InternalWriteTL2(w, sizes, nat_Y)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *PairAInnerAInner) WriteTL2(w []byte, ctx *basictl.TL2WriteContext, nat_X uint32, nat_Y uint32) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0], nat_X, nat_Y)
	w, _ = item.InternalWriteTL2(w, sizes, nat_X, nat_Y)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *PairAInnerAInner) InternalReadTL2(r []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A
	if block&(1<<1) != 0 {
		if currentR, err = item.A.InternalReadTL2(currentR, nat_X); err != nil {
			return currentR, err
		}
	} else {
		item.A.Reset()
	}

	// read item.B
	if block&(1<<2) != 0 {
		if currentR, err = item.B.InternalReadTL2(currentR, nat_Y); err != nil {
			return currentR, err
		}
	} else {
		item.B.Reset()
	}

	return r, nil
}

func (item *PairAInnerAInner) ReadTL2(r []byte, ctx *basictl.TL2ReadContext, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.InternalReadTL2(r, nat_X, nat_Y)
}

type PairBoolAColor struct {
	A bool
	B AColor
}

func (PairBoolAColor) TLName() string { return "pair" }
func (PairBoolAColor) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairBoolAColor) Reset() {
	item.A = false
	item.B.Reset()
}

func (item *PairBoolAColor) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomUint(rg)&1 == 1
	item.B.FillRandom(rg)
}

func (item *PairBoolAColor) Read(w []byte) (_ []byte, err error) {
	if w, err = BoolReadBoxed(w, &item.A); err != nil {
		return w, err
	}
	return item.B.ReadBoxed(w)
}

func (item *PairBoolAColor) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairBoolAColor) Write(w []byte) []byte {
	w = BoolWriteBoxed(w, item.A)
	w = item.B.WriteBoxed(w)
	return w
}

func (item *PairBoolAColor) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *PairBoolAColor) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairBoolAColor) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairBoolAColor) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairBoolAColor) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := Json2ReadBool(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := item.B.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = false
	}
	if !propBPresented {
		item.B.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairBoolAColor) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairBoolAColor) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairBoolAColor) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteBool(w, item.A)
	if (item.A) == false {
		w = w[:backupIndexA]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = item.B.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *PairBoolAColor) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairBoolAColor) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

func (item *PairBoolAColor) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	if item.A {

		lastUsedByte = 1
		currentSize += 0
	}

	// calculate layout for item.B
	currentPosition := len(sizes)
	sizes = item.B.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *PairBoolAColor) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	if item.A {
		serializedSize += 0
		currentBlock |= (1 << 1)

	}
	// write item.B
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = item.B.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *PairBoolAColor) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *PairBoolAColor) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A
	if block&(1<<1) != 0 {
		item.A = true
	} else {
		item.A = false
	}

	// read item.B
	if block&(1<<2) != 0 {
		if currentR, err = item.B.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.B.Reset()
	}

	return r, nil
}

func (item *PairBoolAColor) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type PairFloatDouble struct {
	A float32
	B float64
}

func (PairFloatDouble) TLName() string { return "pair" }
func (PairFloatDouble) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairFloatDouble) Reset() {
	item.A = 0
	item.B = 0
}

func (item *PairFloatDouble) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomFloat(rg)
	item.B = basictl.RandomDouble(rg)
}

func (item *PairFloatDouble) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.FloatRead(w, &item.A); err != nil {
		return w, err
	}
	return basictl.DoubleRead(w, &item.B)
}

func (item *PairFloatDouble) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairFloatDouble) Write(w []byte) []byte {
	w = basictl.FloatWrite(w, item.A)
	w = basictl.DoubleWrite(w, item.B)
	return w
}

func (item *PairFloatDouble) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *PairFloatDouble) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairFloatDouble) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairFloatDouble) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairFloatDouble) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := Json2ReadFloat32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := Json2ReadFloat64(in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	if !propBPresented {
		item.B = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairFloatDouble) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairFloatDouble) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairFloatDouble) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteFloat32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = basictl.JSONWriteFloat64(w, item.B)
	if (item.B != 0) == false {
		w = w[:backupIndexB]
	}
	return append(w, '}')
}

func (item *PairFloatDouble) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairFloatDouble) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

func (item *PairFloatDouble) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	if item.A != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.B
	if item.B != 0 {

		lastUsedByte = 1
		currentSize += 8
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *PairFloatDouble) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	if item.A != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.FloatWrite(w, item.A)
		}
	}
	// write item.B
	if item.B != 0 {
		serializedSize += 8
		if 8 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.DoubleWrite(w, item.B)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *PairFloatDouble) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *PairFloatDouble) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A
	if block&(1<<1) != 0 {
		if currentR, err = basictl.FloatRead(currentR, &item.A); err != nil {
			return currentR, err
		}
	} else {
		item.A = 0
	}

	// read item.B
	if block&(1<<2) != 0 {
		if currentR, err = basictl.DoubleRead(currentR, &item.B); err != nil {
			return currentR, err
		}
	} else {
		item.B = 0
	}

	return r, nil
}

func (item *PairFloatDouble) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type PairIntInt struct {
	A int32
	B int32
}

func (PairIntInt) TLName() string { return "pair" }
func (PairIntInt) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairIntInt) Reset() {
	item.A = 0
	item.B = 0
}

func (item *PairIntInt) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomInt(rg)
	item.B = basictl.RandomInt(rg)
}

func (item *PairIntInt) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.A); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.B)
}

func (item *PairIntInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairIntInt) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.A)
	w = basictl.IntWrite(w, item.B)
	return w
}

func (item *PairIntInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *PairIntInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairIntInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairIntInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairIntInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := Json2ReadInt32(in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	if !propBPresented {
		item.B = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairIntInt) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairIntInt) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairIntInt) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = basictl.JSONWriteInt32(w, item.B)
	if (item.B != 0) == false {
		w = w[:backupIndexB]
	}
	return append(w, '}')
}

func (item *PairIntInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairIntInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

func (item *PairIntInt) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	if item.A != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.B
	if item.B != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *PairIntInt) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	if item.A != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, item.A)
		}
	}
	// write item.B
	if item.B != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.IntWrite(w, item.B)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *PairIntInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *PairIntInt) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A
	if block&(1<<1) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.A); err != nil {
			return currentR, err
		}
	} else {
		item.A = 0
	}

	// read item.B
	if block&(1<<2) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.B); err != nil {
			return currentR, err
		}
	} else {
		item.B = 0
	}

	return r, nil
}

func (item *PairIntInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type PairIntLong struct {
	A int32
	B int64
}

func (PairIntLong) TLName() string { return "pair" }
func (PairIntLong) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairIntLong) Reset() {
	item.A = 0
	item.B = 0
}

func (item *PairIntLong) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomInt(rg)
	item.B = basictl.RandomLong(rg)
}

func (item *PairIntLong) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.A); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.B)
}

func (item *PairIntLong) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairIntLong) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.A)
	w = basictl.LongWrite(w, item.B)
	return w
}

func (item *PairIntLong) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *PairIntLong) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairIntLong) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairIntLong) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairIntLong) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := Json2ReadInt64(in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	if !propBPresented {
		item.B = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairIntLong) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairIntLong) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairIntLong) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = basictl.JSONWriteInt64(w, item.B)
	if (item.B != 0) == false {
		w = w[:backupIndexB]
	}
	return append(w, '}')
}

func (item *PairIntLong) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairIntLong) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

func (item *PairIntLong) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	if item.A != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.B
	if item.B != 0 {

		lastUsedByte = 1
		currentSize += 8
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *PairIntLong) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	if item.A != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, item.A)
		}
	}
	// write item.B
	if item.B != 0 {
		serializedSize += 8
		if 8 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.LongWrite(w, item.B)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *PairIntLong) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *PairIntLong) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A
	if block&(1<<1) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.A); err != nil {
			return currentR, err
		}
	} else {
		item.A = 0
	}

	// read item.B
	if block&(1<<2) != 0 {
		if currentR, err = basictl.LongRead(currentR, &item.B); err != nil {
			return currentR, err
		}
	} else {
		item.B = 0
	}

	return r, nil
}

func (item *PairIntLong) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type PairIntPairMultiPointString struct {
	A int32
	B PairMultiPointString
}

func (PairIntPairMultiPointString) TLName() string { return "pair" }
func (PairIntPairMultiPointString) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairIntPairMultiPointString) Reset() {
	item.A = 0
	item.B.Reset()
}

func (item *PairIntPairMultiPointString) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomInt(rg)
	item.B.FillRandom(rg)
}

func (item *PairIntPairMultiPointString) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.A); err != nil {
		return w, err
	}
	return item.B.Read(w)
}

func (item *PairIntPairMultiPointString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairIntPairMultiPointString) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.A)
	w = item.B.Write(w)
	return w
}

func (item *PairIntPairMultiPointString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *PairIntPairMultiPointString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairIntPairMultiPointString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairIntPairMultiPointString) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairIntPairMultiPointString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := item.B.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	if !propBPresented {
		item.B.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairIntPairMultiPointString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairIntPairMultiPointString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairIntPairMultiPointString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = item.B.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *PairIntPairMultiPointString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairIntPairMultiPointString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

func (item *PairIntPairMultiPointString) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	if item.A != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.B
	currentPosition := len(sizes)
	sizes = item.B.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *PairIntPairMultiPointString) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	if item.A != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, item.A)
		}
	}
	// write item.B
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = item.B.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *PairIntPairMultiPointString) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *PairIntPairMultiPointString) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A
	if block&(1<<1) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.A); err != nil {
			return currentR, err
		}
	} else {
		item.A = 0
	}

	// read item.B
	if block&(1<<2) != 0 {
		if currentR, err = item.B.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.B.Reset()
	}

	return r, nil
}

func (item *PairIntPairMultiPointString) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type PairMultiPointString struct {
	A MultiPoint
	B string
}

func (PairMultiPointString) TLName() string { return "pair" }
func (PairMultiPointString) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairMultiPointString) Reset() {
	item.A.Reset()
	item.B = ""
}

func (item *PairMultiPointString) FillRandom(rg *basictl.RandGenerator) {
	item.A.FillRandom(rg)
	item.B = basictl.RandomString(rg)
}

func (item *PairMultiPointString) Read(w []byte) (_ []byte, err error) {
	if w, err = item.A.Read(w); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.B)
}

func (item *PairMultiPointString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairMultiPointString) Write(w []byte) []byte {
	w = item.A.Write(w)
	w = basictl.StringWrite(w, item.B)
	return w
}

func (item *PairMultiPointString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *PairMultiPointString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairMultiPointString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairMultiPointString) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairMultiPointString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := item.A.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := Json2ReadString(in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A.Reset()
	}
	if !propBPresented {
		item.B = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairMultiPointString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairMultiPointString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairMultiPointString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = item.A.WriteJSONOpt(newTypeNames, short, w)
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = basictl.JSONWriteString(w, item.B)
	if (len(item.B) != 0) == false {
		w = w[:backupIndexB]
	}
	return append(w, '}')
}

func (item *PairMultiPointString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairMultiPointString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

func (item *PairMultiPointString) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	currentPosition := len(sizes)
	sizes = item.A.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.B
	if len(item.B) != 0 {

		if len(item.B) != 0 {
			lastUsedByte = 1
			currentSize += len(item.B)
			currentSize += basictl.TL2CalculateSize(len(item.B))
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *PairMultiPointString) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.A.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.B
	if len(item.B) != 0 {
		serializedSize += len(item.B)
		if len(item.B) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.B))
			currentBlock |= (1 << 2)
			w = basictl.StringWriteTL2(w, item.B)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *PairMultiPointString) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *PairMultiPointString) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A
	if block&(1<<1) != 0 {
		if currentR, err = item.A.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.A.Reset()
	}

	// read item.B
	if block&(1<<2) != 0 {
		if currentR, err = basictl.StringReadTL2(currentR, &item.B); err != nil {
			return currentR, err
		}
	} else {
		item.B = ""
	}

	return r, nil
}

func (item *PairMultiPointString) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type PairPairAInnerAInnerAInnerBoxed3 struct {
	A PairAInnerAInner
	B AInner3
}

func (PairPairAInnerAInnerAInnerBoxed3) TLName() string { return "pair" }
func (PairPairAInnerAInnerAInnerBoxed3) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairPairAInnerAInnerAInnerBoxed3) Reset() {
	item.A.Reset()
	item.B.Reset()
}

func (item *PairPairAInnerAInnerAInnerBoxed3) FillRandom(rg *basictl.RandGenerator, nat_XXI uint32, nat_XYI uint32) {
	item.A.FillRandom(rg, nat_XXI, nat_XYI)
	item.B.FillRandom(rg)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) Read(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	if w, err = item.A.Read(w, nat_XXI, nat_XYI); err != nil {
		return w, err
	}
	return item.B.ReadBoxed(w)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) WriteGeneral(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	return item.Write(w, nat_XXI, nat_XYI)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) Write(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	if w, err = item.A.Write(w, nat_XXI, nat_XYI); err != nil {
		return w, err
	}
	w = item.B.WriteBoxed(w)
	return w, nil
}

func (item *PairPairAInnerAInnerAInnerBoxed3) ReadBoxed(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w, nat_XXI, nat_XYI)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) WriteBoxedGeneral(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_XXI, nat_XYI)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) WriteBoxed(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w, nat_XXI, nat_XYI)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_XXI uint32, nat_XYI uint32) error {
	var rawA []byte
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if rawA != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				rawA = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := item.B.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propBPresented {
		item.B.Reset()
	}
	var inAPointer *basictl.JsonLexer
	inA := basictl.JsonLexer{Data: rawA}
	if rawA != nil {
		inAPointer = &inA
	}
	if err := item.A.ReadJSON(legacyTypeNames, inAPointer, nat_XXI, nat_XYI); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairPairAInnerAInnerAInnerBoxed3) WriteJSONGeneral(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_XXI, nat_XYI)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) WriteJSON(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_XXI, nat_XYI)
}
func (item *PairPairAInnerAInnerAInnerBoxed3) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	if w, err = item.A.WriteJSONOpt(newTypeNames, short, w, nat_XXI, nat_XYI); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = item.B.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}'), nil
}

func (item *PairPairAInnerAInnerAInnerBoxed3) CalculateLayout(sizes []int, nat_XXI uint32, nat_XYI uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	currentPosition := len(sizes)
	sizes = item.A.CalculateLayout(sizes, nat_XXI, nat_XYI)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.B
	currentPosition = len(sizes)
	sizes = item.B.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *PairPairAInnerAInnerAInnerBoxed3) InternalWriteTL2(w []byte, sizes []int, nat_XXI uint32, nat_XYI uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.A.InternalWriteTL2(w, sizes, nat_XXI, nat_XYI)
	} else {
		sizes = sizes[1:]
	}
	// write item.B
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = item.B.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *PairPairAInnerAInnerAInnerBoxed3) WriteTL2(w []byte, ctx *basictl.TL2WriteContext, nat_XXI uint32, nat_XYI uint32) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0], nat_XXI, nat_XYI)
	w, _ = item.InternalWriteTL2(w, sizes, nat_XXI, nat_XYI)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *PairPairAInnerAInnerAInnerBoxed3) InternalReadTL2(r []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A
	if block&(1<<1) != 0 {
		if currentR, err = item.A.InternalReadTL2(currentR, nat_XXI, nat_XYI); err != nil {
			return currentR, err
		}
	} else {
		item.A.Reset()
	}

	// read item.B
	if block&(1<<2) != 0 {
		if currentR, err = item.B.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.B.Reset()
	}

	return r, nil
}

func (item *PairPairAInnerAInnerAInnerBoxed3) ReadTL2(r []byte, ctx *basictl.TL2ReadContext, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	return item.InternalReadTL2(r, nat_XXI, nat_XYI)
}
