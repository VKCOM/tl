// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple3PairBoxedIntLongReset(vec *[3]PairIntLong) {
	for i := range *vec {
		(*vec)[i].Reset()
	}
}

func BuiltinTuple3PairBoxedIntLongFillRandom(rg *basictl.RandGenerator, vec *[3]PairIntLong) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3PairBoxedIntLongRead(w []byte, vec *[3]PairIntLong) (_ []byte, err error) {
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3PairBoxedIntLongWrite(w []byte, vec *[3]PairIntLong) []byte {
	for _, elem := range *vec {
		w = elem.WriteBoxed(w)
	}
	return w
}

func BuiltinTuple3PairBoxedIntLongReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[3]PairIntLong) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]PairIntLong", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]PairIntLong", index+1, 3)
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]PairIntLong", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]PairIntLong", index+1, 3)
	}
	return nil
}

func BuiltinTuple3PairBoxedIntLongWriteJSON(w []byte, vec *[3]PairIntLong) []byte {
	return BuiltinTuple3PairBoxedIntLongWriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple3PairBoxedIntLongWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[3]PairIntLong) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']')
}

func BuiltinTuplePairBoxedIntLongFillRandom(rg *basictl.RandGenerator, vec *[]PairIntLong, nat_n uint32) {
	rg.IncreaseDepth()
	*vec = make([]PairIntLong, nat_n)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuplePairBoxedIntLongRead(w []byte, vec *[]PairIntLong, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]PairIntLong, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuplePairBoxedIntLongWrite(w []byte, vec []PairIntLong, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]PairIntLong", len(vec), nat_n)
	}
	for _, elem := range vec {
		w = elem.WriteBoxed(w)
	}
	return w, nil
}

func BuiltinTuplePairBoxedIntLongReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]PairIntLong, nat_n uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]PairIntLong, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]PairIntLong", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[]PairIntLong", "array is longer than expected")
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]PairIntLong", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[]PairIntLong", index, nat_n)
	}
	return nil
}

func BuiltinTuplePairBoxedIntLongWriteJSON(w []byte, vec []PairIntLong, nat_n uint32) (_ []byte, err error) {
	return BuiltinTuplePairBoxedIntLongWriteJSONOpt(true, false, w, vec, nat_n)
}
func BuiltinTuplePairBoxedIntLongWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []PairIntLong, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]PairIntLong", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']'), nil
}

type PairAInnerAInner struct {
	A AInner
	B AInner
}

func (PairAInnerAInner) TLName() string { return "pair" }
func (PairAInnerAInner) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairAInnerAInner) Reset() {
	item.A.Reset()
	item.B.Reset()
}

func (item *PairAInnerAInner) FillRandom(rg *basictl.RandGenerator, nat_X uint32, nat_Y uint32) {
	item.A.FillRandom(rg, nat_X)
	item.B.FillRandom(rg, nat_Y)
}

func (item *PairAInnerAInner) Read(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = item.A.Read(w, nat_X); err != nil {
		return w, err
	}
	return item.B.Read(w, nat_Y)
}

// This method is general version of Write, use it instead!
func (item *PairAInnerAInner) WriteGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.Write(w, nat_X, nat_Y)
}

func (item *PairAInnerAInner) Write(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = item.A.Write(w, nat_X); err != nil {
		return w, err
	}
	if w, err = item.B.Write(w, nat_Y); err != nil {
		return w, err
	}
	return w, nil
}

func (item *PairAInnerAInner) ReadBoxed(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w, nat_X, nat_Y)
}

// This method is general version of WriteBoxed, use it instead!
func (item *PairAInnerAInner) WriteBoxedGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_X, nat_Y)
}

func (item *PairAInnerAInner) WriteBoxed(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w, nat_X, nat_Y)
}

func (item *PairAInnerAInner) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_X uint32, nat_Y uint32) error {
	var rawA []byte
	var rawB []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if rawA != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				rawA = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "b":
				if rawB != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				rawB = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inAPointer *basictl.JsonLexer
	inA := basictl.JsonLexer{Data: rawA}
	if rawA != nil {
		inAPointer = &inA
	}
	if err := item.A.ReadJSON(legacyTypeNames, inAPointer, nat_X); err != nil {
		return err
	}

	var inBPointer *basictl.JsonLexer
	inB := basictl.JsonLexer{Data: rawB}
	if rawB != nil {
		inBPointer = &inB
	}
	if err := item.B.ReadJSON(legacyTypeNames, inBPointer, nat_Y); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairAInnerAInner) WriteJSONGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_X, nat_Y)
}

func (item *PairAInnerAInner) WriteJSON(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_X, nat_Y)
}
func (item *PairAInnerAInner) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	if w, err = item.A.WriteJSONOpt(newTypeNames, short, w, nat_X); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	if w, err = item.B.WriteJSONOpt(newTypeNames, short, w, nat_Y); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

type PairBoolAColor struct {
	A bool
	B AColor
}

func (PairBoolAColor) TLName() string { return "pair" }
func (PairBoolAColor) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairBoolAColor) Reset() {
	item.A = false
	item.B.Reset()
}

func (item *PairBoolAColor) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomUint(rg)&1 == 1
	item.B.FillRandom(rg)
}

func (item *PairBoolAColor) Read(w []byte) (_ []byte, err error) {
	if w, err = BoolReadBoxed(w, &item.A); err != nil {
		return w, err
	}
	return item.B.ReadBoxed(w)
}

// This method is general version of Write, use it instead!
func (item *PairBoolAColor) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairBoolAColor) Write(w []byte) []byte {
	w = BoolWriteBoxed(w, item.A)
	w = item.B.WriteBoxed(w)
	return w
}

func (item *PairBoolAColor) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *PairBoolAColor) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairBoolAColor) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairBoolAColor) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairBoolAColor) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := Json2ReadBool(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := item.B.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = false
	}
	if !propBPresented {
		item.B.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairBoolAColor) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairBoolAColor) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairBoolAColor) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteBool(w, item.A)
	if (item.A) == false {
		w = w[:backupIndexA]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = item.B.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *PairBoolAColor) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairBoolAColor) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

type PairFloatDouble struct {
	A float32
	B float64
}

func (PairFloatDouble) TLName() string { return "pair" }
func (PairFloatDouble) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairFloatDouble) Reset() {
	item.A = 0
	item.B = 0
}

func (item *PairFloatDouble) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomFloat(rg)
	item.B = basictl.RandomDouble(rg)
}

func (item *PairFloatDouble) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.FloatRead(w, &item.A); err != nil {
		return w, err
	}
	return basictl.DoubleRead(w, &item.B)
}

// This method is general version of Write, use it instead!
func (item *PairFloatDouble) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairFloatDouble) Write(w []byte) []byte {
	w = basictl.FloatWrite(w, item.A)
	w = basictl.DoubleWrite(w, item.B)
	return w
}

func (item *PairFloatDouble) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *PairFloatDouble) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairFloatDouble) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairFloatDouble) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairFloatDouble) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := Json2ReadFloat32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := Json2ReadFloat64(in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	if !propBPresented {
		item.B = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairFloatDouble) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairFloatDouble) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairFloatDouble) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteFloat32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = basictl.JSONWriteFloat64(w, item.B)
	if (item.B != 0) == false {
		w = w[:backupIndexB]
	}
	return append(w, '}')
}

func (item *PairFloatDouble) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairFloatDouble) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

type PairIntInt struct {
	A int32
	B int32
}

func (PairIntInt) TLName() string { return "pair" }
func (PairIntInt) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairIntInt) Reset() {
	item.A = 0
	item.B = 0
}

func (item *PairIntInt) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomInt(rg)
	item.B = basictl.RandomInt(rg)
}

func (item *PairIntInt) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.A); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.B)
}

// This method is general version of Write, use it instead!
func (item *PairIntInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairIntInt) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.A)
	w = basictl.IntWrite(w, item.B)
	return w
}

func (item *PairIntInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *PairIntInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairIntInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairIntInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairIntInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := Json2ReadInt32(in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	if !propBPresented {
		item.B = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairIntInt) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairIntInt) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairIntInt) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = basictl.JSONWriteInt32(w, item.B)
	if (item.B != 0) == false {
		w = w[:backupIndexB]
	}
	return append(w, '}')
}

func (item *PairIntInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairIntInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

type PairIntLong struct {
	A int32
	B int64
}

func (PairIntLong) TLName() string { return "pair" }
func (PairIntLong) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairIntLong) Reset() {
	item.A = 0
	item.B = 0
}

func (item *PairIntLong) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomInt(rg)
	item.B = basictl.RandomLong(rg)
}

func (item *PairIntLong) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.A); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.B)
}

// This method is general version of Write, use it instead!
func (item *PairIntLong) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairIntLong) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.A)
	w = basictl.LongWrite(w, item.B)
	return w
}

func (item *PairIntLong) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *PairIntLong) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairIntLong) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairIntLong) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairIntLong) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := Json2ReadInt64(in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	if !propBPresented {
		item.B = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairIntLong) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairIntLong) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairIntLong) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = basictl.JSONWriteInt64(w, item.B)
	if (item.B != 0) == false {
		w = w[:backupIndexB]
	}
	return append(w, '}')
}

func (item *PairIntLong) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairIntLong) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

type PairIntPairMultiPointString struct {
	A int32
	B PairMultiPointString
}

func (PairIntPairMultiPointString) TLName() string { return "pair" }
func (PairIntPairMultiPointString) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairIntPairMultiPointString) Reset() {
	item.A = 0
	item.B.Reset()
}

func (item *PairIntPairMultiPointString) FillRandom(rg *basictl.RandGenerator) {
	item.A = basictl.RandomInt(rg)
	item.B.FillRandom(rg)
}

func (item *PairIntPairMultiPointString) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.A); err != nil {
		return w, err
	}
	return item.B.Read(w)
}

// This method is general version of Write, use it instead!
func (item *PairIntPairMultiPointString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairIntPairMultiPointString) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.A)
	w = item.B.Write(w)
	return w
}

func (item *PairIntPairMultiPointString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *PairIntPairMultiPointString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairIntPairMultiPointString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairIntPairMultiPointString) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairIntPairMultiPointString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := Json2ReadInt32(in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := item.B.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A = 0
	}
	if !propBPresented {
		item.B.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairIntPairMultiPointString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairIntPairMultiPointString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairIntPairMultiPointString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = basictl.JSONWriteInt32(w, item.A)
	if (item.A != 0) == false {
		w = w[:backupIndexA]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = item.B.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *PairIntPairMultiPointString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairIntPairMultiPointString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

type PairMultiPointString struct {
	A MultiPoint
	B string
}

func (PairMultiPointString) TLName() string { return "pair" }
func (PairMultiPointString) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairMultiPointString) Reset() {
	item.A.Reset()
	item.B = ""
}

func (item *PairMultiPointString) FillRandom(rg *basictl.RandGenerator) {
	item.A.FillRandom(rg)
	item.B = basictl.RandomString(rg)
}

func (item *PairMultiPointString) Read(w []byte) (_ []byte, err error) {
	if w, err = item.A.Read(w); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.B)
}

// This method is general version of Write, use it instead!
func (item *PairMultiPointString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *PairMultiPointString) Write(w []byte) []byte {
	w = item.A.Write(w)
	w = basictl.StringWrite(w, item.B)
	return w
}

func (item *PairMultiPointString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *PairMultiPointString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *PairMultiPointString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w)
}

func (item PairMultiPointString) String() string {
	return string(item.WriteJSON(nil))
}

func (item *PairMultiPointString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				if err := item.A.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := Json2ReadString(in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		item.A.Reset()
	}
	if !propBPresented {
		item.B = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairMultiPointString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *PairMultiPointString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *PairMultiPointString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = item.A.WriteJSONOpt(newTypeNames, short, w)
	backupIndexB := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = basictl.JSONWriteString(w, item.B)
	if (len(item.B) != 0) == false {
		w = w[:backupIndexB]
	}
	return append(w, '}')
}

func (item *PairMultiPointString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *PairMultiPointString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("pair", err.Error())
	}
	return nil
}

type PairPairAInnerAInnerAInnerBoxed3 struct {
	A PairAInnerAInner
	B AInner3
}

func (PairPairAInnerAInnerAInnerBoxed3) TLName() string { return "pair" }
func (PairPairAInnerAInnerAInnerBoxed3) TLTag() uint32  { return 0x0f3c47ab }

func (item *PairPairAInnerAInnerAInnerBoxed3) Reset() {
	item.A.Reset()
	item.B.Reset()
}

func (item *PairPairAInnerAInnerAInnerBoxed3) FillRandom(rg *basictl.RandGenerator, nat_XXI uint32, nat_XYI uint32) {
	item.A.FillRandom(rg, nat_XXI, nat_XYI)
	item.B.FillRandom(rg)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) Read(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	if w, err = item.A.Read(w, nat_XXI, nat_XYI); err != nil {
		return w, err
	}
	return item.B.ReadBoxed(w)
}

// This method is general version of Write, use it instead!
func (item *PairPairAInnerAInnerAInnerBoxed3) WriteGeneral(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	return item.Write(w, nat_XXI, nat_XYI)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) Write(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	if w, err = item.A.Write(w, nat_XXI, nat_XYI); err != nil {
		return w, err
	}
	w = item.B.WriteBoxed(w)
	return w, nil
}

func (item *PairPairAInnerAInnerAInnerBoxed3) ReadBoxed(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f3c47ab); err != nil {
		return w, err
	}
	return item.Read(w, nat_XXI, nat_XYI)
}

// This method is general version of WriteBoxed, use it instead!
func (item *PairPairAInnerAInnerAInnerBoxed3) WriteBoxedGeneral(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_XXI, nat_XYI)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) WriteBoxed(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x0f3c47ab)
	return item.Write(w, nat_XXI, nat_XYI)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_XXI uint32, nat_XYI uint32) error {
	var rawA []byte
	var propBPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if rawA != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "a")
				}
				rawA = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("pair", "b")
				}
				if err := item.B.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propBPresented = true
			default:
				return ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propBPresented {
		item.B.Reset()
	}
	var inAPointer *basictl.JsonLexer
	inA := basictl.JsonLexer{Data: rawA}
	if rawA != nil {
		inAPointer = &inA
	}
	if err := item.A.ReadJSON(legacyTypeNames, inAPointer, nat_XXI, nat_XYI); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairPairAInnerAInnerAInnerBoxed3) WriteJSONGeneral(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_XXI, nat_XYI)
}

func (item *PairPairAInnerAInnerAInnerBoxed3) WriteJSON(w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_XXI, nat_XYI)
}
func (item *PairPairAInnerAInnerAInnerBoxed3) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_XXI uint32, nat_XYI uint32) (_ []byte, err error) {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	if w, err = item.A.WriteJSONOpt(newTypeNames, short, w, nat_XXI, nat_XYI); err != nil {
		return w, err
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = item.B.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}'), nil
}
