// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple3Replace14ElemElemLongReset(vec *[3]Replace14ElemElemLong) {
	for i := range *vec {
		(*vec)[i].Reset()
	}
}

func BuiltinTuple3Replace14ElemElemLongFillRandom(rg *basictl.RandGenerator, vec *[3]Replace14ElemElemLong, nat_tn uint32, nat_tk uint32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i].FillRandom(rg, nat_tn, nat_tk)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple3Replace14ElemElemLongRead(w []byte, vec *[3]Replace14ElemElemLong, nat_tn uint32, nat_tk uint32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = (*vec)[i].Read(w, nat_tn, nat_tk); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3Replace14ElemElemLongWrite(w []byte, vec *[3]Replace14ElemElemLong, nat_tn uint32, nat_tk uint32) (_ []byte, err error) {
	for _, elem := range *vec {
		if w, err = elem.Write(w, nat_tn, nat_tk); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple3Replace14ElemElemLongReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[3]Replace14ElemElemLong, nat_tn uint32, nat_tk uint32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]Replace14ElemElemLong", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 3 {
				return ErrorWrongSequenceLength("[3]Replace14ElemElemLong", index+1, 3)
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in, nat_tn, nat_tk); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[3]Replace14ElemElemLong", "expected json array's end")
		}
	}
	if index != 3 {
		return ErrorWrongSequenceLength("[3]Replace14ElemElemLong", index+1, 3)
	}
	return nil
}

func BuiltinTuple3Replace14ElemElemLongWriteJSON(w []byte, vec *[3]Replace14ElemElemLong, nat_tn uint32, nat_tk uint32) (_ []byte, err error) {
	return BuiltinTuple3Replace14ElemElemLongWriteJSONOpt(true, false, w, vec, nat_tn, nat_tk)
}
func BuiltinTuple3Replace14ElemElemLongWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[3]Replace14ElemElemLong, nat_tn uint32, nat_tk uint32) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w, nat_tn, nat_tk); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

type Replace14ElemElemLong struct {
	X int32
	Y []int64
}

func (item *Replace14ElemElemLong) Reset() {
	item.X = 0
	item.Y = item.Y[:0]
}

func (item *Replace14ElemElemLong) FillRandom(rg *basictl.RandGenerator, nat_n uint32, nat_k uint32) {
	item.X = basictl.RandomInt(rg)
	BuiltinTupleLongFillRandom(rg, &item.Y, nat_k)
}

func (item *Replace14ElemElemLong) Read(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.X); err != nil {
		return w, err
	}
	return BuiltinTupleLongRead(w, &item.Y, nat_k)
}

// This method is general version of Write, use it instead!
func (item *Replace14ElemElemLong) WriteGeneral(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	return item.Write(w, nat_n, nat_k)
}

func (item *Replace14ElemElemLong) Write(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.X)
	if w, err = BuiltinTupleLongWrite(w, item.Y, nat_k); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Replace14ElemElemLong) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_n uint32, nat_k uint32) error {
	var propXPresented bool
	var rawY []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if propXPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("replace14ElemElem", "x")
				}
				if err := Json2ReadInt32(in, &item.X); err != nil {
					return err
				}
				propXPresented = true
			case "y":
				if rawY != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("replace14ElemElem", "y")
				}
				rawY = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("replace14ElemElem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propXPresented {
		item.X = 0
	}
	var inYPointer *basictl.JsonLexer
	inY := basictl.JsonLexer{Data: rawY}
	if rawY != nil {
		inYPointer = &inY
	}
	if err := BuiltinTupleLongReadJSON(legacyTypeNames, inYPointer, &item.Y, nat_k); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Replace14ElemElemLong) WriteJSONGeneral(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n, nat_k)
}

func (item *Replace14ElemElemLong) WriteJSON(w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n, nat_k)
}
func (item *Replace14ElemElemLong) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_n uint32, nat_k uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	w = basictl.JSONWriteInt32(w, item.X)
	if (item.X != 0) == false {
		w = w[:backupIndexX]
	}
	backupIndexY := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"y":`...)
	if w, err = BuiltinTupleLongWriteJSONOpt(newTypeNames, short, w, item.Y, nat_k); err != nil {
		return w, err
	}
	if (len(item.Y) != 0) == false {
		w = w[:backupIndexY]
	}
	return append(w, '}'), nil
}
