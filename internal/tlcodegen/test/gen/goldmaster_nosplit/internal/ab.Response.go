// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

func (item AbAlias) AsUnion() AbResponse {
	var ret AbResponse
	ret.SetAlias(item)
	return ret
}

type AbAlias int32

func (AbAlias) TLName() string { return "ab.alias" }
func (AbAlias) TLTag() uint32  { return 0x944aaa97 }

func (item *AbAlias) Reset() {
	ptr := (*int32)(item)
	*ptr = 0
}

func (item *AbAlias) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*int32)(item)
	*ptr = basictl.RandomInt(rg)
}

func (item *AbAlias) Read(w []byte) (_ []byte, err error) {
	ptr := (*int32)(item)
	return basictl.IntRead(w, ptr)
}

func (item *AbAlias) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *AbAlias) Write(w []byte) []byte {
	ptr := (*int32)(item)
	return basictl.IntWrite(w, *ptr)
}

func (item *AbAlias) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x944aaa97); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *AbAlias) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AbAlias) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x944aaa97)
	return item.Write(w)
}

func (item AbAlias) String() string {
	return string(item.WriteJSON(nil))
}
func (item *AbAlias) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*int32)(item)
	if err := Json2ReadInt32(in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AbAlias) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *AbAlias) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *AbAlias) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*int32)(item)
	w = basictl.JSONWriteInt32(w, *ptr)
	return w
}
func (item *AbAlias) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AbAlias) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("ab.alias", err.Error())
	}
	return nil
}

func (item *AbAlias) CalculateLayout(sizes []int) []int {
	ptr := (*int32)(item)
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// add constructor No for union type in case of non first option
	lastUsedByte = 1
	currentSize += basictl.TL2CalculateSize(2)

	// calculate layout for ptr
	if *ptr != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *AbAlias) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*int32)(item)
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// add constructor No for union type in case of non first option
	currentBlock |= (1 << 0)

	w = basictl.TL2WriteSize(w, 2)
	serializedSize += basictl.TL2CalculateSize(2)
	// write ptr
	if *ptr != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, *ptr)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *AbAlias) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *AbAlias) ReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*int32)(item)
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var _skip int
		if currentR, err = basictl.TL2ReadSize(currentR, &_skip); err != nil {
			return currentR, err
		}
	}

	// read ptr
	if block&(1<<1) != 0 {
		if ptr == nil {
			var newValue int32
			ptr = &newValue
		}
		if currentR, err = basictl.IntRead(currentR, ptr); err != nil {
			return currentR, err
		}
	} else {
		if ptr == nil {
			var newValue int32
			ptr = &newValue
		}
		*ptr = 0
	}

	return r, nil
}

func (item AbCode) AsUnion() AbResponse {
	var ret AbResponse
	ret.SetCode(item)
	return ret
}

type AbCode struct {
	X int32
}

func (AbCode) TLName() string { return "ab.code" }
func (AbCode) TLTag() uint32  { return 0x7651b1ac }

func (item *AbCode) Reset() {
	item.X = 0
}

func (item *AbCode) FillRandom(rg *basictl.RandGenerator) {
	item.X = basictl.RandomInt(rg)
}

func (item *AbCode) Read(w []byte) (_ []byte, err error) {
	return basictl.IntRead(w, &item.X)
}

func (item *AbCode) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *AbCode) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.X)
	return w
}

func (item *AbCode) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x7651b1ac); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *AbCode) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AbCode) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x7651b1ac)
	return item.Write(w)
}

func (item AbCode) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AbCode) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propXPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if propXPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("ab.code", "x")
				}
				if err := Json2ReadInt32(in, &item.X); err != nil {
					return err
				}
				propXPresented = true
			default:
				return ErrorInvalidJSONExcessElement("ab.code", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propXPresented {
		item.X = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AbCode) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *AbCode) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *AbCode) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	w = basictl.JSONWriteInt32(w, item.X)
	if (item.X != 0) == false {
		w = w[:backupIndexX]
	}
	return append(w, '}')
}

func (item *AbCode) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AbCode) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("ab.code", err.Error())
	}
	return nil
}

func (item *AbCode) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// add constructor No for union type in case of non first option
	lastUsedByte = 1
	currentSize += basictl.TL2CalculateSize(1)

	// calculate layout for item.X
	if item.X != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *AbCode) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// add constructor No for union type in case of non first option
	currentBlock |= (1 << 0)

	w = basictl.TL2WriteSize(w, 1)
	serializedSize += basictl.TL2CalculateSize(1)
	// write item.X
	if item.X != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, item.X)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *AbCode) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *AbCode) ReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var _skip int
		if currentR, err = basictl.TL2ReadSize(currentR, &_skip); err != nil {
			return currentR, err
		}
	}

	// read item.X
	if block&(1<<1) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.X); err != nil {
			return currentR, err
		}
	} else {
		item.X = 0
	}

	return r, nil
}

func (item AbEmpty) AsUnion() AbResponse {
	var ret AbResponse
	ret.SetEmpty()
	return ret
}

type AbEmpty struct {
}

func (AbEmpty) TLName() string { return "ab.empty" }
func (AbEmpty) TLTag() uint32  { return 0x1ec6a63e }

func (item *AbEmpty) Reset() {}

func (item *AbEmpty) FillRandom(rg *basictl.RandGenerator) {}

func (item *AbEmpty) Read(w []byte) (_ []byte, err error) { return w, nil }

func (item *AbEmpty) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *AbEmpty) Write(w []byte) []byte {
	return w
}

func (item *AbEmpty) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1ec6a63e); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *AbEmpty) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AbEmpty) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1ec6a63e)
	return item.Write(w)
}

func (item AbEmpty) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AbEmpty) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("ab.empty", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AbEmpty) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *AbEmpty) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *AbEmpty) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *AbEmpty) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AbEmpty) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("ab.empty", err.Error())
	}
	return nil
}

func (item *AbEmpty) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *AbEmpty) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	w = append(w, 0)
	serializedSize += 1
	return w, sizes
}

func (item *AbEmpty) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *AbEmpty) ReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var _skip int
		if currentR, err = basictl.TL2ReadSize(currentR, &_skip); err != nil {
			return currentR, err
		}
	}

	return r, nil
}

var _AbResponse = [4]UnionElement{
	{TLTag: 0x1ec6a63e, TLName: "ab.empty", TLString: "ab.empty#1ec6a63e"},
	{TLTag: 0x7651b1ac, TLName: "ab.code", TLString: "ab.code#7651b1ac"},
	{TLTag: 0x944aaa97, TLName: "ab.alias", TLString: "ab.alias#944aaa97"},
	{TLTag: 0x8c202f64, TLName: "cd.response", TLString: "cd.response#8c202f64"},
}

type AbResponse struct {
	valueCode     AbCode
	valueAlias    AbAlias
	valueResponse CdResponse
	index         int
}

func (item AbResponse) TLName() string { return _AbResponse[item.index].TLName }
func (item AbResponse) TLTag() uint32  { return _AbResponse[item.index].TLTag }

func (item *AbResponse) Reset() { item.index = 0 }
func (item *AbResponse) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 4
	switch index {
	case 0:
		item.index = 0
	case 1:
		item.index = 1
		item.valueCode.FillRandom(rg)
	case 2:
		item.index = 2
		item.valueAlias.FillRandom(rg)
	case 3:
		item.index = 3
		item.valueResponse.FillRandom(rg)
	default:
	}
}

func (item *AbResponse) IsEmpty() bool { return item.index == 0 }

func (item *AbResponse) AsEmpty() (AbEmpty, bool) {
	var value AbEmpty
	return value, item.index == 0
}
func (item *AbResponse) ResetToEmpty() { item.index = 0 }
func (item *AbResponse) SetEmpty()     { item.index = 0 }

func (item *AbResponse) IsCode() bool { return item.index == 1 }

func (item *AbResponse) AsCode() (*AbCode, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueCode, true
}
func (item *AbResponse) ResetToCode() *AbCode {
	item.index = 1
	item.valueCode.Reset()
	return &item.valueCode
}
func (item *AbResponse) SetCode(value AbCode) {
	item.index = 1
	item.valueCode = value
}

func (item *AbResponse) IsAlias() bool { return item.index == 2 }

func (item *AbResponse) AsAlias() (*AbAlias, bool) {
	if item.index != 2 {
		return nil, false
	}
	return &item.valueAlias, true
}
func (item *AbResponse) ResetToAlias() *AbAlias {
	item.index = 2
	item.valueAlias.Reset()
	return &item.valueAlias
}
func (item *AbResponse) SetAlias(value AbAlias) {
	item.index = 2
	item.valueAlias = value
}

func (item *AbResponse) IsResponse() bool { return item.index == 3 }

func (item *AbResponse) AsResponse() (*CdResponse, bool) {
	if item.index != 3 {
		return nil, false
	}
	return &item.valueResponse, true
}
func (item *AbResponse) ResetToResponse() *CdResponse {
	item.index = 3
	item.valueResponse.Reset()
	return &item.valueResponse
}
func (item *AbResponse) SetResponse(value CdResponse) {
	item.index = 3
	item.valueResponse = value
}

func (item *AbResponse) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x1ec6a63e:
		item.index = 0
		return w, nil
	case 0x7651b1ac:
		item.index = 1
		return item.valueCode.Read(w)
	case 0x944aaa97:
		item.index = 2
		return item.valueAlias.Read(w)
	case 0x8c202f64:
		item.index = 3
		return item.valueResponse.Read(w)
	default:
		return w, ErrorInvalidUnionTag("ab.Response", tag)
	}
}

func (item *AbResponse) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AbResponse) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _AbResponse[item.index].TLTag)
	switch item.index {
	case 0:
		return w
	case 1:
		w = item.valueCode.Write(w)
	case 2:
		w = item.valueAlias.Write(w)
	case 3:
		w = item.valueResponse.Write(w)
	}
	return w
}

func (item *AbResponse) CalculateLayout(sizes []int) []int {
	switch item.index {
	case 0:
		sizes = append(sizes, 0)
	case 1:
		sizes = item.valueCode.CalculateLayout(sizes)
	case 2:
		sizes = item.valueAlias.CalculateLayout(sizes)
	case 3:
		sizes = item.valueResponse.CalculateLayout(sizes)
	}
	return sizes
}

func (item *AbResponse) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	switch item.index {
	case 0:
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, 0)
	case 1:
		w, sizes = item.valueCode.InternalWriteTL2(w, sizes)
	case 2:
		w, sizes = item.valueAlias.InternalWriteTL2(w, sizes)
	case 3:
		w, sizes = item.valueResponse.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}
func (item *AbResponse) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *AbResponse) ReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.index = 0
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if r, item.index, err = basictl.TL2ParseSize(r); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	switch item.index {
	case 0:
		break
	case 1:
		r = saveR
		if r, err = item.valueCode.ReadTL2(r); err != nil {
			return r, err
		}
	case 2:
		r = saveR
		if r, err = item.valueAlias.ReadTL2(r); err != nil {
			return r, err
		}
	case 3:
		r = saveR
		if r, err = item.valueResponse.ReadTL2(r); err != nil {
			return r, err
		}
	}
	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item *AbResponse) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("ab.Response", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "ab.empty#1ec6a63e", "ab.empty", "#1ec6a63e":
		if !legacyTypeNames && _tag == "ab.empty#1ec6a63e" {
			return ErrorInvalidUnionLegacyTagJSON("ab.Response", "ab.empty#1ec6a63e")
		}
		item.index = 0
	case "ab.code#7651b1ac", "ab.code", "#7651b1ac":
		if !legacyTypeNames && _tag == "ab.code#7651b1ac" {
			return ErrorInvalidUnionLegacyTagJSON("ab.Response", "ab.code#7651b1ac")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueCode.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "ab.alias#944aaa97", "ab.alias", "#944aaa97":
		if !legacyTypeNames && _tag == "ab.alias#944aaa97" {
			return ErrorInvalidUnionLegacyTagJSON("ab.Response", "ab.alias#944aaa97")
		}
		item.index = 2
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueAlias.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "cd.response#8c202f64", "cd.response", "#8c202f64":
		if !legacyTypeNames && _tag == "cd.response#8c202f64" {
			return ErrorInvalidUnionLegacyTagJSON("ab.Response", "cd.response#8c202f64")
		}
		item.index = 3
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueResponse.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("ab.Response", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AbResponse) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *AbResponse) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *AbResponse) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"ab.empty"`...)
		} else {
			w = append(w, `{"type":"ab.empty#1ec6a63e"`...)
		}
		return append(w, '}')
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"ab.code"`...)
		} else {
			w = append(w, `{"type":"ab.code#7651b1ac"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueCode.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	case 2:
		if newTypeNames {
			w = append(w, `{"type":"ab.alias"`...)
		} else {
			w = append(w, `{"type":"ab.alias#944aaa97"`...)
		}
		if item.valueAlias != 0 {
			w = append(w, `,"value":`...)
			w = item.valueAlias.WriteJSONOpt(newTypeNames, short, w)
		}
		return append(w, '}')
	case 3:
		if newTypeNames {
			w = append(w, `{"type":"cd.response"`...)
		} else {
			w = append(w, `{"type":"cd.response#8c202f64"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueResponse.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item AbResponse) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AbResponse) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AbResponse) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("ab.Response", err.Error())
	}
	return nil
}

type AbResponseBytes struct {
	valueCode     AbCode
	valueAlias    AbAlias
	valueResponse CdResponseBytes
	index         int
}

func (item AbResponseBytes) TLName() string { return _AbResponse[item.index].TLName }
func (item AbResponseBytes) TLTag() uint32  { return _AbResponse[item.index].TLTag }

func (item *AbResponseBytes) Reset() { item.index = 0 }
func (item *AbResponseBytes) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 4
	switch index {
	case 0:
		item.index = 0
	case 1:
		item.index = 1
		item.valueCode.FillRandom(rg)
	case 2:
		item.index = 2
		item.valueAlias.FillRandom(rg)
	case 3:
		item.index = 3
		item.valueResponse.FillRandom(rg)
	default:
	}
}

func (item *AbResponseBytes) IsEmpty() bool { return item.index == 0 }

func (item *AbResponseBytes) AsEmpty() (AbEmpty, bool) {
	var value AbEmpty
	return value, item.index == 0
}
func (item *AbResponseBytes) ResetToEmpty() { item.index = 0 }
func (item *AbResponseBytes) SetEmpty()     { item.index = 0 }

func (item *AbResponseBytes) IsCode() bool { return item.index == 1 }

func (item *AbResponseBytes) AsCode() (*AbCode, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueCode, true
}
func (item *AbResponseBytes) ResetToCode() *AbCode {
	item.index = 1
	item.valueCode.Reset()
	return &item.valueCode
}
func (item *AbResponseBytes) SetCode(value AbCode) {
	item.index = 1
	item.valueCode = value
}

func (item *AbResponseBytes) IsAlias() bool { return item.index == 2 }

func (item *AbResponseBytes) AsAlias() (*AbAlias, bool) {
	if item.index != 2 {
		return nil, false
	}
	return &item.valueAlias, true
}
func (item *AbResponseBytes) ResetToAlias() *AbAlias {
	item.index = 2
	item.valueAlias.Reset()
	return &item.valueAlias
}
func (item *AbResponseBytes) SetAlias(value AbAlias) {
	item.index = 2
	item.valueAlias = value
}

func (item *AbResponseBytes) IsResponse() bool { return item.index == 3 }

func (item *AbResponseBytes) AsResponse() (*CdResponseBytes, bool) {
	if item.index != 3 {
		return nil, false
	}
	return &item.valueResponse, true
}
func (item *AbResponseBytes) ResetToResponse() *CdResponseBytes {
	item.index = 3
	item.valueResponse.Reset()
	return &item.valueResponse
}
func (item *AbResponseBytes) SetResponse(value CdResponseBytes) {
	item.index = 3
	item.valueResponse = value
}

func (item *AbResponseBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x1ec6a63e:
		item.index = 0
		return w, nil
	case 0x7651b1ac:
		item.index = 1
		return item.valueCode.Read(w)
	case 0x944aaa97:
		item.index = 2
		return item.valueAlias.Read(w)
	case 0x8c202f64:
		item.index = 3
		return item.valueResponse.Read(w)
	default:
		return w, ErrorInvalidUnionTag("ab.Response", tag)
	}
}

func (item *AbResponseBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AbResponseBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _AbResponse[item.index].TLTag)
	switch item.index {
	case 0:
		return w
	case 1:
		w = item.valueCode.Write(w)
	case 2:
		w = item.valueAlias.Write(w)
	case 3:
		w = item.valueResponse.Write(w)
	}
	return w
}

func (item *AbResponseBytes) CalculateLayout(sizes []int) []int {
	switch item.index {
	case 0:
		sizes = append(sizes, 0)
	case 1:
		sizes = item.valueCode.CalculateLayout(sizes)
	case 2:
		sizes = item.valueAlias.CalculateLayout(sizes)
	case 3:
		sizes = item.valueResponse.CalculateLayout(sizes)
	}
	return sizes
}

func (item *AbResponseBytes) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	switch item.index {
	case 0:
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, 0)
	case 1:
		w, sizes = item.valueCode.InternalWriteTL2(w, sizes)
	case 2:
		w, sizes = item.valueAlias.InternalWriteTL2(w, sizes)
	case 3:
		w, sizes = item.valueResponse.InternalWriteTL2(w, sizes)
	}
	return w, sizes
}
func (item *AbResponseBytes) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *AbResponseBytes) ReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.index = 0
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if r, item.index, err = basictl.TL2ParseSize(r); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	switch item.index {
	case 0:
		break
	case 1:
		r = saveR
		if r, err = item.valueCode.ReadTL2(r); err != nil {
			return r, err
		}
	case 2:
		r = saveR
		if r, err = item.valueAlias.ReadTL2(r); err != nil {
			return r, err
		}
	case 3:
		r = saveR
		if r, err = item.valueResponse.ReadTL2(r); err != nil {
			return r, err
		}
	}
	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item *AbResponseBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("ab.Response", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "ab.empty#1ec6a63e", "ab.empty", "#1ec6a63e":
		if !legacyTypeNames && _tag == "ab.empty#1ec6a63e" {
			return ErrorInvalidUnionLegacyTagJSON("ab.Response", "ab.empty#1ec6a63e")
		}
		item.index = 0
	case "ab.code#7651b1ac", "ab.code", "#7651b1ac":
		if !legacyTypeNames && _tag == "ab.code#7651b1ac" {
			return ErrorInvalidUnionLegacyTagJSON("ab.Response", "ab.code#7651b1ac")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueCode.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "ab.alias#944aaa97", "ab.alias", "#944aaa97":
		if !legacyTypeNames && _tag == "ab.alias#944aaa97" {
			return ErrorInvalidUnionLegacyTagJSON("ab.Response", "ab.alias#944aaa97")
		}
		item.index = 2
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueAlias.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "cd.response#8c202f64", "cd.response", "#8c202f64":
		if !legacyTypeNames && _tag == "cd.response#8c202f64" {
			return ErrorInvalidUnionLegacyTagJSON("ab.Response", "cd.response#8c202f64")
		}
		item.index = 3
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueResponse.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("ab.Response", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AbResponseBytes) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *AbResponseBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *AbResponseBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"ab.empty"`...)
		} else {
			w = append(w, `{"type":"ab.empty#1ec6a63e"`...)
		}
		return append(w, '}')
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"ab.code"`...)
		} else {
			w = append(w, `{"type":"ab.code#7651b1ac"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueCode.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	case 2:
		if newTypeNames {
			w = append(w, `{"type":"ab.alias"`...)
		} else {
			w = append(w, `{"type":"ab.alias#944aaa97"`...)
		}
		if item.valueAlias != 0 {
			w = append(w, `,"value":`...)
			w = item.valueAlias.WriteJSONOpt(newTypeNames, short, w)
		}
		return append(w, '}')
	case 3:
		if newTypeNames {
			w = append(w, `{"type":"cd.response"`...)
		} else {
			w = append(w, `{"type":"cd.response#8c202f64"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueResponse.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item AbResponseBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AbResponseBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AbResponseBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("ab.Response", err.Error())
	}
	return nil
}

func BuiltinTupleAbResponseFillRandom(rg *basictl.RandGenerator, vec *[]AbResponse, nat_n uint32) {
	rg.IncreaseDepth()
	*vec = make([]AbResponse, nat_n)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTupleAbResponseRead(w []byte, vec *[]AbResponse, nat_n uint32) (_ []byte, err error) {
	if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]AbResponse, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	for i := range *vec {
		if w, err = (*vec)[i].ReadBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTupleAbResponseWrite(w []byte, vec []AbResponse, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]AbResponse", len(vec), nat_n)
	}
	for _, elem := range vec {
		w = elem.WriteBoxed(w)
	}
	return w, nil
}

func BuiltinTupleAbResponseCalculateLayout(sizes []int, vec *[]AbResponse, nat_n uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	for i := 0; i < len(*vec); i++ {
		currentPosition := len(sizes)
		sizes = (*vec)[i].CalculateLayout(sizes)
		sizes[sizePosition] += sizes[currentPosition]
		sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
	}
	return sizes
}

func BuiltinTupleAbResponseInternalWriteTL2(w []byte, sizes []int, vec *[]AbResponse, nat_n uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	for i := 0; i < len(*vec); i++ {
		w, sizes = (*vec)[i].InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinTupleAbResponseReadTL2(r []byte, vec *[]AbResponse, nat_n uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if uint32(cap(*vec)) < nat_n {
		*vec = make([]AbResponse, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	i := 0
	for len(currentR) > 0 {
		if uint32(i) == nat_n {
			return r, basictl.TL2Error("more elements than expected")
		}
		if currentR, err = (*vec)[i].ReadTL2(currentR); err != nil {
			return currentR, err
		}
		i += 1
	}
	if uint32(i) != nat_n {
		return r, basictl.TL2Error("less elements than expected")
	}
	return r, nil
}
func BuiltinTupleAbResponseReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]AbResponse, nat_n uint32) error {
	if uint32(cap(*vec)) < nat_n {
		*vec = make([]AbResponse, nat_n)
	} else {
		*vec = (*vec)[:nat_n]
	}
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]AbResponse", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if nat_n <= uint32(index) {
				return ErrorInvalidJSON("[]AbResponse", "array is longer than expected")
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]AbResponse", "expected json array's end")
		}
	}
	if uint32(index) != nat_n {
		return ErrorWrongSequenceLength("[]AbResponse", index, nat_n)
	}
	return nil
}

func BuiltinTupleAbResponseWriteJSON(w []byte, vec []AbResponse, nat_n uint32) (_ []byte, err error) {
	return BuiltinTupleAbResponseWriteJSONOpt(true, false, w, vec, nat_n)
}
func BuiltinTupleAbResponseWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []AbResponse, nat_n uint32) (_ []byte, err error) {
	if uint32(len(vec)) != nat_n {
		return w, ErrorWrongSequenceLength("[]AbResponse", len(vec), nat_n)
	}
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']'), nil
}

func (item CdResponse) AsUnion() AbResponse {
	var ret AbResponse
	ret.SetResponse(item)
	return ret
}

type CdResponse struct {
	X   int32
	Str string
}

func (CdResponse) TLName() string { return "cd.response" }
func (CdResponse) TLTag() uint32  { return 0x8c202f64 }

func (item *CdResponse) Reset() {
	item.X = 0
	item.Str = ""
}

func (item *CdResponse) FillRandom(rg *basictl.RandGenerator) {
	item.X = basictl.RandomInt(rg)
	item.Str = basictl.RandomString(rg)
}

func (item *CdResponse) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.X); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.Str)
}

func (item *CdResponse) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *CdResponse) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.X)
	w = basictl.StringWrite(w, item.Str)
	return w
}

func (item *CdResponse) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x8c202f64); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *CdResponse) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *CdResponse) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x8c202f64)
	return item.Write(w)
}

func (item CdResponse) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CdResponse) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propXPresented bool
	var propStrPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if propXPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("cd.response", "x")
				}
				if err := Json2ReadInt32(in, &item.X); err != nil {
					return err
				}
				propXPresented = true
			case "str":
				if propStrPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("cd.response", "str")
				}
				if err := Json2ReadString(in, &item.Str); err != nil {
					return err
				}
				propStrPresented = true
			default:
				return ErrorInvalidJSONExcessElement("cd.response", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propXPresented {
		item.X = 0
	}
	if !propStrPresented {
		item.Str = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CdResponse) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *CdResponse) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *CdResponse) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	w = basictl.JSONWriteInt32(w, item.X)
	if (item.X != 0) == false {
		w = w[:backupIndexX]
	}
	backupIndexStr := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"str":`...)
	w = basictl.JSONWriteString(w, item.Str)
	if (len(item.Str) != 0) == false {
		w = w[:backupIndexStr]
	}
	return append(w, '}')
}

func (item *CdResponse) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CdResponse) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("cd.response", err.Error())
	}
	return nil
}

func (item *CdResponse) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// add constructor No for union type in case of non first option
	lastUsedByte = 1
	currentSize += basictl.TL2CalculateSize(3)

	// calculate layout for item.X
	if item.X != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.Str
	if len(item.Str) != 0 {

		if len(item.Str) != 0 {
			lastUsedByte = 1
			currentSize += len(item.Str)
			currentSize += basictl.TL2CalculateSize(len(item.Str))
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CdResponse) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// add constructor No for union type in case of non first option
	currentBlock |= (1 << 0)

	w = basictl.TL2WriteSize(w, 3)
	serializedSize += basictl.TL2CalculateSize(3)
	// write item.X
	if item.X != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, item.X)
		}
	}
	// write item.Str
	if len(item.Str) != 0 {
		serializedSize += len(item.Str)
		if len(item.Str) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.Str))
			currentBlock |= (1 << 2)
			w = basictl.StringWriteTL2(w, item.Str)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CdResponse) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *CdResponse) ReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var _skip int
		if currentR, err = basictl.TL2ReadSize(currentR, &_skip); err != nil {
			return currentR, err
		}
	}

	// read item.X
	if block&(1<<1) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.X); err != nil {
			return currentR, err
		}
	} else {
		item.X = 0
	}

	// read item.Str
	if block&(1<<2) != 0 {
		if currentR, err = basictl.StringReadTL2(currentR, &item.Str); err != nil {
			return currentR, err
		}
	} else {
		item.Str = ""
	}

	return r, nil
}

func (item CdResponseBytes) AsUnion() AbResponseBytes {
	var ret AbResponseBytes
	ret.SetResponse(item)
	return ret
}

type CdResponseBytes struct {
	X   int32
	Str []byte
}

func (CdResponseBytes) TLName() string { return "cd.response" }
func (CdResponseBytes) TLTag() uint32  { return 0x8c202f64 }

func (item *CdResponseBytes) Reset() {
	item.X = 0
	item.Str = item.Str[:0]
}

func (item *CdResponseBytes) FillRandom(rg *basictl.RandGenerator) {
	item.X = basictl.RandomInt(rg)
	item.Str = basictl.RandomStringBytes(rg)
}

func (item *CdResponseBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.X); err != nil {
		return w, err
	}
	return basictl.StringReadBytes(w, &item.Str)
}

func (item *CdResponseBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *CdResponseBytes) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.X)
	w = basictl.StringWriteBytes(w, item.Str)
	return w
}

func (item *CdResponseBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x8c202f64); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *CdResponseBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *CdResponseBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x8c202f64)
	return item.Write(w)
}

func (item CdResponseBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CdResponseBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propXPresented bool
	var propStrPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if propXPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("cd.response", "x")
				}
				if err := Json2ReadInt32(in, &item.X); err != nil {
					return err
				}
				propXPresented = true
			case "str":
				if propStrPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("cd.response", "str")
				}
				if err := Json2ReadStringBytes(in, &item.Str); err != nil {
					return err
				}
				propStrPresented = true
			default:
				return ErrorInvalidJSONExcessElement("cd.response", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propXPresented {
		item.X = 0
	}
	if !propStrPresented {
		item.Str = item.Str[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CdResponseBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *CdResponseBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *CdResponseBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	w = basictl.JSONWriteInt32(w, item.X)
	if (item.X != 0) == false {
		w = w[:backupIndexX]
	}
	backupIndexStr := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"str":`...)
	w = basictl.JSONWriteStringBytes(w, item.Str)
	if (len(item.Str) != 0) == false {
		w = w[:backupIndexStr]
	}
	return append(w, '}')
}

func (item *CdResponseBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CdResponseBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("cd.response", err.Error())
	}
	return nil
}

func (item *CdResponseBytes) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// add constructor No for union type in case of non first option
	lastUsedByte = 1
	currentSize += basictl.TL2CalculateSize(3)

	// calculate layout for item.X
	if item.X != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.Str
	if len(item.Str) != 0 {

		if len(item.Str) != 0 {
			lastUsedByte = 1
			currentSize += len(item.Str)
			currentSize += basictl.TL2CalculateSize(len(item.Str))
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CdResponseBytes) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// add constructor No for union type in case of non first option
	currentBlock |= (1 << 0)

	w = basictl.TL2WriteSize(w, 3)
	serializedSize += basictl.TL2CalculateSize(3)
	// write item.X
	if item.X != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.IntWrite(w, item.X)
		}
	}
	// write item.Str
	if len(item.Str) != 0 {
		serializedSize += len(item.Str)
		if len(item.Str) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.Str))
			currentBlock |= (1 << 2)
			w = basictl.StringBytesWriteTL2(w, item.Str)
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CdResponseBytes) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *CdResponseBytes) ReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var _skip int
		if currentR, err = basictl.TL2ReadSize(currentR, &_skip); err != nil {
			return currentR, err
		}
	}

	// read item.X
	if block&(1<<1) != 0 {
		if currentR, err = basictl.IntRead(currentR, &item.X); err != nil {
			return currentR, err
		}
	} else {
		item.X = 0
	}

	// read item.Str
	if block&(1<<2) != 0 {
		if currentR, err = basictl.StringReadBytesTL2(currentR, &item.Str); err != nil {
			return currentR, err
		}
	} else {
		item.Str = item.Str[:0]
	}

	return r, nil
}
