// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type MultiPoint struct {
	A [3]int32
	B [3]int32
	C [3]Int32
	D [3]Int32
	E [3]MyInt32
	F [3]MyInt32
}

func (MultiPoint) TLName() string { return "multiPoint" }
func (MultiPoint) TLTag() uint32  { return 0x0e1ae81e }

func (item *MultiPoint) Reset() {
	BuiltinTuple3IntReset(&item.A)
	BuiltinTuple3IntBoxedReset(&item.B)
	BuiltinTuple3Int32Reset(&item.C)
	BuiltinTuple3Int32BoxedReset(&item.D)
	BuiltinTuple3MyInt32Reset(&item.E)
	BuiltinTuple3MyInt32BoxedReset(&item.F)
}

func (item *MultiPoint) FillRandom(rg *basictl.RandGenerator) {
	BuiltinTuple3IntFillRandom(rg, &item.A)
	BuiltinTuple3IntBoxedFillRandom(rg, &item.B)
	BuiltinTuple3Int32FillRandom(rg, &item.C)
	BuiltinTuple3Int32BoxedFillRandom(rg, &item.D)
	BuiltinTuple3MyInt32FillRandom(rg, &item.E)
	BuiltinTuple3MyInt32BoxedFillRandom(rg, &item.F)
}

func (item *MultiPoint) Read(w []byte) (_ []byte, err error) {
	if w, err = BuiltinTuple3IntRead(w, &item.A); err != nil {
		return w, err
	}
	if w, err = BuiltinTuple3IntBoxedRead(w, &item.B); err != nil {
		return w, err
	}
	if w, err = BuiltinTuple3Int32Read(w, &item.C); err != nil {
		return w, err
	}
	if w, err = BuiltinTuple3Int32BoxedRead(w, &item.D); err != nil {
		return w, err
	}
	if w, err = BuiltinTuple3MyInt32Read(w, &item.E); err != nil {
		return w, err
	}
	return BuiltinTuple3MyInt32BoxedRead(w, &item.F)
}

func (item *MultiPoint) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MultiPoint) Write(w []byte) []byte {
	w = BuiltinTuple3IntWrite(w, &item.A)
	w = BuiltinTuple3IntBoxedWrite(w, &item.B)
	w = BuiltinTuple3Int32Write(w, &item.C)
	w = BuiltinTuple3Int32BoxedWrite(w, &item.D)
	w = BuiltinTuple3MyInt32Write(w, &item.E)
	w = BuiltinTuple3MyInt32BoxedWrite(w, &item.F)
	return w
}

func (item *MultiPoint) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0e1ae81e); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MultiPoint) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MultiPoint) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0e1ae81e)
	return item.Write(w)
}

func (item MultiPoint) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MultiPoint) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propAPresented bool
	var propBPresented bool
	var propCPresented bool
	var propDPresented bool
	var propEPresented bool
	var propFPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a":
				if propAPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "a")
				}
				if err := BuiltinTuple3IntReadJSON(legacyTypeNames, in, &item.A); err != nil {
					return err
				}
				propAPresented = true
			case "b":
				if propBPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "b")
				}
				if err := BuiltinTuple3IntBoxedReadJSON(legacyTypeNames, in, &item.B); err != nil {
					return err
				}
				propBPresented = true
			case "c":
				if propCPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "c")
				}
				if err := BuiltinTuple3Int32ReadJSON(legacyTypeNames, in, &item.C); err != nil {
					return err
				}
				propCPresented = true
			case "d":
				if propDPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "d")
				}
				if err := BuiltinTuple3Int32BoxedReadJSON(legacyTypeNames, in, &item.D); err != nil {
					return err
				}
				propDPresented = true
			case "e":
				if propEPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "e")
				}
				if err := BuiltinTuple3MyInt32ReadJSON(legacyTypeNames, in, &item.E); err != nil {
					return err
				}
				propEPresented = true
			case "f":
				if propFPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("multiPoint", "f")
				}
				if err := BuiltinTuple3MyInt32BoxedReadJSON(legacyTypeNames, in, &item.F); err != nil {
					return err
				}
				propFPresented = true
			default:
				return ErrorInvalidJSONExcessElement("multiPoint", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propAPresented {
		BuiltinTuple3IntReset(&item.A)
	}
	if !propBPresented {
		BuiltinTuple3IntBoxedReset(&item.B)
	}
	if !propCPresented {
		BuiltinTuple3Int32Reset(&item.C)
	}
	if !propDPresented {
		BuiltinTuple3Int32BoxedReset(&item.D)
	}
	if !propEPresented {
		BuiltinTuple3MyInt32Reset(&item.E)
	}
	if !propFPresented {
		BuiltinTuple3MyInt32BoxedReset(&item.F)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MultiPoint) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *MultiPoint) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *MultiPoint) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	w = BuiltinTuple3IntWriteJSONOpt(newTypeNames, short, w, &item.A)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"b":`...)
	w = BuiltinTuple3IntBoxedWriteJSONOpt(newTypeNames, short, w, &item.B)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"c":`...)
	w = BuiltinTuple3Int32WriteJSONOpt(newTypeNames, short, w, &item.C)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"d":`...)
	w = BuiltinTuple3Int32BoxedWriteJSONOpt(newTypeNames, short, w, &item.D)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"e":`...)
	w = BuiltinTuple3MyInt32WriteJSONOpt(newTypeNames, short, w, &item.E)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f":`...)
	w = BuiltinTuple3MyInt32BoxedWriteJSONOpt(newTypeNames, short, w, &item.F)
	return append(w, '}')
}

func (item *MultiPoint) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MultiPoint) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("multiPoint", err.Error())
	}
	return nil
}

func (item *MultiPoint) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A
	currentPosition := len(sizes)
	sizes = BuiltinTuple3IntCalculateLayout(sizes, &item.A)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.B
	currentPosition = len(sizes)
	sizes = BuiltinTuple3IntBoxedCalculateLayout(sizes, &item.B)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.C
	currentPosition = len(sizes)
	sizes = BuiltinTuple3Int32CalculateLayout(sizes, &item.C)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.D
	currentPosition = len(sizes)
	sizes = BuiltinTuple3Int32BoxedCalculateLayout(sizes, &item.D)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.E
	currentPosition = len(sizes)
	sizes = BuiltinTuple3MyInt32CalculateLayout(sizes, &item.E)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.F
	currentPosition = len(sizes)
	sizes = BuiltinTuple3MyInt32BoxedCalculateLayout(sizes, &item.F)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *MultiPoint) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = BuiltinTuple3IntInternalWriteTL2(w, sizes, &item.A)
	} else {
		sizes = sizes[1:]
	}
	// write item.B
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = BuiltinTuple3IntBoxedInternalWriteTL2(w, sizes, &item.B)
	} else {
		sizes = sizes[1:]
	}
	// write item.C
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 3)
		w, sizes = BuiltinTuple3Int32InternalWriteTL2(w, sizes, &item.C)
	} else {
		sizes = sizes[1:]
	}
	// write item.D
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 4)
		w, sizes = BuiltinTuple3Int32BoxedInternalWriteTL2(w, sizes, &item.D)
	} else {
		sizes = sizes[1:]
	}
	// write item.E
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 5)
		w, sizes = BuiltinTuple3MyInt32InternalWriteTL2(w, sizes, &item.E)
	} else {
		sizes = sizes[1:]
	}
	// write item.F
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 6)
		w, sizes = BuiltinTuple3MyInt32BoxedInternalWriteTL2(w, sizes, &item.F)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *MultiPoint) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *MultiPoint) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A
	if block&(1<<1) != 0 {
		if currentR, err = BuiltinTuple3IntInternalReadTL2(currentR, &item.A); err != nil {
			return currentR, err
		}
	} else {
		BuiltinTuple3IntReset(&item.A)
	}

	// read item.B
	if block&(1<<2) != 0 {
		if currentR, err = BuiltinTuple3IntBoxedInternalReadTL2(currentR, &item.B); err != nil {
			return currentR, err
		}
	} else {
		BuiltinTuple3IntBoxedReset(&item.B)
	}

	// read item.C
	if block&(1<<3) != 0 {
		if currentR, err = BuiltinTuple3Int32InternalReadTL2(currentR, &item.C); err != nil {
			return currentR, err
		}
	} else {
		BuiltinTuple3Int32Reset(&item.C)
	}

	// read item.D
	if block&(1<<4) != 0 {
		if currentR, err = BuiltinTuple3Int32BoxedInternalReadTL2(currentR, &item.D); err != nil {
			return currentR, err
		}
	} else {
		BuiltinTuple3Int32BoxedReset(&item.D)
	}

	// read item.E
	if block&(1<<5) != 0 {
		if currentR, err = BuiltinTuple3MyInt32InternalReadTL2(currentR, &item.E); err != nil {
			return currentR, err
		}
	} else {
		BuiltinTuple3MyInt32Reset(&item.E)
	}

	// read item.F
	if block&(1<<6) != 0 {
		if currentR, err = BuiltinTuple3MyInt32BoxedInternalReadTL2(currentR, &item.F); err != nil {
			return currentR, err
		}
	} else {
		BuiltinTuple3MyInt32BoxedReset(&item.F)
	}

	return r, nil
}

func (item *MultiPoint) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
