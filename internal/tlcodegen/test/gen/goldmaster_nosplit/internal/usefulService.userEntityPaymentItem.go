// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type UsefulServiceUserEntityPaymentItem struct {
	Id    string
	Promo UsefulServiceUserEntityPaymentItemPromoBoxedMaybe
}

func (UsefulServiceUserEntityPaymentItem) TLName() string {
	return "usefulService.userEntityPaymentItem"
}
func (UsefulServiceUserEntityPaymentItem) TLTag() uint32 { return 0x4f798680 }

func (item *UsefulServiceUserEntityPaymentItem) Reset() {
	item.Id = ""
	item.Promo.Reset()
}

func (item *UsefulServiceUserEntityPaymentItem) FillRandom(rg *basictl.RandGenerator, nat_fields_mask uint32) {
	item.Id = basictl.RandomString(rg)
	item.Promo.FillRandom(rg, nat_fields_mask)
}

func (item *UsefulServiceUserEntityPaymentItem) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.Id); err != nil {
		return w, err
	}
	return item.Promo.ReadBoxed(w, nat_fields_mask)
}

func (item *UsefulServiceUserEntityPaymentItem) WriteGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_fields_mask), nil
}

func (item *UsefulServiceUserEntityPaymentItem) Write(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.StringWrite(w, item.Id)
	w = item.Promo.WriteBoxed(w, nat_fields_mask)
	return w
}

func (item *UsefulServiceUserEntityPaymentItem) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4f798680); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

func (item *UsefulServiceUserEntityPaymentItem) WriteBoxedGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_fields_mask), nil
}

func (item *UsefulServiceUserEntityPaymentItem) WriteBoxed(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x4f798680)
	return item.Write(w, nat_fields_mask)
}

func (item *UsefulServiceUserEntityPaymentItem) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_fields_mask uint32) error {
	var propIdPresented bool
	var rawPromo []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "id":
				if propIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("usefulService.userEntityPaymentItem", "id")
				}
				if err := Json2ReadString(in, &item.Id); err != nil {
					return err
				}
				propIdPresented = true
			case "promo":
				if rawPromo != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("usefulService.userEntityPaymentItem", "promo")
				}
				rawPromo = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("usefulService.userEntityPaymentItem", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propIdPresented {
		item.Id = ""
	}
	var inPromoPointer *basictl.JsonLexer
	inPromo := basictl.JsonLexer{Data: rawPromo}
	if rawPromo != nil {
		inPromoPointer = &inPromo
	}
	if err := item.Promo.ReadJSON(legacyTypeNames, inPromoPointer, nat_fields_mask); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UsefulServiceUserEntityPaymentItem) WriteJSONGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask), nil
}

func (item *UsefulServiceUserEntityPaymentItem) WriteJSON(w []byte, nat_fields_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask)
}
func (item *UsefulServiceUserEntityPaymentItem) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_fields_mask uint32) []byte {
	w = append(w, '{')
	backupIndexId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"id":`...)
	w = basictl.JSONWriteString(w, item.Id)
	if (len(item.Id) != 0) == false {
		w = w[:backupIndexId]
	}
	backupIndexPromo := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"promo":`...)
	w = item.Promo.WriteJSONOpt(newTypeNames, short, w, nat_fields_mask)
	if (item.Promo.Ok) == false {
		w = w[:backupIndexPromo]
	}
	return append(w, '}')
}

func (item *UsefulServiceUserEntityPaymentItem) CalculateLayout(sizes []int, nat_fields_mask uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Id
	if len(item.Id) != 0 {

		if len(item.Id) != 0 {
			lastUsedByte = 1
			currentSize += len(item.Id)
			currentSize += basictl.TL2CalculateSize(len(item.Id))
		}
	}

	// calculate layout for item.Promo
	currentPosition := len(sizes)
	if item.Promo.Ok {
		sizes = item.Promo.CalculateLayout(sizes, nat_fields_mask)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *UsefulServiceUserEntityPaymentItem) InternalWriteTL2(w []byte, sizes []int, nat_fields_mask uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Id
	if len(item.Id) != 0 {
		serializedSize += len(item.Id)
		if len(item.Id) != 0 {
			serializedSize += basictl.TL2CalculateSize(len(item.Id))
			currentBlock |= (1 << 1)
			w = basictl.StringWriteTL2(w, item.Id)
		}
	}
	// write item.Promo
	if item.Promo.Ok {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 2)
			w, sizes = item.Promo.InternalWriteTL2(w, sizes, nat_fields_mask)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *UsefulServiceUserEntityPaymentItem) WriteTL2(w []byte, ctx *basictl.TL2WriteContext, nat_fields_mask uint32) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0], nat_fields_mask)
	w, _ = item.InternalWriteTL2(w, sizes, nat_fields_mask)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *UsefulServiceUserEntityPaymentItem) InternalReadTL2(r []byte, nat_fields_mask uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Id
	if block&(1<<1) != 0 {
		if currentR, err = basictl.StringReadTL2(currentR, &item.Id); err != nil {
			return currentR, err
		}
	} else {
		item.Id = ""
	}

	// read item.Promo
	if block&(1<<2) != 0 {
		if currentR, err = item.Promo.InternalReadTL2(currentR, nat_fields_mask); err != nil {
			return currentR, err
		}
	} else {
		item.Promo.Reset()
	}

	return r, nil
}

func (item *UsefulServiceUserEntityPaymentItem) ReadTL2(r []byte, ctx *basictl.TL2ReadContext, nat_fields_mask uint32) (_ []byte, err error) {
	return item.InternalReadTL2(r, nat_fields_mask)
}
