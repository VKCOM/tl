// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type UsefulServiceGetUserEntityResult struct {
	EntityId     string
	PaymentItems DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybe
}

func (UsefulServiceGetUserEntityResult) TLName() string { return "usefulService.getUserEntityResult" }
func (UsefulServiceGetUserEntityResult) TLTag() uint32  { return 0xe494698a }

func (item *UsefulServiceGetUserEntityResult) Reset() {
	item.EntityId = ""
	item.PaymentItems.Reset()
}

func (item *UsefulServiceGetUserEntityResult) FillRandom(rg *basictl.RandGenerator, nat_fields_mask uint32) {
	item.EntityId = basictl.RandomString(rg)
	item.PaymentItems.FillRandom(rg, nat_fields_mask)
}

func (item *UsefulServiceGetUserEntityResult) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.EntityId); err != nil {
		return w, err
	}
	return item.PaymentItems.ReadBoxed(w, nat_fields_mask)
}

// This method is general version of Write, use it instead!
func (item *UsefulServiceGetUserEntityResult) WriteGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_fields_mask), nil
}

func (item *UsefulServiceGetUserEntityResult) Write(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.StringWrite(w, item.EntityId)
	w = item.PaymentItems.WriteBoxed(w, nat_fields_mask)
	return w
}

func (item *UsefulServiceGetUserEntityResult) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe494698a); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *UsefulServiceGetUserEntityResult) WriteBoxedGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_fields_mask), nil
}

func (item *UsefulServiceGetUserEntityResult) WriteBoxed(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.NatWrite(w, 0xe494698a)
	return item.Write(w, nat_fields_mask)
}

func (item *UsefulServiceGetUserEntityResult) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_fields_mask uint32) error {
	var propEntityIdPresented bool
	var rawPaymentItems []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "entity_id":
				if propEntityIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("usefulService.getUserEntityResult", "entity_id")
				}
				if err := Json2ReadString(in, &item.EntityId); err != nil {
					return err
				}
				propEntityIdPresented = true
			case "payment_items":
				if rawPaymentItems != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("usefulService.getUserEntityResult", "payment_items")
				}
				rawPaymentItems = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("usefulService.getUserEntityResult", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propEntityIdPresented {
		item.EntityId = ""
	}
	var inPaymentItemsPointer *basictl.JsonLexer
	inPaymentItems := basictl.JsonLexer{Data: rawPaymentItems}
	if rawPaymentItems != nil {
		inPaymentItemsPointer = &inPaymentItems
	}
	if err := item.PaymentItems.ReadJSON(legacyTypeNames, inPaymentItemsPointer, nat_fields_mask); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UsefulServiceGetUserEntityResult) WriteJSONGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask), nil
}

func (item *UsefulServiceGetUserEntityResult) WriteJSON(w []byte, nat_fields_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask)
}
func (item *UsefulServiceGetUserEntityResult) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_fields_mask uint32) []byte {
	w = append(w, '{')
	backupIndexEntityId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"entity_id":`...)
	w = basictl.JSONWriteString(w, item.EntityId)
	if (len(item.EntityId) != 0) == false {
		w = w[:backupIndexEntityId]
	}
	backupIndexPaymentItems := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"payment_items":`...)
	w = item.PaymentItems.WriteJSONOpt(newTypeNames, short, w, nat_fields_mask)
	if (item.PaymentItems.Ok) == false {
		w = w[:backupIndexPaymentItems]
	}
	return append(w, '}')
}

type UsefulServiceGetUserEntityResultBoxedMaybe struct {
	Value UsefulServiceGetUserEntityResult // not deterministic if !Ok
	Ok    bool
}

func (item *UsefulServiceGetUserEntityResultBoxedMaybe) Reset() {
	item.Ok = false
}
func (item *UsefulServiceGetUserEntityResultBoxedMaybe) FillRandom(rg *basictl.RandGenerator, nat_t uint32) {
	if basictl.RandomUint(rg)&1 == 1 {
		item.Ok = true
		item.Value.FillRandom(rg, nat_t)
	} else {
		item.Ok = false
	}
}

func (item *UsefulServiceGetUserEntityResultBoxedMaybe) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.ReadBool(w, &item.Ok, 0x27930a7b, 0x3f9c8ef8); err != nil {
		return w, err
	}
	if item.Ok {
		return item.Value.ReadBoxed(w, nat_t)
	}
	return w, nil
}

// This method is general version of WriteBoxed, use it instead!
func (item *UsefulServiceGetUserEntityResultBoxedMaybe) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *UsefulServiceGetUserEntityResultBoxedMaybe) WriteBoxed(w []byte, nat_t uint32) []byte {
	if item.Ok {
		w = basictl.NatWrite(w, 0x3f9c8ef8)
		return item.Value.WriteBoxed(w, nat_t)
	}
	return basictl.NatWrite(w, 0x27930a7b)
}

func (item *UsefulServiceGetUserEntityResultBoxedMaybe) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	_ok, _jvalue, err := Json2ReadMaybe("Maybe", in)
	if err != nil {
		return err
	}
	item.Ok = _ok
	if _ok {
		var in2Pointer *basictl.JsonLexer
		if _jvalue != nil {
			in2 := basictl.JsonLexer{Data: _jvalue}
			in2Pointer = &in2
		}
		if err := item.Value.ReadJSON(legacyTypeNames, in2Pointer, nat_t); err != nil {
			return err
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UsefulServiceGetUserEntityResultBoxedMaybe) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_t), nil
}

func (item *UsefulServiceGetUserEntityResultBoxedMaybe) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}
func (item *UsefulServiceGetUserEntityResultBoxedMaybe) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) []byte {
	if !item.Ok {
		return append(w, "{}"...)
	}
	w = append(w, `{"ok":true`...)
	w = append(w, `,"value":`...)
	w = item.Value.WriteJSONOpt(newTypeNames, short, w, nat_t)
	return append(w, '}')
}
