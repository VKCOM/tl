// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type UsefulServiceGetUserEntity struct {
	FieldsMask uint32
	StageId    string // Conditional: item.FieldsMask.0
}

func (UsefulServiceGetUserEntity) TLName() string { return "usefulService.getUserEntity" }
func (UsefulServiceGetUserEntity) TLTag() uint32  { return 0x3c857e52 }

func (item *UsefulServiceGetUserEntity) SetStageId(v string) {
	item.StageId = v
	item.FieldsMask |= 1 << 0
}
func (item *UsefulServiceGetUserEntity) ClearStageId() {
	item.StageId = ""
	item.FieldsMask &^= 1 << 0
}
func (item *UsefulServiceGetUserEntity) IsSetStageId() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *UsefulServiceGetUserEntity) Reset() {
	item.FieldsMask = 0
	item.StageId = ""
}

func (item *UsefulServiceGetUserEntity) FillRandom(rg *basictl.RandGenerator) {
	var maskFieldsMask uint32
	maskFieldsMask = basictl.RandomUint(rg)
	item.FieldsMask = 0
	if maskFieldsMask&(1<<0) != 0 {
		item.FieldsMask |= (1 << 0)
	}
	if item.FieldsMask&(1<<0) != 0 {
		item.StageId = basictl.RandomString(rg)
	} else {
		item.StageId = ""
	}
}

func (item *UsefulServiceGetUserEntity) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.StringRead(w, &item.StageId); err != nil {
			return w, err
		}
	} else {
		item.StageId = ""
	}
	return w, nil
}

func (item *UsefulServiceGetUserEntity) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *UsefulServiceGetUserEntity) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.StringWrite(w, item.StageId)
	}
	return w
}

func (item *UsefulServiceGetUserEntity) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3c857e52); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *UsefulServiceGetUserEntity) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *UsefulServiceGetUserEntity) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x3c857e52)
	return item.Write(w)
}

func (item *UsefulServiceGetUserEntity) ReadResult(w []byte, ret *UsefulServiceGetUserEntityResultBoxedMaybe) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldsMask)
}

func (item *UsefulServiceGetUserEntity) WriteResult(w []byte, ret UsefulServiceGetUserEntityResultBoxedMaybe) (_ []byte, err error) {
	w = ret.WriteBoxed(w, item.FieldsMask)
	return w, nil
}
func (item *UsefulServiceGetUserEntity) ReadResultTL2(w []byte, ret *UsefulServiceGetUserEntityResultBoxedMaybe) (_ []byte, err error) {
	if w, err = (*ret).ReadTL2(w, item.FieldsMask); err != nil {
		return w, err
	}
	return w, nil
}

func (item *UsefulServiceGetUserEntity) WriteResultTL2(w []byte, sizes []int, ret UsefulServiceGetUserEntityResultBoxedMaybe) (_ []byte, _ []int, err error) {
	w, sizes = ret.InternalWriteTL2(w, sizes, item.FieldsMask)
	return w, sizes, nil
}

func (item *UsefulServiceGetUserEntity) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *UsefulServiceGetUserEntityResultBoxedMaybe) error {
	if err := ret.ReadJSON(legacyTypeNames, in, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *UsefulServiceGetUserEntity) WriteResultJSON(w []byte, ret UsefulServiceGetUserEntityResultBoxedMaybe) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *UsefulServiceGetUserEntity) writeResultJSON(newTypeNames bool, short bool, w []byte, ret UsefulServiceGetUserEntityResultBoxedMaybe) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	return w, nil
}

func (item *UsefulServiceGetUserEntity) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret UsefulServiceGetUserEntityResultBoxedMaybe
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *UsefulServiceGetUserEntity) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret UsefulServiceGetUserEntityResultBoxedMaybe
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *UsefulServiceGetUserEntity) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret UsefulServiceGetUserEntityResultBoxedMaybe
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item UsefulServiceGetUserEntity) String() string {
	return string(item.WriteJSON(nil))
}

func (item *UsefulServiceGetUserEntity) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propStageIdPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("usefulService.getUserEntity", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "stage_id":
				if propStageIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("usefulService.getUserEntity", "stage_id")
				}
				if err := Json2ReadString(in, &item.StageId); err != nil {
					return err
				}
				propStageIdPresented = true
			default:
				return ErrorInvalidJSONExcessElement("usefulService.getUserEntity", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propStageIdPresented {
		item.StageId = ""
	}
	if propStageIdPresented {
		item.FieldsMask |= 1 << 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UsefulServiceGetUserEntity) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *UsefulServiceGetUserEntity) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *UsefulServiceGetUserEntity) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"stage_id":`...)
		w = basictl.JSONWriteString(w, item.StageId)
	}
	return append(w, '}')
}

func (item *UsefulServiceGetUserEntity) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *UsefulServiceGetUserEntity) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("usefulService.getUserEntity", err.Error())
	}
	return nil
}

func (item *UsefulServiceGetUserEntity) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.FieldsMask
	if item.FieldsMask != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.StageId
	if item.FieldsMask&(1<<0) != 0 {
		if len(item.StageId) != 0 {

			if len(item.StageId) != 0 {
				lastUsedByte = 1
				currentSize += len(item.StageId)
				currentSize += basictl.TL2CalculateSize(len(item.StageId))
			}
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *UsefulServiceGetUserEntity) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.FieldsMask
	if item.FieldsMask != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.FieldsMask)
		}
	}
	// write item.StageId
	if item.FieldsMask&(1<<0) != 0 {
		if len(item.StageId) != 0 {
			serializedSize += len(item.StageId)
			if len(item.StageId) != 0 {
				serializedSize += basictl.TL2CalculateSize(len(item.StageId))
				currentBlock |= (1 << 2)
				w = basictl.StringWriteTL2(w, item.StageId)
			}
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *UsefulServiceGetUserEntity) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *UsefulServiceGetUserEntity) ReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.FieldsMask
		if block&(1<<1) != 0 {
			if r, err = basictl.NatRead(r, &item.FieldsMask); err != nil {
				return r, err
			}
		} else {
			item.FieldsMask = 0
		}

		// read item.StageId
		if block&(1<<2) != 0 {
			if item.FieldsMask&(1<<0) != 0 {
				if r, err = basictl.StringReadTL2(r, &item.StageId); err != nil {
					return r, err
				}
			} else {
				return r, basictl.TL2Error("field mask contradiction: field item." + "StageId" + "is presented but depending bit is absent")
			}
		} else {
			item.StageId = ""
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}
