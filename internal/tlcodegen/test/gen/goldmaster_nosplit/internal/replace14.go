// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite

type Replace14Long struct {
	K uint32
	A []Replace14ElemLong
}

func (Replace14Long) TLName() string { return "replace14" }
func (Replace14Long) TLTag() uint32  { return 0x0b9801f9 }

func (item *Replace14Long) Reset() {
	item.K = 0
	item.A = item.A[:0]
}

func (item *Replace14Long) FillRandom(rg *basictl.RandGenerator, nat_n uint32) {
	item.K = basictl.RandomUint(rg)
	item.K = rg.LimitValue(item.K)
	BuiltinTupleReplace14ElemLongFillRandom(rg, &item.A, item.K, nat_n, item.K)
}

func (item *Replace14Long) Read(w []byte, nat_n uint32) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.K); err != nil {
		return w, err
	}
	return BuiltinTupleReplace14ElemLongRead(w, &item.A, item.K, nat_n, item.K)
}

func (item *Replace14Long) WriteGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.Write(w, nat_n)
}

func (item *Replace14Long) Write(w []byte, nat_n uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.K)
	if w, err = BuiltinTupleReplace14ElemLongWrite(w, item.A, item.K, nat_n, item.K); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Replace14Long) ReadBoxed(w []byte, nat_n uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0b9801f9); err != nil {
		return w, err
	}
	return item.Read(w, nat_n)
}

func (item *Replace14Long) WriteBoxedGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_n)
}

func (item *Replace14Long) WriteBoxed(w []byte, nat_n uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x0b9801f9)
	return item.Write(w, nat_n)
}

func (item *Replace14Long) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_n uint32) error {
	var propKPresented bool
	var rawA []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "k":
				if propKPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("replace14", "k")
				}
				if err := Json2ReadUint32(in, &item.K); err != nil {
					return err
				}
				propKPresented = true
			case "a":
				if rawA != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("replace14", "a")
				}
				rawA = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("replace14", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKPresented {
		item.K = 0
	}
	var inAPointer *basictl.JsonLexer
	inA := basictl.JsonLexer{Data: rawA}
	if rawA != nil {
		inAPointer = &inA
	}
	if err := BuiltinTupleReplace14ElemLongReadJSON(legacyTypeNames, inAPointer, &item.A, item.K, nat_n, item.K); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Replace14Long) WriteJSONGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n)
}

func (item *Replace14Long) WriteJSON(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n)
}
func (item *Replace14Long) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_n uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexK := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"k":`...)
	w = basictl.JSONWriteUint32(w, item.K)
	if (item.K != 0) == false {
		w = w[:backupIndexK]
	}
	backupIndexA := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a":`...)
	if w, err = BuiltinTupleReplace14ElemLongWriteJSONOpt(newTypeNames, short, w, item.A, item.K, nat_n, item.K); err != nil {
		return w, err
	}
	if (len(item.A) != 0) == false {
		w = w[:backupIndexA]
	}
	return append(w, '}'), nil
}

func (item *Replace14Long) CalculateLayout(sizes []int, nat_n uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.K
	if item.K != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.A
	currentPosition := len(sizes)
	if len(item.A) != 0 {
		sizes = BuiltinTupleReplace14ElemLongCalculateLayout(sizes, &item.A, item.K, nat_n, item.K)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *Replace14Long) InternalWriteTL2(w []byte, sizes []int, nat_n uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.K
	if item.K != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.K)
		}
	}
	// write item.A
	if len(item.A) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 2)
			w, sizes = BuiltinTupleReplace14ElemLongInternalWriteTL2(w, sizes, &item.A, item.K, nat_n, item.K)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *Replace14Long) ReadTL2(r []byte, nat_n uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var _skip int
		if currentR, err = basictl.TL2ReadSize(currentR, &_skip); err != nil {
			return currentR, err
		}
	}

	// read item.K
	if block&(1<<1) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.K); err != nil {
			return currentR, err
		}
	} else {
		item.K = 0
	}

	// read item.A
	if block&(1<<2) != 0 {
		if currentR, err = BuiltinTupleReplace14ElemLongReadTL2(currentR, &item.A, item.K, nat_n, item.K); err != nil {
			return currentR, err
		}
	} else {
		item.A = item.A[:0]
	}

	return r, nil
}
