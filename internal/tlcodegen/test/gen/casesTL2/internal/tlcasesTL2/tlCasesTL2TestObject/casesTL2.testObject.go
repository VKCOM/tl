// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTL2TestObject

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/cycle_4a1568ff5f665a65be83c5d14a33c0d0"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinVectorBenchmarksVrutoyTopLevelUnion"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinVectorBool"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinVectorTrue"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlTrue"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlbenchmarks/tlBenchmarksVrutoyPositions"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTL2TestObject struct {
	N uint32
	// f1 (TrueType) // Conditional: item.mask1.2
	F2 bool
	F3 []bool
	F4 tlBenchmarksVrutoyPositions.BenchmarksVrutoyPositions
	f5 bool // Conditional: item.mask1.6
	F6 []cycle_4a1568ff5f665a65be83c5d14a33c0d0.BenchmarksVrutoyTopLevelUnion
	f7 []tlTrue.True // Conditional: item.mask2.0

	mask1 byte // for fields #1 .. #7
	mask2 byte // for fields #8 .. #15
}

func (CasesTL2TestObject) TLName() string { return "casesTL2.testObject" }
func (CasesTL2TestObject) TLTag() uint32  { return 0x00000000 }

func (item *CasesTL2TestObject) SetF1(v bool) {
	if v {
		item.mask1 |= 1 << 2
	} else {
		item.mask1 &^= 1 << 2
	}
}
func (item *CasesTL2TestObject) IsSetF1() bool { return item.mask1&(1<<2) != 0 }

func (item *CasesTL2TestObject) GetF5() bool {
	return item.f5
}
func (item *CasesTL2TestObject) SetF5(v bool) {
	item.f5 = v
	item.mask1 |= 1 << 6
}
func (item *CasesTL2TestObject) ClearF5() {
	item.f5 = false
	item.mask1 &^= 1 << 6
}
func (item *CasesTL2TestObject) IsSetF5() bool { return item.mask1&(1<<6) != 0 }

func (item *CasesTL2TestObject) GetF7() []tlTrue.True {
	return item.f7
}
func (item *CasesTL2TestObject) SetF7(v []tlTrue.True) {
	item.f7 = v
	item.mask2 |= 1 << 0
}
func (item *CasesTL2TestObject) ClearF7() {
	item.f7 = item.f7[:0]
	item.mask2 &^= 1 << 0
}
func (item *CasesTL2TestObject) IsSetF7() bool { return item.mask2&(1<<0) != 0 }

func (item *CasesTL2TestObject) Reset() {
	item.N = 0
	item.F2 = false
	item.F3 = item.F3[:0]
	item.F4.Reset()
	item.f5 = false
	item.F6 = item.F6[:0]
	item.f7 = item.f7[:0]
}

func (item *CasesTL2TestObject) FillRandom(rg *basictl.RandGenerator) {
	item.mask1 = basictl.RandomByte(rg)
	item.mask2 = basictl.RandomByte(rg)
	item.N = basictl.RandomUint(rg)
	item.F2 = basictl.RandomUint(rg)&1 == 1
	tlBuiltinVectorBool.BuiltinVectorBoolFillRandom(rg, &item.F3)
	item.F4.FillRandom(rg)
	if item.mask1&(1<<6) != 0 {
		item.f5 = basictl.RandomUint(rg)&1 == 1
	} else {
		item.f5 = false
	}
	tlBuiltinVectorBenchmarksVrutoyTopLevelUnion.BuiltinVectorBenchmarksVrutoyTopLevelUnionFillRandom(rg, &item.F6)
	if item.mask2&(1<<0) != 0 {
		tlBuiltinVectorTrue.BuiltinVectorTrueFillRandom(rg, &item.f7)
	} else {
		item.f7 = item.f7[:0]
	}
}

func (item *CasesTL2TestObject) Read(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTL2TestObject) WriteGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTL2TestObject) Write(w []byte) []byte {
	return w
}

func (item *CasesTL2TestObject) ReadBoxed(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTL2TestObject) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTL2TestObject) WriteBoxed(w []byte) []byte {
	return w
}

func (item CasesTL2TestObject) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CasesTL2TestObject) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	tctx.IsTL2 = true
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *CasesTL2TestObject) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propNPresented bool
	var trueTypef1Presented bool
	var trueTypef1Value bool
	var propF2Presented bool
	var propF3Presented bool
	var propF4Presented bool
	var propf5Presented bool
	var propF6Presented bool
	var propf7Presented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "n":
				if propNPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testObject", "n")
				}
				if err := internal.Json2ReadUint32(in, &item.N); err != nil {
					return err
				}
				propNPresented = true
			case "f1":
				if trueTypef1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testObject", "f1")
				}
				if err := internal.Json2ReadBool(in, &trueTypef1Value); err != nil {
					return err
				}
				trueTypef1Presented = true
			case "f2":
				if propF2Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testObject", "f2")
				}
				if err := internal.Json2ReadBool(in, &item.F2); err != nil {
					return err
				}
				propF2Presented = true
			case "f3":
				if propF3Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testObject", "f3")
				}
				if err := tlBuiltinVectorBool.BuiltinVectorBoolReadJSONGeneral(tctx, in, &item.F3); err != nil {
					return err
				}
				propF3Presented = true
			case "f4":
				if propF4Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testObject", "f4")
				}
				if err := item.F4.ReadJSONGeneral(tctx, in); err != nil {
					return err
				}
				propF4Presented = true
			case "f5":
				if propf5Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testObject", "f5")
				}
				if err := internal.Json2ReadBool(in, &item.f5); err != nil {
					return err
				}
				propf5Presented = true
			case "f6":
				if propF6Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testObject", "f6")
				}
				if err := tlBuiltinVectorBenchmarksVrutoyTopLevelUnion.BuiltinVectorBenchmarksVrutoyTopLevelUnionReadJSONGeneral(tctx, in, &item.F6); err != nil {
					return err
				}
				propF6Presented = true
			case "f7":
				if propf7Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testObject", "f7")
				}
				if err := tlBuiltinVectorTrue.BuiltinVectorTrueReadJSONGeneral(tctx, in, &item.f7); err != nil {
					return err
				}
				propf7Presented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("casesTL2.testObject", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNPresented {
		item.N = 0
	}
	if !propF2Presented {
		item.F2 = false
	}
	if !propF3Presented {
		item.F3 = item.F3[:0]
	}
	if !propF4Presented {
		item.F4.Reset()
	}
	if !propf5Presented {
		item.f5 = false
	}
	if !propF6Presented {
		item.F6 = item.F6[:0]
	}
	if !propf7Presented {
		item.f7 = item.f7[:0]
	}
	if trueTypef1Presented {
		if trueTypef1Value {
			item.mask1 |= 1 << 2
		}
		item.mask1 |= 1 << 2
	}
	if propf5Presented {
		item.mask1 |= 1 << 6
	}
	if propf7Presented {
		item.mask2 |= 1 << 0
	}
	// tries to set bit to zero if it is 1
	if trueTypef1Presented && !trueTypef1Value && (item.mask1&(1<<2) != 0) {
		return internal.ErrorInvalidJSON("casesTL2.testObject", "fieldmask bit item.mask1.2 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTL2TestObject) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *CasesTL2TestObject) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	tctx.IsTL2 = true
	return item.WriteJSONOpt(&tctx, w)
}
func (item *CasesTL2TestObject) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexN := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"n":`...)
	w = basictl.JSONWriteUint32(w, item.N)
	if (item.N != 0) == false {
		w = w[:backupIndexN]
	}
	if item.mask1&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f1":true`...)
	}
	backupIndexF2 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f2":`...)
	w = basictl.JSONWriteBool(w, item.F2)
	if (item.F2) == false {
		w = w[:backupIndexF2]
	}
	backupIndexF3 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f3":`...)
	w = tlBuiltinVectorBool.BuiltinVectorBoolWriteJSONOpt(tctx, w, item.F3)
	if (len(item.F3) != 0) == false {
		w = w[:backupIndexF3]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f4":`...)
	w = item.F4.WriteJSONOpt(tctx, w)
	if item.mask1&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f5":`...)
		w = basictl.JSONWriteBool(w, item.f5)
	}
	backupIndexF6 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f6":`...)
	w = tlBuiltinVectorBenchmarksVrutoyTopLevelUnion.BuiltinVectorBenchmarksVrutoyTopLevelUnionWriteJSONOpt(tctx, w, item.F6)
	if (len(item.F6) != 0) == false {
		w = w[:backupIndexF6]
	}
	if item.mask2&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f7":`...)
		w = tlBuiltinVectorTrue.BuiltinVectorTrueWriteJSONOpt(tctx, w, item.f7)
	}
	return append(w, '}')
}

func (item *CasesTL2TestObject) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CasesTL2TestObject) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("casesTL2.testObject", err.Error())
	}
	return nil
}

func (item *CasesTL2TestObject) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.N
	if item.N != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	var truef1 tlTrue.True
	// calculate layout for truef1
	currentPosition := len(sizes)
	if item.mask1&(1<<2) != 0 {
		sizes = truef1.CalculateLayout(sizes)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.F2
	if item.F2 {

		lastUsedByte = 1
		currentSize += 0
	}

	// calculate layout for item.F3
	currentPosition = len(sizes)
	if len(item.F3) != 0 {
		sizes = tlBuiltinVectorBool.BuiltinVectorBoolCalculateLayout(sizes, &item.F3)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.F4
	currentPosition = len(sizes)
	sizes = item.F4.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.f5
	if item.mask1&(1<<6) != 0 {
		if item.f5 {

			lastUsedByte = 1
			currentSize += 1
		}
	}

	// calculate layout for item.F6
	currentPosition = len(sizes)
	if len(item.F6) != 0 {
		sizes = tlBuiltinVectorBenchmarksVrutoyTopLevelUnion.BuiltinVectorBenchmarksVrutoyTopLevelUnionCalculateLayout(sizes, &item.F6)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.f7
	currentPosition = len(sizes)
	if item.mask2&(1<<0) != 0 {
		if len(item.f7) != 0 {
			sizes = tlBuiltinVectorTrue.BuiltinVectorTrueCalculateLayout(sizes, &item.f7)
			if sizes[currentPosition] != 0 {
				lastUsedByte = 2
				currentSize += sizes[currentPosition]
				currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
			} else {
				sizes = sizes[:currentPosition+1]
			}
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CasesTL2TestObject) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.N
	if item.N != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.N)
		}
	}
	var truef1 tlTrue.True
	// write truef1
	if item.mask1&(1<<2) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 2)
			w, sizes = truef1.InternalWriteTL2(w, sizes)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.F2
	if item.F2 {
		serializedSize += 0
		currentBlock |= (1 << 3)

	}
	// write item.F3
	if len(item.F3) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 4)
			w, sizes = tlBuiltinVectorBool.BuiltinVectorBoolInternalWriteTL2(w, sizes, &item.F3)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.F4
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 5)
		w, sizes = item.F4.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.f5
	if item.mask1&(1<<6) != 0 {
		if item.f5 {
			serializedSize += 1
			if 1 != 0 {
				currentBlock |= (1 << 6)
				w = basictl.ByteBoolWriteTL2(w, item.f5)
			}
		}
	}
	// write item.F6
	if len(item.F6) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 7)
			w, sizes = tlBuiltinVectorBenchmarksVrutoyTopLevelUnion.BuiltinVectorBenchmarksVrutoyTopLevelUnionInternalWriteTL2(w, sizes, &item.F6)
		} else {
			sizes = sizes[1:]
		}
	}

	// add byte for fields with index 8..15
	w[currentBlockPosition] = currentBlock
	currentBlock = 0
	if serializedSize != currentSize {
		currentBlockPosition = len(w)
		w = append(w, 0)
		serializedSize += 1
	} else {
		return w, sizes
	}
	// write item.f7
	if item.mask2&(1<<0) != 0 {
		if len(item.f7) != 0 {
			serializedSize += sizes[0]
			if sizes[0] != 0 {
				serializedSize += basictl.TL2CalculateSize(sizes[0])
				currentBlock |= (1 << 0)
				w, sizes = tlBuiltinVectorTrue.BuiltinVectorTrueInternalWriteTL2(w, sizes, &item.f7)
			} else {
				sizes = sizes[1:]
			}
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CasesTL2TestObject) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *CasesTL2TestObject) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}
	item.mask1 = block

	// read item.N
	if block&(1<<1) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.N); err != nil {
			return currentR, err
		}
	} else {
		item.N = 0
	}

	var truef1 tlTrue.True
	// read truef1
	if block&(1<<2) != 0 {
		if item.mask1&(1<<2) != 0 {
			if currentR, err = truef1.InternalReadTL2(currentR); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "f1" + "is presented but depending bit is absent")
		}
	} else {
		truef1.Reset()
	}

	// read item.F2
	if block&(1<<3) != 0 {
		item.F2 = true
	} else {
		item.F2 = false
	}

	// read item.F3
	if block&(1<<4) != 0 {
		if currentR, err = tlBuiltinVectorBool.BuiltinVectorBoolInternalReadTL2(currentR, &item.F3); err != nil {
			return currentR, err
		}
	} else {
		item.F3 = item.F3[:0]
	}

	// read item.F4
	if block&(1<<5) != 0 {
		if currentR, err = item.F4.InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	} else {
		item.F4.Reset()
	}

	// read item.f5
	if block&(1<<6) != 0 {
		if item.mask1&(1<<6) != 0 {
			if currentR, err = basictl.ByteBoolReadTL2(currentR, &item.f5); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "f5" + "is presented but depending bit is absent")
		}
	} else {
		item.f5 = false
	}

	// read item.F6
	if block&(1<<7) != 0 {
		if currentR, err = tlBuiltinVectorBenchmarksVrutoyTopLevelUnion.BuiltinVectorBenchmarksVrutoyTopLevelUnionInternalReadTL2(currentR, &item.F6); err != nil {
			return currentR, err
		}
	} else {
		item.F6 = item.F6[:0]
	}

	// read next block for fields 8..15
	if len(currentR) > 0 {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return currentR, err
		}
	} else {
		block = 0
	}
	item.mask2 = block

	// read item.f7
	if block&(1<<0) != 0 {
		if item.mask2&(1<<0) != 0 {
			if currentR, err = tlBuiltinVectorTrue.BuiltinVectorTrueInternalReadTL2(currentR, &item.f7); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "f7" + "is presented but depending bit is absent")
		}
	} else {
		item.f7 = item.f7[:0]
	}

	return r, nil
}

func (item *CasesTL2TestObject) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
