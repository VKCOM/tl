// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTL2TestArrayFixedBool

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinTuple0Bool"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinTuple11Bool"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinTuple16Bool"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinTuple1Bool"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinTuple7Bool"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinTuple8Bool"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTL2TestArrayFixedBool struct {
	A1 [1]bool
	A2 [0]bool
	A3 [7]bool
	A4 [8]bool
	A5 [11]bool
	A6 [16]bool
}

func (CasesTL2TestArrayFixedBool) TLName() string { return "casesTL2.testArrayFixedBool" }
func (CasesTL2TestArrayFixedBool) TLTag() uint32  { return 0x00000000 }

func (item *CasesTL2TestArrayFixedBool) Reset() {
	tlBuiltinTuple1Bool.BuiltinTuple1BoolReset(&item.A1)
	tlBuiltinTuple0Bool.BuiltinTuple0BoolReset(&item.A2)
	tlBuiltinTuple7Bool.BuiltinTuple7BoolReset(&item.A3)
	tlBuiltinTuple8Bool.BuiltinTuple8BoolReset(&item.A4)
	tlBuiltinTuple11Bool.BuiltinTuple11BoolReset(&item.A5)
	tlBuiltinTuple16Bool.BuiltinTuple16BoolReset(&item.A6)
}

func (item *CasesTL2TestArrayFixedBool) FillRandom(rg *basictl.RandGenerator) {
	tlBuiltinTuple1Bool.BuiltinTuple1BoolFillRandom(rg, &item.A1)
	tlBuiltinTuple0Bool.BuiltinTuple0BoolFillRandom(rg, &item.A2)
	tlBuiltinTuple7Bool.BuiltinTuple7BoolFillRandom(rg, &item.A3)
	tlBuiltinTuple8Bool.BuiltinTuple8BoolFillRandom(rg, &item.A4)
	tlBuiltinTuple11Bool.BuiltinTuple11BoolFillRandom(rg, &item.A5)
	tlBuiltinTuple16Bool.BuiltinTuple16BoolFillRandom(rg, &item.A6)
}

func (item *CasesTL2TestArrayFixedBool) Read(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTL2TestArrayFixedBool) WriteGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTL2TestArrayFixedBool) Write(w []byte) []byte {
	return w
}

func (item *CasesTL2TestArrayFixedBool) ReadBoxed(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTL2TestArrayFixedBool) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTL2TestArrayFixedBool) WriteBoxed(w []byte) []byte {
	return w
}

func (item CasesTL2TestArrayFixedBool) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CasesTL2TestArrayFixedBool) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	tctx.IsTL2 = true
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *CasesTL2TestArrayFixedBool) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propA1Presented bool
	var propA2Presented bool
	var propA3Presented bool
	var propA4Presented bool
	var propA5Presented bool
	var propA6Presented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a1":
				if propA1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testArrayFixedBool", "a1")
				}
				if err := tlBuiltinTuple1Bool.BuiltinTuple1BoolReadJSONGeneral(tctx, in, &item.A1); err != nil {
					return err
				}
				propA1Presented = true
			case "a2":
				if propA2Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testArrayFixedBool", "a2")
				}
				if err := tlBuiltinTuple0Bool.BuiltinTuple0BoolReadJSONGeneral(tctx, in, &item.A2); err != nil {
					return err
				}
				propA2Presented = true
			case "a3":
				if propA3Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testArrayFixedBool", "a3")
				}
				if err := tlBuiltinTuple7Bool.BuiltinTuple7BoolReadJSONGeneral(tctx, in, &item.A3); err != nil {
					return err
				}
				propA3Presented = true
			case "a4":
				if propA4Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testArrayFixedBool", "a4")
				}
				if err := tlBuiltinTuple8Bool.BuiltinTuple8BoolReadJSONGeneral(tctx, in, &item.A4); err != nil {
					return err
				}
				propA4Presented = true
			case "a5":
				if propA5Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testArrayFixedBool", "a5")
				}
				if err := tlBuiltinTuple11Bool.BuiltinTuple11BoolReadJSONGeneral(tctx, in, &item.A5); err != nil {
					return err
				}
				propA5Presented = true
			case "a6":
				if propA6Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testArrayFixedBool", "a6")
				}
				if err := tlBuiltinTuple16Bool.BuiltinTuple16BoolReadJSONGeneral(tctx, in, &item.A6); err != nil {
					return err
				}
				propA6Presented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("casesTL2.testArrayFixedBool", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propA1Presented {
		tlBuiltinTuple1Bool.BuiltinTuple1BoolReset(&item.A1)
	}
	if !propA2Presented {
		tlBuiltinTuple0Bool.BuiltinTuple0BoolReset(&item.A2)
	}
	if !propA3Presented {
		tlBuiltinTuple7Bool.BuiltinTuple7BoolReset(&item.A3)
	}
	if !propA4Presented {
		tlBuiltinTuple8Bool.BuiltinTuple8BoolReset(&item.A4)
	}
	if !propA5Presented {
		tlBuiltinTuple11Bool.BuiltinTuple11BoolReset(&item.A5)
	}
	if !propA6Presented {
		tlBuiltinTuple16Bool.BuiltinTuple16BoolReset(&item.A6)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTL2TestArrayFixedBool) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *CasesTL2TestArrayFixedBool) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	tctx.IsTL2 = true
	return item.WriteJSONOpt(&tctx, w)
}
func (item *CasesTL2TestArrayFixedBool) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a1":`...)
	w = tlBuiltinTuple1Bool.BuiltinTuple1BoolWriteJSONOpt(tctx, w, &item.A1)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a2":`...)
	w = tlBuiltinTuple0Bool.BuiltinTuple0BoolWriteJSONOpt(tctx, w, &item.A2)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a3":`...)
	w = tlBuiltinTuple7Bool.BuiltinTuple7BoolWriteJSONOpt(tctx, w, &item.A3)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a4":`...)
	w = tlBuiltinTuple8Bool.BuiltinTuple8BoolWriteJSONOpt(tctx, w, &item.A4)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a5":`...)
	w = tlBuiltinTuple11Bool.BuiltinTuple11BoolWriteJSONOpt(tctx, w, &item.A5)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a6":`...)
	w = tlBuiltinTuple16Bool.BuiltinTuple16BoolWriteJSONOpt(tctx, w, &item.A6)
	return append(w, '}')
}

func (item *CasesTL2TestArrayFixedBool) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CasesTL2TestArrayFixedBool) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("casesTL2.testArrayFixedBool", err.Error())
	}
	return nil
}

func (item *CasesTL2TestArrayFixedBool) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A1
	currentPosition := len(sizes)
	sizes = tlBuiltinTuple1Bool.BuiltinTuple1BoolCalculateLayout(sizes, &item.A1)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.A2
	currentPosition = len(sizes)
	sizes = tlBuiltinTuple0Bool.BuiltinTuple0BoolCalculateLayout(sizes, &item.A2)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.A3
	currentPosition = len(sizes)
	sizes = tlBuiltinTuple7Bool.BuiltinTuple7BoolCalculateLayout(sizes, &item.A3)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.A4
	currentPosition = len(sizes)
	sizes = tlBuiltinTuple8Bool.BuiltinTuple8BoolCalculateLayout(sizes, &item.A4)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.A5
	currentPosition = len(sizes)
	sizes = tlBuiltinTuple11Bool.BuiltinTuple11BoolCalculateLayout(sizes, &item.A5)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.A6
	currentPosition = len(sizes)
	sizes = tlBuiltinTuple16Bool.BuiltinTuple16BoolCalculateLayout(sizes, &item.A6)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CasesTL2TestArrayFixedBool) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A1
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = tlBuiltinTuple1Bool.BuiltinTuple1BoolInternalWriteTL2(w, sizes, &item.A1)
	} else {
		sizes = sizes[1:]
	}
	// write item.A2
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 2)
		w, sizes = tlBuiltinTuple0Bool.BuiltinTuple0BoolInternalWriteTL2(w, sizes, &item.A2)
	} else {
		sizes = sizes[1:]
	}
	// write item.A3
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 3)
		w, sizes = tlBuiltinTuple7Bool.BuiltinTuple7BoolInternalWriteTL2(w, sizes, &item.A3)
	} else {
		sizes = sizes[1:]
	}
	// write item.A4
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 4)
		w, sizes = tlBuiltinTuple8Bool.BuiltinTuple8BoolInternalWriteTL2(w, sizes, &item.A4)
	} else {
		sizes = sizes[1:]
	}
	// write item.A5
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 5)
		w, sizes = tlBuiltinTuple11Bool.BuiltinTuple11BoolInternalWriteTL2(w, sizes, &item.A5)
	} else {
		sizes = sizes[1:]
	}
	// write item.A6
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 6)
		w, sizes = tlBuiltinTuple16Bool.BuiltinTuple16BoolInternalWriteTL2(w, sizes, &item.A6)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CasesTL2TestArrayFixedBool) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *CasesTL2TestArrayFixedBool) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.A1
	if block&(1<<1) != 0 {
		if currentR, err = tlBuiltinTuple1Bool.BuiltinTuple1BoolInternalReadTL2(currentR, &item.A1); err != nil {
			return currentR, err
		}
	} else {
		tlBuiltinTuple1Bool.BuiltinTuple1BoolReset(&item.A1)
	}

	// read item.A2
	if block&(1<<2) != 0 {
		if currentR, err = tlBuiltinTuple0Bool.BuiltinTuple0BoolInternalReadTL2(currentR, &item.A2); err != nil {
			return currentR, err
		}
	} else {
		tlBuiltinTuple0Bool.BuiltinTuple0BoolReset(&item.A2)
	}

	// read item.A3
	if block&(1<<3) != 0 {
		if currentR, err = tlBuiltinTuple7Bool.BuiltinTuple7BoolInternalReadTL2(currentR, &item.A3); err != nil {
			return currentR, err
		}
	} else {
		tlBuiltinTuple7Bool.BuiltinTuple7BoolReset(&item.A3)
	}

	// read item.A4
	if block&(1<<4) != 0 {
		if currentR, err = tlBuiltinTuple8Bool.BuiltinTuple8BoolInternalReadTL2(currentR, &item.A4); err != nil {
			return currentR, err
		}
	} else {
		tlBuiltinTuple8Bool.BuiltinTuple8BoolReset(&item.A4)
	}

	// read item.A5
	if block&(1<<5) != 0 {
		if currentR, err = tlBuiltinTuple11Bool.BuiltinTuple11BoolInternalReadTL2(currentR, &item.A5); err != nil {
			return currentR, err
		}
	} else {
		tlBuiltinTuple11Bool.BuiltinTuple11BoolReset(&item.A5)
	}

	// read item.A6
	if block&(1<<6) != 0 {
		if currentR, err = tlBuiltinTuple16Bool.BuiltinTuple16BoolInternalReadTL2(currentR, &item.A6); err != nil {
			return currentR, err
		}
	} else {
		tlBuiltinTuple16Bool.BuiltinTuple16BoolReset(&item.A6)
	}

	return r, nil
}

func (item *CasesTL2TestArrayFixedBool) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
