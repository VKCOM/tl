// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesBytesTestEnum

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

var _CasesBytesTestEnum = [3]internal.UnionElement{
	{TLTag: 0x00000000, TLName: "cases_bytes.testEnum1", TLString: "cases_bytes.testEnum1#00000000"},
	{TLTag: 0x00000001, TLName: "cases_bytes.testEnum2", TLString: "cases_bytes.testEnum2#00000001"},
	{TLTag: 0x00000002, TLName: "cases_bytes.testEnum3", TLString: "cases_bytes.testEnum3#00000002"},
}

func CasesBytesTestEnum__MakeEnum(i int) CasesBytesTestEnum { return CasesBytesTestEnum{index: i} }

type CasesBytesTestEnum struct {
	index int
}

func (item CasesBytesTestEnum) TLName() string { return _CasesBytesTestEnum[item.index].TLName }
func (item CasesBytesTestEnum) TLTag() uint32  { return _CasesBytesTestEnum[item.index].TLTag }

func (item *CasesBytesTestEnum) Reset() { item.index = 0 }
func (item *CasesBytesTestEnum) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 3
	switch index {
	case 0:
		item.index = 0
	case 1:
		item.index = 1
	case 2:
		item.index = 2
	default:
	}
}

func (item CasesBytesTestEnum) IsTestEnum1() bool { return item.index == 0 }
func (item *CasesBytesTestEnum) SetTestEnum1()    { item.index = 0 }

func (item CasesBytesTestEnum) IsTestEnum2() bool { return item.index == 1 }
func (item *CasesBytesTestEnum) SetTestEnum2()    { item.index = 1 }

func (item CasesBytesTestEnum) IsTestEnum3() bool { return item.index == 2 }
func (item *CasesBytesTestEnum) SetTestEnum3()    { item.index = 2 }

// For interface requirements for TL2 Type
func (item *CasesBytesTestEnum) Read(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesBytesTestEnum) ReadBoxed(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

// For interface requirements for TL2 Type
func (item *CasesBytesTestEnum) WriteGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesBytesTestEnum) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesBytesTestEnum) CalculateLayout(sizes []int) []int {
	switch item.index {
	case 0:
		sizes = append(sizes, 0)
	default:
		sizes = append(sizes, 1+basictl.TL2CalculateSize(item.index))
	}
	return sizes
}

func (item *CasesBytesTestEnum) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	switch item.index {
	case 0:
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, 0)
	default:
		currentSize := sizes[0]
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, currentSize)
		w = append(w, 1)
		w = basictl.TL2WriteSize(w, item.index)
	}
	return w, sizes
}

func (item *CasesBytesTestEnum) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	if currentSize == 0 {
		item.index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if _, item.index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	return r, nil
}
func (item *CasesBytesTestEnum) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *CasesBytesTestEnum) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) ([]byte, error) {
	return item.InternalReadTL2(r)
}

func (item *CasesBytesTestEnum) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	tctx.IsTL2 = true
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *CasesBytesTestEnum) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	_jtype := in.UnsafeString()
	if !in.Ok() {
		return internal.ErrorInvalidJSON("cases_bytes.testEnum", "expected string")
	}
	switch _jtype {
	case "cases_bytes.testEnum1":
		item.index = 0
		return nil
	case "cases_bytes.testEnum2":
		item.index = 1
		return nil
	case "cases_bytes.testEnum3":
		item.index = 2
		return nil
	default:
		return internal.ErrorInvalidEnumTagJSON("cases_bytes.testEnum", _jtype)
	}
}

// This method is general version of WriteJSON, use it instead!
func (item CasesBytesTestEnum) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) ([]byte, error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item CasesBytesTestEnum) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	tctx.IsTL2 = true
	return item.WriteJSONOpt(&tctx, w)
}
func (item CasesBytesTestEnum) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '"')
	if tctx.LegacyTypeNames {
		w = append(w, _CasesBytesTestEnum[item.index].TLString...)
	} else {
		w = append(w, _CasesBytesTestEnum[item.index].TLName...)
	}
	return append(w, '"')
}

func (item CasesBytesTestEnum) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CasesBytesTestEnum) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CasesBytesTestEnum) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases_bytes.testEnum", err.Error())
	}
	return nil
}
