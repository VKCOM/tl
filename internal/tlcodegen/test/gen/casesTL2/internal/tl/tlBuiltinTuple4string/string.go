// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBuiltinTuple4string

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func BuiltinTuple4stringReset(vec *[4]string) {
	for i := range *vec {
		(*vec)[i] = ""
	}
}

func BuiltinTuple4stringFillRandom(rg *basictl.RandGenerator, vec *[4]string) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomString(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple4stringRead(w []byte, vec *[4]string) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func BuiltinTuple4stringWrite(w []byte, vec *[4]string) []byte {
	return w
}

func BuiltinTuple4stringCalculateLayout(sizes []int, vec *[4]string) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 4 != 0 {
		currentSize += basictl.TL2CalculateSize(4)
	}

	for i := 0; i < 4; i++ {

		currentSize += len((*vec)[i])
		currentSize += basictl.TL2CalculateSize(len((*vec)[i]))
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple4stringInternalWriteTL2(w []byte, sizes []int, vec *[4]string) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 4 != 0 {
		w = basictl.TL2WriteSize(w, 4)
	}

	for i := 0; i < 4; i++ {
		w = basictl.StringWriteTL2(w, (*vec)[i])
	}
	return w, sizes
}

func BuiltinTuple4stringInternalReadTL2(r []byte, vec *[4]string) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 4 {
		lastIndex = 4
	}
	for i := 0; i < lastIndex; i++ {
		if currentR, err = basictl.StringReadTL2(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 4; i++ {
		(*vec)[i] = ""
	}

	return r, nil
}

func BuiltinTuple4stringReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[4]string) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[4]string", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 4 {
				return internal.ErrorWrongSequenceLength("[4]string", index+1, 4)
			}
			if err := internal.Json2ReadString(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[4]string", "expected json array's end")
		}
	}
	if index != 4 {
		return internal.ErrorWrongSequenceLength("[4]string", index+1, 4)
	}
	return nil
}

func BuiltinTuple4stringWriteJSON(w []byte, vec *[4]string) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTuple4stringWriteJSONOpt(&tctx, w, vec)
}
func BuiltinTuple4stringWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *[4]string) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteString(w, elem)
	}
	return append(w, ']')
}

func BuiltinTuple4stringBytesReset(vec *[4][]byte) {
	for i := range *vec {
		(*vec)[i] = (*vec)[i][:0]
	}
}

func BuiltinTuple4stringBytesFillRandom(rg *basictl.RandGenerator, vec *[4][]byte) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomStringBytes(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple4stringBytesRead(w []byte, vec *[4][]byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func BuiltinTuple4stringBytesWrite(w []byte, vec *[4][]byte) []byte {
	return w
}

func BuiltinTuple4stringBytesCalculateLayout(sizes []int, vec *[4][]byte) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 4 != 0 {
		currentSize += basictl.TL2CalculateSize(4)
	}

	for i := 0; i < 4; i++ {

		currentSize += len((*vec)[i])
		currentSize += basictl.TL2CalculateSize(len((*vec)[i]))
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple4stringBytesInternalWriteTL2(w []byte, sizes []int, vec *[4][]byte) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 4 != 0 {
		w = basictl.TL2WriteSize(w, 4)
	}

	for i := 0; i < 4; i++ {
		w = basictl.StringBytesWriteTL2(w, (*vec)[i])
	}
	return w, sizes
}

func BuiltinTuple4stringBytesInternalReadTL2(r []byte, vec *[4][]byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 4 {
		lastIndex = 4
	}
	for i := 0; i < lastIndex; i++ {
		if currentR, err = basictl.StringReadBytesTL2(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 4; i++ {
		(*vec)[i] = (*vec)[i][:0]
	}

	return r, nil
}

func BuiltinTuple4stringBytesReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[4][]byte) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[4][]byte", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 4 {
				return internal.ErrorWrongSequenceLength("[4][]byte", index+1, 4)
			}
			if err := internal.Json2ReadStringBytes(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[4][]byte", "expected json array's end")
		}
	}
	if index != 4 {
		return internal.ErrorWrongSequenceLength("[4][]byte", index+1, 4)
	}
	return nil
}

func BuiltinTuple4stringBytesWriteJSON(w []byte, vec *[4][]byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTuple4stringBytesWriteJSONOpt(&tctx, w, vec)
}
func BuiltinTuple4stringBytesWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *[4][]byte) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteStringBytes(w, elem)
	}
	return append(w, ']')
}
