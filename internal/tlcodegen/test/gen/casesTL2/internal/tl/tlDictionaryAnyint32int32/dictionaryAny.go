// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlDictionaryAnyint32int32

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinVectorDictionaryFieldAnyint32int32"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlDictionaryFieldAnyint32int32"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type DictionaryAnyint32int32 map[int32]int32

func (DictionaryAnyint32int32) TLName() string { return "dictionaryAny" }
func (DictionaryAnyint32int32) TLTag() uint32  { return 0x00000000 }

func (item *DictionaryAnyint32int32) Reset() {
	ptr := (*map[int32]int32)(item)
	tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32Reset(*ptr)
}

func (item *DictionaryAnyint32int32) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*map[int32]int32)(item)
	tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32FillRandom(rg, ptr)
}

func (item *DictionaryAnyint32int32) Read(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionaryAnyint32int32) WriteGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionaryAnyint32int32) Write(w []byte) []byte {
	return w
}

func (item *DictionaryAnyint32int32) ReadBoxed(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionaryAnyint32int32) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionaryAnyint32int32) WriteBoxed(w []byte) []byte {
	return w
}

func (item DictionaryAnyint32int32) String() string {
	return string(item.WriteJSON(nil))
}
func (item *DictionaryAnyint32int32) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	tctx.IsTL2 = true
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *DictionaryAnyint32int32) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	ptr := (*map[int32]int32)(item)
	if err := tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32ReadJSONGeneral(tctx, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryAnyint32int32) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *DictionaryAnyint32int32) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	tctx.IsTL2 = true
	return item.WriteJSONOpt(&tctx, w)
}

func (item *DictionaryAnyint32int32) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*map[int32]int32)(item)
	w = tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32WriteJSONOpt(tctx, w, *ptr)
	return w
}
func (item *DictionaryAnyint32int32) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryAnyint32int32) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("dictionaryAny", err.Error())
	}
	return nil
}

func (item *DictionaryAnyint32int32) CalculateLayout(sizes []int) []int {
	ptr := (*map[int32]int32)(item)
	sizes = tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32CalculateLayout(sizes, ptr)
	return sizes
}

func (item *DictionaryAnyint32int32) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*map[int32]int32)(item)
	w, sizes = tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32InternalWriteTL2(w, sizes, ptr)
	return w, sizes
}

func (item *DictionaryAnyint32int32) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryAnyint32int32) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*map[int32]int32)(item)
	if r, err = tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32InternalReadTL2(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *DictionaryAnyint32int32) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionaryAnyint32int32Bytes []tlDictionaryFieldAnyint32int32.DictionaryFieldAnyint32int32

func (DictionaryAnyint32int32Bytes) TLName() string { return "dictionaryAny" }
func (DictionaryAnyint32int32Bytes) TLTag() uint32  { return 0x00000000 }

func (item *DictionaryAnyint32int32Bytes) Reset() {
	ptr := (*[]tlDictionaryFieldAnyint32int32.DictionaryFieldAnyint32int32)(item)
	*ptr = (*ptr)[:0]
}

func (item *DictionaryAnyint32int32Bytes) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]tlDictionaryFieldAnyint32int32.DictionaryFieldAnyint32int32)(item)
	tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32BytesFillRandom(rg, ptr)
}

func (item *DictionaryAnyint32int32Bytes) Read(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionaryAnyint32int32Bytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionaryAnyint32int32Bytes) Write(w []byte) []byte {
	return w
}

func (item *DictionaryAnyint32int32Bytes) ReadBoxed(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionaryAnyint32int32Bytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionaryAnyint32int32Bytes) WriteBoxed(w []byte) []byte {
	return w
}

func (item DictionaryAnyint32int32Bytes) String() string {
	return string(item.WriteJSON(nil))
}
func (item *DictionaryAnyint32int32Bytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	tctx.IsTL2 = true
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *DictionaryAnyint32int32Bytes) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	ptr := (*[]tlDictionaryFieldAnyint32int32.DictionaryFieldAnyint32int32)(item)
	if err := tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32BytesReadJSONGeneral(tctx, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryAnyint32int32Bytes) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *DictionaryAnyint32int32Bytes) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	tctx.IsTL2 = true
	return item.WriteJSONOpt(&tctx, w)
}

func (item *DictionaryAnyint32int32Bytes) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*[]tlDictionaryFieldAnyint32int32.DictionaryFieldAnyint32int32)(item)
	w = tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32BytesWriteJSONOpt(tctx, w, *ptr)
	return w
}
func (item *DictionaryAnyint32int32Bytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryAnyint32int32Bytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("dictionaryAny", err.Error())
	}
	return nil
}

func (item *DictionaryAnyint32int32Bytes) CalculateLayout(sizes []int) []int {
	ptr := (*[]tlDictionaryFieldAnyint32int32.DictionaryFieldAnyint32int32)(item)
	sizes = tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32BytesCalculateLayout(sizes, ptr)
	return sizes
}

func (item *DictionaryAnyint32int32Bytes) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*[]tlDictionaryFieldAnyint32int32.DictionaryFieldAnyint32int32)(item)
	w, sizes = tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32BytesInternalWriteTL2(w, sizes, ptr)
	return w, sizes
}

func (item *DictionaryAnyint32int32Bytes) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionaryAnyint32int32Bytes) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*[]tlDictionaryFieldAnyint32int32.DictionaryFieldAnyint32int32)(item)
	if r, err = tlBuiltinVectorDictionaryFieldAnyint32int32.BuiltinVectorDictionaryFieldAnyint32int32BytesInternalReadTL2(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *DictionaryAnyint32int32Bytes) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
