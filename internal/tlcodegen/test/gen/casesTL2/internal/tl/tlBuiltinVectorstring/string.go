// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBuiltinVectorstring

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func BuiltinVectorstringFillRandom(rg *basictl.RandGenerator, vec *[]string) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]string, l)
	for i := range *vec {
		(*vec)[i] = basictl.RandomString(rg)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorstringRead(w []byte, vec *[]string) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func BuiltinVectorstringWrite(w []byte, vec []string) []byte {
	return w
}

func BuiltinVectorstringCalculateLayout(sizes []int, vec *[]string) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		currentSize += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]

		currentSize += len(elem)
		currentSize += basictl.TL2CalculateSize(len(elem))
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinVectorstringInternalWriteTL2(w []byte, sizes []int, vec *[]string) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w = basictl.StringWriteTL2(w, elem)
	}
	return w, sizes
}

func BuiltinVectorstringInternalReadTL2(r []byte, vec *[]string) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([]string, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		if currentR, err = basictl.StringReadTL2(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}
	return r, nil
}

func BuiltinVectorstringReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[]string) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[]string", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue string
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := internal.Json2ReadString(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[]string", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorstringWriteJSON(w []byte, vec []string) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorstringWriteJSONOpt(&tctx, w, vec)
}
func BuiltinVectorstringWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec []string) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteString(w, elem)
	}
	return append(w, ']')
}

func BuiltinVectorstringBytesFillRandom(rg *basictl.RandGenerator, vec *[][]byte) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([][]byte, l)
	for i := range *vec {
		(*vec)[i] = basictl.RandomStringBytes(rg)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorstringBytesRead(w []byte, vec *[][]byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func BuiltinVectorstringBytesWrite(w []byte, vec [][]byte) []byte {
	return w
}

func BuiltinVectorstringBytesCalculateLayout(sizes []int, vec *[][]byte) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if len(*vec) != 0 {
		currentSize += basictl.TL2CalculateSize(len(*vec))
	}
	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]

		currentSize += len(elem)
		currentSize += basictl.TL2CalculateSize(len(elem))
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinVectorstringBytesInternalWriteTL2(w []byte, sizes []int, vec *[][]byte) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if len(*vec) != 0 {
		w = basictl.TL2WriteSize(w, len(*vec))
	}

	for i := 0; i < len(*vec); i++ {
		elem := (*vec)[i]
		w = basictl.StringBytesWriteTL2(w, elem)
	}
	return w, sizes
}

func BuiltinVectorstringBytesInternalReadTL2(r []byte, vec *[][]byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	if cap(*vec) < elementCount {
		*vec = make([][]byte, elementCount)
	}
	*vec = (*vec)[:elementCount]
	for i := 0; i < elementCount; i++ {
		if currentR, err = basictl.StringReadBytesTL2(currentR, &(*vec)[i]); err != nil {
			return currentR, err
		}
	}
	return r, nil
}

func BuiltinVectorstringBytesReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[][]byte) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[][]byte", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue []byte
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := internal.Json2ReadStringBytes(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[][]byte", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorstringBytesWriteJSON(w []byte, vec [][]byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorstringBytesWriteJSONOpt(&tctx, w, vec)
}
func BuiltinVectorstringBytesWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec [][]byte) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteStringBytes(w, elem)
	}
	return append(w, ']')
}
