// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlDictionarystring

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinVectorDictionaryFieldstring"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlDictionaryFieldstring"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Dictionarystring map[string]string

func (Dictionarystring) TLName() string { return "dictionary" }
func (Dictionarystring) TLTag() uint32  { return 0x00000000 }

func (item *Dictionarystring) Reset() {
	ptr := (*map[string]string)(item)
	tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringReset(*ptr)
}

func (item *Dictionarystring) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*map[string]string)(item)
	tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringFillRandom(rg, ptr)
}

func (item *Dictionarystring) Read(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *Dictionarystring) WriteGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *Dictionarystring) Write(w []byte) []byte {
	return w
}

func (item *Dictionarystring) ReadBoxed(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *Dictionarystring) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *Dictionarystring) WriteBoxed(w []byte) []byte {
	return w
}

func (item Dictionarystring) String() string {
	return string(item.WriteJSON(nil))
}
func (item *Dictionarystring) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	tctx.IsTL2 = true
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *Dictionarystring) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	ptr := (*map[string]string)(item)
	if err := tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringReadJSONGeneral(tctx, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Dictionarystring) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *Dictionarystring) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	tctx.IsTL2 = true
	return item.WriteJSONOpt(&tctx, w)
}

func (item *Dictionarystring) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*map[string]string)(item)
	w = tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringWriteJSONOpt(tctx, w, *ptr)
	return w
}
func (item *Dictionarystring) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Dictionarystring) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("dictionary", err.Error())
	}
	return nil
}

func (item *Dictionarystring) CalculateLayout(sizes []int) []int {
	ptr := (*map[string]string)(item)
	sizes = tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringCalculateLayout(sizes, ptr)
	return sizes
}

func (item *Dictionarystring) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*map[string]string)(item)
	w, sizes = tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringInternalWriteTL2(w, sizes, ptr)
	return w, sizes
}

func (item *Dictionarystring) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *Dictionarystring) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	if r, err = tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringInternalReadTL2(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *Dictionarystring) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type DictionarystringBytes []tlDictionaryFieldstring.DictionaryFieldstringBytes

func (DictionarystringBytes) TLName() string { return "dictionary" }
func (DictionarystringBytes) TLTag() uint32  { return 0x00000000 }

func (item *DictionarystringBytes) Reset() {
	ptr := (*[]tlDictionaryFieldstring.DictionaryFieldstringBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *DictionarystringBytes) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]tlDictionaryFieldstring.DictionaryFieldstringBytes)(item)
	tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringBytesFillRandom(rg, ptr)
}

func (item *DictionarystringBytes) Read(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionarystringBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionarystringBytes) Write(w []byte) []byte {
	return w
}

func (item *DictionarystringBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionarystringBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *DictionarystringBytes) WriteBoxed(w []byte) []byte {
	return w
}

func (item DictionarystringBytes) String() string {
	return string(item.WriteJSON(nil))
}
func (item *DictionarystringBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	tctx.IsTL2 = true
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *DictionarystringBytes) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	ptr := (*[]tlDictionaryFieldstring.DictionaryFieldstringBytes)(item)
	if err := tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringBytesReadJSONGeneral(tctx, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionarystringBytes) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *DictionarystringBytes) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	tctx.IsTL2 = true
	return item.WriteJSONOpt(&tctx, w)
}

func (item *DictionarystringBytes) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*[]tlDictionaryFieldstring.DictionaryFieldstringBytes)(item)
	w = tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringBytesWriteJSONOpt(tctx, w, *ptr)
	return w
}
func (item *DictionarystringBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionarystringBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("dictionary", err.Error())
	}
	return nil
}

func (item *DictionarystringBytes) CalculateLayout(sizes []int) []int {
	ptr := (*[]tlDictionaryFieldstring.DictionaryFieldstringBytes)(item)
	sizes = tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringBytesCalculateLayout(sizes, ptr)
	return sizes
}

func (item *DictionarystringBytes) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	ptr := (*[]tlDictionaryFieldstring.DictionaryFieldstringBytes)(item)
	w, sizes = tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringBytesInternalWriteTL2(w, sizes, ptr)
	return w, sizes
}

func (item *DictionarystringBytes) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *DictionarystringBytes) InternalReadTL2(r []byte) (_ []byte, err error) {
	ptr := (*[]tlDictionaryFieldstring.DictionaryFieldstringBytes)(item)
	if r, err = tlBuiltinVectorDictionaryFieldstring.BuiltinVectorDictionaryFieldstringBytesInternalReadTL2(r, ptr); err != nil {
		return r, err
	}
	return r, nil
}

func (item *DictionarystringBytes) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
