// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBuiltinTuple2PairTupleint32Tupleint32

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlPairTupleint32Tupleint32"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func BuiltinTuple2PairTupleint32Tupleint32Reset(vec *[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32) {
	for i := range *vec {
		(*vec)[i].Reset()
	}
}

func BuiltinTuple2PairTupleint32Tupleint32FillRandom(rg *basictl.RandGenerator, vec *[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple2PairTupleint32Tupleint32Read(w []byte, vec *[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func BuiltinTuple2PairTupleint32Tupleint32Write(w []byte, vec *[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32) []byte {
	return w
}

func BuiltinTuple2PairTupleint32Tupleint32CalculateLayout(sizes []int, vec *[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 2 != 0 {
		currentSize += basictl.TL2CalculateSize(2)
	}

	for i := 0; i < 2; i++ {
		currentPosition := len(sizes)
		sizes = (*vec)[i].CalculateLayout(sizes)
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	}

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple2PairTupleint32Tupleint32InternalWriteTL2(w []byte, sizes []int, vec *[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 2 != 0 {
		w = basictl.TL2WriteSize(w, 2)
	}

	for i := 0; i < 2; i++ {
		w, sizes = (*vec)[i].InternalWriteTL2(w, sizes)
	}
	return w, sizes
}

func BuiltinTuple2PairTupleint32Tupleint32InternalReadTL2(r []byte, vec *[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 2 {
		lastIndex = 2
	}
	for i := 0; i < lastIndex; i++ {
		if currentR, err = (*vec)[i].InternalReadTL2(currentR); err != nil {
			return currentR, err
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 2; i++ {
		(*vec)[i].Reset()
	}

	return r, nil
}

func BuiltinTuple2PairTupleint32Tupleint32ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 2 {
				return internal.ErrorWrongSequenceLength("[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32", index+1, 2)
			}
			if err := (*vec)[index].ReadJSONGeneral(tctx, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32", "expected json array's end")
		}
	}
	if index != 2 {
		return internal.ErrorWrongSequenceLength("[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32", index+1, 2)
	}
	return nil
}

func BuiltinTuple2PairTupleint32Tupleint32WriteJSON(w []byte, vec *[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTuple2PairTupleint32Tupleint32WriteJSONOpt(&tctx, w, vec)
}
func BuiltinTuple2PairTupleint32Tupleint32WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *[2]tlPairTupleint32Tupleint32.PairTupleint32Tupleint32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(tctx, w)
	}
	return append(w, ']')
}
