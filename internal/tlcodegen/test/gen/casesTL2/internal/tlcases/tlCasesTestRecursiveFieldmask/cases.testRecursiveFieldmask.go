// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTestRecursiveFieldmask

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTestRecursiveFieldmask struct {
	F0 uint32
	f1 uint32 // Conditional: item.mask1.2
	f2 uint32 // Conditional: item.mask1.3
	T1 bool
	T2 bool
	T3 bool

	mask1 byte // for fields #1 .. #7
}

func (CasesTestRecursiveFieldmask) TLName() string { return "cases.testRecursiveFieldmask" }
func (CasesTestRecursiveFieldmask) TLTag() uint32  { return 0x00000000 }

func (item *CasesTestRecursiveFieldmask) GetF1() uint32 {
	return item.f1
}
func (item *CasesTestRecursiveFieldmask) SetF1(v uint32) {
	item.f1 = v
	item.mask1 |= 1 << 2
}
func (item *CasesTestRecursiveFieldmask) ClearF1() {
	item.f1 = 0
	item.mask1 &^= 1 << 2
}
func (item *CasesTestRecursiveFieldmask) IsSetF1() bool { return item.mask1&(1<<2) != 0 }

func (item *CasesTestRecursiveFieldmask) GetF2() uint32 {
	return item.f2
}
func (item *CasesTestRecursiveFieldmask) SetF2(v uint32) {
	item.f2 = v
	item.mask1 |= 1 << 3
}
func (item *CasesTestRecursiveFieldmask) ClearF2() {
	item.f2 = 0
	item.mask1 &^= 1 << 3
}
func (item *CasesTestRecursiveFieldmask) IsSetF2() bool { return item.mask1&(1<<3) != 0 }

func (item *CasesTestRecursiveFieldmask) Reset() {
	item.F0 = 0
	item.f1 = 0
	item.f2 = 0
	item.T1 = false
	item.T2 = false
	item.T3 = false
}

func (item *CasesTestRecursiveFieldmask) FillRandom(rg *basictl.RandGenerator) {
	item.mask1 = basictl.RandomByte(rg)
	item.F0 = basictl.RandomUint(rg)
	if item.mask1&(1<<2) != 0 {
		item.f1 = basictl.RandomUint(rg)
	} else {
		item.f1 = 0
	}
	if item.mask1&(1<<3) != 0 {
		item.f2 = basictl.RandomUint(rg)
	} else {
		item.f2 = 0
	}
	item.T1 = basictl.RandomUint(rg)&1 == 1
	item.T2 = basictl.RandomUint(rg)&1 == 1
	item.T3 = basictl.RandomUint(rg)&1 == 1
}

func (item *CasesTestRecursiveFieldmask) Read(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTestRecursiveFieldmask) WriteGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTestRecursiveFieldmask) Write(w []byte) []byte {
	return w
}

func (item *CasesTestRecursiveFieldmask) ReadBoxed(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTestRecursiveFieldmask) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTestRecursiveFieldmask) WriteBoxed(w []byte) []byte {
	return w
}

func (item CasesTestRecursiveFieldmask) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CasesTestRecursiveFieldmask) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	tctx.IsTL2 = true
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *CasesTestRecursiveFieldmask) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propF0Presented bool
	var propf1Presented bool
	var propf2Presented bool
	var propT1Presented bool
	var propT2Presented bool
	var propT3Presented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "f0":
				if propF0Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldmask", "f0")
				}
				if err := internal.Json2ReadUint32(in, &item.F0); err != nil {
					return err
				}
				propF0Presented = true
			case "f1":
				if propf1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldmask", "f1")
				}
				if err := internal.Json2ReadUint32(in, &item.f1); err != nil {
					return err
				}
				propf1Presented = true
			case "f2":
				if propf2Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldmask", "f2")
				}
				if err := internal.Json2ReadUint32(in, &item.f2); err != nil {
					return err
				}
				propf2Presented = true
			case "t1":
				if propT1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldmask", "t1")
				}
				if err := internal.Json2ReadBool(in, &item.T1); err != nil {
					return err
				}
				propT1Presented = true
			case "t2":
				if propT2Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldmask", "t2")
				}
				if err := internal.Json2ReadBool(in, &item.T2); err != nil {
					return err
				}
				propT2Presented = true
			case "t3":
				if propT3Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldmask", "t3")
				}
				if err := internal.Json2ReadBool(in, &item.T3); err != nil {
					return err
				}
				propT3Presented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.testRecursiveFieldmask", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propF0Presented {
		item.F0 = 0
	}
	if !propf1Presented {
		item.f1 = 0
	}
	if !propf2Presented {
		item.f2 = 0
	}
	if !propT1Presented {
		item.T1 = false
	}
	if !propT2Presented {
		item.T2 = false
	}
	if !propT3Presented {
		item.T3 = false
	}
	if propf1Presented {
		item.mask1 |= 1 << 2
	}
	if propf2Presented {
		item.mask1 |= 1 << 3
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTestRecursiveFieldmask) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *CasesTestRecursiveFieldmask) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	tctx.IsTL2 = true
	return item.WriteJSONOpt(&tctx, w)
}
func (item *CasesTestRecursiveFieldmask) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexF0 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f0":`...)
	w = basictl.JSONWriteUint32(w, item.F0)
	if (item.F0 != 0) == false {
		w = w[:backupIndexF0]
	}
	if item.mask1&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f1":`...)
		w = basictl.JSONWriteUint32(w, item.f1)
	}
	if item.mask1&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f2":`...)
		w = basictl.JSONWriteUint32(w, item.f2)
	}
	backupIndexT1 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"t1":`...)
	w = basictl.JSONWriteBool(w, item.T1)
	if (item.T1) == false {
		w = w[:backupIndexT1]
	}
	backupIndexT2 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"t2":`...)
	w = basictl.JSONWriteBool(w, item.T2)
	if (item.T2) == false {
		w = w[:backupIndexT2]
	}
	backupIndexT3 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"t3":`...)
	w = basictl.JSONWriteBool(w, item.T3)
	if (item.T3) == false {
		w = w[:backupIndexT3]
	}
	return append(w, '}')
}

func (item *CasesTestRecursiveFieldmask) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CasesTestRecursiveFieldmask) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases.testRecursiveFieldmask", err.Error())
	}
	return nil
}

func (item *CasesTestRecursiveFieldmask) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.F0
	if item.F0 != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.f1
	if item.mask1&(1<<2) != 0 {
		if item.f1 != 0 {

			lastUsedByte = 1
			currentSize += 4
		}
	}

	// calculate layout for item.f2
	if item.mask1&(1<<3) != 0 {
		if item.f2 != 0 {

			lastUsedByte = 1
			currentSize += 4
		}
	}

	// calculate layout for item.T1
	if item.T1 {

		lastUsedByte = 1
		currentSize += 0
	}

	// calculate layout for item.T2
	if item.T2 {

		lastUsedByte = 1
		currentSize += 0
	}

	// calculate layout for item.T3
	if item.T3 {

		lastUsedByte = 1
		currentSize += 0
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CasesTestRecursiveFieldmask) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.F0
	if item.F0 != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.F0)
		}
	}
	// write item.f1
	if item.mask1&(1<<2) != 0 {
		if item.f1 != 0 {
			serializedSize += 4
			if 4 != 0 {
				currentBlock |= (1 << 2)
				w = basictl.NatWrite(w, item.f1)
			}
		}
	}
	// write item.f2
	if item.mask1&(1<<3) != 0 {
		if item.f2 != 0 {
			serializedSize += 4
			if 4 != 0 {
				currentBlock |= (1 << 3)
				w = basictl.NatWrite(w, item.f2)
			}
		}
	}
	// write item.T1
	if item.T1 {
		serializedSize += 0
		currentBlock |= (1 << 4)

	}
	// write item.T2
	if item.T2 {
		serializedSize += 0
		currentBlock |= (1 << 5)

	}
	// write item.T3
	if item.T3 {
		serializedSize += 0
		currentBlock |= (1 << 6)

	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CasesTestRecursiveFieldmask) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *CasesTestRecursiveFieldmask) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}
	item.mask1 = block

	// read item.F0
	if block&(1<<1) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.F0); err != nil {
			return currentR, err
		}
	} else {
		item.F0 = 0
	}

	// read item.f1
	if block&(1<<2) != 0 {
		if item.mask1&(1<<2) != 0 {
			if currentR, err = basictl.NatRead(currentR, &item.f1); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "f1" + "is presented but depending bit is absent")
		}
	} else {
		item.f1 = 0
	}

	// read item.f2
	if block&(1<<3) != 0 {
		if item.mask1&(1<<3) != 0 {
			if currentR, err = basictl.NatRead(currentR, &item.f2); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "f2" + "is presented but depending bit is absent")
		}
	} else {
		item.f2 = 0
	}

	// read item.T1
	if block&(1<<4) != 0 {
		item.T1 = true
	} else {
		item.T1 = false
	}

	// read item.T2
	if block&(1<<5) != 0 {
		item.T2 = true
	} else {
		item.T2 = false
	}

	// read item.T3
	if block&(1<<6) != 0 {
		item.T3 = true
	} else {
		item.T3 = false
	}

	return r, nil
}

func (item *CasesTestRecursiveFieldmask) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
