// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTestBeforeReadBitValidation

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlBuiltinVectorInt32"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTestBeforeReadBitValidation struct {
	N uint32
	a []int32 // Conditional: item.mask1.2
	b []int32 // Conditional: item.mask1.3

	mask1 byte // for fields #1 .. #7
}

func (CasesTestBeforeReadBitValidation) TLName() string { return "cases.testBeforeReadBitValidation" }
func (CasesTestBeforeReadBitValidation) TLTag() uint32  { return 0x00000000 }

func (item *CasesTestBeforeReadBitValidation) GetA() []int32 {
	return item.a
}
func (item *CasesTestBeforeReadBitValidation) SetA(v []int32) {
	item.a = v
	item.mask1 |= 1 << 2
}
func (item *CasesTestBeforeReadBitValidation) ClearA() {
	item.a = item.a[:0]
	item.mask1 &^= 1 << 2
}
func (item *CasesTestBeforeReadBitValidation) IsSetA() bool { return item.mask1&(1<<2) != 0 }

func (item *CasesTestBeforeReadBitValidation) GetB() []int32 {
	return item.b
}
func (item *CasesTestBeforeReadBitValidation) SetB(v []int32) {
	item.b = v
	item.mask1 |= 1 << 3
}
func (item *CasesTestBeforeReadBitValidation) ClearB() {
	item.b = item.b[:0]
	item.mask1 &^= 1 << 3
}
func (item *CasesTestBeforeReadBitValidation) IsSetB() bool { return item.mask1&(1<<3) != 0 }

func (item *CasesTestBeforeReadBitValidation) Reset() {
	item.N = 0
	item.a = item.a[:0]
	item.b = item.b[:0]
}

func (item *CasesTestBeforeReadBitValidation) FillRandom(rg *basictl.RandGenerator) {
	item.mask1 = basictl.RandomByte(rg)
	item.N = basictl.RandomUint(rg)
	if item.mask1&(1<<2) != 0 {
		tlBuiltinVectorInt32.BuiltinVectorInt32FillRandom(rg, &item.a)
	} else {
		item.a = item.a[:0]
	}
	if item.mask1&(1<<3) != 0 {
		tlBuiltinVectorInt32.BuiltinVectorInt32FillRandom(rg, &item.b)
	} else {
		item.b = item.b[:0]
	}
}

func (item *CasesTestBeforeReadBitValidation) Read(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTestBeforeReadBitValidation) WriteGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTestBeforeReadBitValidation) Write(w []byte) []byte {
	return w
}

func (item *CasesTestBeforeReadBitValidation) ReadBoxed(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTestBeforeReadBitValidation) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return w, basictl.TL2Error("not implemented for tl2 type")
}

func (item *CasesTestBeforeReadBitValidation) WriteBoxed(w []byte) []byte {
	return w
}

func (item CasesTestBeforeReadBitValidation) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CasesTestBeforeReadBitValidation) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	tctx.IsTL2 = true
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *CasesTestBeforeReadBitValidation) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propNPresented bool
	var propaPresented bool
	var propbPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "n":
				if propNPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testBeforeReadBitValidation", "n")
				}
				if err := internal.Json2ReadUint32(in, &item.N); err != nil {
					return err
				}
				propNPresented = true
			case "a":
				if propaPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testBeforeReadBitValidation", "a")
				}
				if err := tlBuiltinVectorInt32.BuiltinVectorInt32ReadJSONGeneral(tctx, in, &item.a); err != nil {
					return err
				}
				propaPresented = true
			case "b":
				if propbPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testBeforeReadBitValidation", "b")
				}
				if err := tlBuiltinVectorInt32.BuiltinVectorInt32ReadJSONGeneral(tctx, in, &item.b); err != nil {
					return err
				}
				propbPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.testBeforeReadBitValidation", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNPresented {
		item.N = 0
	}
	if !propaPresented {
		item.a = item.a[:0]
	}
	if !propbPresented {
		item.b = item.b[:0]
	}
	if propaPresented {
		item.mask1 |= 1 << 2
	}
	if propbPresented {
		item.mask1 |= 1 << 3
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTestBeforeReadBitValidation) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *CasesTestBeforeReadBitValidation) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	tctx.IsTL2 = true
	return item.WriteJSONOpt(&tctx, w)
}
func (item *CasesTestBeforeReadBitValidation) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexN := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"n":`...)
	w = basictl.JSONWriteUint32(w, item.N)
	if (item.N != 0) == false {
		w = w[:backupIndexN]
	}
	if item.mask1&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"a":`...)
		w = tlBuiltinVectorInt32.BuiltinVectorInt32WriteJSONOpt(tctx, w, item.a)
	}
	if item.mask1&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"b":`...)
		w = tlBuiltinVectorInt32.BuiltinVectorInt32WriteJSONOpt(tctx, w, item.b)
	}
	return append(w, '}')
}

func (item *CasesTestBeforeReadBitValidation) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CasesTestBeforeReadBitValidation) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases.testBeforeReadBitValidation", err.Error())
	}
	return nil
}

func (item *CasesTestBeforeReadBitValidation) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.N
	if item.N != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.a
	currentPosition := len(sizes)
	if item.mask1&(1<<2) != 0 {
		if len(item.a) != 0 {
			sizes = tlBuiltinVectorInt32.BuiltinVectorInt32CalculateLayout(sizes, &item.a)
			if sizes[currentPosition] != 0 {
				lastUsedByte = 1
				currentSize += sizes[currentPosition]
				currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
			} else {
				sizes = sizes[:currentPosition+1]
			}
		}
	}

	// calculate layout for item.b
	currentPosition = len(sizes)
	if item.mask1&(1<<3) != 0 {
		if len(item.b) != 0 {
			sizes = tlBuiltinVectorInt32.BuiltinVectorInt32CalculateLayout(sizes, &item.b)
			if sizes[currentPosition] != 0 {
				lastUsedByte = 1
				currentSize += sizes[currentPosition]
				currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
			} else {
				sizes = sizes[:currentPosition+1]
			}
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CasesTestBeforeReadBitValidation) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.N
	if item.N != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.N)
		}
	}
	// write item.a
	if item.mask1&(1<<2) != 0 {
		if len(item.a) != 0 {
			serializedSize += sizes[0]
			if sizes[0] != 0 {
				serializedSize += basictl.TL2CalculateSize(sizes[0])
				currentBlock |= (1 << 2)
				w, sizes = tlBuiltinVectorInt32.BuiltinVectorInt32InternalWriteTL2(w, sizes, &item.a)
			} else {
				sizes = sizes[1:]
			}
		}
	}
	// write item.b
	if item.mask1&(1<<3) != 0 {
		if len(item.b) != 0 {
			serializedSize += sizes[0]
			if sizes[0] != 0 {
				serializedSize += basictl.TL2CalculateSize(sizes[0])
				currentBlock |= (1 << 3)
				w, sizes = tlBuiltinVectorInt32.BuiltinVectorInt32InternalWriteTL2(w, sizes, &item.b)
			} else {
				sizes = sizes[1:]
			}
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CasesTestBeforeReadBitValidation) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *CasesTestBeforeReadBitValidation) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}
	item.mask1 = block

	// read item.N
	if block&(1<<1) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.N); err != nil {
			return currentR, err
		}
	} else {
		item.N = 0
	}

	// read item.a
	if block&(1<<2) != 0 {
		if item.mask1&(1<<2) != 0 {
			if currentR, err = tlBuiltinVectorInt32.BuiltinVectorInt32InternalReadTL2(currentR, &item.a); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "a" + "is presented but depending bit is absent")
		}
	} else {
		item.a = item.a[:0]
	}

	// read item.b
	if block&(1<<3) != 0 {
		if item.mask1&(1<<3) != 0 {
			if currentR, err = tlBuiltinVectorInt32.BuiltinVectorInt32InternalReadTL2(currentR, &item.b); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "b" + "is presented but depending bit is absent")
		}
	} else {
		item.b = item.b[:0]
	}

	return r, nil
}

func (item *CasesTestBeforeReadBitValidation) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
