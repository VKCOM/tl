// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package factory_bytes

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/cycle_42a1a8597f818829cd168dce9785322f"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/cycle_44515dca4b2e76ca676b13645e716786"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/cycle_4a1568ff5f665a65be83c5d14a33c0d0"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlInt32"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlInt64"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tl/tlTrue"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlbenchmarks/tlBenchmarksVruHash"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlbenchmarks/tlBenchmarksVruPosition"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlbenchmarks/tlBenchmarksVrutoyPositions"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlbenchmarks/tlBenchmarksVrutoyTopLevelContainer"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlbenchmarks/tlBenchmarksVrutoyTopLevelContainerWithDependency"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestAllPossibleFieldConfigs"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestAllPossibleFieldConfigsContainer"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestArray"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestBeforeReadBitValidation"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestDictAny"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestDictInt"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestDictString"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestEnum"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestEnumContainer"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestInplaceStructArgs"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestInplaceStructArgs2"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestLocalFieldmask"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestMaybe"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestOutFieldMask"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestOutFieldMaskContainer"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestRecursiveFieldmask"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestTuple"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestUnionContainer"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases/tlCasesTestVector"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestArrayFixedBool"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestArrayFlexibleBool"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestFixedParam"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestFunctionNoDep1"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestFunctionNoDep2"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestFunctionNoDep3"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestFunctionNoDep4"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestFunctionNoDep5"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestFunctionWithDep1"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestFunctionWithDep2"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestObject"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestObjectWithMuiltiParams"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestParamsGeneration"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcasesTL2/tlCasesTL2TestVectorBool"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases_bytes/tlCasesBytesTestArray"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases_bytes/tlCasesBytesTestDictAny"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases_bytes/tlCasesBytesTestDictInt"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases_bytes/tlCasesBytesTestDictString"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases_bytes/tlCasesBytesTestDictStringString"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases_bytes/tlCasesBytesTestEnum"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases_bytes/tlCasesBytesTestEnumContainer"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases_bytes/tlCasesBytesTestTuple"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/internal/tlcases_bytes/tlCasesBytesTestVector"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/casesTL2/meta"
)

func CreateFunctionBytes(tag uint32) meta.Function {
	return meta.CreateFunctionBytes(tag)
}

func CreateObjectBytes(tag uint32) meta.Object {
	return meta.CreateObjectBytes(tag)
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateFunctionFromNameBytes(name string) meta.Function {
	return meta.CreateFunctionFromNameBytes(name)
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateObjectFromNameBytes(name string) meta.Object {
	return meta.CreateObjectFromNameBytes(name)
}

func init() {
	// TL2
	meta.SetGlobalFactoryCreateForObjectBytesTL2("benchmarks.vruHash", func() meta.Object { var ret tlBenchmarksVruHash.BenchmarksVruHash; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("benchmarks.vruPosition", func() meta.Object { var ret tlBenchmarksVruPosition.BenchmarksVruPosition; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("benchmarks.vrutoyPositions", func() meta.Object { var ret tlBenchmarksVrutoyPositions.BenchmarksVrutoyPositions; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("benchmarks.vrutoyTopLevelContainer", func() meta.Object {
		var ret tlBenchmarksVrutoyTopLevelContainer.BenchmarksVrutoyTopLevelContainer
		return &ret
	})
	meta.SetGlobalFactoryCreateForObjectBytesTL2("benchmarks.vrutoyTopLevelContainerWithDependency", func() meta.Object {
		var ret tlBenchmarksVrutoyTopLevelContainerWithDependency.BenchmarksVrutoyTopLevelContainerWithDependency
		return &ret
	})
	meta.SetGlobalFactoryCreateForObjectBytesTL2("benchmarks.vrutoyTopLevelUnion", func() meta.Object {
		var ret cycle_4a1568ff5f665a65be83c5d14a33c0d0.BenchmarksVrutoyTopLevelUnion
		return &ret
	})
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases_bytes.testArray", func() meta.Object { var ret tlCasesBytesTestArray.CasesBytesTestArrayBytes; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases_bytes.testDictAny", func() meta.Object { var ret tlCasesBytesTestDictAny.CasesBytesTestDictAny; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases_bytes.testDictInt", func() meta.Object { var ret tlCasesBytesTestDictInt.CasesBytesTestDictIntBytes; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases_bytes.testDictString", func() meta.Object { var ret tlCasesBytesTestDictString.CasesBytesTestDictStringBytes; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases_bytes.testDictStringString", func() meta.Object {
		var ret tlCasesBytesTestDictStringString.CasesBytesTestDictStringStringBytes
		return &ret
	})
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases_bytes.testEnum", func() meta.Object { var ret tlCasesBytesTestEnum.CasesBytesTestEnum; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases_bytes.testEnumContainer", func() meta.Object { var ret tlCasesBytesTestEnumContainer.CasesBytesTestEnumContainer; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases_bytes.testTuple", func() meta.Object { var ret tlCasesBytesTestTuple.CasesBytesTestTupleBytes; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases_bytes.testVector", func() meta.Object { var ret tlCasesBytesTestVector.CasesBytesTestVectorBytes; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.myCycle1", func() meta.Object { var ret cycle_44515dca4b2e76ca676b13645e716786.CasesMyCycle1; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.myCycle2", func() meta.Object { var ret cycle_44515dca4b2e76ca676b13645e716786.CasesMyCycle2; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.myCycle3", func() meta.Object { var ret cycle_44515dca4b2e76ca676b13645e716786.CasesMyCycle3; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("casesTL2.testArrayFixedBool", func() meta.Object { var ret tlCasesTL2TestArrayFixedBool.CasesTL2TestArrayFixedBool; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("casesTL2.testArrayFlexibleBool", func() meta.Object { var ret tlCasesTL2TestArrayFlexibleBool.CasesTL2TestArrayFlexibleBool; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("casesTL2.testFixedParam", func() meta.Object { var ret tlCasesTL2TestFixedParam.CasesTL2TestFixedParam; return &ret })
	meta.SetGlobalFactoryCreateForFunctionBytes(0x1b8b9feb, func() meta.Object { var ret tlCasesTL2TestFunctionNoDep1.CasesTL2TestFunctionNoDep1; return &ret }, func() meta.Function { var ret tlCasesTL2TestFunctionNoDep1.CasesTL2TestFunctionNoDep1; return &ret }, nil)
	meta.SetGlobalFactoryCreateForFunctionBytes(0x0a2c0bf9, func() meta.Object { var ret tlCasesTL2TestFunctionNoDep2.CasesTL2TestFunctionNoDep2; return &ret }, func() meta.Function { var ret tlCasesTL2TestFunctionNoDep2.CasesTL2TestFunctionNoDep2; return &ret }, nil)
	meta.SetGlobalFactoryCreateForFunctionBytes(0xf020849b, func() meta.Object { var ret tlCasesTL2TestFunctionNoDep3.CasesTL2TestFunctionNoDep3; return &ret }, func() meta.Function { var ret tlCasesTL2TestFunctionNoDep3.CasesTL2TestFunctionNoDep3; return &ret }, nil)
	meta.SetGlobalFactoryCreateForFunctionBytes(0x5a933a50, func() meta.Object { var ret tlCasesTL2TestFunctionNoDep4.CasesTL2TestFunctionNoDep4; return &ret }, func() meta.Function { var ret tlCasesTL2TestFunctionNoDep4.CasesTL2TestFunctionNoDep4; return &ret }, nil)
	meta.SetGlobalFactoryCreateForFunctionBytes(0x2b47b925, func() meta.Object { var ret tlCasesTL2TestFunctionNoDep5.CasesTL2TestFunctionNoDep5; return &ret }, func() meta.Function { var ret tlCasesTL2TestFunctionNoDep5.CasesTL2TestFunctionNoDep5; return &ret }, nil)
	meta.SetGlobalFactoryCreateForFunctionBytes(0xb6c63b07, func() meta.Object { var ret tlCasesTL2TestFunctionWithDep1.CasesTL2TestFunctionWithDep1; return &ret }, func() meta.Function { var ret tlCasesTL2TestFunctionWithDep1.CasesTL2TestFunctionWithDep1; return &ret }, nil)
	meta.SetGlobalFactoryCreateForFunctionBytes(0x9d44a2fd, func() meta.Object { var ret tlCasesTL2TestFunctionWithDep2.CasesTL2TestFunctionWithDep2; return &ret }, func() meta.Function { var ret tlCasesTL2TestFunctionWithDep2.CasesTL2TestFunctionWithDep2; return &ret }, nil)
	meta.SetGlobalFactoryCreateForObjectBytesTL2("casesTL2.testObject", func() meta.Object { var ret tlCasesTL2TestObject.CasesTL2TestObject; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("casesTL2.testObjectWithMuiltiParams", func() meta.Object {
		var ret tlCasesTL2TestObjectWithMuiltiParams.CasesTL2TestObjectWithMuiltiParams
		return &ret
	})
	meta.SetGlobalFactoryCreateForObjectBytesTL2("casesTL2.testParamsGeneration", func() meta.Object { var ret tlCasesTL2TestParamsGeneration.CasesTL2TestParamsGeneration; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("casesTL2.testVectorBool", func() meta.Object { var ret tlCasesTL2TestVectorBool.CasesTL2TestVectorBool; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testAllPossibleFieldConfigs", func() meta.Object {
		var ret tlCasesTestAllPossibleFieldConfigs.CasesTestAllPossibleFieldConfigs
		return &ret
	})
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testAllPossibleFieldConfigsContainer", func() meta.Object {
		var ret tlCasesTestAllPossibleFieldConfigsContainer.CasesTestAllPossibleFieldConfigsContainer
		return &ret
	})
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testArray", func() meta.Object { var ret tlCasesTestArray.CasesTestArray; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testBeforeReadBitValidation", func() meta.Object {
		var ret tlCasesTestBeforeReadBitValidation.CasesTestBeforeReadBitValidation
		return &ret
	})
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testDictAny", func() meta.Object { var ret tlCasesTestDictAny.CasesTestDictAny; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testDictInt", func() meta.Object { var ret tlCasesTestDictInt.CasesTestDictInt; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testDictString", func() meta.Object { var ret tlCasesTestDictString.CasesTestDictString; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testEnum", func() meta.Object { var ret tlCasesTestEnum.CasesTestEnum; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testEnumContainer", func() meta.Object { var ret tlCasesTestEnumContainer.CasesTestEnumContainer; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testInplaceStructArgs", func() meta.Object { var ret tlCasesTestInplaceStructArgs.CasesTestInplaceStructArgs; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testInplaceStructArgs2", func() meta.Object { var ret tlCasesTestInplaceStructArgs2.CasesTestInplaceStructArgs2; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testLocalFieldmask", func() meta.Object { var ret tlCasesTestLocalFieldmask.CasesTestLocalFieldmask; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testMaybe", func() meta.Object { var ret tlCasesTestMaybe.CasesTestMaybe; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testOutFieldMask", func() meta.Object { var ret tlCasesTestOutFieldMask.CasesTestOutFieldMask; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testOutFieldMaskContainer", func() meta.Object {
		var ret tlCasesTestOutFieldMaskContainer.CasesTestOutFieldMaskContainer
		return &ret
	})
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testRecursiveFieldmask", func() meta.Object { var ret tlCasesTestRecursiveFieldmask.CasesTestRecursiveFieldmask; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testTuple", func() meta.Object { var ret tlCasesTestTuple.CasesTestTuple; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testUnion", func() meta.Object { var ret cycle_42a1a8597f818829cd168dce9785322f.CasesTestUnion; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testUnionContainer", func() meta.Object { var ret tlCasesTestUnionContainer.CasesTestUnionContainer; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("cases.testVector", func() meta.Object { var ret tlCasesTestVector.CasesTestVector; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("int32", func() meta.Object { var ret tlInt32.Int32; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("int64", func() meta.Object { var ret tlInt64.Int64; return &ret })
	meta.SetGlobalFactoryCreateForObjectBytesTL2("true", func() meta.Object { var ret tlTrue.True; return &ret })
}
