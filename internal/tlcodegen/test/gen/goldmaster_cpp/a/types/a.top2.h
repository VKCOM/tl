// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "__common_namespace/types/pair.h"
#include "a/types/a.middle.h"
#include "a/types/a.inner.h"


namespace tlgen { namespace a { 
struct Top2 {
  uint32_t n = 0;
  uint32_t m = 0;
  ::tlgen::a::Middle<::tlgen::Pair<::tlgen::a::Inner, ::tlgen::a::Inner>, ::tlgen::a::InnerI<3>> c{};

  std::string_view tl_name() const { return "a.top2"; }
  uint32_t tl_tag() const { return 0x7082d18f; }

  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const;

  friend std::ostream& operator<<(std::ostream& s, const Top2& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::a

