// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"


namespace tlgen { namespace a { 
struct Blue {

  std::string_view tl_name() const { return "a.blue"; }
  uint32_t tl_tag() const { return 0x623360f3; }

  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const;

  friend std::ostream& operator<<(std::ostream& s, const Blue& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::a

namespace tlgen { namespace a { 
struct Color0 {

  std::string_view tl_name() const { return "a.color"; }
  uint32_t tl_tag() const { return 0xf35d7a69; }

  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const;

  friend std::ostream& operator<<(std::ostream& s, const Color0& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::a

namespace tlgen { namespace a { 
struct Green {

  std::string_view tl_name() const { return "a.green"; }
  uint32_t tl_tag() const { return 0x6127e7b8; }

  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const;

  friend std::ostream& operator<<(std::ostream& s, const Green& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::a

namespace tlgen { namespace a { 
struct Red {

  std::string_view tl_name() const { return "a.red"; }
  uint32_t tl_tag() const { return 0xb83a723d; }

  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const;

  friend std::ostream& operator<<(std::ostream& s, const Red& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::a

