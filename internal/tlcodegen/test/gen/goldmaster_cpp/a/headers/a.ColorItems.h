// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "a/types/a.ColorItems.h"

namespace tl2 { namespace details { 

void ABlueReset(::tl2::a::Blue& item) noexcept;

bool ABlueWriteJSON(std::ostream& s, const ::tl2::a::Blue& item) noexcept;
bool ABlueRead(::basictl::tl_istream & s, ::tl2::a::Blue& item) noexcept; 
bool ABlueWrite(::basictl::tl_ostream & s, const ::tl2::a::Blue& item) noexcept;
bool ABlueReadBoxed(::basictl::tl_istream & s, ::tl2::a::Blue& item);
bool ABlueWriteBoxed(::basictl::tl_ostream & s, const ::tl2::a::Blue& item);

}} // namespace tl2::details

namespace tl2 { namespace details { 

void AColor0Reset(::tl2::a::Color0& item) noexcept;

bool AColor0WriteJSON(std::ostream& s, const ::tl2::a::Color0& item) noexcept;
bool AColor0Read(::basictl::tl_istream & s, ::tl2::a::Color0& item) noexcept; 
bool AColor0Write(::basictl::tl_ostream & s, const ::tl2::a::Color0& item) noexcept;
bool AColor0ReadBoxed(::basictl::tl_istream & s, ::tl2::a::Color0& item);
bool AColor0WriteBoxed(::basictl::tl_ostream & s, const ::tl2::a::Color0& item);

}} // namespace tl2::details

namespace tl2 { namespace details { 

void AGreenReset(::tl2::a::Green& item) noexcept;

bool AGreenWriteJSON(std::ostream& s, const ::tl2::a::Green& item) noexcept;
bool AGreenRead(::basictl::tl_istream & s, ::tl2::a::Green& item) noexcept; 
bool AGreenWrite(::basictl::tl_ostream & s, const ::tl2::a::Green& item) noexcept;
bool AGreenReadBoxed(::basictl::tl_istream & s, ::tl2::a::Green& item);
bool AGreenWriteBoxed(::basictl::tl_ostream & s, const ::tl2::a::Green& item);

}} // namespace tl2::details

namespace tl2 { namespace details { 

void ARedReset(::tl2::a::Red& item) noexcept;

bool ARedWriteJSON(std::ostream& s, const ::tl2::a::Red& item) noexcept;
bool ARedRead(::basictl::tl_istream & s, ::tl2::a::Red& item) noexcept; 
bool ARedWrite(::basictl::tl_ostream & s, const ::tl2::a::Red& item) noexcept;
bool ARedReadBoxed(::basictl::tl_istream & s, ::tl2::a::Red& item);
bool ARedWriteBoxed(::basictl::tl_ostream & s, const ::tl2::a::Red& item);

}} // namespace tl2::details

