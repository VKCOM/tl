// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "a/types/a.Color.h"


namespace tlgen { namespace ab { 
struct Call10 {

  // tl type info
  static constexpr uint32_t TL_TAG = 0x8db2a4f8;
  static constexpr std::string_view TL_NAME = "ab.call10";

  uint32_t tl_tag() const { return 0x8db2a4f8; }
  std::string_view tl_name() const { return "ab.call10"; }

  // basic serialization methods 
  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const;

  // function methods and properties
  using ResultType = ::tlgen::a::Color;

  bool read_result(::tlgen::basictl::tl_istream & s, ::tlgen::a::Color & result) const noexcept;
  bool write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::a::Color & result) const noexcept;

  void read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::a::Color & result) const;
  void write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::a::Color & result) const;

  friend std::ostream& operator<<(std::ostream& s, const Call10& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::ab

