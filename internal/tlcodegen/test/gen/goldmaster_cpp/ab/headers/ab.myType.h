// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "ab/types/ab.myType.h"

namespace tlgen { namespace details { 

void AbMyTypeReset(::tlgen::ab::MyType& item) noexcept;

bool AbMyTypeWriteJSON(std::ostream& s, const ::tlgen::ab::MyType& item) noexcept;
bool AbMyTypeRead(::tlgen::basictl::tl_istream & s, ::tlgen::ab::MyType& item) noexcept; 
bool AbMyTypeWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::ab::MyType& item) noexcept;
bool AbMyTypeReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::ab::MyType& item);
bool AbMyTypeWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::ab::MyType& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

bool AbMyTypeBoxedMaybeWriteJSON(std::ostream & s, const std::optional<::tlgen::ab::MyType>& item);

bool AbMyTypeBoxedMaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::ab::MyType>& item);
bool AbMyTypeBoxedMaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::ab::MyType>& item);


}} // namespace tlgen::details

namespace tlgen { namespace details { 

bool AbMyTypeMaybeWriteJSON(std::ostream & s, const std::optional<::tlgen::ab::MyType>& item);

bool AbMyTypeMaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::ab::MyType>& item);
bool AbMyTypeMaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::ab::MyType>& item);


}} // namespace tlgen::details

