// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "cyc2/headers/cyc2.myCycle.h"
#include "cyc3/headers/cyc3.myCycle.h"
#include "a/headers/a.Color.h"


bool tl2::cyc2::MyCycle::write_json(std::ostream& s)const {
	if (!::tl2::details::Cyc2MyCycleWriteJSON(s, *this)) { return false; }
	return true;
}

bool tl2::cyc2::MyCycle::read(::basictl::tl_istream & s) noexcept {
	if (!::tl2::details::Cyc2MyCycleRead(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::cyc2::MyCycle::write(::basictl::tl_ostream & s)const noexcept {
	if (!::tl2::details::Cyc2MyCycleWrite(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::cyc2::MyCycle::read_or_throw(::basictl::tl_throwable_istream & s) {
	::basictl::tl_istream s2(s);
	this->read(s2);
	s2.pass_data(s);
}

void tl2::cyc2::MyCycle::write_or_throw(::basictl::tl_throwable_ostream & s)const {
	::basictl::tl_ostream s2(s);
	this->write(s2);
	s2.pass_data(s);
}

bool tl2::cyc2::MyCycle::read_boxed(::basictl::tl_istream & s) noexcept {
	if (!::tl2::details::Cyc2MyCycleReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::cyc2::MyCycle::write_boxed(::basictl::tl_ostream & s)const noexcept {
	if (!::tl2::details::Cyc2MyCycleWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::cyc2::MyCycle::read_boxed_or_throw(::basictl::tl_throwable_istream & s) {
	::basictl::tl_istream s2(s);
	this->read_boxed(s2);
	s2.pass_data(s);
}

void tl2::cyc2::MyCycle::write_boxed_or_throw(::basictl::tl_throwable_ostream & s)const {
	::basictl::tl_ostream s2(s);
	this->write_boxed(s2);
	s2.pass_data(s);
}

void tl2::details::Cyc2MyCycleReset(::tl2::cyc2::MyCycle& item) noexcept {
	item.fields_mask = 0;
	item.a.reset();
	::tl2::details::AColorReset(item.b);
}

bool tl2::details::Cyc2MyCycleWriteJSON(std::ostream& s, const ::tl2::cyc2::MyCycle& item) noexcept {
	auto add_comma = false;
	s << "{";
	if (item.fields_mask != 0) {
		add_comma = true;
		s << "\"fields_mask\":";
		s << item.fields_mask;
	}
	if (item.a.has_value()) {
		if (add_comma) {
			s << ",";
		}
		add_comma = true;
		s << "\"a\":";
		if (!::tl2::details::Cyc3MyCycleMaybeWriteJSON(s, item.a)) { return false; }
	}
	if (add_comma) {
		s << ",";
	}
	add_comma = true;
	s << "\"b\":";
	if (!::tl2::details::AColorWriteJSON(s, item.b)) { return false; }
	s << "}";
	return true;
}

bool tl2::details::Cyc2MyCycleRead(::basictl::tl_istream & s, ::tl2::cyc2::MyCycle& item) noexcept {
	if (!s.nat_read(item.fields_mask)) { return false; }
	if (!::tl2::details::Cyc3MyCycleMaybeReadBoxed(s, item.a)) { return false; }
	if (!::tl2::details::AColorReadBoxed(s, item.b)) { return s.set_error_unknown_scenario(); }
	return true;
}

bool tl2::details::Cyc2MyCycleWrite(::basictl::tl_ostream & s, const ::tl2::cyc2::MyCycle& item) noexcept {
	if (!s.nat_write(item.fields_mask)) { return false;}
	if (!::tl2::details::Cyc3MyCycleMaybeWriteBoxed(s, item.a)) { return false; }
	if (!::tl2::details::AColorWriteBoxed(s, item.b)) { return s.set_error_unknown_scenario(); }
	return true;
}

bool tl2::details::Cyc2MyCycleReadBoxed(::basictl::tl_istream & s, ::tl2::cyc2::MyCycle& item) {
	if (!s.nat_read_exact_tag(0xfba5eecb)) { return false; }
	return tl2::details::Cyc2MyCycleRead(s, item);
}

bool tl2::details::Cyc2MyCycleWriteBoxed(::basictl::tl_ostream & s, const ::tl2::cyc2::MyCycle& item) {
	if (!s.nat_write(0xfba5eecb)) { return false; }
	return tl2::details::Cyc2MyCycleWrite(s, item);
}
