// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "cyc2/headers/cyc2.myCycle.h"
#include "cyc3/headers/cyc3.myCycle.h"
#include "cyc2/headers/cyc2_cyc3.myCycle.h"
#include "a/headers/a.Color.h"


bool tlgen::cyc2::MyCycle::write_json(std::ostream& s)const {
  if (!::tlgen::details::Cyc2MyCycleWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cyc2::MyCycle::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Cyc2MyCycleRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cyc2::MyCycle::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Cyc2MyCycleWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cyc2::MyCycle::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cyc2::MyCycle::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cyc2::MyCycle::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Cyc2MyCycleReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cyc2::MyCycle::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::Cyc2MyCycleWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cyc2::MyCycle::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cyc2::MyCycle::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Cyc2MyCycleReset(::tlgen::cyc2::MyCycle& item) noexcept {
  (void)item;
  item.fields_mask = 0;
  item.a.reset();
  ::tlgen::details::AColorReset(item.b);
}

bool tlgen::details::Cyc2MyCycleWriteJSON(std::ostream& s, const ::tlgen::cyc2::MyCycle& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.fields_mask != 0) {
    add_comma = true;
    s << "\"fields_mask\":";
    s << item.fields_mask;
  }
  if (item.a.has_value()) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a\":";
    if (!::tlgen::details::Cyc3MyCycleMaybeWriteJSON(s, item.a)) { return false; }
  }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"b\":";
  if (!::tlgen::details::AColorWriteJSON(s, item.b)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::Cyc2MyCycleRead(::tlgen::basictl::tl_istream & s, ::tlgen::cyc2::MyCycle& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.fields_mask)) { return false; }
  if (!::tlgen::details::Cyc3MyCycleMaybeReadBoxed(s, item.a)) { return false; }
  if (!::tlgen::details::AColorReadBoxed(s, item.b)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::Cyc2MyCycleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cyc2::MyCycle& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.fields_mask)) { return false;}
  if (!::tlgen::details::Cyc3MyCycleMaybeWriteBoxed(s, item.a)) { return false; }
  if (!::tlgen::details::AColorWriteBoxed(s, item.b)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::Cyc2MyCycleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cyc2::MyCycle& item) {
  if (!s.nat_read_exact_tag(0xfba5eecb)) { return false; }
  return tlgen::details::Cyc2MyCycleRead(s, item);
}

bool tlgen::details::Cyc2MyCycleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cyc2::MyCycle& item) {
  if (!s.nat_write(0xfba5eecb)) { return false; }
  return tlgen::details::Cyc2MyCycleWrite(s, item);
}

bool tlgen::details::Cyc3MyCycleMaybeWriteJSON(std::ostream & s, const std::optional<::tlgen::cyc3::MyCycle>& item) {
  s << "{";
  if (item) {
    s << "\"ok\":true";
    s << ",\"value\":";
    if (!::tlgen::details::Cyc3MyCycleWriteJSON(s, *item)) { return false; }
  }
  s << "}";
  return true;
}
bool tlgen::details::Cyc3MyCycleMaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::cyc3::MyCycle>& item) {
  bool has_item = false;
  if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
  if (has_item) {
    if (!item) {
      item.emplace();
    }
    if (!::tlgen::details::Cyc3MyCycleRead(s, *item)) { return s.set_error_unknown_scenario(); }
    return true;
  }
  item.reset();
  return true;
}

bool tlgen::details::Cyc3MyCycleMaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::cyc3::MyCycle>& item) {
  if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
  if (item) {
    if (!::tlgen::details::Cyc3MyCycleWrite(s, *item)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}
