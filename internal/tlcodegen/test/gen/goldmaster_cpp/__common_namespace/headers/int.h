// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "__common_namespace/types/int.h"

namespace tlgen { namespace details { 

void BuiltinTuple0IntReset(std::array<int32_t, 0>& item);

bool BuiltinTuple0IntWriteJSON(std::ostream & s, const std::array<int32_t, 0>& item);
bool BuiltinTuple0IntRead(::tlgen::basictl::tl_istream & s, std::array<int32_t, 0>& item);
bool BuiltinTuple0IntWrite(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 0>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void BuiltinTuple0IntBoxedReset(std::array<int32_t, 0>& item);

bool BuiltinTuple0IntBoxedWriteJSON(std::ostream & s, const std::array<int32_t, 0>& item);
bool BuiltinTuple0IntBoxedRead(::tlgen::basictl::tl_istream & s, std::array<int32_t, 0>& item);
bool BuiltinTuple0IntBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 0>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void BuiltinTuple3IntReset(std::array<int32_t, 3>& item);

bool BuiltinTuple3IntWriteJSON(std::ostream & s, const std::array<int32_t, 3>& item);
bool BuiltinTuple3IntRead(::tlgen::basictl::tl_istream & s, std::array<int32_t, 3>& item);
bool BuiltinTuple3IntWrite(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 3>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void BuiltinTuple3IntBoxedReset(std::array<int32_t, 3>& item);

bool BuiltinTuple3IntBoxedWriteJSON(std::ostream & s, const std::array<int32_t, 3>& item);
bool BuiltinTuple3IntBoxedRead(::tlgen::basictl::tl_istream & s, std::array<int32_t, 3>& item);
bool BuiltinTuple3IntBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::array<int32_t, 3>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void BuiltinTupleIntReset(std::vector<int32_t>& item);

bool BuiltinTupleIntWriteJSON(std::ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n);
bool BuiltinTupleIntRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n);
bool BuiltinTupleIntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item, [[maybe_unused]] uint32_t nat_n);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void BuiltinTupleTuple3IntReset(std::vector<std::array<int32_t, 3>>& item);

bool BuiltinTupleTuple3IntWriteJSON(std::ostream & s, const std::vector<std::array<int32_t, 3>>& item, [[maybe_unused]] uint32_t nat_n);
bool BuiltinTupleTuple3IntRead(::tlgen::basictl::tl_istream & s, std::vector<std::array<int32_t, 3>>& item, [[maybe_unused]] uint32_t nat_n);
bool BuiltinTupleTuple3IntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<std::array<int32_t, 3>>& item, [[maybe_unused]] uint32_t nat_n);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void BuiltinTupleTupleIntReset(std::vector<std::vector<int32_t>>& item);

bool BuiltinTupleTupleIntWriteJSON(std::ostream & s, const std::vector<std::vector<int32_t>>& item, [[maybe_unused]] uint32_t nat_n, [[maybe_unused]] uint32_t nat_t);
bool BuiltinTupleTupleIntRead(::tlgen::basictl::tl_istream & s, std::vector<std::vector<int32_t>>& item, [[maybe_unused]] uint32_t nat_n, [[maybe_unused]] uint32_t nat_t);
bool BuiltinTupleTupleIntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<std::vector<int32_t>>& item, [[maybe_unused]] uint32_t nat_n, [[maybe_unused]] uint32_t nat_t);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void BuiltinVectorIntReset(std::vector<int32_t>& item);

bool BuiltinVectorIntWriteJSON(std::ostream & s, const std::vector<int32_t>& item);
bool BuiltinVectorIntRead(::tlgen::basictl::tl_istream & s, std::vector<int32_t>& item);
bool BuiltinVectorIntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void BuiltinVectorVectorIntReset(std::vector<std::vector<int32_t>>& item);

bool BuiltinVectorVectorIntWriteJSON(std::ostream & s, const std::vector<std::vector<int32_t>>& item);
bool BuiltinVectorVectorIntRead(::tlgen::basictl::tl_istream & s, std::vector<std::vector<int32_t>>& item);
bool BuiltinVectorVectorIntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<std::vector<int32_t>>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void BuiltinVectorVectorVectorIntReset(std::vector<std::vector<std::vector<int32_t>>>& item);

bool BuiltinVectorVectorVectorIntWriteJSON(std::ostream & s, const std::vector<std::vector<std::vector<int32_t>>>& item);
bool BuiltinVectorVectorVectorIntRead(::tlgen::basictl::tl_istream & s, std::vector<std::vector<std::vector<int32_t>>>& item);
bool BuiltinVectorVectorVectorIntWrite(::tlgen::basictl::tl_ostream & s, const std::vector<std::vector<std::vector<int32_t>>>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void IntReset(int32_t& item) noexcept;

bool IntWriteJSON(std::ostream& s, const int32_t& item) noexcept;
bool IntRead(::tlgen::basictl::tl_istream & s, int32_t& item) noexcept; 
bool IntWrite(::tlgen::basictl::tl_ostream & s, const int32_t& item) noexcept;
bool IntReadBoxed(::tlgen::basictl::tl_istream & s, int32_t& item);
bool IntWriteBoxed(::tlgen::basictl::tl_ostream & s, const int32_t& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

bool IntBoxedMaybeWriteJSON(std::ostream & s, const std::optional<int32_t>& item);

bool IntBoxedMaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<int32_t>& item);
bool IntBoxedMaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<int32_t>& item);


}} // namespace tlgen::details

namespace tlgen { namespace details { 

bool IntMaybeWriteJSON(std::ostream & s, const std::optional<int32_t>& item);

bool IntMaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<int32_t>& item);
bool IntMaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<int32_t>& item);


}} // namespace tlgen::details

