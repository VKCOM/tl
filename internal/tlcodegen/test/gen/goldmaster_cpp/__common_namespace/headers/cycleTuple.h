// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "__common_namespace/types/cycleTuple.h"

namespace tlgen { namespace details { 

void BuiltinTuple2CycleTupleReset(std::array<::tlgen::CycleTuple, 2>& item);

bool BuiltinTuple2CycleTupleWriteJSON(std::ostream & s, const std::array<::tlgen::CycleTuple, 2>& item);
bool BuiltinTuple2CycleTupleRead(::tlgen::basictl::tl_istream & s, std::array<::tlgen::CycleTuple, 2>& item);
bool BuiltinTuple2CycleTupleWrite(::tlgen::basictl::tl_ostream & s, const std::array<::tlgen::CycleTuple, 2>& item);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void BuiltinTupleCycleTupleReset(std::vector<::tlgen::CycleTuple>& item);

bool BuiltinTupleCycleTupleWriteJSON(std::ostream & s, const std::vector<::tlgen::CycleTuple>& item, [[maybe_unused]] uint32_t nat_n);
bool BuiltinTupleCycleTupleRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::CycleTuple>& item, [[maybe_unused]] uint32_t nat_n);
bool BuiltinTupleCycleTupleWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::CycleTuple>& item, [[maybe_unused]] uint32_t nat_n);

}} // namespace tlgen::details

namespace tlgen { namespace details { 

void CycleTupleReset(::tlgen::CycleTuple& item) noexcept;

bool CycleTupleWriteJSON(std::ostream& s, const ::tlgen::CycleTuple& item) noexcept;
bool CycleTupleRead(::tlgen::basictl::tl_istream & s, ::tlgen::CycleTuple& item) noexcept; 
bool CycleTupleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::CycleTuple& item) noexcept;
bool CycleTupleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::CycleTuple& item);
bool CycleTupleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::CycleTuple& item);

}} // namespace tlgen::details

