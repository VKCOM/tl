// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "__common_namespace/types/cycleTuple.h"

namespace tl2 { namespace details { 

void BuiltinTuple2CycleTupleReset(std::array<::tl2::CycleTuple, 2>& item);

bool BuiltinTuple2CycleTupleWriteJSON(std::ostream & s, const std::array<::tl2::CycleTuple, 2>& item);
bool BuiltinTuple2CycleTupleRead(::basictl::tl_istream & s, std::array<::tl2::CycleTuple, 2>& item);
bool BuiltinTuple2CycleTupleWrite(::basictl::tl_ostream & s, const std::array<::tl2::CycleTuple, 2>& item);

}} // namespace tl2::details

namespace tl2 { namespace details { 

void BuiltinTupleCycleTupleReset(std::vector<::tl2::CycleTuple>& item);

bool BuiltinTupleCycleTupleWriteJSON(std::ostream & s, const std::vector<::tl2::CycleTuple>& item, uint32_t nat_n);
bool BuiltinTupleCycleTupleRead(::basictl::tl_istream & s, std::vector<::tl2::CycleTuple>& item, uint32_t nat_n);
bool BuiltinTupleCycleTupleWrite(::basictl::tl_ostream & s, const std::vector<::tl2::CycleTuple>& item, uint32_t nat_n);

}} // namespace tl2::details

namespace tl2 { namespace details { 

void CycleTupleReset(::tl2::CycleTuple& item) noexcept;

bool CycleTupleWriteJSON(std::ostream& s, const ::tl2::CycleTuple& item) noexcept;
bool CycleTupleRead(::basictl::tl_istream & s, ::tl2::CycleTuple& item) noexcept; 
bool CycleTupleWrite(::basictl::tl_ostream & s, const ::tl2::CycleTuple& item) noexcept;
bool CycleTupleReadBoxed(::basictl::tl_istream & s, ::tl2::CycleTuple& item);
bool CycleTupleWriteBoxed(::basictl::tl_ostream & s, const ::tl2::CycleTuple& item);

}} // namespace tl2::details

