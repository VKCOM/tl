// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "__common_namespace/types/replace9.h"
#include "__common_namespace/types/replace8.h"
#include "__common_namespace/types/replace7.h"
#include "__common_namespace/types/replace6.h"
#include "__common_namespace/types/replace5.h"
#include "__common_namespace/types/replace4.h"
#include "__common_namespace/types/replace3.h"
#include "__common_namespace/types/replace2.h"
#include "__common_namespace/types/replace15.h"
#include "__common_namespace/types/replace14.h"
#include "__common_namespace/types/replace13.h"
#include "__common_namespace/types/replace1.h"
#include "__common_namespace/types/replace12.h"
#include "__common_namespace/types/replace11.h"
#include "__common_namespace/types/replace10.h"


namespace tlgen { 
struct Replace {
  uint32_t n = 0;
  ::tlgen::Replace1 a{};
  ::tlgen::Replace1n<3> a1{};
  ::tlgen::Replace2 b{};
  ::tlgen::Replace3 c{};
  ::tlgen::Replace4 d{};
  ::tlgen::Replace4n<3> d1{};
  ::tlgen::Replace5 e{};
  ::tlgen::Replace6 g{};
  ::tlgen::Replace7 h{};
  ::tlgen::Replace8 i{};
  ::tlgen::Replace9 j{};
  ::tlgen::Replace10 k{};
  ::tlgen::Replace11<int64_t> l{};
  ::tlgen::Replace12 m{};
  ::tlgen::Replace13<int64_t> o{};
  ::tlgen::Replace14<int64_t> p{};
  ::tlgen::Replace15 q{};

  std::string_view tl_name() const { return "replace"; }
  uint32_t tl_tag() const { return 0x323db63e; }

  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const;

  friend std::ostream& operator<<(std::ostream& s, const Replace& rhs) {
    rhs.write_json(s);
    return s;
  }
};

} // namespace tlgen

