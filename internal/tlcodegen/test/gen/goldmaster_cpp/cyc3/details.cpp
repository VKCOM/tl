// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "cyc3/headers/cyc3_vector.h"
#include "cyc1/headers/cyc1.myCycle.h"
#include "cyc3/headers/cyc3.myCycle.h"


bool tl2::cyc3::MyCycle::write_json(std::ostream& s)const {
	if (!::tl2::details::Cyc3MyCycleWriteJSON(s, *this)) { return false; }
	return true;
}

bool tl2::cyc3::MyCycle::read(::basictl::tl_istream & s) noexcept {
	if (!::tl2::details::Cyc3MyCycleRead(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::cyc3::MyCycle::write(::basictl::tl_ostream & s)const noexcept {
	if (!::tl2::details::Cyc3MyCycleWrite(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::cyc3::MyCycle::read_or_throw(::basictl::tl_throwable_istream & s) {
	::basictl::tl_istream s2(s);
	this->read(s2);
	s2.pass_data(s);
}

void tl2::cyc3::MyCycle::write_or_throw(::basictl::tl_throwable_ostream & s)const {
	::basictl::tl_ostream s2(s);
	this->write(s2);
	s2.pass_data(s);
}

bool tl2::cyc3::MyCycle::read_boxed(::basictl::tl_istream & s) noexcept {
	if (!::tl2::details::Cyc3MyCycleReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::cyc3::MyCycle::write_boxed(::basictl::tl_ostream & s)const noexcept {
	if (!::tl2::details::Cyc3MyCycleWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::cyc3::MyCycle::read_boxed_or_throw(::basictl::tl_throwable_istream & s) {
	::basictl::tl_istream s2(s);
	this->read_boxed(s2);
	s2.pass_data(s);
}

void tl2::cyc3::MyCycle::write_boxed_or_throw(::basictl::tl_throwable_ostream & s)const {
	::basictl::tl_ostream s2(s);
	this->write_boxed(s2);
	s2.pass_data(s);
}

void tl2::details::Cyc3MyCycleReset(::tl2::cyc3::MyCycle& item) noexcept {
	item.fields_mask = 0;
	item.a.clear();
}

bool tl2::details::Cyc3MyCycleWriteJSON(std::ostream& s, const ::tl2::cyc3::MyCycle& item) noexcept {
	auto add_comma = false;
	s << "{";
	if (item.fields_mask != 0) {
		add_comma = true;
		s << "\"fields_mask\":";
		s << item.fields_mask;
	}
	if (item.a.size() != 0) {
		if (add_comma) {
			s << ",";
		}
		add_comma = true;
		s << "\"a\":";
		if (!::tl2::details::BuiltinVectorCyc1MyCycleWriteJSON(s, item.a)) { return false; }
	}
	s << "}";
	return true;
}

bool tl2::details::Cyc3MyCycleRead(::basictl::tl_istream & s, ::tl2::cyc3::MyCycle& item) noexcept {
	if (!s.nat_read(item.fields_mask)) { return false; }
	if (!::tl2::details::BuiltinVectorCyc1MyCycleRead(s, item.a)) { return false; }
	return true;
}

bool tl2::details::Cyc3MyCycleWrite(::basictl::tl_ostream & s, const ::tl2::cyc3::MyCycle& item) noexcept {
	if (!s.nat_write(item.fields_mask)) { return false;}
	if (!::tl2::details::BuiltinVectorCyc1MyCycleWrite(s, item.a)) { return false; }
	return true;
}

bool tl2::details::Cyc3MyCycleReadBoxed(::basictl::tl_istream & s, ::tl2::cyc3::MyCycle& item) {
	if (!s.nat_read_exact_tag(0x47866860)) { return false; }
	return tl2::details::Cyc3MyCycleRead(s, item);
}

bool tl2::details::Cyc3MyCycleWriteBoxed(::basictl::tl_ostream & s, const ::tl2::cyc3::MyCycle& item) {
	if (!s.nat_write(0x47866860)) { return false; }
	return tl2::details::Cyc3MyCycleWrite(s, item);
}

bool tl2::details::Cyc3MyCycleMaybeWriteJSON(std::ostream & s, const std::optional<::tl2::cyc3::MyCycle>& item) {
	s << "{";
	if (item) {
		s << "\"ok\":true";
		s << ",\"value\":";
		if (!::tl2::details::Cyc3MyCycleWriteJSON(s, *item)) { return false; }
	}
	s << "}";
	return true;
}
bool tl2::details::Cyc3MyCycleMaybeReadBoxed(::basictl::tl_istream & s, std::optional<::tl2::cyc3::MyCycle>& item) {
	bool has_item = false;
	if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
	if (has_item) {
		if (!item) {
			item.emplace();
		}
		if (!::tl2::details::Cyc3MyCycleRead(s, *item)) { return s.set_error_unknown_scenario(); }
		return true;
	}
	item.reset();
	return true;
}

bool tl2::details::Cyc3MyCycleMaybeWriteBoxed(::basictl::tl_ostream & s, const std::optional<::tl2::cyc3::MyCycle>& item) {
	if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
	if (item) {
		if (!::tl2::details::Cyc3MyCycleWrite(s, *item)) { return s.set_error_unknown_scenario(); }
	}
	return true;
}

void tl2::details::VectorCyc1MyCycleReset(std::vector<::tl2::cyc1::MyCycle>& item) noexcept {
	item.clear();
}

bool tl2::details::VectorCyc1MyCycleWriteJSON(std::ostream& s, const std::vector<::tl2::cyc1::MyCycle>& item) noexcept {
	if (!::tl2::details::BuiltinVectorCyc1MyCycleWriteJSON(s, item)) { return false; }
	return true;
}

bool tl2::details::VectorCyc1MyCycleRead(::basictl::tl_istream & s, std::vector<::tl2::cyc1::MyCycle>& item) noexcept {
	if (!::tl2::details::BuiltinVectorCyc1MyCycleRead(s, item)) { return false; }
	return true;
}

bool tl2::details::VectorCyc1MyCycleWrite(::basictl::tl_ostream & s, const std::vector<::tl2::cyc1::MyCycle>& item) noexcept {
	if (!::tl2::details::BuiltinVectorCyc1MyCycleWrite(s, item)) { return false; }
	return true;
}

bool tl2::details::VectorCyc1MyCycleReadBoxed(::basictl::tl_istream & s, std::vector<::tl2::cyc1::MyCycle>& item) {
	if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
	return tl2::details::VectorCyc1MyCycleRead(s, item);
}

bool tl2::details::VectorCyc1MyCycleWriteBoxed(::basictl::tl_ostream & s, const std::vector<::tl2::cyc1::MyCycle>& item) {
	if (!s.nat_write(0x1cb5c415)) { return false; }
	return tl2::details::VectorCyc1MyCycleWrite(s, item);
}
