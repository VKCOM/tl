// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "cd/headers/cd_typeD.h"
#include "cd/headers/cd.useCycle.h"
#include "cd/headers/cd.typeD.h"
#include "cd/headers/cd.typeC.h"
#include "cd/headers/cd.typeB.h"
#include "cd/headers/cd.topLevel3.h"
#include "cd/headers/cd_halfStr.h"
#include "cyc2/headers/cyc2.myCycle.h"
#include "__common_namespace/headers/useStr.h"
#include "__common_namespace/headers/noStr.h"
#include "cd/headers/cd.myType.h"
#include "cd/headers/cd.response.h"
#include "__common_namespace/headers/typeA.h"
#include "cd/headers/cd.typeA.h"
#include "ab/headers/ab.typeA.h"
#include "cd/headers/cd_a.Color.h"
#include "a/headers/a.Color.h"


bool tlgen::details::AColorBoxedMaybeWriteJSON(std::ostream & s, const std::optional<::tlgen::a::Color>& item) {
  s << "{";
  if (item) {
    s << "\"ok\":true";
    s << ",\"value\":";
    if (!::tlgen::details::AColorWriteJSON(s, *item)) { return false; }
  }
  s << "}";
  return true;
}
bool tlgen::details::AColorBoxedMaybeReadBoxed(::tlgen::basictl::tl_istream & s, std::optional<::tlgen::a::Color>& item) {
  bool has_item = false;
  if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
  if (has_item) {
    if (!item) {
      item.emplace();
    }
    if (!::tlgen::details::AColorReadBoxed(s, *item)) { return s.set_error_unknown_scenario(); }
    return true;
  }
  item.reset();
  return true;
}

bool tlgen::details::AColorBoxedMaybeWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::optional<::tlgen::a::Color>& item) {
  if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
  if (item) {
    if (!::tlgen::details::AColorWriteBoxed(s, *item)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::cd::MyType::write_json(std::ostream& s)const {
  if (!::tlgen::details::CdMyTypeWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cd::MyType::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdMyTypeRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::MyType::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdMyTypeWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::MyType::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cd::MyType::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cd::MyType::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdMyTypeReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::MyType::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdMyTypeWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::MyType::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cd::MyType::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CdMyTypeReset(::tlgen::cd::MyType& item) noexcept {
  (void)item;
  item.x = 0;
}

bool tlgen::details::CdMyTypeWriteJSON(std::ostream& s, const ::tlgen::cd::MyType& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    s << item.x;
  }
  s << "}";
  return true;
}

bool tlgen::details::CdMyTypeRead(::tlgen::basictl::tl_istream & s, ::tlgen::cd::MyType& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::CdMyTypeWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::MyType& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::CdMyTypeReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cd::MyType& item) {
  if (!s.nat_read_exact_tag(0xeab6a6b4)) { return false; }
  return tlgen::details::CdMyTypeRead(s, item);
}

bool tlgen::details::CdMyTypeWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::MyType& item) {
  if (!s.nat_write(0xeab6a6b4)) { return false; }
  return tlgen::details::CdMyTypeWrite(s, item);
}

bool tlgen::cd::Response::write_json(std::ostream& s)const {
  if (!::tlgen::details::CdResponseWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cd::Response::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdResponseRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::Response::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdResponseWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::Response::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cd::Response::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cd::Response::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdResponseReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::Response::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdResponseWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::Response::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cd::Response::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CdResponseReset(::tlgen::cd::Response& item) noexcept {
  (void)item;
  item.x = 0;
  item.str.clear();
}

bool tlgen::details::CdResponseWriteJSON(std::ostream& s, const ::tlgen::cd::Response& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.x != 0) {
    add_comma = true;
    s << "\"x\":";
    s << item.x;
  }
  if (item.str.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"str\":";
    s << "\"" << item.str << "\"";
  }
  s << "}";
  return true;
}

bool tlgen::details::CdResponseRead(::tlgen::basictl::tl_istream & s, ::tlgen::cd::Response& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  if (!s.string_read(item.str)) { return false; }
  return true;
}

bool tlgen::details::CdResponseWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::Response& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  if (!s.string_write(item.str)) { return false;}
  return true;
}

bool tlgen::details::CdResponseReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cd::Response& item) {
  if (!s.nat_read_exact_tag(0x8c202f64)) { return false; }
  return tlgen::details::CdResponseRead(s, item);
}

bool tlgen::details::CdResponseWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::Response& item) {
  if (!s.nat_write(0x8c202f64)) { return false; }
  return tlgen::details::CdResponseWrite(s, item);
}

bool tlgen::cd::TopLevel3::write_json(std::ostream& s)const {
  if (!::tlgen::details::CdTopLevel3WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cd::TopLevel3::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdTopLevel3Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::TopLevel3::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdTopLevel3Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::TopLevel3::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cd::TopLevel3::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cd::TopLevel3::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdTopLevel3ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::TopLevel3::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdTopLevel3WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::TopLevel3::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cd::TopLevel3::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CdTopLevel3Reset(::tlgen::cd::TopLevel3& item) noexcept {
  (void)item;
  ::tlgen::details::UseStrReset(item.a);
  ::tlgen::details::HalfStrReset(item.b);
}

bool tlgen::details::CdTopLevel3WriteJSON(std::ostream& s, const ::tlgen::cd::TopLevel3& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  add_comma = true;
  s << "\"a\":";
  if (!::tlgen::details::UseStrWriteJSON(s, item.a)) { return false; }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"b\":";
  if (!::tlgen::details::HalfStrWriteJSON(s, item.b)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::CdTopLevel3Read(::tlgen::basictl::tl_istream & s, ::tlgen::cd::TopLevel3& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::UseStrRead(s, item.a)) { return s.set_error_unknown_scenario(); }
  if (!::tlgen::details::HalfStrRead(s, item.b)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CdTopLevel3Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::TopLevel3& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::UseStrWrite(s, item.a)) { return s.set_error_unknown_scenario(); }
  if (!::tlgen::details::HalfStrWrite(s, item.b)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CdTopLevel3ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cd::TopLevel3& item) {
  if (!s.nat_read_exact_tag(0x5cd1ca89)) { return false; }
  return tlgen::details::CdTopLevel3Read(s, item);
}

bool tlgen::details::CdTopLevel3WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::TopLevel3& item) {
  if (!s.nat_write(0x5cd1ca89)) { return false; }
  return tlgen::details::CdTopLevel3Write(s, item);
}

bool tlgen::cd::TypeA::write_json(std::ostream& s)const {
  if (!::tlgen::details::CdTypeAWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cd::TypeA::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdTypeARead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::TypeA::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdTypeAWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::TypeA::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cd::TypeA::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cd::TypeA::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdTypeAReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::TypeA::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdTypeAWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::TypeA::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cd::TypeA::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CdTypeAReset(::tlgen::cd::TypeA& item) noexcept {
  (void)item;
  item.x = 0;
}

bool tlgen::details::CdTypeAWriteJSON(std::ostream& s, const ::tlgen::cd::TypeA& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    s << item.x;
  }
  s << "}";
  return true;
}

bool tlgen::details::CdTypeARead(::tlgen::basictl::tl_istream & s, ::tlgen::cd::TypeA& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::CdTypeAWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::TypeA& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::CdTypeAReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cd::TypeA& item) {
  if (!s.nat_read_exact_tag(0xa831a920)) { return false; }
  return tlgen::details::CdTypeARead(s, item);
}

bool tlgen::details::CdTypeAWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::TypeA& item) {
  if (!s.nat_write(0xa831a920)) { return false; }
  return tlgen::details::CdTypeAWrite(s, item);
}

bool tlgen::cd::TypeB::write_json(std::ostream& s)const {
  if (!::tlgen::details::CdTypeBWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cd::TypeB::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdTypeBRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::TypeB::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdTypeBWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::TypeB::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cd::TypeB::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cd::TypeB::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdTypeBReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::TypeB::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdTypeBWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::TypeB::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cd::TypeB::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CdTypeBReset(::tlgen::cd::TypeB& item) noexcept {
  (void)item;
  ::tlgen::details::AbTypeAReset(item.x);
}

bool tlgen::details::CdTypeBWriteJSON(std::ostream& s, const ::tlgen::cd::TypeB& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::AbTypeAWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::CdTypeBRead(::tlgen::basictl::tl_istream & s, ::tlgen::cd::TypeB& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::AbTypeARead(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CdTypeBWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::TypeB& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::AbTypeAWrite(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CdTypeBReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cd::TypeB& item) {
  if (!s.nat_read_exact_tag(0x377b4996)) { return false; }
  return tlgen::details::CdTypeBRead(s, item);
}

bool tlgen::details::CdTypeBWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::TypeB& item) {
  if (!s.nat_write(0x377b4996)) { return false; }
  return tlgen::details::CdTypeBWrite(s, item);
}

bool tlgen::cd::TypeC::write_json(std::ostream& s)const {
  if (!::tlgen::details::CdTypeCWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cd::TypeC::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdTypeCRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::TypeC::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdTypeCWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::TypeC::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cd::TypeC::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cd::TypeC::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdTypeCReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::TypeC::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdTypeCWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::TypeC::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cd::TypeC::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CdTypeCReset(::tlgen::cd::TypeC& item) noexcept {
  (void)item;
  ::tlgen::details::AbTypeAReset(item.x);
}

bool tlgen::details::CdTypeCWriteJSON(std::ostream& s, const ::tlgen::cd::TypeC& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::AbTypeAWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::CdTypeCRead(::tlgen::basictl::tl_istream & s, ::tlgen::cd::TypeC& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::AbTypeARead(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CdTypeCWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::TypeC& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::AbTypeAWrite(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CdTypeCReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cd::TypeC& item) {
  if (!s.nat_read_exact_tag(0xdb0f93d4)) { return false; }
  return tlgen::details::CdTypeCRead(s, item);
}

bool tlgen::details::CdTypeCWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::TypeC& item) {
  if (!s.nat_write(0xdb0f93d4)) { return false; }
  return tlgen::details::CdTypeCWrite(s, item);
}

bool tlgen::cd::TypeD::write_json(std::ostream& s)const {
  if (!::tlgen::details::CdTypeDWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cd::TypeD::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdTypeDRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::TypeD::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdTypeDWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::TypeD::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cd::TypeD::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cd::TypeD::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdTypeDReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::TypeD::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdTypeDWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::TypeD::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cd::TypeD::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CdTypeDReset(::tlgen::cd::TypeD& item) noexcept {
  (void)item;
  ::tlgen::details::TypeAReset(item.x);
}

bool tlgen::details::CdTypeDWriteJSON(std::ostream& s, const ::tlgen::cd::TypeD& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::TypeAWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::CdTypeDRead(::tlgen::basictl::tl_istream & s, ::tlgen::cd::TypeD& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::TypeARead(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CdTypeDWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::TypeD& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::TypeAWrite(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CdTypeDReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cd::TypeD& item) {
  if (!s.nat_read_exact_tag(0xb5528285)) { return false; }
  return tlgen::details::CdTypeDRead(s, item);
}

bool tlgen::details::CdTypeDWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::TypeD& item) {
  if (!s.nat_write(0xb5528285)) { return false; }
  return tlgen::details::CdTypeDWrite(s, item);
}

bool tlgen::cd::UseCycle::write_json(std::ostream& s)const {
  if (!::tlgen::details::CdUseCycleWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cd::UseCycle::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdUseCycleRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::UseCycle::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdUseCycleWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::UseCycle::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cd::UseCycle::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cd::UseCycle::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CdUseCycleReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cd::UseCycle::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CdUseCycleWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cd::UseCycle::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cd::UseCycle::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CdUseCycleReset(::tlgen::cd::UseCycle& item) noexcept {
  (void)item;
  ::tlgen::details::Cyc2MyCycleReset(item.a);
  item.b.reset();
}

bool tlgen::details::CdUseCycleWriteJSON(std::ostream& s, const ::tlgen::cd::UseCycle& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  add_comma = true;
  s << "\"a\":";
  if (!::tlgen::details::Cyc2MyCycleWriteJSON(s, item.a)) { return false; }
  if (item.b.has_value()) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"b\":";
    if (!::tlgen::details::AColorBoxedMaybeWriteJSON(s, item.b)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::CdUseCycleRead(::tlgen::basictl::tl_istream & s, ::tlgen::cd::UseCycle& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Cyc2MyCycleRead(s, item.a)) { return s.set_error_unknown_scenario(); }
  if (!::tlgen::details::AColorBoxedMaybeReadBoxed(s, item.b)) { return false; }
  return true;
}

bool tlgen::details::CdUseCycleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::UseCycle& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::Cyc2MyCycleWrite(s, item.a)) { return s.set_error_unknown_scenario(); }
  if (!::tlgen::details::AColorBoxedMaybeWriteBoxed(s, item.b)) { return false; }
  return true;
}

bool tlgen::details::CdUseCycleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cd::UseCycle& item) {
  if (!s.nat_read_exact_tag(0x6ed67ca0)) { return false; }
  return tlgen::details::CdUseCycleRead(s, item);
}

bool tlgen::details::CdUseCycleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cd::UseCycle& item) {
  if (!s.nat_write(0x6ed67ca0)) { return false; }
  return tlgen::details::CdUseCycleWrite(s, item);
}

bool tlgen::HalfStr::write_json(std::ostream& s)const {
  if (!::tlgen::details::HalfStrWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::HalfStr::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::HalfStrRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::HalfStr::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::HalfStrWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::HalfStr::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::HalfStr::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::HalfStr::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::HalfStrReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::HalfStr::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::HalfStrWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::HalfStr::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::HalfStr::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::HalfStrReset(::tlgen::HalfStr& item) noexcept {
  (void)item;
  ::tlgen::details::NoStrReset(item.x);
  ::tlgen::details::UseStrReset(item.y);
}

bool tlgen::details::HalfStrWriteJSON(std::ostream& s, const ::tlgen::HalfStr& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  add_comma = true;
  s << "\"x\":";
  if (!::tlgen::details::NoStrWriteJSON(s, item.x)) { return false; }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"y\":";
  if (!::tlgen::details::UseStrWriteJSON(s, item.y)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::HalfStrRead(::tlgen::basictl::tl_istream & s, ::tlgen::HalfStr& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::NoStrRead(s, item.x)) { return s.set_error_unknown_scenario(); }
  if (!::tlgen::details::UseStrRead(s, item.y)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::HalfStrWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::HalfStr& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::NoStrWrite(s, item.x)) { return s.set_error_unknown_scenario(); }
  if (!::tlgen::details::UseStrWrite(s, item.y)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::HalfStrReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::HalfStr& item) {
  if (!s.nat_read_exact_tag(0x647ddaf5)) { return false; }
  return tlgen::details::HalfStrRead(s, item);
}

bool tlgen::details::HalfStrWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::HalfStr& item) {
  if (!s.nat_write(0x647ddaf5)) { return false; }
  return tlgen::details::HalfStrWrite(s, item);
}

bool tlgen::TypeD::write_json(std::ostream& s)const {
  if (!::tlgen::details::TypeDWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::TypeD::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TypeDRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::TypeD::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::TypeDWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::TypeD::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::TypeD::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::TypeD::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::TypeDReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::TypeD::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::TypeDWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::TypeD::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::TypeD::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::TypeDReset(::tlgen::TypeD& item) noexcept {
  (void)item;
  ::tlgen::details::CdTypeAReset(item.x);
}

bool tlgen::details::TypeDWriteJSON(std::ostream& s, const ::tlgen::TypeD& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"x\":";
  if (!::tlgen::details::CdTypeAWriteJSON(s, item.x)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::TypeDRead(::tlgen::basictl::tl_istream & s, ::tlgen::TypeD& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::CdTypeARead(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TypeDWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::TypeD& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::CdTypeAWrite(s, item.x)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::TypeDReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::TypeD& item) {
  if (!s.nat_read_exact_tag(0xb1f4369e)) { return false; }
  return tlgen::details::TypeDRead(s, item);
}

bool tlgen::details::TypeDWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::TypeD& item) {
  if (!s.nat_write(0xb1f4369e)) { return false; }
  return tlgen::details::TypeDWrite(s, item);
}
