// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "cyc2/types/cyc2.myCycle.h"
#include "a/types/a.Color.h"


namespace tlgen { namespace cd { 
struct UseCycle {
  ::tlgen::cyc2::MyCycle a{};
  std::optional<::tlgen::a::Color> b;

  std::string_view tl_name() const { return "cd.useCycle"; }
  uint32_t tl_tag() const { return 0x6ed67ca0; }

  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const;

  friend std::ostream& operator<<(std::ostream& s, const UseCycle& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::cd

