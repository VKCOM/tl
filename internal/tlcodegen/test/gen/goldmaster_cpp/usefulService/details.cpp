// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "usefulService/headers/usefulService_vector.h"
#include "usefulService/headers/usefulService.getUserEntityResult.h"
#include "usefulService/headers/usefulService.userEntityPaymentItem.h"
#include "usefulService/headers/usefulService.userEntityPaymentItemPromo.h"
#include "usefulService/headers/usefulService.getUserEntity.h"
#include "usefulService/headers/usefulService_dictionary.h"
#include "usefulService/headers/usefulService_dictionaryField.h"


void tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReset(std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item) {
	item.clear(); // TODO - unwrap
}

bool tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSON(std::ostream & s, const std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) {
	s << "{";
	size_t index = 0;
	for(const auto & el : item) {
		s << "\"" << el.first << "\"";
		s << ":";
		if (!::tl2::details::UsefulServiceUserEntityPaymentItemWriteJSON(s, el.second, nat_t)) { return false; }
		if (index != item.size() - 1) {
			s << ",";
		}
		index++;
	}
	s << "}";
	return true;
}

bool tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(::basictl::tl_istream & s, std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) {
	uint32_t len = 0;
	if (!s.nat_read(len)) { return false; }
	item.clear();
	for(uint32_t i = 0; i < len; i++) {
		std::string key;
		if (!s.string_read(key)) { return false; }
		if (!::tl2::details::UsefulServiceUserEntityPaymentItemReadBoxed(s, item[key], nat_t)) { return s.set_error_unknown_scenario(); }
	}
	return true;
}

bool tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(::basictl::tl_ostream & s, const std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) {
	if (!s.nat_write(item.size())) { return false; }
	for(const auto & el : item) {
		if (!s.string_write(el.first)) { return false;}
		if (!::tl2::details::UsefulServiceUserEntityPaymentItemWriteBoxed(s, el.second, nat_t)) { return s.set_error_unknown_scenario(); }
	}
	return true;
}

void tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedReset(std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item) noexcept {
	item.clear();
}

bool tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedWriteJSON(std::ostream& s, const std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) noexcept {
	if (!::tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSON(s, item, nat_t)) { return false; }
	return true;
}

bool tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedRead(::basictl::tl_istream & s, std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) noexcept {
	if (!::tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(s, item, nat_t)) { return false; }
	return true;
}

bool tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedWrite(::basictl::tl_ostream & s, const std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) noexcept {
	if (!::tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(s, item, nat_t)) { return false; }
	return true;
}

bool tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedReadBoxed(::basictl::tl_istream & s, std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) {
	if (!s.nat_read_exact_tag(0x1f4c618f)) { return false; }
	return tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedRead(s, item, nat_t);
}

bool tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedWriteBoxed(::basictl::tl_ostream & s, const std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) {
	if (!s.nat_write(0x1f4c618f)) { return false; }
	return tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedWrite(s, item, nat_t);
}

bool tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybeWriteJSON(std::ostream & s, const std::optional<std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>>& item, uint32_t nat_t) {
	s << "{";
	if (item) {
		s << "\"ok\":true";
		if((*item).size() != 0) {
			s << ",\"value\":";
			if (!::tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSON(s, *item, nat_t)) { return false; }
		}
	}
	s << "}";
	return true;
}
bool tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybeReadBoxed(::basictl::tl_istream & s, std::optional<std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>>& item, uint32_t nat_t) {
	bool has_item = false;
	if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
	if (has_item) {
		if (!item) {
			item.emplace();
		}
		if (!s.nat_read_exact_tag(0x1f4c618f)) { return false; }
	if (!::tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(s, *item, nat_t)) { return false; }
		return true;
	}
	item.reset();
	return true;
}

bool tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybeWriteBoxed(::basictl::tl_ostream & s, const std::optional<std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>>& item, uint32_t nat_t) {
	if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
	if (item) {
		if (!s.nat_write(0x1f4c618f)) { return false; }
	if (!::tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(s, *item, nat_t)) { return false; }
	}
	return true;
}

bool tl2::usefulService::GetUserEntity::write_json(std::ostream& s)const {
	if (!::tl2::details::UsefulServiceGetUserEntityWriteJSON(s, *this)) { return false; }
	return true;
}

bool tl2::usefulService::GetUserEntity::read(::basictl::tl_istream & s) noexcept {
	if (!::tl2::details::UsefulServiceGetUserEntityRead(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::usefulService::GetUserEntity::write(::basictl::tl_ostream & s)const noexcept {
	if (!::tl2::details::UsefulServiceGetUserEntityWrite(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::usefulService::GetUserEntity::read_or_throw(::basictl::tl_throwable_istream & s) {
	::basictl::tl_istream s2(s);
	this->read(s2);
	s2.pass_data(s);
}

void tl2::usefulService::GetUserEntity::write_or_throw(::basictl::tl_throwable_ostream & s)const {
	::basictl::tl_ostream s2(s);
	this->write(s2);
	s2.pass_data(s);
}

bool tl2::usefulService::GetUserEntity::read_boxed(::basictl::tl_istream & s) noexcept {
	if (!::tl2::details::UsefulServiceGetUserEntityReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::usefulService::GetUserEntity::write_boxed(::basictl::tl_ostream & s)const noexcept {
	if (!::tl2::details::UsefulServiceGetUserEntityWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::usefulService::GetUserEntity::read_boxed_or_throw(::basictl::tl_throwable_istream & s) {
	::basictl::tl_istream s2(s);
	this->read_boxed(s2);
	s2.pass_data(s);
}

void tl2::usefulService::GetUserEntity::write_boxed_or_throw(::basictl::tl_throwable_ostream & s)const {
	::basictl::tl_ostream s2(s);
	this->write_boxed(s2);
	s2.pass_data(s);
}

void tl2::details::UsefulServiceGetUserEntityReset(::tl2::usefulService::GetUserEntity& item) noexcept {
	item.fields_mask = 0;
	item.stage_id.clear();
}

bool tl2::details::UsefulServiceGetUserEntityWriteJSON(std::ostream& s, const ::tl2::usefulService::GetUserEntity& item) noexcept {
	auto add_comma = false;
	s << "{";
	if (item.fields_mask != 0) {
		add_comma = true;
		s << "\"fields_mask\":";
		s << item.fields_mask;
	}
	if ((item.fields_mask & (1<<0)) != 0) {
		if (add_comma) {
			s << ",";
		}
		add_comma = true;
		s << "\"stage_id\":";
		s << "\"" << item.stage_id << "\"";
	}
	s << "}";
	return true;
}

bool tl2::details::UsefulServiceGetUserEntityRead(::basictl::tl_istream & s, ::tl2::usefulService::GetUserEntity& item) noexcept {
	if (!s.nat_read(item.fields_mask)) { return false; }
	if ((item.fields_mask & (1<<0)) != 0) {
		if (!s.string_read(item.stage_id)) { return false; }
	} else {
			item.stage_id.clear();
	}
	return true;
}

bool tl2::details::UsefulServiceGetUserEntityWrite(::basictl::tl_ostream & s, const ::tl2::usefulService::GetUserEntity& item) noexcept {
	if (!s.nat_write(item.fields_mask)) { return false;}
	if ((item.fields_mask & (1<<0)) != 0) {
			if (!s.string_write(item.stage_id)) { return false;}
	}
	return true;
}

bool tl2::details::UsefulServiceGetUserEntityReadBoxed(::basictl::tl_istream & s, ::tl2::usefulService::GetUserEntity& item) {
	if (!s.nat_read_exact_tag(0x3c857e52)) { return false; }
	return tl2::details::UsefulServiceGetUserEntityRead(s, item);
}

bool tl2::details::UsefulServiceGetUserEntityWriteBoxed(::basictl::tl_ostream & s, const ::tl2::usefulService::GetUserEntity& item) {
	if (!s.nat_write(0x3c857e52)) { return false; }
	return tl2::details::UsefulServiceGetUserEntityWrite(s, item);
}

bool tl2::details::UsefulServiceGetUserEntityReadResult(::basictl::tl_istream & s, tl2::usefulService::GetUserEntity& item, std::optional<::tl2::usefulService::GetUserEntityResult>& result) {
	if (!::tl2::details::UsefulServiceGetUserEntityResultBoxedMaybeReadBoxed(s, result, item.fields_mask)) { return false; }
	return true;
}
bool tl2::details::UsefulServiceGetUserEntityWriteResult(::basictl::tl_ostream & s, tl2::usefulService::GetUserEntity& item, std::optional<::tl2::usefulService::GetUserEntityResult>& result) {
	if (!::tl2::details::UsefulServiceGetUserEntityResultBoxedMaybeWriteBoxed(s, result, item.fields_mask)) { return false; }
	return true;
}

bool tl2::usefulService::GetUserEntity::read_result(::basictl::tl_istream & s, std::optional<::tl2::usefulService::GetUserEntityResult> & result) noexcept {
	bool success = tl2::details::UsefulServiceGetUserEntityReadResult(s, *this, result);
	s.last_release();
	return success;
}
bool tl2::usefulService::GetUserEntity::write_result(::basictl::tl_ostream & s, std::optional<::tl2::usefulService::GetUserEntityResult> & result) noexcept {
	bool success = tl2::details::UsefulServiceGetUserEntityWriteResult(s, *this, result);
	s.last_release();
	return success;
}

void tl2::usefulService::GetUserEntity::read_result_or_throw(::basictl::tl_throwable_istream & s, std::optional<::tl2::usefulService::GetUserEntityResult> & result) {
	::basictl::tl_istream s2(s);
	this->read_result(s2, result);
	s2.pass_data(s);
}
void tl2::usefulService::GetUserEntity::write_result_or_throw(::basictl::tl_throwable_ostream & s, std::optional<::tl2::usefulService::GetUserEntityResult> & result) {
	::basictl::tl_ostream s2(s);
	this->write_result(s2, result);
	s2.pass_data(s);
}

bool tl2::usefulService::GetUserEntityResult::write_json(std::ostream& s, uint32_t nat_fields_mask)const {
	if (!::tl2::details::UsefulServiceGetUserEntityResultWriteJSON(s, *this, nat_fields_mask)) { return false; }
	return true;
}

bool tl2::usefulService::GetUserEntityResult::read(::basictl::tl_istream & s, uint32_t nat_fields_mask) noexcept {
	if (!::tl2::details::UsefulServiceGetUserEntityResultRead(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::usefulService::GetUserEntityResult::write(::basictl::tl_ostream & s, uint32_t nat_fields_mask)const noexcept {
	if (!::tl2::details::UsefulServiceGetUserEntityResultWrite(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::usefulService::GetUserEntityResult::read_or_throw(::basictl::tl_throwable_istream & s, uint32_t nat_fields_mask) {
	::basictl::tl_istream s2(s);
	this->read(s2, nat_fields_mask);
	s2.pass_data(s);
}

void tl2::usefulService::GetUserEntityResult::write_or_throw(::basictl::tl_throwable_ostream & s, uint32_t nat_fields_mask)const {
	::basictl::tl_ostream s2(s);
	this->write(s2, nat_fields_mask);
	s2.pass_data(s);
}

bool tl2::usefulService::GetUserEntityResult::read_boxed(::basictl::tl_istream & s, uint32_t nat_fields_mask) noexcept {
	if (!::tl2::details::UsefulServiceGetUserEntityResultReadBoxed(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::usefulService::GetUserEntityResult::write_boxed(::basictl::tl_ostream & s, uint32_t nat_fields_mask)const noexcept {
	if (!::tl2::details::UsefulServiceGetUserEntityResultWriteBoxed(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::usefulService::GetUserEntityResult::read_boxed_or_throw(::basictl::tl_throwable_istream & s, uint32_t nat_fields_mask) {
	::basictl::tl_istream s2(s);
	this->read_boxed(s2, nat_fields_mask);
	s2.pass_data(s);
}

void tl2::usefulService::GetUserEntityResult::write_boxed_or_throw(::basictl::tl_throwable_ostream & s, uint32_t nat_fields_mask)const {
	::basictl::tl_ostream s2(s);
	this->write_boxed(s2, nat_fields_mask);
	s2.pass_data(s);
}

void tl2::details::UsefulServiceGetUserEntityResultReset(::tl2::usefulService::GetUserEntityResult& item) noexcept {
	item.entity_id.clear();
	item.payment_items.reset();
}

bool tl2::details::UsefulServiceGetUserEntityResultWriteJSON(std::ostream& s, const ::tl2::usefulService::GetUserEntityResult& item, uint32_t nat_fields_mask) noexcept {
	auto add_comma = false;
	s << "{";
	if (item.entity_id.size() != 0) {
		add_comma = true;
		s << "\"entity_id\":";
		s << "\"" << item.entity_id << "\"";
	}
	if (item.payment_items.has_value()) {
		if (add_comma) {
			s << ",";
		}
		add_comma = true;
		s << "\"payment_items\":";
		if (!::tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybeWriteJSON(s, item.payment_items, nat_fields_mask)) { return false; }
	}
	s << "}";
	return true;
}

bool tl2::details::UsefulServiceGetUserEntityResultRead(::basictl::tl_istream & s, ::tl2::usefulService::GetUserEntityResult& item, uint32_t nat_fields_mask) noexcept {
	if (!s.string_read(item.entity_id)) { return false; }
	if (!::tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybeReadBoxed(s, item.payment_items, nat_fields_mask)) { return false; }
	return true;
}

bool tl2::details::UsefulServiceGetUserEntityResultWrite(::basictl::tl_ostream & s, const ::tl2::usefulService::GetUserEntityResult& item, uint32_t nat_fields_mask) noexcept {
	if (!s.string_write(item.entity_id)) { return false;}
	if (!::tl2::details::DictionaryUsefulServiceUserEntityPaymentItemBoxedBoxedMaybeWriteBoxed(s, item.payment_items, nat_fields_mask)) { return false; }
	return true;
}

bool tl2::details::UsefulServiceGetUserEntityResultReadBoxed(::basictl::tl_istream & s, ::tl2::usefulService::GetUserEntityResult& item, uint32_t nat_fields_mask) {
	if (!s.nat_read_exact_tag(0xe494698a)) { return false; }
	return tl2::details::UsefulServiceGetUserEntityResultRead(s, item, nat_fields_mask);
}

bool tl2::details::UsefulServiceGetUserEntityResultWriteBoxed(::basictl::tl_ostream & s, const ::tl2::usefulService::GetUserEntityResult& item, uint32_t nat_fields_mask) {
	if (!s.nat_write(0xe494698a)) { return false; }
	return tl2::details::UsefulServiceGetUserEntityResultWrite(s, item, nat_fields_mask);
}

bool tl2::details::UsefulServiceGetUserEntityResultBoxedMaybeWriteJSON(std::ostream & s, const std::optional<::tl2::usefulService::GetUserEntityResult>& item, uint32_t nat_t) {
	s << "{";
	if (item) {
		s << "\"ok\":true";
		s << ",\"value\":";
		if (!::tl2::details::UsefulServiceGetUserEntityResultWriteJSON(s, *item, nat_t)) { return false; }
	}
	s << "}";
	return true;
}
bool tl2::details::UsefulServiceGetUserEntityResultBoxedMaybeReadBoxed(::basictl::tl_istream & s, std::optional<::tl2::usefulService::GetUserEntityResult>& item, uint32_t nat_t) {
	bool has_item = false;
	if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
	if (has_item) {
		if (!item) {
			item.emplace();
		}
		if (!::tl2::details::UsefulServiceGetUserEntityResultReadBoxed(s, *item, nat_t)) { return s.set_error_unknown_scenario(); }
		return true;
	}
	item.reset();
	return true;
}

bool tl2::details::UsefulServiceGetUserEntityResultBoxedMaybeWriteBoxed(::basictl::tl_ostream & s, const std::optional<::tl2::usefulService::GetUserEntityResult>& item, uint32_t nat_t) {
	if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
	if (item) {
		if (!::tl2::details::UsefulServiceGetUserEntityResultWriteBoxed(s, *item, nat_t)) { return s.set_error_unknown_scenario(); }
	}
	return true;
}

bool tl2::usefulService::UserEntityPaymentItem::write_json(std::ostream& s, uint32_t nat_fields_mask)const {
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemWriteJSON(s, *this, nat_fields_mask)) { return false; }
	return true;
}

bool tl2::usefulService::UserEntityPaymentItem::read(::basictl::tl_istream & s, uint32_t nat_fields_mask) noexcept {
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemRead(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::usefulService::UserEntityPaymentItem::write(::basictl::tl_ostream & s, uint32_t nat_fields_mask)const noexcept {
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemWrite(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::usefulService::UserEntityPaymentItem::read_or_throw(::basictl::tl_throwable_istream & s, uint32_t nat_fields_mask) {
	::basictl::tl_istream s2(s);
	this->read(s2, nat_fields_mask);
	s2.pass_data(s);
}

void tl2::usefulService::UserEntityPaymentItem::write_or_throw(::basictl::tl_throwable_ostream & s, uint32_t nat_fields_mask)const {
	::basictl::tl_ostream s2(s);
	this->write(s2, nat_fields_mask);
	s2.pass_data(s);
}

bool tl2::usefulService::UserEntityPaymentItem::read_boxed(::basictl::tl_istream & s, uint32_t nat_fields_mask) noexcept {
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemReadBoxed(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::usefulService::UserEntityPaymentItem::write_boxed(::basictl::tl_ostream & s, uint32_t nat_fields_mask)const noexcept {
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemWriteBoxed(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::usefulService::UserEntityPaymentItem::read_boxed_or_throw(::basictl::tl_throwable_istream & s, uint32_t nat_fields_mask) {
	::basictl::tl_istream s2(s);
	this->read_boxed(s2, nat_fields_mask);
	s2.pass_data(s);
}

void tl2::usefulService::UserEntityPaymentItem::write_boxed_or_throw(::basictl::tl_throwable_ostream & s, uint32_t nat_fields_mask)const {
	::basictl::tl_ostream s2(s);
	this->write_boxed(s2, nat_fields_mask);
	s2.pass_data(s);
}

void tl2::details::UsefulServiceUserEntityPaymentItemReset(::tl2::usefulService::UserEntityPaymentItem& item) noexcept {
	item.id.clear();
	item.promo.reset();
}

bool tl2::details::UsefulServiceUserEntityPaymentItemWriteJSON(std::ostream& s, const ::tl2::usefulService::UserEntityPaymentItem& item, uint32_t nat_fields_mask) noexcept {
	auto add_comma = false;
	s << "{";
	if (item.id.size() != 0) {
		add_comma = true;
		s << "\"id\":";
		s << "\"" << item.id << "\"";
	}
	if (item.promo.has_value()) {
		if (add_comma) {
			s << ",";
		}
		add_comma = true;
		s << "\"promo\":";
		if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoBoxedMaybeWriteJSON(s, item.promo, nat_fields_mask)) { return false; }
	}
	s << "}";
	return true;
}

bool tl2::details::UsefulServiceUserEntityPaymentItemRead(::basictl::tl_istream & s, ::tl2::usefulService::UserEntityPaymentItem& item, uint32_t nat_fields_mask) noexcept {
	if (!s.string_read(item.id)) { return false; }
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoBoxedMaybeReadBoxed(s, item.promo, nat_fields_mask)) { return false; }
	return true;
}

bool tl2::details::UsefulServiceUserEntityPaymentItemWrite(::basictl::tl_ostream & s, const ::tl2::usefulService::UserEntityPaymentItem& item, uint32_t nat_fields_mask) noexcept {
	if (!s.string_write(item.id)) { return false;}
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoBoxedMaybeWriteBoxed(s, item.promo, nat_fields_mask)) { return false; }
	return true;
}

bool tl2::details::UsefulServiceUserEntityPaymentItemReadBoxed(::basictl::tl_istream & s, ::tl2::usefulService::UserEntityPaymentItem& item, uint32_t nat_fields_mask) {
	if (!s.nat_read_exact_tag(0x4f798680)) { return false; }
	return tl2::details::UsefulServiceUserEntityPaymentItemRead(s, item, nat_fields_mask);
}

bool tl2::details::UsefulServiceUserEntityPaymentItemWriteBoxed(::basictl::tl_ostream & s, const ::tl2::usefulService::UserEntityPaymentItem& item, uint32_t nat_fields_mask) {
	if (!s.nat_write(0x4f798680)) { return false; }
	return tl2::details::UsefulServiceUserEntityPaymentItemWrite(s, item, nat_fields_mask);
}

bool tl2::usefulService::UserEntityPaymentItemPromo::write_json(std::ostream& s, uint32_t nat_fields_mask)const {
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoWriteJSON(s, *this, nat_fields_mask)) { return false; }
	return true;
}

bool tl2::usefulService::UserEntityPaymentItemPromo::read(::basictl::tl_istream & s, uint32_t nat_fields_mask) noexcept {
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoRead(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::usefulService::UserEntityPaymentItemPromo::write(::basictl::tl_ostream & s, uint32_t nat_fields_mask)const noexcept {
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoWrite(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::usefulService::UserEntityPaymentItemPromo::read_or_throw(::basictl::tl_throwable_istream & s, uint32_t nat_fields_mask) {
	::basictl::tl_istream s2(s);
	this->read(s2, nat_fields_mask);
	s2.pass_data(s);
}

void tl2::usefulService::UserEntityPaymentItemPromo::write_or_throw(::basictl::tl_throwable_ostream & s, uint32_t nat_fields_mask)const {
	::basictl::tl_ostream s2(s);
	this->write(s2, nat_fields_mask);
	s2.pass_data(s);
}

bool tl2::usefulService::UserEntityPaymentItemPromo::read_boxed(::basictl::tl_istream & s, uint32_t nat_fields_mask) noexcept {
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoReadBoxed(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::usefulService::UserEntityPaymentItemPromo::write_boxed(::basictl::tl_ostream & s, uint32_t nat_fields_mask)const noexcept {
	if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoWriteBoxed(s, *this, nat_fields_mask)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::usefulService::UserEntityPaymentItemPromo::read_boxed_or_throw(::basictl::tl_throwable_istream & s, uint32_t nat_fields_mask) {
	::basictl::tl_istream s2(s);
	this->read_boxed(s2, nat_fields_mask);
	s2.pass_data(s);
}

void tl2::usefulService::UserEntityPaymentItemPromo::write_boxed_or_throw(::basictl::tl_throwable_ostream & s, uint32_t nat_fields_mask)const {
	::basictl::tl_ostream s2(s);
	this->write_boxed(s2, nat_fields_mask);
	s2.pass_data(s);
}

void tl2::details::UsefulServiceUserEntityPaymentItemPromoReset(::tl2::usefulService::UserEntityPaymentItemPromo& item) noexcept {
	item.content.clear();
}

bool tl2::details::UsefulServiceUserEntityPaymentItemPromoWriteJSON(std::ostream& s, const ::tl2::usefulService::UserEntityPaymentItemPromo& item, uint32_t nat_fields_mask) noexcept {
	s << "{";
	if (item.content.size() != 0) {
		s << "\"content\":";
		s << "\"" << item.content << "\"";
	}
	s << "}";
	return true;
}

bool tl2::details::UsefulServiceUserEntityPaymentItemPromoRead(::basictl::tl_istream & s, ::tl2::usefulService::UserEntityPaymentItemPromo& item, uint32_t nat_fields_mask) noexcept {
	if (!s.string_read(item.content)) { return false; }
	return true;
}

bool tl2::details::UsefulServiceUserEntityPaymentItemPromoWrite(::basictl::tl_ostream & s, const ::tl2::usefulService::UserEntityPaymentItemPromo& item, uint32_t nat_fields_mask) noexcept {
	if (!s.string_write(item.content)) { return false;}
	return true;
}

bool tl2::details::UsefulServiceUserEntityPaymentItemPromoReadBoxed(::basictl::tl_istream & s, ::tl2::usefulService::UserEntityPaymentItemPromo& item, uint32_t nat_fields_mask) {
	if (!s.nat_read_exact_tag(0x24c7ec9f)) { return false; }
	return tl2::details::UsefulServiceUserEntityPaymentItemPromoRead(s, item, nat_fields_mask);
}

bool tl2::details::UsefulServiceUserEntityPaymentItemPromoWriteBoxed(::basictl::tl_ostream & s, const ::tl2::usefulService::UserEntityPaymentItemPromo& item, uint32_t nat_fields_mask) {
	if (!s.nat_write(0x24c7ec9f)) { return false; }
	return tl2::details::UsefulServiceUserEntityPaymentItemPromoWrite(s, item, nat_fields_mask);
}

bool tl2::details::UsefulServiceUserEntityPaymentItemPromoBoxedMaybeWriteJSON(std::ostream & s, const std::optional<::tl2::usefulService::UserEntityPaymentItemPromo>& item, uint32_t nat_t) {
	s << "{";
	if (item) {
		s << "\"ok\":true";
		s << ",\"value\":";
		if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoWriteJSON(s, *item, nat_t)) { return false; }
	}
	s << "}";
	return true;
}
bool tl2::details::UsefulServiceUserEntityPaymentItemPromoBoxedMaybeReadBoxed(::basictl::tl_istream & s, std::optional<::tl2::usefulService::UserEntityPaymentItemPromo>& item, uint32_t nat_t) {
	bool has_item = false;
	if (!s.bool_read(has_item, 0x27930a7b, 0x3f9c8ef8)) { return false; }
	if (has_item) {
		if (!item) {
			item.emplace();
		}
		if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoReadBoxed(s, *item, nat_t)) { return s.set_error_unknown_scenario(); }
		return true;
	}
	item.reset();
	return true;
}

bool tl2::details::UsefulServiceUserEntityPaymentItemPromoBoxedMaybeWriteBoxed(::basictl::tl_ostream & s, const std::optional<::tl2::usefulService::UserEntityPaymentItemPromo>& item, uint32_t nat_t) {
	if (!s.nat_write(item ? 0x3f9c8ef8 : 0x27930a7b)) { return false; }
	if (item) {
		if (!::tl2::details::UsefulServiceUserEntityPaymentItemPromoWriteBoxed(s, *item, nat_t)) { return s.set_error_unknown_scenario(); }
	}
	return true;
}

void tl2::details::VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReset(std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item) noexcept {
	item.clear();
}

bool tl2::details::VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSON(std::ostream& s, const std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) noexcept {
	if (!::tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteJSON(s, item, nat_t)) { return false; }
	return true;
}

bool tl2::details::VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(::basictl::tl_istream & s, std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) noexcept {
	if (!::tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(s, item, nat_t)) { return false; }
	return true;
}

bool tl2::details::VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(::basictl::tl_ostream & s, const std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) noexcept {
	if (!::tl2::details::BuiltinVectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(s, item, nat_t)) { return false; }
	return true;
}

bool tl2::details::VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedReadBoxed(::basictl::tl_istream & s, std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) {
	if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
	return tl2::details::VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedRead(s, item, nat_t);
}

bool tl2::details::VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWriteBoxed(::basictl::tl_ostream & s, const std::map<std::string, ::tl2::usefulService::UserEntityPaymentItem>& item, uint32_t nat_t) {
	if (!s.nat_write(0x1cb5c415)) { return false; }
	return tl2::details::VectorDictionaryFieldUsefulServiceUserEntityPaymentItemBoxedWrite(s, item, nat_t);
}
