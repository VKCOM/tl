// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "cyc1/headers/cyc1.myCycle.h"
#include "cyc2/headers/cyc2.myCycle.h"


bool tlgen::cyc1::MyCycle::write_json(std::ostream& s)const {
  if (!::tlgen::details::Cyc1MyCycleWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cyc1::MyCycle::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Cyc1MyCycleRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cyc1::MyCycle::write(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::Cyc1MyCycleWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cyc1::MyCycle::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cyc1::MyCycle::write(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cyc1::MyCycle::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::Cyc1MyCycleReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cyc1::MyCycle::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::Cyc1MyCycleWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cyc1::MyCycle::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cyc1::MyCycle::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::Cyc1MyCycleReset(::tlgen::cyc1::MyCycle& item) noexcept {
  (void)item;
  item.fields_mask = 0;

  if (item.a) {
      ::tlgen::details::Cyc2MyCycleReset((*item.a));
  }
}

bool tlgen::details::Cyc1MyCycleWriteJSON(std::ostream& s, const ::tlgen::cyc1::MyCycle& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.fields_mask != 0) {
    add_comma = true;
    s << "\"fields_mask\":";
    s << item.fields_mask;
  }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"a\":";
    if (!::tlgen::details::Cyc2MyCycleWriteJSON(s, *item.a)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::Cyc1MyCycleRead(::tlgen::basictl::tl_istream & s, ::tlgen::cyc1::MyCycle& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.fields_mask)) { return false; }
  if ((item.fields_mask & (1<<0)) != 0) {
    if (!item.a) { item.a = std::make_shared<::tlgen::cyc2::MyCycle>(); }
    if (!::tlgen::details::Cyc2MyCycleRead(s, *item.a)) { return s.set_error_unknown_scenario(); }
  } else {
    if (item.a) {
      ::tlgen::details::Cyc2MyCycleReset(*item.a);
    }
  }
  return true;
}

bool tlgen::details::Cyc1MyCycleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cyc1::MyCycle& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.fields_mask)) { return false;}
  if ((item.fields_mask & (1<<0)) != 0) {
      if (!::tlgen::details::Cyc2MyCycleWrite(s, *item.a)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::details::Cyc1MyCycleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cyc1::MyCycle& item) {
  if (!s.nat_read_exact_tag(0x136ecc9e)) { return false; }
  return tlgen::details::Cyc1MyCycleRead(s, item);
}

bool tlgen::details::Cyc1MyCycleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cyc1::MyCycle& item) {
  if (!s.nat_write(0x136ecc9e)) { return false; }
  return tlgen::details::Cyc1MyCycleWrite(s, item);
}
