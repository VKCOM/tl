// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "au/headers/au.nionA.h"


bool tl2::au::NionA::write_json(std::ostream& s)const {
	if (!::tl2::details::AuNionAWriteJSON(s, *this)) { return false; }
	return true;
}

bool tl2::au::NionA::read(::basictl::tl_istream & s) noexcept {
	if (!::tl2::details::AuNionARead(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::au::NionA::write(::basictl::tl_ostream & s)const noexcept {
	if (!::tl2::details::AuNionAWrite(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::au::NionA::read_or_throw(::basictl::tl_throwable_istream & s) {
	::basictl::tl_istream s2(s);
	this->read(s2);
	s2.pass_data(s);
}

void tl2::au::NionA::write_or_throw(::basictl::tl_throwable_ostream & s)const {
	::basictl::tl_ostream s2(s);
	this->write(s2);
	s2.pass_data(s);
}

bool tl2::au::NionA::read_boxed(::basictl::tl_istream & s) noexcept {
	if (!::tl2::details::AuNionAReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

bool tl2::au::NionA::write_boxed(::basictl::tl_ostream & s)const noexcept {
	if (!::tl2::details::AuNionAWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
	s.last_release();
	return true;
}

void tl2::au::NionA::read_boxed_or_throw(::basictl::tl_throwable_istream & s) {
	::basictl::tl_istream s2(s);
	this->read_boxed(s2);
	s2.pass_data(s);
}

void tl2::au::NionA::write_boxed_or_throw(::basictl::tl_throwable_ostream & s)const {
	::basictl::tl_ostream s2(s);
	this->write_boxed(s2);
	s2.pass_data(s);
}

void tl2::details::AuNionAReset(::tl2::au::NionA& item) noexcept {
	item.b = 0;
}

bool tl2::details::AuNionAWriteJSON(std::ostream& s, const ::tl2::au::NionA& item) noexcept {
	s << "{";
	if (item.b != 0) {
		s << "\"b\":";
		s << item.b;
	}
	s << "}";
	return true;
}

bool tl2::details::AuNionARead(::basictl::tl_istream & s, ::tl2::au::NionA& item) noexcept {
	if (!s.int_read(item.b)) { return false; }
	return true;
}

bool tl2::details::AuNionAWrite(::basictl::tl_ostream & s, const ::tl2::au::NionA& item) noexcept {
	if (!s.int_write(item.b)) { return false;}
	return true;
}

bool tl2::details::AuNionAReadBoxed(::basictl::tl_istream & s, ::tl2::au::NionA& item) {
	if (!s.nat_read_exact_tag(0xdf61f632)) { return false; }
	return tl2::details::AuNionARead(s, item);
}

bool tl2::details::AuNionAWriteBoxed(::basictl::tl_ostream & s, const ::tl2::au::NionA& item) {
	if (!s.nat_write(0xdf61f632)) { return false; }
	return tl2::details::AuNionAWrite(s, item);
}
