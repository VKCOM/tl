// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package meta

import (
	"fmt"

	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

func SchemaGenerator() string { return "(devel)" }
func SchemaURL() string       { return "" }
func SchemaCommit() string    { return "" }
func SchemaTimestamp() uint32 { return 0 }

// We can create only types which have zero type arguments and zero nat arguments
type Object interface {
	TLName() string // returns type's TL name. For union, returns constructor name depending on actual union value
	TLTag() uint32  // returns type's TL tag. For union, returns constructor tag depending on actual union value
	String() string // returns type's representation for debugging (JSON for now)

	FillRandom(rg *basictl.RandGenerator)
	Read(w []byte) ([]byte, error)              // reads type's bare TL representation by consuming bytes from the start of w and returns remaining bytes, plus error
	ReadBoxed(w []byte) ([]byte, error)         // same as Read, but reads/checks TLTag first (this method is general version of Write, use it only when you are working with interface)
	WriteGeneral(w []byte) ([]byte, error)      // same as Write, but has common signature (with error) for all objects, so can be called through interface
	WriteBoxedGeneral(w []byte) ([]byte, error) // same as WriteBoxed, but has common signature (with error) for all objects, so can be called through interface

	MarshalJSON() ([]byte, error) // returns type's JSON representation, plus error
	UnmarshalJSON([]byte) error   // reads type's JSON representation

	ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error
	// like MarshalJSON, but appends to w and returns it
	// pass empty basictl.JSONWriteContext{} if you do not know which options you need
	WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) ([]byte, error)

	ReadTL2(r []byte, ctx *basictl.TL2ReadContext) ([]byte, error)
	WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte
}

type Function interface {
	Object

	// tctx is for options controlling transcoding short-long version during Long ID and legacyTypeNames->newTypeNames transition
	// pass empty basictl.JSONWriteContext{} if you do not know which options you need
	ReadResultWriteResultJSON(tctx *basictl.JSONWriteContext, r []byte, w []byte) ([]byte, []byte, error) // combination of ReadResult(r) + WriteResultJSON(w). Returns new r, new w, plus error
	ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error)                                 // combination of ReadResultJSON(r) + WriteResult(w). Returns new r, new w, plus error
}

func GetAllTLItems() []TLItem {
	var allItems []TLItem
	for _, item := range itemsByName {
		if item != nil {
			allItems = append(allItems, *item)
		}
	}
	return allItems
}

// for quick one-liners
func GetTLName(tag uint32, notFoundName string) string {
	if item := FactoryItemByTLTag(tag); item != nil {
		return item.TLName()
	}
	return notFoundName
}

func CreateFunction(tag uint32) Function {
	if item := FactoryItemByTLTag(tag); item != nil && item.createFunction != nil {
		return item.createFunction()
	}
	return nil
}

func CreateObject(tag uint32) Object {
	if item := FactoryItemByTLTag(tag); item != nil && item.createObject != nil {
		return item.createObject()
	}
	return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateFunctionFromName(name string) Function {
	if item := FactoryItemByTLName(name); item != nil && item.createFunction != nil {
		return item.createFunction()
	}
	return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateObjectFromName(name string) Object {
	if item := FactoryItemByTLName(name); item != nil && item.createObject != nil {
		return item.createObject()
	}
	return nil
}

func CreateFunctionBytes(tag uint32) Function {
	if item := FactoryItemByTLTag(tag); item != nil && item.createFunctionBytes != nil {
		return item.createFunctionBytes()
	}
	return nil
}

func CreateObjectBytes(tag uint32) Object {
	if item := FactoryItemByTLTag(tag); item != nil && item.createObjectBytes != nil {
		return item.createObjectBytes()
	}
	return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateFunctionFromNameBytes(name string) Function {
	if item := FactoryItemByTLName(name); item != nil && item.createFunctionBytes != nil {
		return item.createFunctionBytes()
	}
	return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateObjectFromNameBytes(name string) Object {
	if item := FactoryItemByTLName(name); item != nil && item.createObjectBytes != nil {
		return item.createObjectBytes()
	}
	return nil
}

type TLItem struct {
	tag         uint32
	annotations uint32
	tlName      string
	isTL2       bool

	resultTypeContainsUnionTypes    bool
	argumentsTypesContainUnionTypes bool

	createFunction          func() Function
	createFunctionLong      func() Function
	createObject            func() Object
	createFunctionBytes     func() Function
	createFunctionLongBytes func() Function
	createObjectBytes       func() Object
}

func (item TLItem) TLTag() uint32            { return item.tag }
func (item TLItem) TLName() string           { return item.tlName }
func (item TLItem) IsTL2() bool              { return item.isTL2 }
func (item TLItem) CreateObject() Object     { return item.createObject() }
func (item TLItem) IsFunction() bool         { return item.createFunction != nil }
func (item TLItem) CreateFunction() Function { return item.createFunction() }

func (item TLItem) HasUnionTypesInResult() bool    { return item.resultTypeContainsUnionTypes }
func (item TLItem) HasUnionTypesInArguments() bool { return item.argumentsTypesContainUnionTypes }

// For transcoding short-long version during Long ID transition
func (item TLItem) HasFunctionLong() bool        { return item.createFunctionLong != nil }
func (item TLItem) CreateFunctionLong() Function { return item.createFunctionLong() }

// Annotations
func (item TLItem) AnnotationRead() bool { return item.annotations&0x1 != 0 }

// TLItem serves as a single type for all enum values
func (item *TLItem) Reset()                                {}
func (item *TLItem) FillRandom(rg *basictl.RandGenerator)  {}
func (item *TLItem) Read(w []byte) ([]byte, error)         { return w, nil }
func (item *TLItem) WriteGeneral(w []byte) ([]byte, error) { return w, nil }
func (item *TLItem) Write(w []byte) []byte                 { return w }
func (item *TLItem) ReadBoxed(w []byte) ([]byte, error)    { return basictl.NatReadExactTag(w, item.tag) }
func (item *TLItem) WriteBoxedGeneral(w []byte) ([]byte, error) {
	return basictl.NatWrite(w, item.tag), nil
}
func (item *TLItem) WriteBoxed(w []byte) []byte { return basictl.NatWrite(w, item.tag) }
func (item TLItem) String() string {
	return string(item.WriteJSON(nil))
}
func (item *TLItem) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	in.Delim('{')
	if !in.Ok() {
		return in.Error()
	}
	for !in.IsDelim('}') {
		return internal.ErrorInvalidJSONExcessElement(item.tlName, in.UnsafeFieldName(true))
	}
	in.Delim('}')
	if !in.Ok() {
		return in.Error()
	}
	return nil
}

func (item *TLItem) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}
func (item *TLItem) WriteJSON(w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}
func (item *TLItem) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}
func (item *TLItem) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON(item.tlName, err.Error())
	}
	return nil
}

func (item *TLItem) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) ([]byte, error) {
	return r, nil
}

func (item *TLItem) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	return w
}
func FactoryItemByTLTag(tag uint32) *TLItem {
	return itemsByTag[tag]
}

func FactoryItemByTLName(name string) *TLItem {
	return itemsByName[name]
}

var itemsByTag = map[uint32]*TLItem{}

var itemsByName = map[string]*TLItem{}

func SetGlobalFactoryCreateForFunction(itemTag uint32, createObject func() Object, createFunction func() Function, createFunctionLong func() Function) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find function tag #%08x to set", itemTag))
	}
	item.createObject = createObject
	item.createFunction = createFunction
	item.createFunctionLong = createFunctionLong
}

func SetGlobalFactoryCreateForObject(itemTag uint32, createObject func() Object) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find item tag #%08x to set", itemTag))
	}
	item.createObject = createObject
}

func SetGlobalFactoryCreateForObjectTL2(itemName string, createObject func() Object) {
	item := itemsByName[itemName]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find item name %q to set", itemName))
	}
	item.createObject = createObject
}

func SetGlobalFactoryCreateForEnumElement(itemTag uint32) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find enum tag #%08x to set", itemTag))
	}
	item.createObject = func() Object { return item }
}

func SetGlobalFactoryCreateForFunctionBytes(itemTag uint32, createObject func() Object, createFunction func() Function, createFunctionLong func() Function) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find function tag #%08x to set", itemTag))
	}
	item.createObjectBytes = createObject
	item.createFunctionBytes = createFunction
	item.createFunctionLongBytes = createFunctionLong
}

func SetGlobalFactoryCreateForObjectBytes(itemTag uint32, createObject func() Object) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find item tag #%08x to set", itemTag))
	}
	item.createObjectBytes = createObject
}

func SetGlobalFactoryCreateForObjectBytesTL2(itemName string, createObject func() Object) {
	item := itemsByName[itemName]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find item name %q to set", itemName))
	}
	item.createObjectBytes = createObject
}

func SetGlobalFactoryCreateForEnumElementBytes(itemTag uint32) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find enum tag #%08x to set", itemTag))
	}
	item.createObjectBytes = func() Object { return item }
}

func pleaseImportFactoryBytesObject() Object {
	panic("factory functions are not linked to reduce code bloat, please import 'gen/factory_bytes' instead of 'gen/meta'.")
}

func pleaseImportFactoryBytesFunction() Function {
	panic("factory functions are not linked to reduce code bloat, please import 'gen/factory_bytes' instead of 'gen/meta'.")
}

func pleaseImportFactoryObject() Object {
	panic("factory functions are not linked to reduce code bloat, please import 'gen/factory' instead of 'gen/meta'.")
}

func pleaseImportFactoryFunction() Function {
	panic("factory functions are not linked to reduce code bloat, please import 'gen/factory' instead of 'gen/meta'.")
}

func fillObject(n1 string, n2 string, item *TLItem) {
	itemsByTag[item.tag] = item
	itemsByName[item.tlName] = item
	itemsByName[n1] = item
	itemsByName[n2] = item
	item.createObject = pleaseImportFactoryObject
	item.createObjectBytes = pleaseImportFactoryBytesObject
	// code below is as fast, but allocates some extra strings which are already in binary const segment due to JSON code
	// itemsByName[fmt.Sprintf("%s#%08x", item.tlName, item.tag)] = item
	// itemsByName[fmt.Sprintf("#%08x", item.tag)] = item
}

func fillObjectTL2(item *TLItem) {
	itemsByName[item.tlName] = item
	if item.tag != 0 {
		itemsByTag[item.tag] = item
	}
	item.createObject = pleaseImportFactoryObject
	item.createObjectBytes = pleaseImportFactoryBytesObject
}

func fillFunction(n1 string, n2 string, item *TLItem) {
	fillObject(n1, n2, item)
	item.createFunction = pleaseImportFactoryFunction
	item.createFunctionBytes = pleaseImportFactoryBytesFunction
}

func init() {
	// TL
	fillObject("benchmarks.vruhash#d31bd0fd", "#d31bd0fd", &TLItem{tag: 0xd31bd0fd, annotations: 0x0, tlName: "benchmarks.vruhash", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("benchmarks.vruposition#32792c04", "#32792c04", &TLItem{tag: 0x32792c04, annotations: 0x0, tlName: "benchmarks.vruposition", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("benchmarks.vrutoyTopLevelContainer#fb442ca5", "#fb442ca5", &TLItem{tag: 0xfb442ca5, annotations: 0x0, tlName: "benchmarks.vrutoyTopLevelContainer", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("benchmarks.vrutoyTopLevelContainerWithDependency#c176008e", "#c176008e", &TLItem{tag: 0xc176008e, annotations: 0x0, tlName: "benchmarks.vrutoyTopLevelContainerWithDependency", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("benchmarks.vrutoytopLevelUnionBig#ef556bee", "#ef556bee", &TLItem{tag: 0xef556bee, annotations: 0x0, tlName: "benchmarks.vrutoytopLevelUnionBig", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("benchmarks.vrutoytopLevelUnionEmpty#ce27c770", "#ce27c770", &TLItem{tag: 0xce27c770, annotations: 0x0, tlName: "benchmarks.vrutoytopLevelUnionEmpty", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testArray#3762fb81", "#3762fb81", &TLItem{tag: 0x3762fb81, annotations: 0x0, tlName: "cases_bytes.testArray", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testDictAny#5a5fce57", "#5a5fce57", &TLItem{tag: 0x5a5fce57, annotations: 0x0, tlName: "cases_bytes.testDictAny", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testDictInt#453ace07", "#453ace07", &TLItem{tag: 0x453ace07, annotations: 0x0, tlName: "cases_bytes.testDictInt", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testDictString#6c04d6ce", "#6c04d6ce", &TLItem{tag: 0x6c04d6ce, annotations: 0x0, tlName: "cases_bytes.testDictString", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testDictStringString#ad69c772", "#ad69c772", &TLItem{tag: 0xad69c772, annotations: 0x0, tlName: "cases_bytes.testDictStringString", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testEnum1#58aad3f5", "#58aad3f5", &TLItem{tag: 0x58aad3f5, annotations: 0x0, tlName: "cases_bytes.testEnum1", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testEnum2#00b47add", "#00b47add", &TLItem{tag: 0x00b47add, annotations: 0x0, tlName: "cases_bytes.testEnum2", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testEnum3#81911ffa", "#81911ffa", &TLItem{tag: 0x81911ffa, annotations: 0x0, tlName: "cases_bytes.testEnum3", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testEnumContainer#32b92037", "#32b92037", &TLItem{tag: 0x32b92037, annotations: 0x0, tlName: "cases_bytes.testEnumContainer", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testTuple#2dd3bacf", "#2dd3bacf", &TLItem{tag: 0x2dd3bacf, annotations: 0x0, tlName: "cases_bytes.testTuple", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases_bytes.testVector#3647c8ae", "#3647c8ae", &TLItem{tag: 0x3647c8ae, annotations: 0x0, tlName: "cases_bytes.testVector", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("casesGo.testNames#6b61936a", "#6b61936a", &TLItem{tag: 0x6b61936a, annotations: 0x0, tlName: "casesGo.testNames", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.myCycle1#d3ca919d", "#d3ca919d", &TLItem{tag: 0xd3ca919d, annotations: 0x0, tlName: "cases.myCycle1", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.myCycle2#5444c9a2", "#5444c9a2", &TLItem{tag: 0x5444c9a2, annotations: 0x0, tlName: "cases.myCycle2", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.myCycle3#7624f86b", "#7624f86b", &TLItem{tag: 0x7624f86b, annotations: 0x0, tlName: "cases.myCycle3", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("casesTL2.testArrayFixedBool#f704cf4e", "#f704cf4e", &TLItem{tag: 0xf704cf4e, annotations: 0x0, tlName: "casesTL2.testArrayFixedBool", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("casesTL2.testArrayFlexibleBool#974a9b29", "#974a9b29", &TLItem{tag: 0x974a9b29, annotations: 0x0, tlName: "casesTL2.testArrayFlexibleBool", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("casesTL2.testFixedParam#22c48297", "#22c48297", &TLItem{tag: 0x22c48297, annotations: 0x0, tlName: "casesTL2.testFixedParam", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("casesTL2.testFunctionNoDep1#1b8b9feb", "#1b8b9feb", &TLItem{tag: 0x1b8b9feb, annotations: 0x1, tlName: "casesTL2.testFunctionNoDep1", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("casesTL2.testFunctionNoDep2#0a2c0bf9", "#0a2c0bf9", &TLItem{tag: 0x0a2c0bf9, annotations: 0x1, tlName: "casesTL2.testFunctionNoDep2", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("casesTL2.testFunctionNoDep3#f020849b", "#f020849b", &TLItem{tag: 0xf020849b, annotations: 0x1, tlName: "casesTL2.testFunctionNoDep3", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("casesTL2.testFunctionNoDep4#5a933a50", "#5a933a50", &TLItem{tag: 0x5a933a50, annotations: 0x1, tlName: "casesTL2.testFunctionNoDep4", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("casesTL2.testFunctionNoDep5#2b47b925", "#2b47b925", &TLItem{tag: 0x2b47b925, annotations: 0x1, tlName: "casesTL2.testFunctionNoDep5", isTL2: false, resultTypeContainsUnionTypes: true, argumentsTypesContainUnionTypes: false})
	fillFunction("casesTL2.testFunctionWithDep1#b6c63b07", "#b6c63b07", &TLItem{tag: 0xb6c63b07, annotations: 0x1, tlName: "casesTL2.testFunctionWithDep1", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("casesTL2.testFunctionWithDep2#9d44a2fd", "#9d44a2fd", &TLItem{tag: 0x9d44a2fd, annotations: 0x1, tlName: "casesTL2.testFunctionWithDep2", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("casesTL2.testObject#4f96dd95", "#4f96dd95", &TLItem{tag: 0x4f96dd95, annotations: 0x0, tlName: "casesTL2.testObject", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("casesTL2.testParamsGeneration#aac2f033", "#aac2f033", &TLItem{tag: 0xaac2f033, annotations: 0x0, tlName: "casesTL2.testParamsGeneration", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("casesTL2.testVectorBool#644bb447", "#644bb447", &TLItem{tag: 0x644bb447, annotations: 0x0, tlName: "casesTL2.testVectorBool", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testAllPossibleFieldConfigsContainer#e3fae936", "#e3fae936", &TLItem{tag: 0xe3fae936, annotations: 0x0, tlName: "cases.testAllPossibleFieldConfigsContainer", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testArray#a888030d", "#a888030d", &TLItem{tag: 0xa888030d, annotations: 0x0, tlName: "cases.testArray", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testBeforeReadBitValidation#9b2396db", "#9b2396db", &TLItem{tag: 0x9b2396db, annotations: 0x0, tlName: "cases.testBeforeReadBitValidation", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testDictAny#e29b8ae6", "#e29b8ae6", &TLItem{tag: 0xe29b8ae6, annotations: 0x0, tlName: "cases.testDictAny", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testDictInt#d3877643", "#d3877643", &TLItem{tag: 0xd3877643, annotations: 0x0, tlName: "cases.testDictInt", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testDictString#c463c79b", "#c463c79b", &TLItem{tag: 0xc463c79b, annotations: 0x0, tlName: "cases.testDictString", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testEnum1#6c6c55ac", "#6c6c55ac", &TLItem{tag: 0x6c6c55ac, annotations: 0x0, tlName: "cases.testEnum1", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testEnum2#86ea88ce", "#86ea88ce", &TLItem{tag: 0x86ea88ce, annotations: 0x0, tlName: "cases.testEnum2", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testEnum3#69b83e2f", "#69b83e2f", &TLItem{tag: 0x69b83e2f, annotations: 0x0, tlName: "cases.testEnum3", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testEnumContainer#cb684231", "#cb684231", &TLItem{tag: 0xcb684231, annotations: 0x0, tlName: "cases.testEnumContainer", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testInplaceStructArgs#a9e4441e", "#a9e4441e", &TLItem{tag: 0xa9e4441e, annotations: 0x0, tlName: "cases.testInplaceStructArgs", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testInplaceStructArgs2#aa9f2480", "#aa9f2480", &TLItem{tag: 0xaa9f2480, annotations: 0x0, tlName: "cases.testInplaceStructArgs2", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testLocalFieldmask#f68fd3f9", "#f68fd3f9", &TLItem{tag: 0xf68fd3f9, annotations: 0x0, tlName: "cases.testLocalFieldmask", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testMaybe#d6602613", "#d6602613", &TLItem{tag: 0xd6602613, annotations: 0x0, tlName: "cases.testMaybe", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testOutFieldMaskContainer#1850ffe4", "#1850ffe4", &TLItem{tag: 0x1850ffe4, annotations: 0x0, tlName: "cases.testOutFieldMaskContainer", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testRecursiveFieldMask#c58cf85e", "#c58cf85e", &TLItem{tag: 0xc58cf85e, annotations: 0x0, tlName: "cases.testRecursiveFieldMask", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testTuple#4b9caf8f", "#4b9caf8f", &TLItem{tag: 0x4b9caf8f, annotations: 0x0, tlName: "cases.testTuple", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testUnion1#4b4f09b1", "#4b4f09b1", &TLItem{tag: 0x4b4f09b1, annotations: 0x0, tlName: "cases.testUnion1", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testUnion2#464f96c4", "#464f96c4", &TLItem{tag: 0x464f96c4, annotations: 0x0, tlName: "cases.testUnion2", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testUnionContainer#4497a381", "#4497a381", &TLItem{tag: 0x4497a381, annotations: 0x0, tlName: "cases.testUnionContainer", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("cases.testVector#4975695c", "#4975695c", &TLItem{tag: 0x4975695c, annotations: 0x0, tlName: "cases.testVector", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("int#a8509bda", "#a8509bda", &TLItem{tag: 0xa8509bda, annotations: 0x0, tlName: "int", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("int32#7934e71f", "#7934e71f", &TLItem{tag: 0x7934e71f, annotations: 0x0, tlName: "int32", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("int64#f5609de0", "#f5609de0", &TLItem{tag: 0xf5609de0, annotations: 0x0, tlName: "int64", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("long#22076cba", "#22076cba", &TLItem{tag: 0x22076cba, annotations: 0x0, tlName: "long", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("string#b5286e24", "#b5286e24", &TLItem{tag: 0xb5286e24, annotations: 0x0, tlName: "string", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("true#3fedd339", "#3fedd339", &TLItem{tag: 0x3fedd339, annotations: 0x0, tlName: "true", isTL2: false, resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
}
