// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesBytesTestEnum

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

var _CasesBytesTestEnum = [3]internal.UnionElement{
	{TLTag: 0x58aad3f5, TLName: "cases_bytes.testEnum1", TLString: "cases_bytes.testEnum1#58aad3f5"},
	{TLTag: 0x00b47add, TLName: "cases_bytes.testEnum2", TLString: "cases_bytes.testEnum2#00b47add"},
	{TLTag: 0x81911ffa, TLName: "cases_bytes.testEnum3", TLString: "cases_bytes.testEnum3#81911ffa"},
}

func CasesBytesTestEnum__MakeEnum(i int) CasesBytesTestEnum { return CasesBytesTestEnum{index: i} }

type CasesBytesTestEnum struct {
	index int
}

func (item CasesBytesTestEnum) TLName() string { return _CasesBytesTestEnum[item.index].TLName }
func (item CasesBytesTestEnum) TLTag() uint32  { return _CasesBytesTestEnum[item.index].TLTag }

func (item *CasesBytesTestEnum) Reset() { item.index = 0 }
func (item *CasesBytesTestEnum) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 3
	switch index {
	case 0:
		item.index = 0
	case 1:
		item.index = 1
	case 2:
		item.index = 2
	default:
	}
}

func (item *CasesBytesTestEnum) Is1() bool { return item.index == 0 }
func (item *CasesBytesTestEnum) Set1()     { item.index = 0 }

func (item *CasesBytesTestEnum) Is2() bool { return item.index == 1 }
func (item *CasesBytesTestEnum) Set2()     { item.index = 1 }

func (item *CasesBytesTestEnum) Is3() bool { return item.index == 2 }
func (item *CasesBytesTestEnum) Set3()     { item.index = 2 }

func (item *CasesBytesTestEnum) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x58aad3f5:
		item.index = 0
		return w, nil
	case 0x00b47add:
		item.index = 1
		return w, nil
	case 0x81911ffa:
		item.index = 2
		return w, nil
	default:
		return w, internal.ErrorInvalidUnionTag("cases_bytes.TestEnum", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *CasesBytesTestEnum) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *CasesBytesTestEnum) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _CasesBytesTestEnum[item.index].TLTag)
	return w
}

func (item *CasesBytesTestEnum) CalculateLayout(sizes []int) []int {
	switch item.index {
	case 0:
		sizes = append(sizes, 0)
	default:
		sizes = append(sizes, 1+basictl.TL2CalculateSize(item.index))
	}
	return sizes
}

func (item *CasesBytesTestEnum) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	switch item.index {
	case 0:
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, 0)
	default:
		currentSize := sizes[0]
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, currentSize)
		w = append(w, 1)
		w = basictl.TL2WriteSize(w, item.index)
	}
	return w, sizes
}
func (item *CasesBytesTestEnum) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[0:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[0:0]
}

func (item *CasesBytesTestEnum) ReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.index = 0
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if r, item.index, err = basictl.TL2ParseSize(r); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}

func (item *CasesBytesTestEnum) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_jtype := in.UnsafeString()
	if !in.Ok() {
		return internal.ErrorInvalidJSON("cases_bytes.TestEnum", "expected string")
	}
	switch _jtype {
	case "cases_bytes.testEnum1#58aad3f5", "cases_bytes.testEnum1", "#58aad3f5":
		if !legacyTypeNames && _jtype == "cases_bytes.testEnum1#58aad3f5" {
			return internal.ErrorInvalidUnionLegacyTagJSON("cases_bytes.TestEnum", "cases_bytes.testEnum1#58aad3f5")
		}
		item.index = 0
		return nil
	case "cases_bytes.testEnum2#00b47add", "cases_bytes.testEnum2", "#00b47add":
		if !legacyTypeNames && _jtype == "cases_bytes.testEnum2#00b47add" {
			return internal.ErrorInvalidUnionLegacyTagJSON("cases_bytes.TestEnum", "cases_bytes.testEnum2#00b47add")
		}
		item.index = 1
		return nil
	case "cases_bytes.testEnum3#81911ffa", "cases_bytes.testEnum3", "#81911ffa":
		if !legacyTypeNames && _jtype == "cases_bytes.testEnum3#81911ffa" {
			return internal.ErrorInvalidUnionLegacyTagJSON("cases_bytes.TestEnum", "cases_bytes.testEnum3#81911ffa")
		}
		item.index = 2
		return nil
	default:
		return internal.ErrorInvalidEnumTagJSON("cases_bytes.TestEnum", _jtype)
	}
}

// This method is general version of WriteJSON, use it instead!
func (item CasesBytesTestEnum) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item CasesBytesTestEnum) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item CasesBytesTestEnum) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '"')
	if newTypeNames {
		w = append(w, _CasesBytesTestEnum[item.index].TLName...)
	} else {
		w = append(w, _CasesBytesTestEnum[item.index].TLString...)
	}
	return append(w, '"')
}

func (item CasesBytesTestEnum) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CasesBytesTestEnum) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CasesBytesTestEnum) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases_bytes.TestEnum", err.Error())
	}
	return nil
}
