// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBenchmarksVruPosition

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tlbenchmarks/tlBenchmarksVruHash"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BenchmarksVruPosition struct {
	FieldsMask uint32
	// CommitBit (TrueType) // Conditional: item.FieldsMask.0
	// MetaBlock (TrueType) // Conditional: item.FieldsMask.1
	// SplitPayload (TrueType) // Conditional: item.FieldsMask.3
	// RotationBlock (TrueType) // Conditional: item.FieldsMask.5
	// CanonicalHash (TrueType) // Conditional: item.FieldsMask.15
	PayloadOffset int64
	BlockTimeNano int64
	Hash          tlBenchmarksVruHash.BenchmarksVruHash
	FileOffset    int64
	SeqNumber     int64 // Conditional: item.FieldsMask.14
}

func (BenchmarksVruPosition) TLName() string { return "benchmarks.vruposition" }
func (BenchmarksVruPosition) TLTag() uint32  { return 0x32792c04 }

func (item *BenchmarksVruPosition) SetCommitBit(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item *BenchmarksVruPosition) IsSetCommitBit() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BenchmarksVruPosition) SetMetaBlock(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item *BenchmarksVruPosition) IsSetMetaBlock() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *BenchmarksVruPosition) SetSplitPayload(v bool) {
	if v {
		item.FieldsMask |= 1 << 3
	} else {
		item.FieldsMask &^= 1 << 3
	}
}
func (item *BenchmarksVruPosition) IsSetSplitPayload() bool { return item.FieldsMask&(1<<3) != 0 }

func (item *BenchmarksVruPosition) SetRotationBlock(v bool) {
	if v {
		item.FieldsMask |= 1 << 5
	} else {
		item.FieldsMask &^= 1 << 5
	}
}
func (item *BenchmarksVruPosition) IsSetRotationBlock() bool { return item.FieldsMask&(1<<5) != 0 }

func (item *BenchmarksVruPosition) SetCanonicalHash(v bool) {
	if v {
		item.FieldsMask |= 1 << 15
	} else {
		item.FieldsMask &^= 1 << 15
	}
}
func (item *BenchmarksVruPosition) IsSetCanonicalHash() bool { return item.FieldsMask&(1<<15) != 0 }

func (item *BenchmarksVruPosition) SetSeqNumber(v int64) {
	item.SeqNumber = v
	item.FieldsMask |= 1 << 14
}
func (item *BenchmarksVruPosition) ClearSeqNumber() {
	item.SeqNumber = 0
	item.FieldsMask &^= 1 << 14
}
func (item *BenchmarksVruPosition) IsSetSeqNumber() bool { return item.FieldsMask&(1<<14) != 0 }

func (item *BenchmarksVruPosition) Reset() {
	item.FieldsMask = 0
	item.PayloadOffset = 0
	item.BlockTimeNano = 0
	item.Hash.Reset()
	item.FileOffset = 0
	item.SeqNumber = 0
}

func (item *BenchmarksVruPosition) FillRandom(rg *basictl.RandGenerator) {
	var maskFieldsMask uint32
	maskFieldsMask = basictl.RandomUint(rg)
	item.FieldsMask = 0
	if maskFieldsMask&(1<<0) != 0 {
		item.FieldsMask |= (1 << 0)
	}
	if maskFieldsMask&(1<<1) != 0 {
		item.FieldsMask |= (1 << 1)
	}
	if maskFieldsMask&(1<<2) != 0 {
		item.FieldsMask |= (1 << 3)
	}
	if maskFieldsMask&(1<<3) != 0 {
		item.FieldsMask |= (1 << 5)
	}
	if maskFieldsMask&(1<<4) != 0 {
		item.FieldsMask |= (1 << 14)
	}
	if maskFieldsMask&(1<<5) != 0 {
		item.FieldsMask |= (1 << 15)
	}
	item.PayloadOffset = basictl.RandomLong(rg)
	item.BlockTimeNano = basictl.RandomLong(rg)
	item.Hash.FillRandom(rg)
	item.FileOffset = basictl.RandomLong(rg)
	if item.FieldsMask&(1<<14) != 0 {
		item.SeqNumber = basictl.RandomLong(rg)
	} else {
		item.SeqNumber = 0
	}
}

func (item *BenchmarksVruPosition) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PayloadOffset); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.BlockTimeNano); err != nil {
		return w, err
	}
	if w, err = item.Hash.Read(w); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.FileOffset); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<14) != 0 {
		if w, err = basictl.LongRead(w, &item.SeqNumber); err != nil {
			return w, err
		}
	} else {
		item.SeqNumber = 0
	}
	return w, nil
}

func (item *BenchmarksVruPosition) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BenchmarksVruPosition) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.PayloadOffset)
	w = basictl.LongWrite(w, item.BlockTimeNano)
	w = item.Hash.Write(w)
	w = basictl.LongWrite(w, item.FileOffset)
	if item.FieldsMask&(1<<14) != 0 {
		w = basictl.LongWrite(w, item.SeqNumber)
	}
	return w
}

func (item *BenchmarksVruPosition) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x32792c04); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BenchmarksVruPosition) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BenchmarksVruPosition) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x32792c04)
	return item.Write(w)
}

func (item BenchmarksVruPosition) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BenchmarksVruPosition) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var trueTypeCommitBitPresented bool
	var trueTypeCommitBitValue bool
	var trueTypeMetaBlockPresented bool
	var trueTypeMetaBlockValue bool
	var trueTypeSplitPayloadPresented bool
	var trueTypeSplitPayloadValue bool
	var trueTypeRotationBlockPresented bool
	var trueTypeRotationBlockValue bool
	var trueTypeCanonicalHashPresented bool
	var trueTypeCanonicalHashValue bool
	var propPayloadOffsetPresented bool
	var propBlockTimeNanoPresented bool
	var propHashPresented bool
	var propFileOffsetPresented bool
	var propSeqNumberPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "commit_bit":
				if trueTypeCommitBitPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "commit_bit")
				}
				if err := internal.Json2ReadBool(in, &trueTypeCommitBitValue); err != nil {
					return err
				}
				trueTypeCommitBitPresented = true
			case "meta_block":
				if trueTypeMetaBlockPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "meta_block")
				}
				if err := internal.Json2ReadBool(in, &trueTypeMetaBlockValue); err != nil {
					return err
				}
				trueTypeMetaBlockPresented = true
			case "split_payload":
				if trueTypeSplitPayloadPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "split_payload")
				}
				if err := internal.Json2ReadBool(in, &trueTypeSplitPayloadValue); err != nil {
					return err
				}
				trueTypeSplitPayloadPresented = true
			case "rotation_block":
				if trueTypeRotationBlockPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "rotation_block")
				}
				if err := internal.Json2ReadBool(in, &trueTypeRotationBlockValue); err != nil {
					return err
				}
				trueTypeRotationBlockPresented = true
			case "canonical_hash":
				if trueTypeCanonicalHashPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "canonical_hash")
				}
				if err := internal.Json2ReadBool(in, &trueTypeCanonicalHashValue); err != nil {
					return err
				}
				trueTypeCanonicalHashPresented = true
			case "payload_offset":
				if propPayloadOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "payload_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.PayloadOffset); err != nil {
					return err
				}
				propPayloadOffsetPresented = true
			case "block_time_nano":
				if propBlockTimeNanoPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "block_time_nano")
				}
				if err := internal.Json2ReadInt64(in, &item.BlockTimeNano); err != nil {
					return err
				}
				propBlockTimeNanoPresented = true
			case "hash":
				if propHashPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "hash")
				}
				if err := item.Hash.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propHashPresented = true
			case "file_offset":
				if propFileOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "file_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.FileOffset); err != nil {
					return err
				}
				propFileOffsetPresented = true
			case "seq_number":
				if propSeqNumberPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vruposition", "seq_number")
				}
				if err := internal.Json2ReadInt64(in, &item.SeqNumber); err != nil {
					return err
				}
				propSeqNumberPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("benchmarks.vruposition", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propPayloadOffsetPresented {
		item.PayloadOffset = 0
	}
	if !propBlockTimeNanoPresented {
		item.BlockTimeNano = 0
	}
	if !propHashPresented {
		item.Hash.Reset()
	}
	if !propFileOffsetPresented {
		item.FileOffset = 0
	}
	if !propSeqNumberPresented {
		item.SeqNumber = 0
	}
	if trueTypeCommitBitPresented {
		if trueTypeCommitBitValue {
			item.FieldsMask |= 1 << 0
		}
	}
	if trueTypeMetaBlockPresented {
		if trueTypeMetaBlockValue {
			item.FieldsMask |= 1 << 1
		}
	}
	if trueTypeSplitPayloadPresented {
		if trueTypeSplitPayloadValue {
			item.FieldsMask |= 1 << 3
		}
	}
	if trueTypeRotationBlockPresented {
		if trueTypeRotationBlockValue {
			item.FieldsMask |= 1 << 5
		}
	}
	if trueTypeCanonicalHashPresented {
		if trueTypeCanonicalHashValue {
			item.FieldsMask |= 1 << 15
		}
	}
	if propSeqNumberPresented {
		item.FieldsMask |= 1 << 14
	}
	// tries to set bit to zero if it is 1
	if trueTypeCommitBitPresented && !trueTypeCommitBitValue && (item.FieldsMask&(1<<0) != 0) {
		return internal.ErrorInvalidJSON("benchmarks.vruposition", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeMetaBlockPresented && !trueTypeMetaBlockValue && (item.FieldsMask&(1<<1) != 0) {
		return internal.ErrorInvalidJSON("benchmarks.vruposition", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeSplitPayloadPresented && !trueTypeSplitPayloadValue && (item.FieldsMask&(1<<3) != 0) {
		return internal.ErrorInvalidJSON("benchmarks.vruposition", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeRotationBlockPresented && !trueTypeRotationBlockValue && (item.FieldsMask&(1<<5) != 0) {
		return internal.ErrorInvalidJSON("benchmarks.vruposition", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeCanonicalHashPresented && !trueTypeCanonicalHashValue && (item.FieldsMask&(1<<15) != 0) {
		return internal.ErrorInvalidJSON("benchmarks.vruposition", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BenchmarksVruPosition) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BenchmarksVruPosition) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BenchmarksVruPosition) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"commit_bit":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"meta_block":true`...)
	}
	if item.FieldsMask&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"split_payload":true`...)
	}
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"rotation_block":true`...)
	}
	if item.FieldsMask&(1<<15) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"canonical_hash":true`...)
	}
	backupIndexPayloadOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"payload_offset":`...)
	w = basictl.JSONWriteInt64(w, item.PayloadOffset)
	if (item.PayloadOffset != 0) == false {
		w = w[:backupIndexPayloadOffset]
	}
	backupIndexBlockTimeNano := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"block_time_nano":`...)
	w = basictl.JSONWriteInt64(w, item.BlockTimeNano)
	if (item.BlockTimeNano != 0) == false {
		w = w[:backupIndexBlockTimeNano]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"hash":`...)
	w = item.Hash.WriteJSONOpt(newTypeNames, short, w)
	backupIndexFileOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"file_offset":`...)
	w = basictl.JSONWriteInt64(w, item.FileOffset)
	if (item.FileOffset != 0) == false {
		w = w[:backupIndexFileOffset]
	}
	if item.FieldsMask&(1<<14) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"seq_number":`...)
		w = basictl.JSONWriteInt64(w, item.SeqNumber)
	}
	return append(w, '}')
}

func (item *BenchmarksVruPosition) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BenchmarksVruPosition) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("benchmarks.vruposition", err.Error())
	}
	return nil
}

func (item *BenchmarksVruPosition) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.FieldsMask
	if item.FieldsMask != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.PayloadOffset
	if item.PayloadOffset != 0 {

		lastUsedByte = 1
		currentSize += 8
	}

	// calculate layout for item.BlockTimeNano
	if item.BlockTimeNano != 0 {

		lastUsedByte = 2
		currentSize += 8
	}

	// calculate layout for item.Hash
	currentPosition := len(sizes)
	sizes = item.Hash.CalculateLayout(sizes)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 2
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.FileOffset
	if item.FileOffset != 0 {

		lastUsedByte = 2
		currentSize += 8
	}

	// calculate layout for item.SeqNumber
	if item.FieldsMask&(1<<14) != 0 {
		if item.SeqNumber != 0 {

			lastUsedByte = 2
			currentSize += 8
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *BenchmarksVruPosition) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.FieldsMask
	if item.FieldsMask != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.FieldsMask)
		}
	}
	// write item.PayloadOffset
	if item.PayloadOffset != 0 {
		serializedSize += 8
		if 8 != 0 {
			currentBlock |= (1 << 7)
			w = basictl.LongWrite(w, item.PayloadOffset)
		}
	}

	// add byte for fields with index 8..15
	w[currentBlockPosition] = currentBlock
	currentBlock = 0
	if serializedSize != currentSize {
		currentBlockPosition = len(w)
		w = append(w, 0)
		serializedSize += 1
	} else {
		return w, sizes
	}
	// write item.BlockTimeNano
	if item.BlockTimeNano != 0 {
		serializedSize += 8
		if 8 != 0 {
			currentBlock |= (1 << 0)
			w = basictl.LongWrite(w, item.BlockTimeNano)
		}
	}
	// write item.Hash
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.Hash.InternalWriteTL2(w, sizes)
	} else {
		sizes = sizes[1:]
	}
	// write item.FileOffset
	if item.FileOffset != 0 {
		serializedSize += 8
		if 8 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.LongWrite(w, item.FileOffset)
		}
	}
	// write item.SeqNumber
	if item.FieldsMask&(1<<14) != 0 {
		if item.SeqNumber != 0 {
			serializedSize += 8
			if 8 != 0 {
				currentBlock |= (1 << 3)
				w = basictl.LongWrite(w, item.SeqNumber)
			}
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *BenchmarksVruPosition) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *BenchmarksVruPosition) ReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.FieldsMask
		if block&(1<<1) != 0 {
			if r, err = basictl.NatRead(r, &item.FieldsMask); err != nil {
				return r, err
			}
		} else {
			item.FieldsMask = 0
		}

		// read item.PayloadOffset
		if block&(1<<7) != 0 {
			if r, err = basictl.LongRead(r, &item.PayloadOffset); err != nil {
				return r, err
			}
		} else {
			item.PayloadOffset = 0
		}

		// read next block for fields 8..15
		if len(saveR) < len(r)+shift {
			if r, err = basictl.ByteReadTL2(r, &block); err != nil {
				return r, err
			}
		} else {
			return r, nil
		}

		// read item.BlockTimeNano
		if block&(1<<0) != 0 {
			if r, err = basictl.LongRead(r, &item.BlockTimeNano); err != nil {
				return r, err
			}
		} else {
			item.BlockTimeNano = 0
		}

		// read item.Hash
		if block&(1<<1) != 0 {
			if r, err = item.Hash.ReadTL2(r); err != nil {
				return r, err
			}
		} else {
			item.Hash.Reset()
		}

		// read item.FileOffset
		if block&(1<<2) != 0 {
			if r, err = basictl.LongRead(r, &item.FileOffset); err != nil {
				return r, err
			}
		} else {
			item.FileOffset = 0
		}

		// read item.SeqNumber
		if block&(1<<3) != 0 {
			if item.FieldsMask&(1<<14) != 0 {
				if r, err = basictl.LongRead(r, &item.SeqNumber); err != nil {
					return r, err
				}
			} else {
				return r, basictl.TL2Error("field mask contradiction: field item." + "SeqNumber" + "is presented but depending bit is absent")
			}
		} else {
			item.SeqNumber = 0
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}
