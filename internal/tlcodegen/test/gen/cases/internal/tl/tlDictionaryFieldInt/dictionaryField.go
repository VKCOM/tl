// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlDictionaryFieldInt

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type DictionaryFieldInt struct {
	Key   string
	Value int32
}

func (DictionaryFieldInt) TLName() string { return "dictionaryField" }
func (DictionaryFieldInt) TLTag() uint32  { return 0x239c1b62 }

func (item *DictionaryFieldInt) Reset() {
	item.Key = ""
	item.Value = 0
}

func (item *DictionaryFieldInt) FillRandom(rg *basictl.RandGenerator) {
	item.Key = basictl.RandomString(rg)
	item.Value = basictl.RandomInt(rg)
}

func (item *DictionaryFieldInt) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.Key); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Value)
}

// This method is general version of Write, use it instead!
func (item *DictionaryFieldInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryFieldInt) Write(w []byte) []byte {
	w = basictl.StringWrite(w, item.Key)
	w = basictl.IntWrite(w, item.Value)
	return w
}

func (item *DictionaryFieldInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x239c1b62); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *DictionaryFieldInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryFieldInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x239c1b62)
	return item.Write(w)
}

func (item DictionaryFieldInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryFieldInt) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	lastUsedBit := -1

	// calculate layout for item.Key
	currentPosition := len(sizes)
	if len(item.Key) != 0 {
		sizes = append(sizes, len(item.Key))
		if sizes[currentPosition] != 0 {
			lastUsedBit = 1
			sizes[sizePosition] += sizes[currentPosition]
			sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.Value
	currentPosition = len(sizes)
	if item.Value != 0 {
		sizes = append(sizes, 4)
		if sizes[currentPosition] != 0 {
			lastUsedBit = 2
			sizes[sizePosition] += sizes[currentPosition]
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedBit != -1 {
		sizes[sizePosition] += lastUsedBit/8 + 1
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	return sizes
}

func (item *DictionaryFieldInt) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// calculate layout for item.Key
	if len(item.Key) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			w[currentBlockPosition] |= (1 << 1)
			sizes = sizes[1:]
			w = basictl.StringWriteTL2(w, item.Key)

		} else {
			sizes = sizes[1:]
		}
	}

	// calculate layout for item.Value
	if item.Value != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			w[currentBlockPosition] |= (1 << 2)
			sizes = sizes[1:]
			w = basictl.IntWrite(w, item.Value)

		} else {
			sizes = sizes[1:]
		}
	}

	return w, sizes
}

func (item *DictionaryFieldInt) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[0:0])
	return item.InternalWriteTL2(w, sizes)
}

func (item *DictionaryFieldInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("dictionaryField", "key")
				}
				if err := internal.Json2ReadString(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("dictionaryField", "value")
				}
				if err := internal.Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("dictionaryField", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = ""
	}
	if !propValuePresented {
		item.Value = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryFieldInt) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *DictionaryFieldInt) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *DictionaryFieldInt) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteString(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *DictionaryFieldInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryFieldInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("dictionaryField", err.Error())
	}
	return nil
}

type DictionaryFieldIntBytes struct {
	Key   []byte
	Value int32
}

func (DictionaryFieldIntBytes) TLName() string { return "dictionaryField" }
func (DictionaryFieldIntBytes) TLTag() uint32  { return 0x239c1b62 }

func (item *DictionaryFieldIntBytes) Reset() {
	item.Key = item.Key[:0]
	item.Value = 0
}

func (item *DictionaryFieldIntBytes) FillRandom(rg *basictl.RandGenerator) {
	item.Key = basictl.RandomStringBytes(rg)
	item.Value = basictl.RandomInt(rg)
}

func (item *DictionaryFieldIntBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringReadBytes(w, &item.Key); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Value)
}

// This method is general version of Write, use it instead!
func (item *DictionaryFieldIntBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *DictionaryFieldIntBytes) Write(w []byte) []byte {
	w = basictl.StringWriteBytes(w, item.Key)
	w = basictl.IntWrite(w, item.Value)
	return w
}

func (item *DictionaryFieldIntBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x239c1b62); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *DictionaryFieldIntBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *DictionaryFieldIntBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x239c1b62)
	return item.Write(w)
}

func (item DictionaryFieldIntBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *DictionaryFieldIntBytes) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	lastUsedBit := -1

	// calculate layout for item.Key
	currentPosition := len(sizes)
	if len(item.Key) != 0 {
		sizes = append(sizes, len(item.Key))
		if sizes[currentPosition] != 0 {
			lastUsedBit = 1
			sizes[sizePosition] += sizes[currentPosition]
			sizes[sizePosition] += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.Value
	currentPosition = len(sizes)
	if item.Value != 0 {
		sizes = append(sizes, 4)
		if sizes[currentPosition] != 0 {
			lastUsedBit = 2
			sizes[sizePosition] += sizes[currentPosition]
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedBit != -1 {
		sizes[sizePosition] += lastUsedBit/8 + 1
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	return sizes
}

func (item *DictionaryFieldIntBytes) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// calculate layout for item.Key
	if len(item.Key) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			w[currentBlockPosition] |= (1 << 1)
			sizes = sizes[1:]
			w = basictl.StringBytesWriteTL2(w, item.Key)

		} else {
			sizes = sizes[1:]
		}
	}

	// calculate layout for item.Value
	if item.Value != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			w[currentBlockPosition] |= (1 << 2)
			sizes = sizes[1:]
			w = basictl.IntWrite(w, item.Value)

		} else {
			sizes = sizes[1:]
		}
	}

	return w, sizes
}

func (item *DictionaryFieldIntBytes) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[0:0])
	return item.InternalWriteTL2(w, sizes)
}

func (item *DictionaryFieldIntBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("dictionaryField", "key")
				}
				if err := internal.Json2ReadStringBytes(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("dictionaryField", "value")
				}
				if err := internal.Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("dictionaryField", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = item.Key[:0]
	}
	if !propValuePresented {
		item.Value = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *DictionaryFieldIntBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *DictionaryFieldIntBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *DictionaryFieldIntBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteStringBytes(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *DictionaryFieldIntBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *DictionaryFieldIntBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("dictionaryField", err.Error())
	}
	return nil
}
