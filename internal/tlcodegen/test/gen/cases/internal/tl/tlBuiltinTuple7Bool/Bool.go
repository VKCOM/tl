// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBuiltinTuple7Bool

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlBool"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func BuiltinTuple7BoolReset(vec *[7]bool) {
	for i := range *vec {
		(*vec)[i] = false
	}
}

func BuiltinTuple7BoolFillRandom(rg *basictl.RandGenerator, vec *[7]bool) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomUint(rg)&1 == 1
	}
	rg.DecreaseDepth()
}

func BuiltinTuple7BoolRead(w []byte, vec *[7]bool) (_ []byte, err error) {
	for i := range *vec {
		if w, err = tlBool.BoolReadBoxed(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple7BoolWrite(w []byte, vec *[7]bool) []byte {
	for _, elem := range *vec {
		w = tlBool.BoolWriteBoxed(w, elem)
	}
	return w
}

func BuiltinTuple7BoolCalculateLayout(sizes []int, vec *[7]bool) []int {
	currentSize := 0
	sizePosition := len(sizes)
	sizes = append(sizes, 0)
	if 7 != 0 {
		currentSize += basictl.TL2CalculateSize(7)
	}

	// special case for bool
	currentSize += (7 + 7) / 8

	sizes[sizePosition] = currentSize
	return sizes
}

func BuiltinTuple7BoolInternalWriteTL2(w []byte, sizes []int, vec *[7]bool) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	w = basictl.TL2WriteSize(w, currentSize)
	if 7 != 0 {
		w = basictl.TL2WriteSize(w, 7)
	}

	// special case for bool
	index := 0
	for i := uint32(0); i < (7+7)/8; i++ {
		block := byte(0)
		blockSize := 8
		if index+blockSize > 7 {
			blockSize = 7 - index
		}
		for j := 0; j < blockSize; j++ {
			if (*vec)[index] {
				block |= (1 << j)
			}
			index += 1
		}
		w = append(w, block)
	}
	return w, sizes
}

func BuiltinTuple7BoolInternalReadTL2(r []byte, vec *[7]bool) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	elementCount := 0
	if currentSize != 0 {
		if currentR, elementCount, err = basictl.TL2ParseSize(currentR); err != nil {
			return r, err
		}
	}

	lastIndex := elementCount
	if lastIndex > 7 {
		lastIndex = 7
	}
	// special case for bool
	blocksCount := (lastIndex + 7) / 8
	index := 0
	for i := 0; i < blocksCount; i++ {
		var block byte
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return currentR, err
		}

		blockSize := 8
		if index+blockSize > lastIndex {
			blockSize = lastIndex - index
		}
		for j := 0; j < blockSize; j++ {
			(*vec)[index] = (block & (1 << j)) != 0
			index += 1
		}
	}

	// reset elements if received less elements
	for i := lastIndex; i < 7; i++ {
		(*vec)[i] = false
	}

	return r, nil
}

func BuiltinTuple7BoolReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[7]bool) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[7]bool", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 7 {
				return internal.ErrorWrongSequenceLength("[7]bool", index+1, 7)
			}
			if err := internal.Json2ReadBool(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[7]bool", "expected json array's end")
		}
	}
	if index != 7 {
		return internal.ErrorWrongSequenceLength("[7]bool", index+1, 7)
	}
	return nil
}

func BuiltinTuple7BoolWriteJSON(w []byte, vec *[7]bool) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinTuple7BoolWriteJSONOpt(&tctx, w, vec)
}
func BuiltinTuple7BoolWriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *[7]bool) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteBool(w, elem)
	}
	return append(w, ']')
}
