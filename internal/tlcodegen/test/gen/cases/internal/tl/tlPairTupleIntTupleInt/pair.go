// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlPairTupleIntTupleInt

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlBuiltinTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type PairTupleIntTupleInt struct {
	X []int32
	Y []int32
}

func (PairTupleIntTupleInt) TLName() string { return "pair" }
func (PairTupleIntTupleInt) TLTag() uint32  { return 0xf01604df }

func (item *PairTupleIntTupleInt) Reset() {
	item.X = item.X[:0]
	item.Y = item.Y[:0]
}

func (item *PairTupleIntTupleInt) FillRandom(rg *basictl.RandGenerator, nat_X uint32, nat_Y uint32) {
	tlBuiltinTupleInt.BuiltinTupleIntFillRandom(rg, &item.X, nat_X)
	tlBuiltinTupleInt.BuiltinTupleIntFillRandom(rg, &item.Y, nat_Y)
}

func (item *PairTupleIntTupleInt) Read(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.X, nat_X); err != nil {
		return w, err
	}
	return tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.Y, nat_Y)
}

// This method is general version of Write, use it instead!
func (item *PairTupleIntTupleInt) WriteGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.Write(w, nat_X, nat_Y)
}

func (item *PairTupleIntTupleInt) Write(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.X, nat_X); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.Y, nat_Y); err != nil {
		return w, err
	}
	return w, nil
}

func (item *PairTupleIntTupleInt) ReadBoxed(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xf01604df); err != nil {
		return w, err
	}
	return item.Read(w, nat_X, nat_Y)
}

// This method is general version of WriteBoxed, use it instead!
func (item *PairTupleIntTupleInt) WriteBoxedGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_X, nat_Y)
}

func (item *PairTupleIntTupleInt) WriteBoxed(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xf01604df)
	return item.Write(w, nat_X, nat_Y)
}

func (item *PairTupleIntTupleInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_X uint32, nat_Y uint32) error {
	var rawX []byte
	var rawY []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if rawX != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("pair", "x")
				}
				rawX = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "y":
				if rawY != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("pair", "y")
				}
				rawY = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inXPointer *basictl.JsonLexer
	inX := basictl.JsonLexer{Data: rawX}
	if rawX != nil {
		inXPointer = &inX
	}
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, inXPointer, &item.X, nat_X); err != nil {
		return err
	}

	var inYPointer *basictl.JsonLexer
	inY := basictl.JsonLexer{Data: rawY}
	if rawY != nil {
		inYPointer = &inY
	}
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, inYPointer, &item.Y, nat_Y); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairTupleIntTupleInt) WriteJSONGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_X, nat_Y)
}

func (item *PairTupleIntTupleInt) WriteJSON(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_X, nat_Y)
}
func (item *PairTupleIntTupleInt) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.X, nat_X); err != nil {
		return w, err
	}
	if (len(item.X) != 0) == false {
		w = w[:backupIndexX]
	}
	backupIndexY := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"y":`...)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.Y, nat_Y); err != nil {
		return w, err
	}
	if (len(item.Y) != 0) == false {
		w = w[:backupIndexY]
	}
	return append(w, '}'), nil
}
