// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTupleInt

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlBuiltinTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TupleInt []int32

func (TupleInt) TLName() string { return "tuple" }
func (TupleInt) TLTag() uint32  { return 0x9770768a }

func (item *TupleInt) Reset() {
	ptr := (*[]int32)(item)
	*ptr = (*ptr)[:0]
}

func (item *TupleInt) FillRandom(rg *basictl.RandGenerator, nat_n uint32) {
	ptr := (*[]int32)(item)
	tlBuiltinTupleInt.BuiltinTupleIntFillRandom(rg, ptr, nat_n)
}

func (item *TupleInt) Read(w []byte, nat_n uint32) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	return tlBuiltinTupleInt.BuiltinTupleIntRead(w, ptr, nat_n)
}

func (item *TupleInt) WriteGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.Write(w, nat_n)
}

func (item *TupleInt) Write(w []byte, nat_n uint32) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	return tlBuiltinTupleInt.BuiltinTupleIntWrite(w, *ptr, nat_n)
}

func (item *TupleInt) ReadBoxed(w []byte, nat_n uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return item.Read(w, nat_n)
}

func (item *TupleInt) WriteBoxedGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_n)
}

func (item *TupleInt) WriteBoxed(w []byte, nat_n uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x9770768a)
	return item.Write(w, nat_n)
}

func (item *TupleInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_n uint32) error {
	ptr := (*[]int32)(item)
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, in, ptr, nat_n); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TupleInt) WriteJSONGeneral(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteJSON(w, nat_n)
}

func (item *TupleInt) WriteJSON(w []byte, nat_n uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_n)
}

func (item *TupleInt) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_n uint32) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, *ptr, nat_n); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TupleInt) CalculateLayout(sizes []int, nat_n uint32) []int {
	ptr := (*[]int32)(item)
	sizes = tlBuiltinTupleInt.BuiltinTupleIntCalculateLayout(sizes, ptr, nat_n)
	return sizes
}

func (item *TupleInt) InternalWriteTL2(w []byte, sizes []int, nat_n uint32) ([]byte, []int) {
	ptr := (*[]int32)(item)
	w, sizes = tlBuiltinTupleInt.BuiltinTupleIntInternalWriteTL2(w, sizes, ptr, nat_n)
	return w, sizes
}

func (item *TupleInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext, nat_n uint32) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0], nat_n)
	w, _ = item.InternalWriteTL2(w, sizes, nat_n)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *TupleInt) InternalReadTL2(r []byte, nat_n uint32) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	if r, err = tlBuiltinTupleInt.BuiltinTupleIntInternalReadTL2(r, ptr, nat_n); err != nil {
		return r, err
	}
	return r, nil
}

func (item *TupleInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext, nat_n uint32) (_ []byte, err error) {
	return item.InternalReadTL2(r, nat_n)
}
