// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBuiltinTuple2PairTupleIntTupleInt

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlPairTupleIntTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func BuiltinTuple2PairTupleIntTupleIntReset(vec *[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt) {
	for i := range *vec {
		(*vec)[i].Reset()
	}
}

func BuiltinTuple2PairTupleIntTupleIntFillRandom(rg *basictl.RandGenerator, vec *[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt, nat_tXn uint32, nat_tYn uint32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i].FillRandom(rg, nat_tXn, nat_tYn)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple2PairTupleIntTupleIntRead(w []byte, vec *[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = (*vec)[i].Read(w, nat_tXn, nat_tYn); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple2PairTupleIntTupleIntWrite(w []byte, vec *[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	for _, elem := range *vec {
		if w, err = elem.Write(w, nat_tXn, nat_tYn); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple2PairTupleIntTupleIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt, nat_tXn uint32, nat_tYn uint32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 2 {
				return internal.ErrorWrongSequenceLength("[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt", index+1, 2)
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in, nat_tXn, nat_tYn); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt", "expected json array's end")
		}
	}
	if index != 2 {
		return internal.ErrorWrongSequenceLength("[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt", index+1, 2)
	}
	return nil
}

func BuiltinTuple2PairTupleIntTupleIntWriteJSON(w []byte, vec *[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	return BuiltinTuple2PairTupleIntTupleIntWriteJSONOpt(true, false, w, vec, nat_tXn, nat_tYn)
}
func BuiltinTuple2PairTupleIntTupleIntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w, nat_tXn, nat_tYn); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}
