// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTuplePairTupleIntTupleInt2

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlBuiltinTuple2PairTupleIntTupleInt"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlPairTupleIntTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TuplePairTupleIntTupleInt2 [2]tlPairTupleIntTupleInt.PairTupleIntTupleInt

func (TuplePairTupleIntTupleInt2) TLName() string { return "tuple" }
func (TuplePairTupleIntTupleInt2) TLTag() uint32  { return 0x9770768a }

func (item *TuplePairTupleIntTupleInt2) Reset() {
	ptr := (*[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt)(item)
	tlBuiltinTuple2PairTupleIntTupleInt.BuiltinTuple2PairTupleIntTupleIntReset(ptr)
}

func (item *TuplePairTupleIntTupleInt2) FillRandom(rg *basictl.RandGenerator, nat_tXn uint32, nat_tYn uint32) {
	ptr := (*[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt)(item)
	tlBuiltinTuple2PairTupleIntTupleInt.BuiltinTuple2PairTupleIntTupleIntFillRandom(rg, ptr, nat_tXn, nat_tYn)
}

func (item *TuplePairTupleIntTupleInt2) Read(w []byte, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	ptr := (*[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt)(item)
	return tlBuiltinTuple2PairTupleIntTupleInt.BuiltinTuple2PairTupleIntTupleIntRead(w, ptr, nat_tXn, nat_tYn)
}

func (item *TuplePairTupleIntTupleInt2) WriteGeneral(w []byte, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	return item.Write(w, nat_tXn, nat_tYn)
}

func (item *TuplePairTupleIntTupleInt2) Write(w []byte, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	ptr := (*[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt)(item)
	return tlBuiltinTuple2PairTupleIntTupleInt.BuiltinTuple2PairTupleIntTupleIntWrite(w, ptr, nat_tXn, nat_tYn)
}

func (item *TuplePairTupleIntTupleInt2) ReadBoxed(w []byte, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return item.Read(w, nat_tXn, nat_tYn)
}

func (item *TuplePairTupleIntTupleInt2) WriteBoxedGeneral(w []byte, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_tXn, nat_tYn)
}

func (item *TuplePairTupleIntTupleInt2) WriteBoxed(w []byte, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x9770768a)
	return item.Write(w, nat_tXn, nat_tYn)
}

func (item *TuplePairTupleIntTupleInt2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_tXn uint32, nat_tYn uint32) error {
	ptr := (*[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt)(item)
	if err := tlBuiltinTuple2PairTupleIntTupleInt.BuiltinTuple2PairTupleIntTupleIntReadJSON(legacyTypeNames, in, ptr, nat_tXn, nat_tYn); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TuplePairTupleIntTupleInt2) WriteJSONGeneral(w []byte, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	return item.WriteJSON(w, nat_tXn, nat_tYn)
}

func (item *TuplePairTupleIntTupleInt2) WriteJSON(w []byte, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_tXn, nat_tYn)
}

func (item *TuplePairTupleIntTupleInt2) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	ptr := (*[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt)(item)
	if w, err = tlBuiltinTuple2PairTupleIntTupleInt.BuiltinTuple2PairTupleIntTupleIntWriteJSONOpt(newTypeNames, short, w, ptr, nat_tXn, nat_tYn); err != nil {
		return w, err
	}
	return w, nil
}

func (item *TuplePairTupleIntTupleInt2) CalculateLayout(sizes []int, nat_tXn uint32, nat_tYn uint32) []int {
	ptr := (*[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt)(item)
	sizes = tlBuiltinTuple2PairTupleIntTupleInt.BuiltinTuple2PairTupleIntTupleIntCalculateLayout(sizes, ptr, nat_tXn, nat_tYn)
	return sizes
}

func (item *TuplePairTupleIntTupleInt2) InternalWriteTL2(w []byte, sizes []int, nat_tXn uint32, nat_tYn uint32) ([]byte, []int) {
	ptr := (*[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt)(item)
	w, sizes = tlBuiltinTuple2PairTupleIntTupleInt.BuiltinTuple2PairTupleIntTupleIntInternalWriteTL2(w, sizes, ptr, nat_tXn, nat_tYn)
	return w, sizes
}

func (item *TuplePairTupleIntTupleInt2) ReadTL2(r []byte, nat_tXn uint32, nat_tYn uint32) (_ []byte, err error) {
	ptr := (*[2]tlPairTupleIntTupleInt.PairTupleIntTupleInt)(item)
	if r, err = tlBuiltinTuple2PairTupleIntTupleInt.BuiltinTuple2PairTupleIntTupleIntReadTL2(r, ptr, nat_tXn, nat_tYn); err != nil {
		return r, err
	}
	return r, nil
}
