// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlPairTupleTupleInt2TupleTupleInt2

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlBuiltinTupleTupleInt2"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type PairTupleTupleInt2TupleTupleInt2 struct {
	X [][2]int32
	Y [][2]int32
}

func (PairTupleTupleInt2TupleTupleInt2) TLName() string { return "pair" }
func (PairTupleTupleInt2TupleTupleInt2) TLTag() uint32  { return 0xf01604df }

func (item *PairTupleTupleInt2TupleTupleInt2) Reset() {
	item.X = item.X[:0]
	item.Y = item.Y[:0]
}

func (item *PairTupleTupleInt2TupleTupleInt2) FillRandom(rg *basictl.RandGenerator, nat_X uint32, nat_Y uint32) {
	tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2FillRandom(rg, &item.X, nat_X)
	tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2FillRandom(rg, &item.Y, nat_Y)
}

func (item *PairTupleTupleInt2TupleTupleInt2) Read(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2Read(w, &item.X, nat_X); err != nil {
		return w, err
	}
	return tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2Read(w, &item.Y, nat_Y)
}

// This method is general version of Write, use it instead!
func (item *PairTupleTupleInt2TupleTupleInt2) WriteGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.Write(w, nat_X, nat_Y)
}

func (item *PairTupleTupleInt2TupleTupleInt2) Write(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2Write(w, item.X, nat_X); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2Write(w, item.Y, nat_Y); err != nil {
		return w, err
	}
	return w, nil
}

func (item *PairTupleTupleInt2TupleTupleInt2) ReadBoxed(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xf01604df); err != nil {
		return w, err
	}
	return item.Read(w, nat_X, nat_Y)
}

// This method is general version of WriteBoxed, use it instead!
func (item *PairTupleTupleInt2TupleTupleInt2) WriteBoxedGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_X, nat_Y)
}

func (item *PairTupleTupleInt2TupleTupleInt2) WriteBoxed(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xf01604df)
	return item.Write(w, nat_X, nat_Y)
}

func (item *PairTupleTupleInt2TupleTupleInt2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_X uint32, nat_Y uint32) error {
	var rawX []byte
	var rawY []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if rawX != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("pair", "x")
				}
				rawX = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "y":
				if rawY != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("pair", "y")
				}
				rawY = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("pair", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inXPointer *basictl.JsonLexer
	inX := basictl.JsonLexer{Data: rawX}
	if rawX != nil {
		inXPointer = &inX
	}
	if err := tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2ReadJSON(legacyTypeNames, inXPointer, &item.X, nat_X); err != nil {
		return err
	}

	var inYPointer *basictl.JsonLexer
	inY := basictl.JsonLexer{Data: rawY}
	if rawY != nil {
		inYPointer = &inY
	}
	if err := tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2ReadJSON(legacyTypeNames, inYPointer, &item.Y, nat_Y); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *PairTupleTupleInt2TupleTupleInt2) WriteJSONGeneral(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_X, nat_Y)
}

func (item *PairTupleTupleInt2TupleTupleInt2) WriteJSON(w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_X, nat_Y)
}
func (item *PairTupleTupleInt2TupleTupleInt2) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexX := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	if w, err = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2WriteJSONOpt(newTypeNames, short, w, item.X, nat_X); err != nil {
		return w, err
	}
	if (len(item.X) != 0) == false {
		w = w[:backupIndexX]
	}
	backupIndexY := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"y":`...)
	if w, err = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2WriteJSONOpt(newTypeNames, short, w, item.Y, nat_Y); err != nil {
		return w, err
	}
	if (len(item.Y) != 0) == false {
		w = w[:backupIndexY]
	}
	return append(w, '}'), nil
}

func (item *PairTupleTupleInt2TupleTupleInt2) CalculateLayout(sizes []int, nat_X uint32, nat_Y uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.X
	currentPosition := len(sizes)
	if len(item.X) != 0 {
		sizes = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2CalculateLayout(sizes, &item.X, nat_X)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// calculate layout for item.Y
	currentPosition = len(sizes)
	if len(item.Y) != 0 {
		sizes = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2CalculateLayout(sizes, &item.Y, nat_Y)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *PairTupleTupleInt2TupleTupleInt2) InternalWriteTL2(w []byte, sizes []int, nat_X uint32, nat_Y uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.X
	if len(item.X) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 1)
			w, sizes = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2InternalWriteTL2(w, sizes, &item.X, nat_X)
		} else {
			sizes = sizes[1:]
		}
	}
	// write item.Y
	if len(item.Y) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 2)
			w, sizes = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2InternalWriteTL2(w, sizes, &item.Y, nat_Y)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *PairTupleTupleInt2TupleTupleInt2) ReadTL2(r []byte, nat_X uint32, nat_Y uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.X
		if block&(1<<1) != 0 {
			if r, err = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2ReadTL2(r, &item.X, nat_X); err != nil {
				return r, err
			}
		} else {
			item.X = item.X[:0]
		}

		// read item.Y
		if block&(1<<2) != 0 {
			if r, err = tlBuiltinTupleTupleInt2.BuiltinTupleTupleInt2ReadTL2(r, &item.Y, nat_Y); err != nil {
				return r, err
			}
		} else {
			item.Y = item.Y[:0]
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}
