// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTestInplaceStructArgs

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tlcases/tlCasesInplace1Int"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTestInplaceStructArgs struct {
	A1  uint32
	A2  uint32
	A3  uint32
	Arg tlCasesInplace1Int.CasesInplace1Int
}

func (CasesTestInplaceStructArgs) TLName() string { return "cases.testInplaceStructArgs" }
func (CasesTestInplaceStructArgs) TLTag() uint32  { return 0xa9e4441e }

func (item *CasesTestInplaceStructArgs) Reset() {
	item.A1 = 0
	item.A2 = 0
	item.A3 = 0
	item.Arg.Reset()
}

func (item *CasesTestInplaceStructArgs) FillRandom(rg *basictl.RandGenerator) {
	item.Arg.FillRandom(rg, item.A1, item.A2, item.A3)
}

func (item *CasesTestInplaceStructArgs) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.A1); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.A2); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.A3); err != nil {
		return w, err
	}
	return item.Arg.Read(w, item.A1, item.A2, item.A3)
}

// This method is general version of Write, use it instead!
func (item *CasesTestInplaceStructArgs) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *CasesTestInplaceStructArgs) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.A1)
	w = basictl.NatWrite(w, item.A2)
	w = basictl.NatWrite(w, item.A3)
	if w, err = item.Arg.Write(w, item.A1, item.A2, item.A3); err != nil {
		return w, err
	}
	return w, nil
}

func (item *CasesTestInplaceStructArgs) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa9e4441e); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *CasesTestInplaceStructArgs) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *CasesTestInplaceStructArgs) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xa9e4441e)
	return item.Write(w)
}

func (item CasesTestInplaceStructArgs) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *CasesTestInplaceStructArgs) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propA1Presented bool
	var propA2Presented bool
	var propA3Presented bool
	var rawArg []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a1":
				if propA1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testInplaceStructArgs", "a1")
				}
				if err := internal.Json2ReadUint32(in, &item.A1); err != nil {
					return err
				}
				propA1Presented = true
			case "a2":
				if propA2Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testInplaceStructArgs", "a2")
				}
				if err := internal.Json2ReadUint32(in, &item.A2); err != nil {
					return err
				}
				propA2Presented = true
			case "a3":
				if propA3Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testInplaceStructArgs", "a3")
				}
				if err := internal.Json2ReadUint32(in, &item.A3); err != nil {
					return err
				}
				propA3Presented = true
			case "arg":
				if rawArg != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testInplaceStructArgs", "arg")
				}
				rawArg = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.testInplaceStructArgs", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propA1Presented {
		item.A1 = 0
	}
	if !propA2Presented {
		item.A2 = 0
	}
	if !propA3Presented {
		item.A3 = 0
	}
	var inArgPointer *basictl.JsonLexer
	inArg := basictl.JsonLexer{Data: rawArg}
	if rawArg != nil {
		inArgPointer = &inArg
	}
	if err := item.Arg.ReadJSON(legacyTypeNames, inArgPointer, item.A1, item.A2, item.A3); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTestInplaceStructArgs) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *CasesTestInplaceStructArgs) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *CasesTestInplaceStructArgs) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexA1 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a1":`...)
	w = basictl.JSONWriteUint32(w, item.A1)
	if (item.A1 != 0) == false {
		w = w[:backupIndexA1]
	}
	backupIndexA2 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a2":`...)
	w = basictl.JSONWriteUint32(w, item.A2)
	if (item.A2 != 0) == false {
		w = w[:backupIndexA2]
	}
	backupIndexA3 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a3":`...)
	w = basictl.JSONWriteUint32(w, item.A3)
	if (item.A3 != 0) == false {
		w = w[:backupIndexA3]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"arg":`...)
	if w, err = item.Arg.WriteJSONOpt(newTypeNames, short, w, item.A1, item.A2, item.A3); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *CasesTestInplaceStructArgs) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *CasesTestInplaceStructArgs) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases.testInplaceStructArgs", err.Error())
	}
	return nil
}
