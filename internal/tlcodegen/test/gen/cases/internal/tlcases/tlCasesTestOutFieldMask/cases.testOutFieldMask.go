// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTestOutFieldMask

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlBuiltinTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTestOutFieldMask struct {
	F1 uint32 // Conditional: nat_f.0
	// F2 (TrueType) // Conditional: nat_f.3
	F3 []int32
}

func (CasesTestOutFieldMask) TLName() string { return "cases.testOutFieldMask" }
func (CasesTestOutFieldMask) TLTag() uint32  { return 0xbd6b4b3c }

func (item *CasesTestOutFieldMask) SetF1(v uint32, nat_f *uint32) {
	item.F1 = v
	if nat_f != nil {
		*nat_f |= 1 << 0
	}
}
func (item *CasesTestOutFieldMask) ClearF1(nat_f *uint32) {
	item.F1 = 0
	if nat_f != nil {
		*nat_f &^= 1 << 0
	}
}
func (item *CasesTestOutFieldMask) IsSetF1(nat_f uint32) bool { return nat_f&(1<<0) != 0 }

func (item *CasesTestOutFieldMask) SetF2(v bool, nat_f *uint32) {
	if nat_f != nil {
		if v {
			*nat_f |= 1 << 3
		} else {
			*nat_f &^= 1 << 3
		}
	}
}
func (item *CasesTestOutFieldMask) IsSetF2(nat_f uint32) bool { return nat_f&(1<<3) != 0 }

func (item *CasesTestOutFieldMask) Reset() {
	item.F1 = 0
	item.F3 = item.F3[:0]
}

func (item *CasesTestOutFieldMask) FillRandom(rg *basictl.RandGenerator, nat_f uint32) {
	if nat_f&(1<<0) != 0 {
		item.F1 = basictl.RandomUint(rg)
	} else {
		item.F1 = 0
	}
	tlBuiltinTupleInt.BuiltinTupleIntFillRandom(rg, &item.F3, nat_f)
}

func (item *CasesTestOutFieldMask) Read(w []byte, nat_f uint32) (_ []byte, err error) {
	if nat_f&(1<<0) != 0 {
		if w, err = basictl.NatRead(w, &item.F1); err != nil {
			return w, err
		}
	} else {
		item.F1 = 0
	}
	return tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.F3, nat_f)
}

func (item *CasesTestOutFieldMask) WriteGeneral(w []byte, nat_f uint32) (_ []byte, err error) {
	return item.Write(w, nat_f)
}

func (item *CasesTestOutFieldMask) Write(w []byte, nat_f uint32) (_ []byte, err error) {
	if nat_f&(1<<0) != 0 {
		w = basictl.NatWrite(w, item.F1)
	}
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.F3, nat_f); err != nil {
		return w, err
	}
	return w, nil
}

func (item *CasesTestOutFieldMask) ReadBoxed(w []byte, nat_f uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xbd6b4b3c); err != nil {
		return w, err
	}
	return item.Read(w, nat_f)
}

func (item *CasesTestOutFieldMask) WriteBoxedGeneral(w []byte, nat_f uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_f)
}

func (item *CasesTestOutFieldMask) WriteBoxed(w []byte, nat_f uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xbd6b4b3c)
	return item.Write(w, nat_f)
}

func (item *CasesTestOutFieldMask) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_f uint32) error {
	var propF1Presented bool
	var rawF3 []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "f1":
				if propF1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testOutFieldMask", "f1")
				}
				if nat_f&(1<<0) == 0 {
					return internal.ErrorInvalidJSON("cases.testOutFieldMask", "field 'f1' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := internal.Json2ReadUint32(in, &item.F1); err != nil {
					return err
				}
				propF1Presented = true
			case "f2":
				return internal.ErrorInvalidJSON("cases.testOutFieldMask", "implicit true field 'f2' cannot be defined, set fieldmask instead")
			case "f3":
				if rawF3 != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testOutFieldMask", "f3")
				}
				rawF3 = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.testOutFieldMask", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propF1Presented {
		item.F1 = 0
	}
	var inF3Pointer *basictl.JsonLexer
	inF3 := basictl.JsonLexer{Data: rawF3}
	if rawF3 != nil {
		inF3Pointer = &inF3
	}
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, inF3Pointer, &item.F3, nat_f); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTestOutFieldMask) WriteJSONGeneral(w []byte, nat_f uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_f)
}

func (item *CasesTestOutFieldMask) WriteJSON(w []byte, nat_f uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_f)
}
func (item *CasesTestOutFieldMask) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_f uint32) (_ []byte, err error) {
	w = append(w, '{')
	if nat_f&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f1":`...)
		w = basictl.JSONWriteUint32(w, item.F1)
	}
	backupIndexF3 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f3":`...)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.F3, nat_f); err != nil {
		return w, err
	}
	if (len(item.F3) != 0) == false {
		w = w[:backupIndexF3]
	}
	return append(w, '}'), nil
}

func (item *CasesTestOutFieldMask) CalculateLayout(sizes []int, nat_f uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.F1
	if nat_f&(1<<0) != 0 {
		if item.F1 != 0 {

			lastUsedByte = 1
			currentSize += 4
		}
	}

	// calculate layout for item.F3
	currentPosition := len(sizes)
	if len(item.F3) != 0 {
		sizes = tlBuiltinTupleInt.BuiltinTupleIntCalculateLayout(sizes, &item.F3, nat_f)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CasesTestOutFieldMask) InternalWriteTL2(w []byte, sizes []int, nat_f uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.F1
	if nat_f&(1<<0) != 0 {
		if item.F1 != 0 {
			serializedSize += 4
			if 4 != 0 {
				currentBlock |= (1 << 1)
				w = basictl.NatWrite(w, item.F1)
			}
		}
	}
	// write item.F3
	if len(item.F3) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 3)
			w, sizes = tlBuiltinTupleInt.BuiltinTupleIntInternalWriteTL2(w, sizes, &item.F3, nat_f)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CasesTestOutFieldMask) ReadTL2(r []byte, nat_f uint32) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.F1
		if block&(1<<1) != 0 {
			if nat_f&(1<<0) != 0 {
				if r, err = basictl.NatRead(r, &item.F1); err != nil {
					return r, err
				}
			} else {
				return r, basictl.TL2Error("field mask contradiction: field item." + "F1" + "is presented but depending bit is absent")
			}
		} else {
			item.F1 = 0
		}

		// read item.F3
		if block&(1<<3) != 0 {
			if r, err = tlBuiltinTupleInt.BuiltinTupleIntReadTL2(r, &item.F3, nat_f); err != nil {
				return r, err
			}
		} else {
			item.F3 = item.F3[:0]
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}
