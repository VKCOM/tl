// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesReplace7plusplus

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlBuiltinTupleTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesReplace7plusplus struct {
	N uint32
	M uint32
	A [][]int32 // Conditional: item.N.0
}

func (CasesReplace7plusplus) TLName() string { return "cases.replace7plusplus" }
func (CasesReplace7plusplus) TLTag() uint32  { return 0xabc39b68 }

func (item *CasesReplace7plusplus) SetA(v [][]int32) {
	item.A = v
	item.N |= 1 << 0
}
func (item *CasesReplace7plusplus) ClearA() {
	item.A = item.A[:0]
	item.N &^= 1 << 0
}
func (item *CasesReplace7plusplus) IsSetA() bool { return item.N&(1<<0) != 0 }

func (item *CasesReplace7plusplus) Reset() {
	item.N = 0
	item.M = 0
	item.A = item.A[:0]
}

func (item *CasesReplace7plusplus) FillRandom(rg *basictl.RandGenerator) {
	var maskN uint32
	maskN = basictl.RandomUint(rg)
	maskN = rg.LimitValue(maskN)
	item.N = 0
	if maskN&(1<<0) != 0 {
		item.N |= (1 << 0)
	}
	item.M = basictl.RandomUint(rg)
	item.M = rg.LimitValue(item.M)
	if item.N&(1<<0) != 0 {
		tlBuiltinTupleTupleInt.BuiltinTupleTupleIntFillRandom(rg, &item.A, item.N, item.M)
	} else {
		item.A = item.A[:0]
	}
}

func (item *CasesReplace7plusplus) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.N); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.M); err != nil {
		return w, err
	}
	if item.N&(1<<0) != 0 {
		if w, err = tlBuiltinTupleTupleInt.BuiltinTupleTupleIntRead(w, &item.A, item.N, item.M); err != nil {
			return w, err
		}
	} else {
		item.A = item.A[:0]
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *CasesReplace7plusplus) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *CasesReplace7plusplus) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.N)
	w = basictl.NatWrite(w, item.M)
	if item.N&(1<<0) != 0 {
		if w, err = tlBuiltinTupleTupleInt.BuiltinTupleTupleIntWrite(w, item.A, item.N, item.M); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *CasesReplace7plusplus) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xabc39b68); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *CasesReplace7plusplus) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *CasesReplace7plusplus) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xabc39b68)
	return item.Write(w)
}

func (item CasesReplace7plusplus) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *CasesReplace7plusplus) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNPresented bool
	var propMPresented bool
	var rawA []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "N":
				if propNPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.replace7plusplus", "N")
				}
				if err := internal.Json2ReadUint32(in, &item.N); err != nil {
					return err
				}
				propNPresented = true
			case "M":
				if propMPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.replace7plusplus", "M")
				}
				if err := internal.Json2ReadUint32(in, &item.M); err != nil {
					return err
				}
				propMPresented = true
			case "A":
				if rawA != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.replace7plusplus", "A")
				}
				rawA = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.replace7plusplus", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNPresented {
		item.N = 0
	}
	if !propMPresented {
		item.M = 0
	}
	if rawA != nil {
		item.N |= 1 << 0
	}
	if item.N&(1<<0) == 0 {
		item.A = item.A[:0]
	} else {
		var inAPointer *basictl.JsonLexer
		inA := basictl.JsonLexer{Data: rawA}
		if rawA != nil {
			inAPointer = &inA
		}
		if err := tlBuiltinTupleTupleInt.BuiltinTupleTupleIntReadJSON(legacyTypeNames, inAPointer, &item.A, item.N, item.M); err != nil {
			return err
		}

	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesReplace7plusplus) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *CasesReplace7plusplus) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *CasesReplace7plusplus) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexN := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"N":`...)
	w = basictl.JSONWriteUint32(w, item.N)
	if (item.N != 0) == false {
		w = w[:backupIndexN]
	}
	backupIndexM := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"M":`...)
	w = basictl.JSONWriteUint32(w, item.M)
	if (item.M != 0) == false {
		w = w[:backupIndexM]
	}
	if item.N&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"A":`...)
		if w, err = tlBuiltinTupleTupleInt.BuiltinTupleTupleIntWriteJSONOpt(newTypeNames, short, w, item.A, item.N, item.M); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *CasesReplace7plusplus) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *CasesReplace7plusplus) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases.replace7plusplus", err.Error())
	}
	return nil
}

func (item *CasesReplace7plusplus) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0
	currentPosition := len(sizes)

	// calculate layout for item.N
	if item.N != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.M
	if item.M != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.A
	currentPosition = len(sizes)
	if item.N&(1<<0) != 0 {
		if len(item.A) != 0 {
			sizes = tlBuiltinTupleTupleInt.BuiltinTupleTupleIntCalculateLayout(sizes, &item.A, item.N, item.M)
			if sizes[currentPosition] != 0 {
				lastUsedByte = 1
				currentSize += sizes[currentPosition]
				currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
			} else {
				sizes = sizes[:currentPosition+1]
			}
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CasesReplace7plusplus) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.N
	if item.N != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.N)
		}
	}
	// write item.M
	if item.M != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.NatWrite(w, item.M)
		}
	}
	// write item.A
	if item.N&(1<<0) != 0 {
		if len(item.A) != 0 {
			serializedSize += sizes[0]
			if sizes[0] != 0 {
				serializedSize += basictl.TL2CalculateSize(sizes[0])
				currentBlock |= (1 << 3)
				w, sizes = tlBuiltinTupleTupleInt.BuiltinTupleTupleIntInternalWriteTL2(w, sizes, &item.A, item.N, item.M)
			} else {
				sizes = sizes[1:]
			}
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CasesReplace7plusplus) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[0:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[0:0]
}

func (item *CasesReplace7plusplus) ReadTL2(r []byte) (_ []byte, err error) {
	saveR := r
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	shift := currentSize + basictl.TL2CalculateSize(currentSize)

	if currentSize == 0 {
		item.Reset()
	} else {
		var block byte
		if r, err = basictl.ByteReadTL2(r, &block); err != nil {
			return r, err
		}
		// read No of constructor
		if block&1 != 0 {
			var _skip int
			if r, err = basictl.TL2ReadSize(r, &_skip); err != nil {
				return r, err
			}
		}

		// read item.N
		if block&(1<<1) != 0 {
			if r, err = basictl.NatRead(r, &item.N); err != nil {
				return r, err
			}
		} else {
			item.N = 0
		}

		// read item.M
		if block&(1<<2) != 0 {
			if r, err = basictl.NatRead(r, &item.M); err != nil {
				return r, err
			}
		} else {
			item.M = 0
		}

		// read item.A
		if block&(1<<3) != 0 {
			if item.N&(1<<0) != 0 {
				if r, err = tlBuiltinTupleTupleInt.BuiltinTupleTupleIntReadTL2(r, &item.A, item.N, item.M); err != nil {
					return r, err
				}
			} else {
				return r, basictl.TL2Error("field mask contradiction: field item." + "A" + "is presented but depending bit is absent")
			}
		} else {
			item.A = item.A[:0]
		}
	}

	if len(saveR) < len(r)+shift {
		r = saveR[shift:]
	}
	return r, nil
}
