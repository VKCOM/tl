// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTestEnum

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

var _CasesTestEnum = [3]internal.UnionElement{
	{TLTag: 0x6c6c55ac, TLName: "cases.testEnum1", TLString: "cases.testEnum1#6c6c55ac"},
	{TLTag: 0x86ea88ce, TLName: "cases.testEnum2", TLString: "cases.testEnum2#86ea88ce"},
	{TLTag: 0x69b83e2f, TLName: "cases.testEnum3", TLString: "cases.testEnum3#69b83e2f"},
}

func CasesTestEnum__MakeEnum(i int) CasesTestEnum { return CasesTestEnum{index: i} }

type CasesTestEnum struct {
	index int
}

func (item CasesTestEnum) TLName() string { return _CasesTestEnum[item.index].TLName }
func (item CasesTestEnum) TLTag() uint32  { return _CasesTestEnum[item.index].TLTag }

func (item *CasesTestEnum) Reset() { item.index = 0 }
func (item *CasesTestEnum) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 3
	switch index {
	case 0:
		item.index = 0
	case 1:
		item.index = 1
	case 2:
		item.index = 2
	default:
	}
}

func (item *CasesTestEnum) Is1() bool { return item.index == 0 }
func (item *CasesTestEnum) Set1()     { item.index = 0 }

func (item *CasesTestEnum) Is2() bool { return item.index == 1 }
func (item *CasesTestEnum) Set2()     { item.index = 1 }

func (item *CasesTestEnum) Is3() bool { return item.index == 2 }
func (item *CasesTestEnum) Set3()     { item.index = 2 }

func (item *CasesTestEnum) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x6c6c55ac:
		item.index = 0
		return w, nil
	case 0x86ea88ce:
		item.index = 1
		return w, nil
	case 0x69b83e2f:
		item.index = 2
		return w, nil
	default:
		return w, internal.ErrorInvalidUnionTag("cases.TestEnum", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *CasesTestEnum) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item CasesTestEnum) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _CasesTestEnum[item.index].TLTag)
	return w
}

func (item *CasesTestEnum) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_jtype := in.UnsafeString()
	if !in.Ok() {
		return internal.ErrorInvalidJSON("cases.TestEnum", "expected string")
	}
	switch _jtype {
	case "cases.testEnum1#6c6c55ac", "cases.testEnum1", "#6c6c55ac":
		if !legacyTypeNames && _jtype == "cases.testEnum1#6c6c55ac" {
			return internal.ErrorInvalidUnionLegacyTagJSON("cases.TestEnum", "cases.testEnum1#6c6c55ac")
		}
		item.index = 0
		return nil
	case "cases.testEnum2#86ea88ce", "cases.testEnum2", "#86ea88ce":
		if !legacyTypeNames && _jtype == "cases.testEnum2#86ea88ce" {
			return internal.ErrorInvalidUnionLegacyTagJSON("cases.TestEnum", "cases.testEnum2#86ea88ce")
		}
		item.index = 1
		return nil
	case "cases.testEnum3#69b83e2f", "cases.testEnum3", "#69b83e2f":
		if !legacyTypeNames && _jtype == "cases.testEnum3#69b83e2f" {
			return internal.ErrorInvalidUnionLegacyTagJSON("cases.TestEnum", "cases.testEnum3#69b83e2f")
		}
		item.index = 2
		return nil
	default:
		return internal.ErrorInvalidEnumTagJSON("cases.TestEnum", _jtype)
	}
}

// This method is general version of WriteJSON, use it instead!
func (item CasesTestEnum) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item CasesTestEnum) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item CasesTestEnum) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '"')
	if newTypeNames {
		w = append(w, _CasesTestEnum[item.index].TLName...)
	} else {
		w = append(w, _CasesTestEnum[item.index].TLString...)
	}
	return append(w, '"')
}

func (item CasesTestEnum) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CasesTestEnum) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CasesTestEnum) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases.TestEnum", err.Error())
	}
	return nil
}
