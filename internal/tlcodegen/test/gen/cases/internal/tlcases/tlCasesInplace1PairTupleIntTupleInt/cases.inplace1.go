// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesInplace1PairTupleIntTupleInt

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tlcases/tlCasesInplace2PairTupleIntTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesInplace1PairTupleIntTupleInt struct {
	Value tlCasesInplace2PairTupleIntTupleInt.CasesInplace2PairTupleIntTupleInt
}

func (CasesInplace1PairTupleIntTupleInt) TLName() string { return "cases.inplace1" }
func (CasesInplace1PairTupleIntTupleInt) TLTag() uint32  { return 0x5533e8e9 }

func (item *CasesInplace1PairTupleIntTupleInt) Reset() {
	item.Value.Reset()
}

func (item *CasesInplace1PairTupleIntTupleInt) FillRandom(rg *basictl.RandGenerator, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) {
	item.Value.FillRandom(rg, nat_a2, nat_a3, nat_a1, nat_XXn, nat_XYn)
}

func (item *CasesInplace1PairTupleIntTupleInt) Read(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	return item.Value.Read(w, nat_a2, nat_a3, nat_a1, nat_XXn, nat_XYn)
}

func (item *CasesInplace1PairTupleIntTupleInt) WriteGeneral(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	return item.Write(w, nat_a1, nat_a2, nat_a3, nat_XXn, nat_XYn)
}

func (item *CasesInplace1PairTupleIntTupleInt) Write(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	if w, err = item.Value.Write(w, nat_a2, nat_a3, nat_a1, nat_XXn, nat_XYn); err != nil {
		return w, err
	}
	return w, nil
}

func (item *CasesInplace1PairTupleIntTupleInt) ReadBoxed(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5533e8e9); err != nil {
		return w, err
	}
	return item.Read(w, nat_a1, nat_a2, nat_a3, nat_XXn, nat_XYn)
}

func (item *CasesInplace1PairTupleIntTupleInt) WriteBoxedGeneral(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_a1, nat_a2, nat_a3, nat_XXn, nat_XYn)
}

func (item *CasesInplace1PairTupleIntTupleInt) WriteBoxed(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x5533e8e9)
	return item.Write(w, nat_a1, nat_a2, nat_a3, nat_XXn, nat_XYn)
}

func (item *CasesInplace1PairTupleIntTupleInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) error {
	var rawValue []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "value":
				if rawValue != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.inplace1", "value")
				}
				rawValue = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.inplace1", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inValuePointer *basictl.JsonLexer
	inValue := basictl.JsonLexer{Data: rawValue}
	if rawValue != nil {
		inValuePointer = &inValue
	}
	if err := item.Value.ReadJSON(legacyTypeNames, inValuePointer, nat_a2, nat_a3, nat_a1, nat_XXn, nat_XYn); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesInplace1PairTupleIntTupleInt) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w, nat_a1, nat_a2, nat_a3, nat_XXn, nat_XYn)
}

func (item *CasesInplace1PairTupleIntTupleInt) WriteJSON(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w, nat_a1, nat_a2, nat_a3, nat_XXn, nat_XYn)
}
func (item *CasesInplace1PairTupleIntTupleInt) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	if w, err = item.Value.WriteJSONOpt(tctx, w, nat_a2, nat_a3, nat_a1, nat_XXn, nat_XYn); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *CasesInplace1PairTupleIntTupleInt) CalculateLayout(sizes []int, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.Value
	currentPosition := len(sizes)
	sizes = item.Value.CalculateLayout(sizes, nat_a2, nat_a3, nat_a1, nat_XXn, nat_XYn)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CasesInplace1PairTupleIntTupleInt) InternalWriteTL2(w []byte, sizes []int, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.Value
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = item.Value.InternalWriteTL2(w, sizes, nat_a2, nat_a3, nat_a1, nat_XXn, nat_XYn)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CasesInplace1PairTupleIntTupleInt) WriteTL2(w []byte, ctx *basictl.TL2WriteContext, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0], nat_a1, nat_a2, nat_a3, nat_XXn, nat_XYn)
	w, _ = item.InternalWriteTL2(w, sizes, nat_a1, nat_a2, nat_a3, nat_XXn, nat_XYn)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *CasesInplace1PairTupleIntTupleInt) InternalReadTL2(r []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.Value
	if block&(1<<1) != 0 {
		if currentR, err = item.Value.InternalReadTL2(currentR, nat_a2, nat_a3, nat_a1, nat_XXn, nat_XYn); err != nil {
			return currentR, err
		}
	} else {
		item.Value.Reset()
	}

	return r, nil
}

func (item *CasesInplace1PairTupleIntTupleInt) ReadTL2(r []byte, ctx *basictl.TL2ReadContext, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32, nat_XXn uint32, nat_XYn uint32) (_ []byte, err error) {
	return item.InternalReadTL2(r, nat_a1, nat_a2, nat_a3, nat_XXn, nat_XYn)
}
