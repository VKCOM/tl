// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesInplace1Int

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tlcases/tlCasesInplace2Int"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesInplace1Int struct {
	Value tlCasesInplace2Int.CasesInplace2Int
}

func (CasesInplace1Int) TLName() string { return "cases.inplace1" }
func (CasesInplace1Int) TLTag() uint32  { return 0x5533e8e9 }

func (item *CasesInplace1Int) Reset() {
	item.Value.Reset()
}

func (item *CasesInplace1Int) FillRandom(rg *basictl.RandGenerator, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) {
	item.Value.FillRandom(rg, nat_a2, nat_a3, nat_a1)
}

func (item *CasesInplace1Int) Read(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) (_ []byte, err error) {
	return item.Value.Read(w, nat_a2, nat_a3, nat_a1)
}

// This method is general version of Write, use it instead!
func (item *CasesInplace1Int) WriteGeneral(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) (_ []byte, err error) {
	return item.Write(w, nat_a1, nat_a2, nat_a3)
}

func (item *CasesInplace1Int) Write(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) (_ []byte, err error) {
	if w, err = item.Value.Write(w, nat_a2, nat_a3, nat_a1); err != nil {
		return w, err
	}
	return w, nil
}

func (item *CasesInplace1Int) ReadBoxed(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5533e8e9); err != nil {
		return w, err
	}
	return item.Read(w, nat_a1, nat_a2, nat_a3)
}

// This method is general version of WriteBoxed, use it instead!
func (item *CasesInplace1Int) WriteBoxedGeneral(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_a1, nat_a2, nat_a3)
}

func (item *CasesInplace1Int) WriteBoxed(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x5533e8e9)
	return item.Write(w, nat_a1, nat_a2, nat_a3)
}

func (item *CasesInplace1Int) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) error {
	var rawValue []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "value":
				if rawValue != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.inplace1", "value")
				}
				rawValue = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.inplace1", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inValuePointer *basictl.JsonLexer
	inValue := basictl.JsonLexer{Data: rawValue}
	if rawValue != nil {
		inValuePointer = &inValue
	}
	if err := item.Value.ReadJSON(legacyTypeNames, inValuePointer, nat_a2, nat_a3, nat_a1); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesInplace1Int) WriteJSONGeneral(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_a1, nat_a2, nat_a3)
}

func (item *CasesInplace1Int) WriteJSON(w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_a1, nat_a2, nat_a3)
}
func (item *CasesInplace1Int) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_a1 uint32, nat_a2 uint32, nat_a3 uint32) (_ []byte, err error) {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	if w, err = item.Value.WriteJSONOpt(newTypeNames, short, w, nat_a2, nat_a3, nat_a1); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}
