// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTestOutFieldMaskContainer

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tlcases/tlCasesTestOutFieldMask"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTestOutFieldMaskContainer struct {
	F     uint32
	Inner tlCasesTestOutFieldMask.CasesTestOutFieldMask
}

func (CasesTestOutFieldMaskContainer) TLName() string { return "cases.testOutFieldMaskContainer" }
func (CasesTestOutFieldMaskContainer) TLTag() uint32  { return 0x1850ffe4 }

func (item *CasesTestOutFieldMaskContainer) Reset() {
	item.F = 0
	item.Inner.Reset()
}

func (item *CasesTestOutFieldMaskContainer) FillRandom(rg *basictl.RandGenerator) {
	var maskF uint32
	maskF = basictl.RandomUint(rg)
	maskF = rg.LimitValue(maskF)
	item.F = 0
	if maskF&(1<<0) != 0 {
		item.F |= (1 << 0)
	}
	if maskF&(1<<1) != 0 {
		item.F |= (1 << 3)
	}
	item.Inner.FillRandom(rg, item.F)
}

func (item *CasesTestOutFieldMaskContainer) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.F); err != nil {
		return w, err
	}
	return item.Inner.Read(w, item.F)
}

// This method is general version of Write, use it instead!
func (item *CasesTestOutFieldMaskContainer) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *CasesTestOutFieldMaskContainer) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.F)
	if w, err = item.Inner.Write(w, item.F); err != nil {
		return w, err
	}
	return w, nil
}

func (item *CasesTestOutFieldMaskContainer) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1850ffe4); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *CasesTestOutFieldMaskContainer) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *CasesTestOutFieldMaskContainer) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x1850ffe4)
	return item.Write(w)
}

func (item *CasesTestOutFieldMaskContainer) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *CasesTestOutFieldMaskContainer) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFPresented bool
	var rawInner []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "f":
				if propFPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testOutFieldMaskContainer", "f")
				}
				if err := internal.Json2ReadUint32(in, &item.F); err != nil {
					return err
				}
				propFPresented = true
			case "inner":
				if rawInner != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testOutFieldMaskContainer", "inner")
				}
				rawInner = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.testOutFieldMaskContainer", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFPresented {
		item.F = 0
	}
	var inInnerPointer *basictl.JsonLexer
	inInner := basictl.JsonLexer{Data: rawInner}
	if rawInner != nil {
		inInnerPointer = &inInner
	}
	if err := item.Inner.ReadJSON(legacyTypeNames, inInnerPointer, item.F); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTestOutFieldMaskContainer) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *CasesTestOutFieldMaskContainer) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *CasesTestOutFieldMaskContainer) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexF := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f":`...)
	w = basictl.JSONWriteUint32(w, item.F)
	if (item.F != 0) == false {
		w = w[:backupIndexF]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"inner":`...)
	if w, err = item.Inner.WriteJSONOpt(newTypeNames, short, w, item.F); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *CasesTestOutFieldMaskContainer) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *CasesTestOutFieldMaskContainer) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases.testOutFieldMaskContainer", err.Error())
	}
	return nil
}
