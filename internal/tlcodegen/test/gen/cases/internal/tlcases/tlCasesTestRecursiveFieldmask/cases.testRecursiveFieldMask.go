// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTestRecursiveFieldmask

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTestRecursiveFieldmask struct {
	F0 uint32
	F1 uint32 // Conditional: item.F0.0
	F2 uint32 // Conditional: item.F1.1
	// T1 (TrueType) // Conditional: item.F0.0
	// T2 (TrueType) // Conditional: item.F1.1
	// T3 (TrueType) // Conditional: item.F2.2
}

func (CasesTestRecursiveFieldmask) TLName() string { return "cases.testRecursiveFieldMask" }
func (CasesTestRecursiveFieldmask) TLTag() uint32  { return 0xc58cf85e }

func (item *CasesTestRecursiveFieldmask) SetF1(v uint32) {
	item.F1 = v
	item.F0 |= 1 << 0
}
func (item *CasesTestRecursiveFieldmask) ClearF1() {
	item.F1 = 0
	item.F0 &^= 1 << 0
}
func (item *CasesTestRecursiveFieldmask) IsSetF1() bool { return item.F0&(1<<0) != 0 }

func (item *CasesTestRecursiveFieldmask) SetF2(v uint32) {
	item.F2 = v
	item.F1 |= 1 << 1
}
func (item *CasesTestRecursiveFieldmask) ClearF2() {
	item.F2 = 0
	item.F1 &^= 1 << 1
}
func (item *CasesTestRecursiveFieldmask) IsSetF2() bool { return item.F1&(1<<1) != 0 }

func (item *CasesTestRecursiveFieldmask) SetT1(v bool) {
	if v {
		item.F0 |= 1 << 0
	} else {
		item.F0 &^= 1 << 0
	}
}
func (item *CasesTestRecursiveFieldmask) IsSetT1() bool { return item.F0&(1<<0) != 0 }

func (item *CasesTestRecursiveFieldmask) SetT2(v bool) {
	if v {
		item.F1 |= 1 << 1
	} else {
		item.F1 &^= 1 << 1
	}
}
func (item *CasesTestRecursiveFieldmask) IsSetT2() bool { return item.F1&(1<<1) != 0 }

func (item *CasesTestRecursiveFieldmask) SetT3(v bool) {
	if v {
		item.F2 |= 1 << 2
	} else {
		item.F2 &^= 1 << 2
	}
}
func (item *CasesTestRecursiveFieldmask) IsSetT3() bool { return item.F2&(1<<2) != 0 }

func (item *CasesTestRecursiveFieldmask) Reset() {
	item.F0 = 0
	item.F1 = 0
	item.F2 = 0
}

func (item *CasesTestRecursiveFieldmask) FillRandom(rg *basictl.RandGenerator) {
	var maskF0 uint32
	maskF0 = basictl.RandomUint(rg)
	item.F0 = 0
	if maskF0&(1<<0) != 0 {
		item.F0 |= (1 << 0)
	}
	if item.F0&(1<<0) != 0 {
		var maskF1 uint32
		maskF1 = basictl.RandomUint(rg)
		item.F1 = 0
		if maskF1&(1<<0) != 0 {
			item.F1 |= (1 << 1)
		}
	} else {
		item.F1 = 0
	}
	if item.F1&(1<<1) != 0 {
		var maskF2 uint32
		maskF2 = basictl.RandomUint(rg)
		item.F2 = 0
		if maskF2&(1<<0) != 0 {
			item.F2 |= (1 << 2)
		}
	} else {
		item.F2 = 0
	}
}

func (item *CasesTestRecursiveFieldmask) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.F0); err != nil {
		return w, err
	}
	if item.F0&(1<<0) != 0 {
		if w, err = basictl.NatRead(w, &item.F1); err != nil {
			return w, err
		}
	} else {
		item.F1 = 0
	}
	if item.F1&(1<<1) != 0 {
		if w, err = basictl.NatRead(w, &item.F2); err != nil {
			return w, err
		}
	} else {
		item.F2 = 0
	}
	return w, nil
}

func (item *CasesTestRecursiveFieldmask) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *CasesTestRecursiveFieldmask) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.F0)
	if item.F0&(1<<0) != 0 {
		w = basictl.NatWrite(w, item.F1)
	}
	if item.F1&(1<<1) != 0 {
		w = basictl.NatWrite(w, item.F2)
	}
	return w
}

func (item *CasesTestRecursiveFieldmask) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc58cf85e); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *CasesTestRecursiveFieldmask) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *CasesTestRecursiveFieldmask) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xc58cf85e)
	return item.Write(w)
}

func (item CasesTestRecursiveFieldmask) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CasesTestRecursiveFieldmask) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propF0Presented bool
	var propF1Presented bool
	var propF2Presented bool
	var trueTypeT1Presented bool
	var trueTypeT1Value bool
	var trueTypeT2Presented bool
	var trueTypeT2Value bool
	var trueTypeT3Presented bool
	var trueTypeT3Value bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "f0":
				if propF0Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldMask", "f0")
				}
				if err := internal.Json2ReadUint32(in, &item.F0); err != nil {
					return err
				}
				propF0Presented = true
			case "f1":
				if propF1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldMask", "f1")
				}
				if err := internal.Json2ReadUint32(in, &item.F1); err != nil {
					return err
				}
				propF1Presented = true
			case "f2":
				if propF2Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldMask", "f2")
				}
				if err := internal.Json2ReadUint32(in, &item.F2); err != nil {
					return err
				}
				propF2Presented = true
			case "t1":
				if trueTypeT1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldMask", "t1")
				}
				if err := internal.Json2ReadBool(in, &trueTypeT1Value); err != nil {
					return err
				}
				trueTypeT1Presented = true
			case "t2":
				if trueTypeT2Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldMask", "t2")
				}
				if err := internal.Json2ReadBool(in, &trueTypeT2Value); err != nil {
					return err
				}
				trueTypeT2Presented = true
			case "t3":
				if trueTypeT3Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testRecursiveFieldMask", "t3")
				}
				if err := internal.Json2ReadBool(in, &trueTypeT3Value); err != nil {
					return err
				}
				trueTypeT3Presented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.testRecursiveFieldMask", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propF0Presented {
		item.F0 = 0
	}
	if !propF1Presented {
		item.F1 = 0
	}
	if !propF2Presented {
		item.F2 = 0
	}
	if propF1Presented {
		item.F0 |= 1 << 0
	}
	if propF2Presented {
		item.F1 |= 1 << 1
		item.F0 |= 1 << 0
	}
	if trueTypeT1Presented {
		if trueTypeT1Value {
			item.F0 |= 1 << 0
		}
	}
	if trueTypeT2Presented {
		if trueTypeT2Value {
			item.F1 |= 1 << 1
		}
		item.F0 |= 1 << 0
	}
	if trueTypeT3Presented {
		if trueTypeT3Value {
			item.F2 |= 1 << 2
		}
		item.F1 |= 1 << 1
		item.F0 |= 1 << 0
	}
	// tries to set bit to zero if it is 1
	if trueTypeT1Presented && !trueTypeT1Value && (item.F0&(1<<0) != 0) {
		return internal.ErrorInvalidJSON("cases.testRecursiveFieldMask", "fieldmask bit f0.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeT2Presented && !trueTypeT2Value && (item.F1&(1<<1) != 0) {
		return internal.ErrorInvalidJSON("cases.testRecursiveFieldMask", "fieldmask bit f1.1 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeT3Presented && !trueTypeT3Value && (item.F2&(1<<2) != 0) {
		return internal.ErrorInvalidJSON("cases.testRecursiveFieldMask", "fieldmask bit f2.2 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTestRecursiveFieldmask) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *CasesTestRecursiveFieldmask) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *CasesTestRecursiveFieldmask) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexF0 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f0":`...)
	w = basictl.JSONWriteUint32(w, item.F0)
	if (item.F0 != 0) == false {
		w = w[:backupIndexF0]
	}
	if item.F0&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f1":`...)
		w = basictl.JSONWriteUint32(w, item.F1)
	}
	if item.F1&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f2":`...)
		w = basictl.JSONWriteUint32(w, item.F2)
	}
	if item.F0&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"t1":true`...)
	}
	if item.F1&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"t2":true`...)
	}
	if item.F2&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"t3":true`...)
	}
	return append(w, '}')
}

func (item *CasesTestRecursiveFieldmask) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CasesTestRecursiveFieldmask) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases.testRecursiveFieldMask", err.Error())
	}
	return nil
}

func (item *CasesTestRecursiveFieldmask) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.F0
	if item.F0 != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.F1
	if item.F0&(1<<0) != 0 {
		if item.F1 != 0 {

			lastUsedByte = 1
			currentSize += 4
		}
	}

	// calculate layout for item.F2
	if item.F1&(1<<1) != 0 {
		if item.F2 != 0 {

			lastUsedByte = 1
			currentSize += 4
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CasesTestRecursiveFieldmask) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.F0
	if item.F0 != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.F0)
		}
	}
	// write item.F1
	if item.F0&(1<<0) != 0 {
		if item.F1 != 0 {
			serializedSize += 4
			if 4 != 0 {
				currentBlock |= (1 << 2)
				w = basictl.NatWrite(w, item.F1)
			}
		}
	}
	// write item.F2
	if item.F1&(1<<1) != 0 {
		if item.F2 != 0 {
			serializedSize += 4
			if 4 != 0 {
				currentBlock |= (1 << 3)
				w = basictl.NatWrite(w, item.F2)
			}
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CasesTestRecursiveFieldmask) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *CasesTestRecursiveFieldmask) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.F0
	if block&(1<<1) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.F0); err != nil {
			return currentR, err
		}
	} else {
		item.F0 = 0
	}

	// read item.F1
	if block&(1<<2) != 0 {
		if item.F0&(1<<0) != 0 {
			if currentR, err = basictl.NatRead(currentR, &item.F1); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "F1" + "is presented but depending bit is absent")
		}
	} else {
		item.F1 = 0
	}

	// read item.F2
	if block&(1<<3) != 0 {
		if item.F1&(1<<1) != 0 {
			if currentR, err = basictl.NatRead(currentR, &item.F2); err != nil {
				return currentR, err
			}
		} else {
			return currentR, basictl.TL2Error("field mask contradiction: field item." + "F2" + "is presented but depending bit is absent")
		}
	} else {
		item.F2 = 0
	}

	return r, nil
}

func (item *CasesTestRecursiveFieldmask) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
