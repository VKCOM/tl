// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTestLocalFieldmask

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTestLocalFieldmask struct {
	F1 uint32
	F2 uint32 // Conditional: item.F1.0
	// F3 (TrueType) // Conditional: item.F2.1
	// F4 (TrueType) // Conditional: item.F2.1
}

func (CasesTestLocalFieldmask) TLName() string { return "cases.testLocalFieldmask" }
func (CasesTestLocalFieldmask) TLTag() uint32  { return 0xf68fd3f9 }

func (item *CasesTestLocalFieldmask) SetF2(v uint32) {
	item.F2 = v
	item.F1 |= 1 << 0
}
func (item *CasesTestLocalFieldmask) ClearF2() {
	item.F2 = 0
	item.F1 &^= 1 << 0
}
func (item *CasesTestLocalFieldmask) IsSetF2() bool { return item.F1&(1<<0) != 0 }

func (item *CasesTestLocalFieldmask) SetF3(v bool) {
	if v {
		item.F2 |= 1 << 1
	} else {
		item.F2 &^= 1 << 1
	}
}
func (item *CasesTestLocalFieldmask) IsSetF3() bool { return item.F2&(1<<1) != 0 }

func (item *CasesTestLocalFieldmask) SetF4(v bool) {
	if v {
		item.F2 |= 1 << 1
	} else {
		item.F2 &^= 1 << 1
	}
}
func (item *CasesTestLocalFieldmask) IsSetF4() bool { return item.F2&(1<<1) != 0 }

func (item *CasesTestLocalFieldmask) Reset() {
	item.F1 = 0
	item.F2 = 0
}

func (item *CasesTestLocalFieldmask) FillRandom(rg *basictl.RandGenerator) {
	var maskF1 uint32
	maskF1 = basictl.RandomUint(rg)
	item.F1 = 0
	if maskF1&(1<<0) != 0 {
		item.F1 |= (1 << 0)
	}
	if item.F1&(1<<0) != 0 {
		var maskF2 uint32
		maskF2 = basictl.RandomUint(rg)
		item.F2 = 0
		if maskF2&(1<<0) != 0 {
			item.F2 |= (1 << 1)
		}
	} else {
		item.F2 = 0
	}
}

func (item *CasesTestLocalFieldmask) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.F1); err != nil {
		return w, err
	}
	if item.F1&(1<<0) != 0 {
		if w, err = basictl.NatRead(w, &item.F2); err != nil {
			return w, err
		}
	} else {
		item.F2 = 0
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *CasesTestLocalFieldmask) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *CasesTestLocalFieldmask) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.F1)
	if item.F1&(1<<0) != 0 {
		w = basictl.NatWrite(w, item.F2)
	}
	return w
}

func (item *CasesTestLocalFieldmask) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xf68fd3f9); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *CasesTestLocalFieldmask) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *CasesTestLocalFieldmask) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xf68fd3f9)
	return item.Write(w)
}

func (item CasesTestLocalFieldmask) String() string {
	return string(item.WriteJSON(nil))
}

func (item *CasesTestLocalFieldmask) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propF1Presented bool
	var propF2Presented bool
	var trueTypeF3Presented bool
	var trueTypeF3Value bool
	var trueTypeF4Presented bool
	var trueTypeF4Value bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "f1":
				if propF1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testLocalFieldmask", "f1")
				}
				if err := internal.Json2ReadUint32(in, &item.F1); err != nil {
					return err
				}
				propF1Presented = true
			case "f2":
				if propF2Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testLocalFieldmask", "f2")
				}
				if err := internal.Json2ReadUint32(in, &item.F2); err != nil {
					return err
				}
				propF2Presented = true
			case "f3":
				if trueTypeF3Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testLocalFieldmask", "f3")
				}
				if err := internal.Json2ReadBool(in, &trueTypeF3Value); err != nil {
					return err
				}
				trueTypeF3Presented = true
			case "f4":
				if trueTypeF4Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testLocalFieldmask", "f4")
				}
				if err := internal.Json2ReadBool(in, &trueTypeF4Value); err != nil {
					return err
				}
				trueTypeF4Presented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.testLocalFieldmask", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propF1Presented {
		item.F1 = 0
	}
	if !propF2Presented {
		item.F2 = 0
	}
	if propF2Presented {
		item.F1 |= 1 << 0
	}
	if trueTypeF3Presented {
		if trueTypeF3Value {
			item.F2 |= 1 << 1
		}
		item.F1 |= 1 << 0
	}
	if trueTypeF4Presented {
		if trueTypeF4Value {
			item.F2 |= 1 << 1
		}
		item.F1 |= 1 << 0
	}
	// tries to set bit to zero if it is 1
	if trueTypeF3Presented && !trueTypeF3Value && (item.F2&(1<<1) != 0) {
		return internal.ErrorInvalidJSON("cases.testLocalFieldmask", "fieldmask bit f2.1 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeF4Presented && !trueTypeF4Value && (item.F2&(1<<1) != 0) {
		return internal.ErrorInvalidJSON("cases.testLocalFieldmask", "fieldmask bit f2.1 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTestLocalFieldmask) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *CasesTestLocalFieldmask) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *CasesTestLocalFieldmask) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexF1 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"f1":`...)
	w = basictl.JSONWriteUint32(w, item.F1)
	if (item.F1 != 0) == false {
		w = w[:backupIndexF1]
	}
	if item.F1&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f2":`...)
		w = basictl.JSONWriteUint32(w, item.F2)
	}
	if item.F2&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f3":true`...)
	}
	if item.F2&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f4":true`...)
	}
	return append(w, '}')
}

func (item *CasesTestLocalFieldmask) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *CasesTestLocalFieldmask) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases.testLocalFieldmask", err.Error())
	}
	return nil
}
