// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTestInplaceStructArgs2

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tlcases/tlCasesInplace1PairTupleIntTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTestInplaceStructArgs2 struct {
	A1  uint32
	A2  uint32
	A3  uint32
	Arg tlCasesInplace1PairTupleIntTupleInt.CasesInplace1PairTupleIntTupleInt
}

func (CasesTestInplaceStructArgs2) TLName() string { return "cases.testInplaceStructArgs2" }
func (CasesTestInplaceStructArgs2) TLTag() uint32  { return 0xaa9f2480 }

func (item *CasesTestInplaceStructArgs2) Reset() {
	item.A1 = 0
	item.A2 = 0
	item.A3 = 0
	item.Arg.Reset()
}

func (item *CasesTestInplaceStructArgs2) FillRandom(rg *basictl.RandGenerator) {
	item.A1 = basictl.RandomUint(rg)
	item.A1 = rg.LimitValue(item.A1)
	item.A2 = basictl.RandomUint(rg)
	item.A2 = rg.LimitValue(item.A2)
	item.A3 = basictl.RandomUint(rg)
	item.A3 = rg.LimitValue(item.A3)
	item.Arg.FillRandom(rg, item.A1, item.A2, item.A3, item.A3, item.A2)
}

func (item *CasesTestInplaceStructArgs2) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.A1); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.A2); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.A3); err != nil {
		return w, err
	}
	return item.Arg.Read(w, item.A1, item.A2, item.A3, item.A3, item.A2)
}

func (item *CasesTestInplaceStructArgs2) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *CasesTestInplaceStructArgs2) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.A1)
	w = basictl.NatWrite(w, item.A2)
	w = basictl.NatWrite(w, item.A3)
	if w, err = item.Arg.Write(w, item.A1, item.A2, item.A3, item.A3, item.A2); err != nil {
		return w, err
	}
	return w, nil
}

func (item *CasesTestInplaceStructArgs2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xaa9f2480); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *CasesTestInplaceStructArgs2) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *CasesTestInplaceStructArgs2) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xaa9f2480)
	return item.Write(w)
}

func (item CasesTestInplaceStructArgs2) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *CasesTestInplaceStructArgs2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propA1Presented bool
	var propA2Presented bool
	var propA3Presented bool
	var rawArg []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "a1":
				if propA1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testInplaceStructArgs2", "a1")
				}
				if err := internal.Json2ReadUint32(in, &item.A1); err != nil {
					return err
				}
				propA1Presented = true
			case "a2":
				if propA2Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testInplaceStructArgs2", "a2")
				}
				if err := internal.Json2ReadUint32(in, &item.A2); err != nil {
					return err
				}
				propA2Presented = true
			case "a3":
				if propA3Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testInplaceStructArgs2", "a3")
				}
				if err := internal.Json2ReadUint32(in, &item.A3); err != nil {
					return err
				}
				propA3Presented = true
			case "arg":
				if rawArg != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("cases.testInplaceStructArgs2", "arg")
				}
				rawArg = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("cases.testInplaceStructArgs2", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propA1Presented {
		item.A1 = 0
	}
	if !propA2Presented {
		item.A2 = 0
	}
	if !propA3Presented {
		item.A3 = 0
	}
	var inArgPointer *basictl.JsonLexer
	inArg := basictl.JsonLexer{Data: rawArg}
	if rawArg != nil {
		inArgPointer = &inArg
	}
	if err := item.Arg.ReadJSON(legacyTypeNames, inArgPointer, item.A1, item.A2, item.A3, item.A3, item.A2); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTestInplaceStructArgs2) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *CasesTestInplaceStructArgs2) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *CasesTestInplaceStructArgs2) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexA1 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a1":`...)
	w = basictl.JSONWriteUint32(w, item.A1)
	if (item.A1 != 0) == false {
		w = w[:backupIndexA1]
	}
	backupIndexA2 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a2":`...)
	w = basictl.JSONWriteUint32(w, item.A2)
	if (item.A2 != 0) == false {
		w = w[:backupIndexA2]
	}
	backupIndexA3 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"a3":`...)
	w = basictl.JSONWriteUint32(w, item.A3)
	if (item.A3 != 0) == false {
		w = w[:backupIndexA3]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"arg":`...)
	if w, err = item.Arg.WriteJSONOpt(newTypeNames, short, w, item.A1, item.A2, item.A3, item.A3, item.A2); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *CasesTestInplaceStructArgs2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *CasesTestInplaceStructArgs2) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("cases.testInplaceStructArgs2", err.Error())
	}
	return nil
}

func (item *CasesTestInplaceStructArgs2) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.A1
	if item.A1 != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.A2
	if item.A2 != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.A3
	if item.A3 != 0 {

		lastUsedByte = 1
		currentSize += 4
	}

	// calculate layout for item.Arg
	currentPosition := len(sizes)
	sizes = item.Arg.CalculateLayout(sizes, item.A1, item.A2, item.A3, item.A3, item.A2)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CasesTestInplaceStructArgs2) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.A1
	if item.A1 != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 1)
			w = basictl.NatWrite(w, item.A1)
		}
	}
	// write item.A2
	if item.A2 != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 2)
			w = basictl.NatWrite(w, item.A2)
		}
	}
	// write item.A3
	if item.A3 != 0 {
		serializedSize += 4
		if 4 != 0 {
			currentBlock |= (1 << 3)
			w = basictl.NatWrite(w, item.A3)
		}
	}
	// write item.Arg
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 4)
		w, sizes = item.Arg.InternalWriteTL2(w, sizes, item.A1, item.A2, item.A3, item.A3, item.A2)
	} else {
		sizes = sizes[1:]
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CasesTestInplaceStructArgs2) WriteTL2(w []byte, sizes []int) ([]byte, []int) {
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	return w, sizes[:0]
}

func (item *CasesTestInplaceStructArgs2) ReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var _skip int
		if currentR, err = basictl.TL2ReadSize(currentR, &_skip); err != nil {
			return currentR, err
		}
	}

	// read item.A1
	if block&(1<<1) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.A1); err != nil {
			return currentR, err
		}
	} else {
		item.A1 = 0
	}

	// read item.A2
	if block&(1<<2) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.A2); err != nil {
			return currentR, err
		}
	} else {
		item.A2 = 0
	}

	// read item.A3
	if block&(1<<3) != 0 {
		if currentR, err = basictl.NatRead(currentR, &item.A3); err != nil {
			return currentR, err
		}
	} else {
		item.A3 = 0
	}

	// read item.Arg
	if block&(1<<4) != 0 {
		if currentR, err = item.Arg.ReadTL2(currentR, item.A1, item.A2, item.A3, item.A3, item.A2); err != nil {
			return currentR, err
		}
	} else {
		item.Arg.Reset()
	}

	return r, nil
}
