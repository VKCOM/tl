// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlCasesTL2TestObjectWithMuiltiParams3

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlBuiltinTuple3Int"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlBuiltinTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type CasesTL2TestObjectWithMuiltiParams3 struct {
	F1 [3]int32 // Conditional: 3.0
	F2 []int32  // Conditional: nat_m.0
}

func (CasesTL2TestObjectWithMuiltiParams3) TLName() string {
	return "casesTL2.testObjectWithMuiltiParams"
}
func (CasesTL2TestObjectWithMuiltiParams3) TLTag() uint32 { return 0x76444f62 }

func (item *CasesTL2TestObjectWithMuiltiParams3) IsSetF1() bool { return 3&(1<<0) != 0 }

func (item *CasesTL2TestObjectWithMuiltiParams3) SetF2(v []int32, nat_m *uint32) {
	item.F2 = v
	if nat_m != nil {
		*nat_m |= 1 << 0
	}
}
func (item *CasesTL2TestObjectWithMuiltiParams3) ClearF2(nat_m *uint32) {
	item.F2 = item.F2[:0]
	if nat_m != nil {
		*nat_m &^= 1 << 0
	}
}
func (item *CasesTL2TestObjectWithMuiltiParams3) IsSetF2(nat_m uint32) bool { return nat_m&(1<<0) != 0 }

func (item *CasesTL2TestObjectWithMuiltiParams3) Reset() {
	tlBuiltinTuple3Int.BuiltinTuple3IntReset(&item.F1)
	item.F2 = item.F2[:0]
}

func (item *CasesTL2TestObjectWithMuiltiParams3) FillRandom(rg *basictl.RandGenerator, nat_m uint32) {
	if 3&(1<<0) != 0 {
		tlBuiltinTuple3Int.BuiltinTuple3IntFillRandom(rg, &item.F1)
	} else {
		tlBuiltinTuple3Int.BuiltinTuple3IntReset(&item.F1)
	}
	if nat_m&(1<<0) != 0 {
		tlBuiltinTupleInt.BuiltinTupleIntFillRandom(rg, &item.F2, nat_m)
	} else {
		item.F2 = item.F2[:0]
	}
}

func (item *CasesTL2TestObjectWithMuiltiParams3) Read(w []byte, nat_m uint32) (_ []byte, err error) {
	if 3&(1<<0) != 0 {
		if w, err = tlBuiltinTuple3Int.BuiltinTuple3IntRead(w, &item.F1); err != nil {
			return w, err
		}
	} else {
		tlBuiltinTuple3Int.BuiltinTuple3IntReset(&item.F1)
	}
	if nat_m&(1<<0) != 0 {
		if w, err = tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.F2, nat_m); err != nil {
			return w, err
		}
	} else {
		item.F2 = item.F2[:0]
	}
	return w, nil
}

func (item *CasesTL2TestObjectWithMuiltiParams3) WriteGeneral(w []byte, nat_m uint32) (_ []byte, err error) {
	return item.Write(w, nat_m)
}

func (item *CasesTL2TestObjectWithMuiltiParams3) Write(w []byte, nat_m uint32) (_ []byte, err error) {
	if 3&(1<<0) != 0 {
		w = tlBuiltinTuple3Int.BuiltinTuple3IntWrite(w, &item.F1)
	}
	if nat_m&(1<<0) != 0 {
		if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.F2, nat_m); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *CasesTL2TestObjectWithMuiltiParams3) ReadBoxed(w []byte, nat_m uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x76444f62); err != nil {
		return w, err
	}
	return item.Read(w, nat_m)
}

func (item *CasesTL2TestObjectWithMuiltiParams3) WriteBoxedGeneral(w []byte, nat_m uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_m)
}

func (item *CasesTL2TestObjectWithMuiltiParams3) WriteBoxed(w []byte, nat_m uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x76444f62)
	return item.Write(w, nat_m)
}

func (item *CasesTL2TestObjectWithMuiltiParams3) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, nat_m uint32) error {
	var propF1Presented bool
	var rawF2 []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "f1":
				if propF1Presented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testObjectWithMuiltiParams", "f1")
				}
				if 3&(1<<0) == 0 {
					return internal.ErrorInvalidJSON("casesTL2.testObjectWithMuiltiParams", "field 'f1' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := tlBuiltinTuple3Int.BuiltinTuple3IntReadJSONGeneral(tctx, in, &item.F1); err != nil {
					return err
				}
				propF1Presented = true
			case "f2":
				if rawF2 != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("casesTL2.testObjectWithMuiltiParams", "f2")
				}
				rawF2 = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("casesTL2.testObjectWithMuiltiParams", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propF1Presented {
		tlBuiltinTuple3Int.BuiltinTuple3IntReset(&item.F1)
	}
	if nat_m&(1<<0) == 0 {
		if rawF2 != nil {
			return internal.ErrorInvalidJSON("casesTL2.testObjectWithMuiltiParams", "field 'f2' is defined, while corresponding implicit fieldmask bit is 0")
		}
		item.F2 = item.F2[:0]
	} else {
		var inF2Pointer *basictl.JsonLexer
		inF2 := basictl.JsonLexer{Data: rawF2}
		if rawF2 != nil {
			inF2Pointer = &inF2
		}
		if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSONGeneral(tctx, inF2Pointer, &item.F2, nat_m); err != nil {
			return err
		}

	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *CasesTL2TestObjectWithMuiltiParams3) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte, nat_m uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w, nat_m)
}

func (item *CasesTL2TestObjectWithMuiltiParams3) WriteJSON(w []byte, nat_m uint32) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w, nat_m)
}
func (item *CasesTL2TestObjectWithMuiltiParams3) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_m uint32) (_ []byte, err error) {
	w = append(w, '{')
	if 3&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f1":`...)
		w = tlBuiltinTuple3Int.BuiltinTuple3IntWriteJSONOpt(tctx, w, &item.F1)
	}
	if nat_m&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"f2":`...)
		if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(tctx, w, item.F2, nat_m); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *CasesTL2TestObjectWithMuiltiParams3) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.F1
	currentPosition := len(sizes)
	sizes = tlBuiltinTuple3Int.BuiltinTuple3IntCalculateLayout(sizes, &item.F1)
	if sizes[currentPosition] != 0 {
		lastUsedByte = 1
		currentSize += sizes[currentPosition]
		currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
	} else {
		sizes = sizes[:currentPosition+1]
	}

	// calculate layout for item.F2
	currentPosition = len(sizes)
	if len(item.F2) != 0 {
		sizes = tlBuiltinTupleInt.BuiltinTupleIntCalculateLayout(sizes, &item.F2)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *CasesTL2TestObjectWithMuiltiParams3) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.F1
	serializedSize += sizes[0]
	if sizes[0] != 0 {
		serializedSize += basictl.TL2CalculateSize(sizes[0])
		currentBlock |= (1 << 1)
		w, sizes = tlBuiltinTuple3Int.BuiltinTuple3IntInternalWriteTL2(w, sizes, &item.F1)
	} else {
		sizes = sizes[1:]
	}
	// write item.F2
	if len(item.F2) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 2)
			w, sizes = tlBuiltinTupleInt.BuiltinTupleIntInternalWriteTL2(w, sizes, &item.F2)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *CasesTL2TestObjectWithMuiltiParams3) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *CasesTL2TestObjectWithMuiltiParams3) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}
	if len(r) < currentSize {
		return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	if currentSize == 0 {
		item.Reset()
		return r, nil
	}
	var block byte
	if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
		return currentR, err
	}
	// read No of constructor
	if block&1 != 0 {
		var index int
		if currentR, err = basictl.TL2ReadSize(currentR, &index); err != nil {
			return currentR, err
		}
		if index != 0 {
			// unknown cases for current type
			item.Reset()
			return r, nil
		}
	}

	// read item.F1
	if block&(1<<1) != 0 {
		if currentR, err = tlBuiltinTuple3Int.BuiltinTuple3IntInternalReadTL2(currentR, &item.F1); err != nil {
			return currentR, err
		}
	} else {
		tlBuiltinTuple3Int.BuiltinTuple3IntReset(&item.F1)
	}

	// read item.F2
	if block&(1<<2) != 0 {
		if currentR, err = tlBuiltinTupleInt.BuiltinTupleIntInternalReadTL2(currentR, &item.F2); err != nil {
			return currentR, err
		}
	} else {
		item.F2 = item.F2[:0]
	}

	return r, nil
}

func (item *CasesTL2TestObjectWithMuiltiParams3) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
