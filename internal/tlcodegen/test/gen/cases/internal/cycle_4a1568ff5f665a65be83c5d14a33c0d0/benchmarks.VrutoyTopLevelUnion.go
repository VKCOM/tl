// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package cycle_4a1568ff5f665a65be83c5d14a33c0d0

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tl/tlBuiltinVectorBenchmarksVruPosition"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/cases/internal/tlbenchmarks/tlBenchmarksVruPosition"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

var _BenchmarksVrutoyTopLevelUnion = [2]internal.UnionElement{
	{TLTag: 0xef556bee, TLName: "benchmarks.vrutoytopLevelUnionBig", TLString: "benchmarks.vrutoytopLevelUnionBig#ef556bee"},
	{TLTag: 0xce27c770, TLName: "benchmarks.vrutoytopLevelUnionEmpty", TLString: "benchmarks.vrutoytopLevelUnionEmpty#ce27c770"},
}

type BenchmarksVrutoyTopLevelUnion struct {
	valueBig BenchmarksVrutoytopLevelUnionBig
	index    int
}

func (item BenchmarksVrutoyTopLevelUnion) TLName() string {
	return _BenchmarksVrutoyTopLevelUnion[item.index].TLName
}
func (item BenchmarksVrutoyTopLevelUnion) TLTag() uint32 {
	return _BenchmarksVrutoyTopLevelUnion[item.index].TLTag
}

func (item *BenchmarksVrutoyTopLevelUnion) Reset() { item.ResetToBig() }
func (item *BenchmarksVrutoyTopLevelUnion) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 2
	switch index {
	case 0:
		item.index = 0
		item.valueBig.FillRandom(rg)
	case 1:
		item.index = 1
	default:
	}
}

func (item *BenchmarksVrutoyTopLevelUnion) IsBig() bool { return item.index == 0 }

func (item *BenchmarksVrutoyTopLevelUnion) AsBig() (*BenchmarksVrutoytopLevelUnionBig, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueBig, true
}
func (item *BenchmarksVrutoyTopLevelUnion) ResetToBig() *BenchmarksVrutoytopLevelUnionBig {
	item.index = 0
	item.valueBig.Reset()
	return &item.valueBig
}
func (item *BenchmarksVrutoyTopLevelUnion) SetBig(value BenchmarksVrutoytopLevelUnionBig) {
	item.index = 0
	item.valueBig = value
}

func (item *BenchmarksVrutoyTopLevelUnion) IsEmpty() bool { return item.index == 1 }

func (item *BenchmarksVrutoyTopLevelUnion) AsEmpty() (BenchmarksVrutoytopLevelUnionEmpty, bool) {
	var value BenchmarksVrutoytopLevelUnionEmpty
	return value, item.index == 1
}
func (item *BenchmarksVrutoyTopLevelUnion) ResetToEmpty() { item.index = 1 }
func (item *BenchmarksVrutoyTopLevelUnion) SetEmpty()     { item.index = 1 }

func (item *BenchmarksVrutoyTopLevelUnion) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0xef556bee:
		item.index = 0
		return item.valueBig.Read(w)
	case 0xce27c770:
		item.index = 1
		return w, nil
	default:
		return w, internal.ErrorInvalidUnionTag("benchmarks.VrutoyTopLevelUnion", tag)
	}
}

func (item *BenchmarksVrutoyTopLevelUnion) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BenchmarksVrutoyTopLevelUnion) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _BenchmarksVrutoyTopLevelUnion[item.index].TLTag)
	switch item.index {
	case 0:
		w = item.valueBig.Write(w)
	case 1:
		return w
	}
	return w
}

func (item *BenchmarksVrutoyTopLevelUnion) CalculateLayout(sizes []int) []int {
	switch item.index {
	case 0:
		sizes = item.valueBig.CalculateLayout(sizes)
	case 1:
		sizes = append(sizes, 1+basictl.TL2CalculateSize(item.index))
	}
	return sizes
}

func (item *BenchmarksVrutoyTopLevelUnion) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	switch item.index {
	case 0:
		w, sizes = item.valueBig.InternalWriteTL2(w, sizes)
	case 1:
		currentSize := sizes[0]
		sizes = sizes[1:]
		w = basictl.TL2WriteSize(w, currentSize)
		w = append(w, 1)
		w = basictl.TL2WriteSize(w, item.index)
	}
	return w, sizes
}

func (item *BenchmarksVrutoyTopLevelUnion) InternalReadTL2(r []byte) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	if currentSize == 0 {
		item.index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, item.index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			item.index = 0
		}
	}
	switch item.index {
	case 0:
		if currentR, err = item.valueBig.InternalReadTL2(currentR, block); err != nil {
			return currentR, err
		}
	case 1:
		break
	}
	return r, nil
}
func (item *BenchmarksVrutoyTopLevelUnion) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *BenchmarksVrutoyTopLevelUnion) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) ([]byte, error) {
	return item.InternalReadTL2(r)
}

func (item *BenchmarksVrutoyTopLevelUnion) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *BenchmarksVrutoyTopLevelUnion) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	_tag, _value, err := internal.Json2ReadUnion("benchmarks.VrutoyTopLevelUnion", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "benchmarks.vrutoytopLevelUnionBig#ef556bee", "benchmarks.vrutoytopLevelUnionBig", "#ef556bee":
		if tctx.IsTL2 && _tag != "benchmarks.vrutoytopLevelUnionBig" {
			return internal.ErrorInvalidUnionLegacyTagJSON("benchmarks.VrutoyTopLevelUnion", _tag)
		}
		if !tctx.LegacyTypeNames && _tag == "benchmarks.vrutoytopLevelUnionBig#ef556bee" {
			return internal.ErrorInvalidUnionLegacyTagJSON("benchmarks.VrutoyTopLevelUnion", "benchmarks.vrutoytopLevelUnionBig#ef556bee")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueBig.ReadJSONGeneral(tctx, in2Pointer); err != nil {
			return err
		}
	case "benchmarks.vrutoytopLevelUnionEmpty#ce27c770", "benchmarks.vrutoytopLevelUnionEmpty", "#ce27c770":
		if tctx.IsTL2 && _tag != "benchmarks.vrutoytopLevelUnionEmpty" {
			return internal.ErrorInvalidUnionLegacyTagJSON("benchmarks.VrutoyTopLevelUnion", _tag)
		}
		if !tctx.LegacyTypeNames && _tag == "benchmarks.vrutoytopLevelUnionEmpty#ce27c770" {
			return internal.ErrorInvalidUnionLegacyTagJSON("benchmarks.VrutoyTopLevelUnion", "benchmarks.vrutoytopLevelUnionEmpty#ce27c770")
		}
		item.index = 1
	default:
		return internal.ErrorInvalidUnionTagJSON("benchmarks.VrutoyTopLevelUnion", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BenchmarksVrutoyTopLevelUnion) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) ([]byte, error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *BenchmarksVrutoyTopLevelUnion) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *BenchmarksVrutoyTopLevelUnion) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	switch item.index {
	case 0:
		if tctx.IsTL2 {
			w = append(w, `{"type":"benchmarks.vrutoytopLevelUnionBig"`...)
		} else {
			if tctx.LegacyTypeNames {
				w = append(w, `{"type":"benchmarks.vrutoytopLevelUnionBig#ef556bee"`...)
			} else {
				w = append(w, `{"type":"benchmarks.vrutoytopLevelUnionBig"`...)
			}
		}
		w = append(w, `,"value":`...)
		w = item.valueBig.WriteJSONOpt(tctx, w)
		return append(w, '}')
	case 1:
		if tctx.IsTL2 {
			w = append(w, `{"type":"benchmarks.vrutoytopLevelUnionEmpty"`...)
		} else {
			if tctx.LegacyTypeNames {
				w = append(w, `{"type":"benchmarks.vrutoytopLevelUnionEmpty#ce27c770"`...)
			} else {
				w = append(w, `{"type":"benchmarks.vrutoytopLevelUnionEmpty"`...)
			}
		}
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item BenchmarksVrutoyTopLevelUnion) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BenchmarksVrutoyTopLevelUnion) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BenchmarksVrutoyTopLevelUnion) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("benchmarks.VrutoyTopLevelUnion", err.Error())
	}
	return nil
}

func (item BenchmarksVrutoytopLevelUnionBig) AsUnion() BenchmarksVrutoyTopLevelUnion {
	var ret BenchmarksVrutoyTopLevelUnion
	ret.SetBig(item)
	return ret
}

type BenchmarksVrutoytopLevelUnionBig struct {
	NextPositions []tlBenchmarksVruPosition.BenchmarksVruPosition
}

func (BenchmarksVrutoytopLevelUnionBig) TLName() string { return "benchmarks.vrutoytopLevelUnionBig" }
func (BenchmarksVrutoytopLevelUnionBig) TLTag() uint32  { return 0xef556bee }

func (item *BenchmarksVrutoytopLevelUnionBig) Reset() {
	item.NextPositions = item.NextPositions[:0]
}

func (item *BenchmarksVrutoytopLevelUnionBig) FillRandom(rg *basictl.RandGenerator) {
	tlBuiltinVectorBenchmarksVruPosition.BuiltinVectorBenchmarksVruPositionFillRandom(rg, &item.NextPositions)
}

func (item *BenchmarksVrutoytopLevelUnionBig) Read(w []byte) (_ []byte, err error) {
	return tlBuiltinVectorBenchmarksVruPosition.BuiltinVectorBenchmarksVruPositionRead(w, &item.NextPositions)
}

func (item *BenchmarksVrutoytopLevelUnionBig) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BenchmarksVrutoytopLevelUnionBig) Write(w []byte) []byte {
	w = tlBuiltinVectorBenchmarksVruPosition.BuiltinVectorBenchmarksVruPositionWrite(w, item.NextPositions)
	return w
}

func (item *BenchmarksVrutoytopLevelUnionBig) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xef556bee); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BenchmarksVrutoytopLevelUnionBig) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BenchmarksVrutoytopLevelUnionBig) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xef556bee)
	return item.Write(w)
}

func (item BenchmarksVrutoytopLevelUnionBig) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BenchmarksVrutoytopLevelUnionBig) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *BenchmarksVrutoytopLevelUnionBig) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propNextPositionsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "next_positions":
				if propNextPositionsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchmarks.vrutoytopLevelUnionBig", "next_positions")
				}
				if err := tlBuiltinVectorBenchmarksVruPosition.BuiltinVectorBenchmarksVruPositionReadJSONGeneral(tctx, in, &item.NextPositions); err != nil {
					return err
				}
				propNextPositionsPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("benchmarks.vrutoytopLevelUnionBig", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNextPositionsPresented {
		item.NextPositions = item.NextPositions[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BenchmarksVrutoytopLevelUnionBig) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *BenchmarksVrutoytopLevelUnionBig) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *BenchmarksVrutoytopLevelUnionBig) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexNextPositions := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"next_positions":`...)
	w = tlBuiltinVectorBenchmarksVruPosition.BuiltinVectorBenchmarksVruPositionWriteJSONOpt(tctx, w, item.NextPositions)
	if (len(item.NextPositions) != 0) == false {
		w = w[:backupIndexNextPositions]
	}
	return append(w, '}')
}

func (item *BenchmarksVrutoytopLevelUnionBig) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BenchmarksVrutoytopLevelUnionBig) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("benchmarks.vrutoytopLevelUnionBig", err.Error())
	}
	return nil
}

func (item *BenchmarksVrutoytopLevelUnionBig) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// calculate layout for item.NextPositions
	currentPosition := len(sizes)
	if len(item.NextPositions) != 0 {
		sizes = tlBuiltinVectorBenchmarksVruPosition.BuiltinVectorBenchmarksVruPositionCalculateLayout(sizes, &item.NextPositions)
		if sizes[currentPosition] != 0 {
			lastUsedByte = 1
			currentSize += sizes[currentPosition]
			currentSize += basictl.TL2CalculateSize(sizes[currentPosition])
		} else {
			sizes = sizes[:currentPosition+1]
		}
	}

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *BenchmarksVrutoytopLevelUnionBig) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1
	// write item.NextPositions
	if len(item.NextPositions) != 0 {
		serializedSize += sizes[0]
		if sizes[0] != 0 {
			serializedSize += basictl.TL2CalculateSize(sizes[0])
			currentBlock |= (1 << 1)
			w, sizes = tlBuiltinVectorBenchmarksVruPosition.BuiltinVectorBenchmarksVruPositionInternalWriteTL2(w, sizes, &item.NextPositions)
		} else {
			sizes = sizes[1:]
		}
	}
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *BenchmarksVrutoytopLevelUnionBig) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *BenchmarksVrutoytopLevelUnionBig) InternalReadTL2(r []byte, block byte) (_ []byte, err error) {
	currentR := r

	// read item.NextPositions
	if block&(1<<1) != 0 {
		if currentR, err = tlBuiltinVectorBenchmarksVruPosition.BuiltinVectorBenchmarksVruPositionInternalReadTL2(currentR, &item.NextPositions); err != nil {
			return currentR, err
		}
	} else {
		item.NextPositions = item.NextPositions[:0]
	}

	return r, nil
}

func (item *BenchmarksVrutoytopLevelUnionBig) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	var index int
	if currentSize == 0 {
		index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			index = 0
		}
	}
	if index != 0 {
		return r, basictl.TL2Error("unexpected constructor number %d, instead of %d", index, 0)
	}
	_, err = item.InternalReadTL2(currentR, block)
	return r, err
}

func (item BenchmarksVrutoytopLevelUnionEmpty) AsUnion() BenchmarksVrutoyTopLevelUnion {
	var ret BenchmarksVrutoyTopLevelUnion
	ret.SetEmpty()
	return ret
}

type BenchmarksVrutoytopLevelUnionEmpty struct {
}

func (BenchmarksVrutoytopLevelUnionEmpty) TLName() string {
	return "benchmarks.vrutoytopLevelUnionEmpty"
}
func (BenchmarksVrutoytopLevelUnionEmpty) TLTag() uint32 { return 0xce27c770 }

func (item *BenchmarksVrutoytopLevelUnionEmpty) Reset() {}

func (item *BenchmarksVrutoytopLevelUnionEmpty) FillRandom(rg *basictl.RandGenerator) {}

func (item *BenchmarksVrutoytopLevelUnionEmpty) Read(w []byte) (_ []byte, err error) { return w, nil }

func (item *BenchmarksVrutoytopLevelUnionEmpty) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) Write(w []byte) []byte {
	return w
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xce27c770); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xce27c770)
	return item.Write(w)
}

func (item BenchmarksVrutoytopLevelUnionEmpty) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return internal.ErrorInvalidJSON("benchmarks.vrutoytopLevelUnionEmpty", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BenchmarksVrutoytopLevelUnionEmpty) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *BenchmarksVrutoytopLevelUnionEmpty) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("benchmarks.vrutoytopLevelUnionEmpty", err.Error())
	}
	return nil
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) CalculateLayout(sizes []int) []int {
	sizePosition := len(sizes)
	sizes = append(sizes, 0)

	currentSize := 0
	lastUsedByte := 0

	// add constructor No for union type in case of non first option
	lastUsedByte = 1
	currentSize += basictl.TL2CalculateSize(1)

	// append byte for each section until last mentioned field
	if lastUsedByte != 0 {
		currentSize += lastUsedByte
	} else {
		// remove unused values
		sizes = sizes[:sizePosition+1]
	}
	sizes[sizePosition] = currentSize
	return sizes
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) InternalWriteTL2(w []byte, sizes []int) ([]byte, []int) {
	currentSize := sizes[0]
	sizes = sizes[1:]

	serializedSize := 0

	w = basictl.TL2WriteSize(w, currentSize)
	if currentSize == 0 {
		return w, sizes
	}

	var currentBlock byte
	currentBlockPosition := len(w)
	w = append(w, 0)
	serializedSize += 1

	// add constructor No for union type in case of non first option
	currentBlock |= (1 << 0)

	w = basictl.TL2WriteSize(w, 1)
	serializedSize += basictl.TL2CalculateSize(1)
	w[currentBlockPosition] = currentBlock
	return w, sizes
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	var sizes []int
	if ctx != nil {
		sizes = ctx.SizeBuffer
	}
	sizes = item.CalculateLayout(sizes[:0])
	w, _ = item.InternalWriteTL2(w, sizes)
	if ctx != nil {
		ctx.SizeBuffer = sizes[:0]
	}
	return w
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) InternalReadTL2(r []byte, block byte) (_ []byte, err error) {

	return r, nil
}

func (item *BenchmarksVrutoytopLevelUnionEmpty) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	currentSize := 0
	if r, currentSize, err = basictl.TL2ParseSize(r); err != nil {
		return r, err
	}

	currentR := r[:currentSize]
	r = r[currentSize:]

	var block byte
	var index int
	if currentSize == 0 {
		index = 0
	} else {
		if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil {
			return r, err
		}
		if (block & 1) != 0 {
			if currentR, index, err = basictl.TL2ParseSize(currentR); err != nil {
				return r, err
			}
		} else {
			index = 0
		}
	}
	if index != 1 {
		return r, basictl.TL2Error("unexpected constructor number %d, instead of %d", index, 1)
	}
	_, err = item.InternalReadTL2(currentR, block)
	return r, err
}
