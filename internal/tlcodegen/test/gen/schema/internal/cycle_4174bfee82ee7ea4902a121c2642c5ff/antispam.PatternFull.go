// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package cycle_4174bfee82ee7ea4902a121c2642c5ff

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func (item AntispamPatternFound) AsUnion() AntispamPatternFull {
	var ret AntispamPatternFull
	ret.SetPatternFound(item)
	return ret
}

type AntispamPatternFound struct {
	Ip     int32
	Uahash int32
	Flags  int32
	Type   int32
	Text   string
}

func (AntispamPatternFound) TLName() string { return "antispam.patternFound" }
func (AntispamPatternFound) TLTag() uint32  { return 0xa7688492 }

func (item *AntispamPatternFound) Reset() {
	item.Ip = 0
	item.Uahash = 0
	item.Flags = 0
	item.Type = 0
	item.Text = ""
}

func (item *AntispamPatternFound) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Ip); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Uahash); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Flags); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Type); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.Text)
}

// This method is general version of Write, use it instead!
func (item *AntispamPatternFound) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *AntispamPatternFound) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.Ip)
	w = basictl.IntWrite(w, item.Uahash)
	w = basictl.IntWrite(w, item.Flags)
	w = basictl.IntWrite(w, item.Type)
	w = basictl.StringWrite(w, item.Text)
	return w
}

func (item *AntispamPatternFound) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa7688492); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *AntispamPatternFound) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AntispamPatternFound) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa7688492)
	return item.Write(w)
}

func (item AntispamPatternFound) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AntispamPatternFound) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propIpPresented bool
	var propUahashPresented bool
	var propFlagsPresented bool
	var propTypePresented bool
	var propTextPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "ip":
				if propIpPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("antispam.patternFound", "ip")
				}
				if err := internal.Json2ReadInt32(in, &item.Ip); err != nil {
					return err
				}
				propIpPresented = true
			case "uahash":
				if propUahashPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("antispam.patternFound", "uahash")
				}
				if err := internal.Json2ReadInt32(in, &item.Uahash); err != nil {
					return err
				}
				propUahashPresented = true
			case "flags":
				if propFlagsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("antispam.patternFound", "flags")
				}
				if err := internal.Json2ReadInt32(in, &item.Flags); err != nil {
					return err
				}
				propFlagsPresented = true
			case "type":
				if propTypePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("antispam.patternFound", "type")
				}
				if err := internal.Json2ReadInt32(in, &item.Type); err != nil {
					return err
				}
				propTypePresented = true
			case "text":
				if propTextPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("antispam.patternFound", "text")
				}
				if err := internal.Json2ReadString(in, &item.Text); err != nil {
					return err
				}
				propTextPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("antispam.patternFound", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propIpPresented {
		item.Ip = 0
	}
	if !propUahashPresented {
		item.Uahash = 0
	}
	if !propFlagsPresented {
		item.Flags = 0
	}
	if !propTypePresented {
		item.Type = 0
	}
	if !propTextPresented {
		item.Text = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AntispamPatternFound) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *AntispamPatternFound) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *AntispamPatternFound) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexIp := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"ip":`...)
	w = basictl.JSONWriteInt32(w, item.Ip)
	if (item.Ip != 0) == false {
		w = w[:backupIndexIp]
	}
	backupIndexUahash := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"uahash":`...)
	w = basictl.JSONWriteInt32(w, item.Uahash)
	if (item.Uahash != 0) == false {
		w = w[:backupIndexUahash]
	}
	backupIndexFlags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"flags":`...)
	w = basictl.JSONWriteInt32(w, item.Flags)
	if (item.Flags != 0) == false {
		w = w[:backupIndexFlags]
	}
	backupIndexType := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"type":`...)
	w = basictl.JSONWriteInt32(w, item.Type)
	if (item.Type != 0) == false {
		w = w[:backupIndexType]
	}
	backupIndexText := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"text":`...)
	w = basictl.JSONWriteString(w, item.Text)
	if (len(item.Text) != 0) == false {
		w = w[:backupIndexText]
	}
	return append(w, '}')
}

func (item *AntispamPatternFound) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AntispamPatternFound) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("antispam.patternFound", err.Error())
	}
	return nil
}

var _AntispamPatternFull = [2]internal.UnionElement{
	{TLTag: 0xa7688492, TLName: "antispam.patternFound", TLString: "antispam.patternFound#a7688492"},
	{TLTag: 0x2c22e225, TLName: "antispam.patternNotFound", TLString: "antispam.patternNotFound#2c22e225"},
}

type AntispamPatternFull struct {
	valuePatternFound AntispamPatternFound
	index             int
}

func (item AntispamPatternFull) TLName() string { return _AntispamPatternFull[item.index].TLName }
func (item AntispamPatternFull) TLTag() uint32  { return _AntispamPatternFull[item.index].TLTag }

func (item *AntispamPatternFull) Reset() { item.ResetToPatternFound() }

func (item *AntispamPatternFull) IsPatternFound() bool { return item.index == 0 }

func (item *AntispamPatternFull) AsPatternFound() (*AntispamPatternFound, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valuePatternFound, true
}
func (item *AntispamPatternFull) ResetToPatternFound() *AntispamPatternFound {
	item.index = 0
	item.valuePatternFound.Reset()
	return &item.valuePatternFound
}
func (item *AntispamPatternFull) SetPatternFound(value AntispamPatternFound) {
	item.index = 0
	item.valuePatternFound = value
}

func (item *AntispamPatternFull) IsPatternNotFound() bool { return item.index == 1 }

func (item *AntispamPatternFull) AsPatternNotFound() (AntispamPatternNotFound, bool) {
	var value AntispamPatternNotFound
	return value, item.index == 1
}
func (item *AntispamPatternFull) ResetToPatternNotFound() { item.index = 1 }
func (item *AntispamPatternFull) SetPatternNotFound()     { item.index = 1 }

func (item *AntispamPatternFull) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0xa7688492:
		item.index = 0
		return item.valuePatternFound.Read(w)
	case 0x2c22e225:
		item.index = 1
		return w, nil
	default:
		return w, internal.ErrorInvalidUnionTag("antispam.PatternFull", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *AntispamPatternFull) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AntispamPatternFull) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _AntispamPatternFull[item.index].TLTag)
	switch item.index {
	case 0:
		w = item.valuePatternFound.Write(w)
	case 1:
		return w
	}
	return w
}

func (item *AntispamPatternFull) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := internal.Json2ReadUnion("antispam.PatternFull", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "antispam.patternFound#a7688492", "antispam.patternFound", "#a7688492":
		if !legacyTypeNames && _tag == "antispam.patternFound#a7688492" {
			return internal.ErrorInvalidUnionLegacyTagJSON("antispam.PatternFull", "antispam.patternFound#a7688492")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valuePatternFound.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "antispam.patternNotFound#2c22e225", "antispam.patternNotFound", "#2c22e225":
		if !legacyTypeNames && _tag == "antispam.patternNotFound#2c22e225" {
			return internal.ErrorInvalidUnionLegacyTagJSON("antispam.PatternFull", "antispam.patternNotFound#2c22e225")
		}
		item.index = 1
	default:
		return internal.ErrorInvalidUnionTagJSON("antispam.PatternFull", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AntispamPatternFull) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *AntispamPatternFull) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *AntispamPatternFull) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"antispam.patternFound"`...)
		} else {
			w = append(w, `{"type":"antispam.patternFound#a7688492"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valuePatternFound.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"antispam.patternNotFound"`...)
		} else {
			w = append(w, `{"type":"antispam.patternNotFound#2c22e225"`...)
		}
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item AntispamPatternFull) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AntispamPatternFull) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AntispamPatternFull) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("antispam.PatternFull", err.Error())
	}
	return nil
}

func (item AntispamPatternNotFound) AsUnion() AntispamPatternFull {
	var ret AntispamPatternFull
	ret.SetPatternNotFound()
	return ret
}

type AntispamPatternNotFound struct {
}

func (AntispamPatternNotFound) TLName() string { return "antispam.patternNotFound" }
func (AntispamPatternNotFound) TLTag() uint32  { return 0x2c22e225 }

func (item *AntispamPatternNotFound) Reset() {}

func (item *AntispamPatternNotFound) Read(w []byte) (_ []byte, err error) { return w, nil }

// This method is general version of Write, use it instead!
func (item *AntispamPatternNotFound) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *AntispamPatternNotFound) Write(w []byte) []byte {
	return w
}

func (item *AntispamPatternNotFound) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x2c22e225); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *AntispamPatternNotFound) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *AntispamPatternNotFound) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x2c22e225)
	return item.Write(w)
}

func (item AntispamPatternNotFound) String() string {
	return string(item.WriteJSON(nil))
}

func (item *AntispamPatternNotFound) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return internal.ErrorInvalidJSON("antispam.patternNotFound", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *AntispamPatternNotFound) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *AntispamPatternNotFound) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *AntispamPatternNotFound) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *AntispamPatternNotFound) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *AntispamPatternNotFound) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("antispam.patternNotFound", err.Error())
	}
	return nil
}
