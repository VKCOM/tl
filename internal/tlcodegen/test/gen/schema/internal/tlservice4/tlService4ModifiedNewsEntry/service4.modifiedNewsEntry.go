// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService4ModifiedNewsEntry

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBool"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tlservice4/tlService4Object"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service4ModifiedNewsEntry struct {
	Object          tlService4Object.Service4Object
	CreationDate    int32
	FieldsMask      uint32
	RestorationDate int32 // Conditional: item.FieldsMask.0
	DeletionDate    int32 // Conditional: item.FieldsMask.1
	HiddenByPrivacy bool  // Conditional: item.FieldsMask.16
}

func (Service4ModifiedNewsEntry) TLName() string { return "service4.modifiedNewsEntry" }
func (Service4ModifiedNewsEntry) TLTag() uint32  { return 0xda19832a }

func (item *Service4ModifiedNewsEntry) SetRestorationDate(v int32) {
	item.RestorationDate = v
	item.FieldsMask |= 1 << 0
}
func (item *Service4ModifiedNewsEntry) ClearRestorationDate() {
	item.RestorationDate = 0
	item.FieldsMask &^= 1 << 0
}
func (item Service4ModifiedNewsEntry) IsSetRestorationDate() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *Service4ModifiedNewsEntry) SetDeletionDate(v int32) {
	item.DeletionDate = v
	item.FieldsMask |= 1 << 1
}
func (item *Service4ModifiedNewsEntry) ClearDeletionDate() {
	item.DeletionDate = 0
	item.FieldsMask &^= 1 << 1
}
func (item Service4ModifiedNewsEntry) IsSetDeletionDate() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *Service4ModifiedNewsEntry) SetHiddenByPrivacy(v bool) {
	item.HiddenByPrivacy = v
	item.FieldsMask |= 1 << 16
}
func (item *Service4ModifiedNewsEntry) ClearHiddenByPrivacy() {
	item.HiddenByPrivacy = false
	item.FieldsMask &^= 1 << 16
}
func (item Service4ModifiedNewsEntry) IsSetHiddenByPrivacy() bool {
	return item.FieldsMask&(1<<16) != 0
}

func (item *Service4ModifiedNewsEntry) Reset() {
	item.Object.Reset()
	item.CreationDate = 0
	item.FieldsMask = 0
	item.RestorationDate = 0
	item.DeletionDate = 0
	item.HiddenByPrivacy = false
}

func (item *Service4ModifiedNewsEntry) Read(w []byte) (_ []byte, err error) {
	if w, err = item.Object.Read(w); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.CreationDate); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.RestorationDate); err != nil {
			return w, err
		}
	} else {
		item.RestorationDate = 0
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = basictl.IntRead(w, &item.DeletionDate); err != nil {
			return w, err
		}
	} else {
		item.DeletionDate = 0
	}
	if item.FieldsMask&(1<<16) != 0 {
		if w, err = tlBool.BoolReadBoxed(w, &item.HiddenByPrivacy); err != nil {
			return w, err
		}
	} else {
		item.HiddenByPrivacy = false
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *Service4ModifiedNewsEntry) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Service4ModifiedNewsEntry) Write(w []byte) []byte {
	w = item.Object.Write(w)
	w = basictl.IntWrite(w, item.CreationDate)
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.RestorationDate)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.IntWrite(w, item.DeletionDate)
	}
	if item.FieldsMask&(1<<16) != 0 {
		w = tlBool.BoolWriteBoxed(w, item.HiddenByPrivacy)
	}
	return w
}

func (item *Service4ModifiedNewsEntry) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xda19832a); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Service4ModifiedNewsEntry) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service4ModifiedNewsEntry) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xda19832a)
	return item.Write(w)
}

func (item Service4ModifiedNewsEntry) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service4ModifiedNewsEntry) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propObjectPresented bool
	var propCreationDatePresented bool
	var propFieldsMaskPresented bool
	var propRestorationDatePresented bool
	var propDeletionDatePresented bool
	var propHiddenByPrivacyPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "object":
				if propObjectPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service4.modifiedNewsEntry", "object")
				}
				if err := item.Object.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propObjectPresented = true
			case "creation_date":
				if propCreationDatePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service4.modifiedNewsEntry", "creation_date")
				}
				if err := internal.Json2ReadInt32(in, &item.CreationDate); err != nil {
					return err
				}
				propCreationDatePresented = true
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service4.modifiedNewsEntry", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "restoration_date":
				if propRestorationDatePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service4.modifiedNewsEntry", "restoration_date")
				}
				if err := internal.Json2ReadInt32(in, &item.RestorationDate); err != nil {
					return err
				}
				propRestorationDatePresented = true
			case "deletion_date":
				if propDeletionDatePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service4.modifiedNewsEntry", "deletion_date")
				}
				if err := internal.Json2ReadInt32(in, &item.DeletionDate); err != nil {
					return err
				}
				propDeletionDatePresented = true
			case "hidden_by_privacy":
				if propHiddenByPrivacyPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service4.modifiedNewsEntry", "hidden_by_privacy")
				}
				if err := internal.Json2ReadBool(in, &item.HiddenByPrivacy); err != nil {
					return err
				}
				propHiddenByPrivacyPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("service4.modifiedNewsEntry", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propObjectPresented {
		item.Object.Reset()
	}
	if !propCreationDatePresented {
		item.CreationDate = 0
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propRestorationDatePresented {
		item.RestorationDate = 0
	}
	if !propDeletionDatePresented {
		item.DeletionDate = 0
	}
	if !propHiddenByPrivacyPresented {
		item.HiddenByPrivacy = false
	}
	if propRestorationDatePresented {
		item.FieldsMask |= 1 << 0
	}
	if propDeletionDatePresented {
		item.FieldsMask |= 1 << 1
	}
	if propHiddenByPrivacyPresented {
		item.FieldsMask |= 1 << 16
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service4ModifiedNewsEntry) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Service4ModifiedNewsEntry) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service4ModifiedNewsEntry) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"object":`...)
	w = item.Object.WriteJSONOpt(newTypeNames, short, w)
	backupIndexCreationDate := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"creation_date":`...)
	w = basictl.JSONWriteInt32(w, item.CreationDate)
	if (item.CreationDate != 0) == false {
		w = w[:backupIndexCreationDate]
	}
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"restoration_date":`...)
		w = basictl.JSONWriteInt32(w, item.RestorationDate)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"deletion_date":`...)
		w = basictl.JSONWriteInt32(w, item.DeletionDate)
	}
	if item.FieldsMask&(1<<16) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"hidden_by_privacy":`...)
		w = basictl.JSONWriteBool(w, item.HiddenByPrivacy)
	}
	return append(w, '}')
}

func (item *Service4ModifiedNewsEntry) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service4ModifiedNewsEntry) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service4.modifiedNewsEntry", err.Error())
	}
	return nil
}
