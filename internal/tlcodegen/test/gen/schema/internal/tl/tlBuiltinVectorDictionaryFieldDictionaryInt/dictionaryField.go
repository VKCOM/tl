// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBuiltinVectorDictionaryFieldDictionaryInt

import (
	"sort"

	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorDictionaryFieldInt"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlDictionaryFieldDictionaryInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func BuiltinVectorDictionaryFieldDictionaryIntReset(m map[string]map[string]int32) {
	for k := range m {
		delete(m, k)
	}
}

func BuiltinVectorDictionaryFieldDictionaryIntRead(w []byte, m *map[string]map[string]int32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	var data map[string]map[string]int32
	if *m == nil {
		if l == 0 {
			return w, nil
		}
		data = make(map[string]map[string]int32, l)
		*m = data
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	for i := 0; i < int(l); i++ {
		var elem tlDictionaryFieldDictionaryInt.DictionaryFieldDictionaryInt
		if w, err = elem.Read(w); err != nil {
			return w, err
		}
		data[elem.Key] = elem.Value
	}
	return w, nil
}

func BuiltinVectorDictionaryFieldDictionaryIntWrite(w []byte, m map[string]map[string]int32) []byte {
	w = basictl.NatWrite(w, uint32(len(m)))
	if len(m) == 0 {
		return w
	}
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	for _, key := range keys {
		val := m[key]
		elem := tlDictionaryFieldDictionaryInt.DictionaryFieldDictionaryInt{Key: key, Value: val}
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorDictionaryFieldDictionaryIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, m *map[string]map[string]int32) error {
	var data map[string]map[string]int32
	if *m == nil {
		*m = make(map[string]map[string]int32, 0)
		data = *m
	} else {
		data = *m
		for k := range data {
			delete(data, k)
		}
	}
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("map[string]map[string]int32", "expected json object")
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			var value map[string]int32
			if err := tlBuiltinVectorDictionaryFieldInt.BuiltinVectorDictionaryFieldIntReadJSON(legacyTypeNames, in, &value); err != nil {
				return err
			}
			data[key] = value
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return internal.ErrorInvalidJSON("map[string]map[string]int32", "expected json object's end")
		}
	}
	return nil
}

func BuiltinVectorDictionaryFieldDictionaryIntWriteJSON(w []byte, m map[string]map[string]int32) []byte {
	return BuiltinVectorDictionaryFieldDictionaryIntWriteJSONOpt(true, false, w, m)
}
func BuiltinVectorDictionaryFieldDictionaryIntWriteJSONOpt(newTypeNames bool, short bool, w []byte, m map[string]map[string]int32) []byte {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	w = append(w, '{')
	for _, key := range keys {
		value := m[key]
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteString(w, key)
		w = append(w, ':')
		w = tlBuiltinVectorDictionaryFieldInt.BuiltinVectorDictionaryFieldIntWriteJSONOpt(newTypeNames, short, w, value)
	}
	return append(w, '}')
}
