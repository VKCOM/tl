// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlMyMcValueTuple

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/cycle_6ca945392bbf8b14f24e5653edc8b214"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTuple3Service1Value"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type MyMcValueTuple struct {
	Xs [3]cycle_6ca945392bbf8b14f24e5653edc8b214.Service1Value
}

func (MyMcValueTuple) TLName() string { return "myMcValueTuple" }
func (MyMcValueTuple) TLTag() uint32  { return 0x1287d116 }

func (item *MyMcValueTuple) Reset() {
	tlBuiltinTuple3Service1Value.BuiltinTuple3Service1ValueReset(&item.Xs)
}

func (item *MyMcValueTuple) Read(w []byte) (_ []byte, err error) {
	return tlBuiltinTuple3Service1Value.BuiltinTuple3Service1ValueRead(w, &item.Xs)
}

func (item *MyMcValueTuple) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MyMcValueTuple) Write(w []byte) []byte {
	w = tlBuiltinTuple3Service1Value.BuiltinTuple3Service1ValueWrite(w, &item.Xs)
	return w
}

func (item *MyMcValueTuple) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1287d116); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MyMcValueTuple) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MyMcValueTuple) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1287d116)
	return item.Write(w)
}

func (item MyMcValueTuple) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MyMcValueTuple) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propXsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "xs":
				if propXsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("myMcValueTuple", "xs")
				}
				if err := tlBuiltinTuple3Service1Value.BuiltinTuple3Service1ValueReadJSON(legacyTypeNames, in, &item.Xs); err != nil {
					return err
				}
				propXsPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("myMcValueTuple", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propXsPresented {
		tlBuiltinTuple3Service1Value.BuiltinTuple3Service1ValueReset(&item.Xs)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MyMcValueTuple) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *MyMcValueTuple) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *MyMcValueTuple) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"xs":`...)
	w = tlBuiltinTuple3Service1Value.BuiltinTuple3Service1ValueWriteJSONOpt(newTypeNames, short, w, &item.Xs)
	return append(w, '}')
}

func (item *MyMcValueTuple) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MyMcValueTuple) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("myMcValueTuple", err.Error())
	}
	return nil
}
