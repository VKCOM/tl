// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBenchObject

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorInt"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorInteger"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlInteger"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BenchObject struct {
	Xs []int32
	Ys []tlInteger.Integer
}

func (BenchObject) TLName() string { return "benchObject" }
func (BenchObject) TLTag() uint32  { return 0xb697e865 }

func (item *BenchObject) Reset() {
	item.Xs = item.Xs[:0]
	item.Ys = item.Ys[:0]
}

func (item *BenchObject) Read(w []byte) (_ []byte, err error) {
	if w, err = tlBuiltinVectorInt.BuiltinVectorIntRead(w, &item.Xs); err != nil {
		return w, err
	}
	return tlBuiltinVectorInteger.BuiltinVectorIntegerRead(w, &item.Ys)
}

func (item *BenchObject) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BenchObject) Write(w []byte) []byte {
	w = tlBuiltinVectorInt.BuiltinVectorIntWrite(w, item.Xs)
	w = tlBuiltinVectorInteger.BuiltinVectorIntegerWrite(w, item.Ys)
	return w
}

func (item *BenchObject) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xb697e865); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BenchObject) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BenchObject) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xb697e865)
	return item.Write(w)
}

func (item BenchObject) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BenchObject) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propXsPresented bool
	var propYsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "xs":
				if propXsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchObject", "xs")
				}
				if err := tlBuiltinVectorInt.BuiltinVectorIntReadJSON(legacyTypeNames, in, &item.Xs); err != nil {
					return err
				}
				propXsPresented = true
			case "ys":
				if propYsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("benchObject", "ys")
				}
				if err := tlBuiltinVectorInteger.BuiltinVectorIntegerReadJSON(legacyTypeNames, in, &item.Ys); err != nil {
					return err
				}
				propYsPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("benchObject", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propXsPresented {
		item.Xs = item.Xs[:0]
	}
	if !propYsPresented {
		item.Ys = item.Ys[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BenchObject) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BenchObject) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BenchObject) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexXs := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"xs":`...)
	w = tlBuiltinVectorInt.BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, item.Xs)
	if (len(item.Xs) != 0) == false {
		w = w[:backupIndexXs]
	}
	backupIndexYs := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"ys":`...)
	w = tlBuiltinVectorInteger.BuiltinVectorIntegerWriteJSONOpt(newTypeNames, short, w, item.Ys)
	if (len(item.Ys) != 0) == false {
		w = w[:backupIndexYs]
	}
	return append(w, '}')
}

func (item *BenchObject) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BenchObject) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("benchObject", err.Error())
	}
	return nil
}
