// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlMyBoxedTupleSlice

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTupleIntBoxed"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type MyBoxedTupleSlice struct {
	N    uint32
	Data []int32
}

func (MyBoxedTupleSlice) TLName() string { return "myBoxedTupleSlice" }
func (MyBoxedTupleSlice) TLTag() uint32  { return 0x25d1a1be }

func (item *MyBoxedTupleSlice) Reset() {
	item.N = 0
	item.Data = item.Data[:0]
}

func (item *MyBoxedTupleSlice) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.N); err != nil {
		return w, err
	}
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return tlBuiltinTupleIntBoxed.BuiltinTupleIntBoxedRead(w, &item.Data, item.N)
}

func (item *MyBoxedTupleSlice) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *MyBoxedTupleSlice) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.N)
	w = basictl.NatWrite(w, 0x9770768a)
	if w, err = tlBuiltinTupleIntBoxed.BuiltinTupleIntBoxedWrite(w, item.Data, item.N); err != nil {
		return w, err
	}
	return w, nil
}

func (item *MyBoxedTupleSlice) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x25d1a1be); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MyBoxedTupleSlice) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *MyBoxedTupleSlice) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x25d1a1be)
	return item.Write(w)
}

func (item MyBoxedTupleSlice) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *MyBoxedTupleSlice) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNPresented bool
	var rawData []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "n":
				if propNPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("myBoxedTupleSlice", "n")
				}
				if err := internal.Json2ReadUint32(in, &item.N); err != nil {
					return err
				}
				propNPresented = true
			case "data":
				if rawData != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("myBoxedTupleSlice", "data")
				}
				rawData = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("myBoxedTupleSlice", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNPresented {
		item.N = 0
	}
	var inDataPointer *basictl.JsonLexer
	inData := basictl.JsonLexer{Data: rawData}
	if rawData != nil {
		inDataPointer = &inData
	}
	if err := tlBuiltinTupleIntBoxed.BuiltinTupleIntBoxedReadJSON(legacyTypeNames, inDataPointer, &item.Data, item.N); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MyBoxedTupleSlice) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w)
}

func (item *MyBoxedTupleSlice) WriteJSON(w []byte) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *MyBoxedTupleSlice) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexN := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"n":`...)
	w = basictl.JSONWriteUint32(w, item.N)
	if (item.N != 0) == false {
		w = w[:backupIndexN]
	}
	backupIndexData := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"data":`...)
	if w, err = tlBuiltinTupleIntBoxed.BuiltinTupleIntBoxedWriteJSONOpt(tctx, w, item.Data, item.N); err != nil {
		return w, err
	}
	if (len(item.Data) != 0) == false {
		w = w[:backupIndexData]
	}
	return append(w, '}'), nil
}

func (item *MyBoxedTupleSlice) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *MyBoxedTupleSlice) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("myBoxedTupleSlice", err.Error())
	}
	return nil
}
