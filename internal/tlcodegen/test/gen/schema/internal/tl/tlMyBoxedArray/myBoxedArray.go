// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlMyBoxedArray

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTuple2IntBoxed"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type MyBoxedArray struct {
	Data [2]int32
}

func (MyBoxedArray) TLName() string { return "myBoxedArray" }
func (MyBoxedArray) TLTag() uint32  { return 0x288f64f0 }

func (item *MyBoxedArray) Reset() {
	tlBuiltinTuple2IntBoxed.BuiltinTuple2IntBoxedReset(&item.Data)
}

func (item *MyBoxedArray) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return tlBuiltinTuple2IntBoxed.BuiltinTuple2IntBoxedRead(w, &item.Data)
}

// This method is general version of Write, use it instead!
func (item *MyBoxedArray) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MyBoxedArray) Write(w []byte) []byte {
	w = basictl.NatWrite(w, 0x9770768a)
	w = tlBuiltinTuple2IntBoxed.BuiltinTuple2IntBoxedWrite(w, &item.Data)
	return w
}

func (item *MyBoxedArray) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x288f64f0); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MyBoxedArray) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MyBoxedArray) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x288f64f0)
	return item.Write(w)
}

func (item MyBoxedArray) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MyBoxedArray) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propDataPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "data":
				if propDataPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("myBoxedArray", "data")
				}
				if err := tlBuiltinTuple2IntBoxed.BuiltinTuple2IntBoxedReadJSON(legacyTypeNames, in, &item.Data); err != nil {
					return err
				}
				propDataPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("myBoxedArray", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propDataPresented {
		tlBuiltinTuple2IntBoxed.BuiltinTuple2IntBoxedReset(&item.Data)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MyBoxedArray) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *MyBoxedArray) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *MyBoxedArray) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"data":`...)
	w = tlBuiltinTuple2IntBoxed.BuiltinTuple2IntBoxedWriteJSONOpt(newTypeNames, short, w, &item.Data)
	return append(w, '}')
}

func (item *MyBoxedArray) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MyBoxedArray) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("myBoxedArray", err.Error())
	}
	return nil
}
