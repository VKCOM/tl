// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlRpcInvokeReqExtra

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorString"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type RpcInvokeReqExtra struct {
	FieldsMask uint32
	// Query (TrueType) // Conditional: item.FieldsMask.0
	// Sort (TrueType) // Conditional: item.FieldsMask.1
	// SortReverse (TrueType) // Conditional: item.FieldsMask.2
	WaitBinlogPos     int64    // Conditional: item.FieldsMask.16
	StringForwardKeys []string // Conditional: item.FieldsMask.18
}

func (RpcInvokeReqExtra) TLName() string { return "rpcInvokeReqExtra" }
func (RpcInvokeReqExtra) TLTag() uint32  { return 0xf3ef81a9 }

func (item *RpcInvokeReqExtra) SetQuery(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item *RpcInvokeReqExtra) IsSetQuery() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *RpcInvokeReqExtra) SetSort(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item *RpcInvokeReqExtra) IsSetSort() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *RpcInvokeReqExtra) SetSortReverse(v bool) {
	if v {
		item.FieldsMask |= 1 << 2
	} else {
		item.FieldsMask &^= 1 << 2
	}
}
func (item *RpcInvokeReqExtra) IsSetSortReverse() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *RpcInvokeReqExtra) SetWaitBinlogPos(v int64) {
	item.WaitBinlogPos = v
	item.FieldsMask |= 1 << 16
}
func (item *RpcInvokeReqExtra) ClearWaitBinlogPos() {
	item.WaitBinlogPos = 0
	item.FieldsMask &^= 1 << 16
}
func (item *RpcInvokeReqExtra) IsSetWaitBinlogPos() bool { return item.FieldsMask&(1<<16) != 0 }

func (item *RpcInvokeReqExtra) SetStringForwardKeys(v []string) {
	item.StringForwardKeys = v
	item.FieldsMask |= 1 << 18
}
func (item *RpcInvokeReqExtra) ClearStringForwardKeys() {
	item.StringForwardKeys = item.StringForwardKeys[:0]
	item.FieldsMask &^= 1 << 18
}
func (item *RpcInvokeReqExtra) IsSetStringForwardKeys() bool { return item.FieldsMask&(1<<18) != 0 }

func (item *RpcInvokeReqExtra) Reset() {
	item.FieldsMask = 0
	item.WaitBinlogPos = 0
	item.StringForwardKeys = item.StringForwardKeys[:0]
}

func (item *RpcInvokeReqExtra) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<16) != 0 {
		if w, err = basictl.LongRead(w, &item.WaitBinlogPos); err != nil {
			return w, err
		}
	} else {
		item.WaitBinlogPos = 0
	}
	if item.FieldsMask&(1<<18) != 0 {
		if w, err = tlBuiltinVectorString.BuiltinVectorStringRead(w, &item.StringForwardKeys); err != nil {
			return w, err
		}
	} else {
		item.StringForwardKeys = item.StringForwardKeys[:0]
	}
	return w, nil
}

func (item *RpcInvokeReqExtra) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *RpcInvokeReqExtra) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<16) != 0 {
		w = basictl.LongWrite(w, item.WaitBinlogPos)
	}
	if item.FieldsMask&(1<<18) != 0 {
		w = tlBuiltinVectorString.BuiltinVectorStringWrite(w, item.StringForwardKeys)
	}
	return w
}

func (item *RpcInvokeReqExtra) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xf3ef81a9); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *RpcInvokeReqExtra) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *RpcInvokeReqExtra) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xf3ef81a9)
	return item.Write(w)
}

func (item RpcInvokeReqExtra) String() string {
	return string(item.WriteJSON(nil))
}

func (item *RpcInvokeReqExtra) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var trueTypeQueryPresented bool
	var trueTypeQueryValue bool
	var trueTypeSortPresented bool
	var trueTypeSortValue bool
	var trueTypeSortReversePresented bool
	var trueTypeSortReverseValue bool
	var propWaitBinlogPosPresented bool
	var propStringForwardKeysPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "query":
				if trueTypeQueryPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "query")
				}
				if err := internal.Json2ReadBool(in, &trueTypeQueryValue); err != nil {
					return err
				}
				trueTypeQueryPresented = true
			case "sort":
				if trueTypeSortPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "sort")
				}
				if err := internal.Json2ReadBool(in, &trueTypeSortValue); err != nil {
					return err
				}
				trueTypeSortPresented = true
			case "sort_reverse":
				if trueTypeSortReversePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "sort_reverse")
				}
				if err := internal.Json2ReadBool(in, &trueTypeSortReverseValue); err != nil {
					return err
				}
				trueTypeSortReversePresented = true
			case "wait_binlog_pos":
				if propWaitBinlogPosPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "wait_binlog_pos")
				}
				if err := internal.Json2ReadInt64(in, &item.WaitBinlogPos); err != nil {
					return err
				}
				propWaitBinlogPosPresented = true
			case "string_forward_keys":
				if propStringForwardKeysPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "string_forward_keys")
				}
				if err := tlBuiltinVectorString.BuiltinVectorStringReadJSON(legacyTypeNames, in, &item.StringForwardKeys); err != nil {
					return err
				}
				propStringForwardKeysPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("rpcInvokeReqExtra", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propWaitBinlogPosPresented {
		item.WaitBinlogPos = 0
	}
	if !propStringForwardKeysPresented {
		item.StringForwardKeys = item.StringForwardKeys[:0]
	}
	if trueTypeQueryPresented {
		if trueTypeQueryValue {
			item.FieldsMask |= 1 << 0
		}
	}
	if trueTypeSortPresented {
		if trueTypeSortValue {
			item.FieldsMask |= 1 << 1
		}
	}
	if trueTypeSortReversePresented {
		if trueTypeSortReverseValue {
			item.FieldsMask |= 1 << 2
		}
	}
	if propWaitBinlogPosPresented {
		item.FieldsMask |= 1 << 16
	}
	if propStringForwardKeysPresented {
		item.FieldsMask |= 1 << 18
	}
	// tries to set bit to zero if it is 1
	if trueTypeQueryPresented && !trueTypeQueryValue && (item.FieldsMask&(1<<0) != 0) {
		return internal.ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeSortPresented && !trueTypeSortValue && (item.FieldsMask&(1<<1) != 0) {
		return internal.ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeSortReversePresented && !trueTypeSortReverseValue && (item.FieldsMask&(1<<2) != 0) {
		return internal.ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *RpcInvokeReqExtra) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *RpcInvokeReqExtra) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *RpcInvokeReqExtra) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"query":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"sort":true`...)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"sort_reverse":true`...)
	}
	if item.FieldsMask&(1<<16) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"wait_binlog_pos":`...)
		w = basictl.JSONWriteInt64(w, item.WaitBinlogPos)
	}
	if item.FieldsMask&(1<<18) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"string_forward_keys":`...)
		w = tlBuiltinVectorString.BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, item.StringForwardKeys)
	}
	return append(w, '}')
}

func (item *RpcInvokeReqExtra) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *RpcInvokeReqExtra) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("rpcInvokeReqExtra", err.Error())
	}
	return nil
}
