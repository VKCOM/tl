// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBoxedTuple

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTuple3Int"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BoxedTuple struct {
	X [3]int32
}

func (BoxedTuple) TLName() string { return "boxedTuple" }
func (BoxedTuple) TLTag() uint32  { return 0x30c9d533 }

func (item *BoxedTuple) Reset() {
	tlBuiltinTuple3Int.BuiltinTuple3IntReset(&item.X)
}

func (item *BoxedTuple) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return tlBuiltinTuple3Int.BuiltinTuple3IntRead(w, &item.X)
}

func (item *BoxedTuple) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BoxedTuple) Write(w []byte) []byte {
	w = basictl.NatWrite(w, 0x9770768a)
	w = tlBuiltinTuple3Int.BuiltinTuple3IntWrite(w, &item.X)
	return w
}

func (item *BoxedTuple) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x30c9d533); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BoxedTuple) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BoxedTuple) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x30c9d533)
	return item.Write(w)
}

func (item *BoxedTuple) ReadResult(w []byte, ret *[3]int32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return tlBuiltinTuple3Int.BuiltinTuple3IntRead(w, ret)
}

func (item *BoxedTuple) WriteResult(w []byte, ret [3]int32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x9770768a)
	w = tlBuiltinTuple3Int.BuiltinTuple3IntWrite(w, &ret)
	return w, nil
}

func (item *BoxedTuple) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *[3]int32) error {
	if err := tlBuiltinTuple3Int.BuiltinTuple3IntReadJSON(legacyTypeNames, in, ret); err != nil {
		return err
	}
	return nil
}

func (item *BoxedTuple) WriteResultJSON(w []byte, ret [3]int32) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return item.writeResultJSON(&tctx, w, ret)
}

func (item *BoxedTuple) writeResultJSON(tctx *basictl.JSONWriteContext, w []byte, ret [3]int32) (_ []byte, err error) {
	w = tlBuiltinTuple3Int.BuiltinTuple3IntWriteJSONOpt(tctx, w, &ret)
	return w, nil
}

func (item *BoxedTuple) ReadResultWriteResultJSON(tctx *basictl.JSONWriteContext, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret [3]int32
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(tctx, w, ret)
	return r, w, err
}

func (item *BoxedTuple) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret [3]int32
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BoxedTuple) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BoxedTuple) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propXPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "x":
				if propXPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("boxedTuple", "x")
				}
				if err := tlBuiltinTuple3Int.BuiltinTuple3IntReadJSON(legacyTypeNames, in, &item.X); err != nil {
					return err
				}
				propXPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("boxedTuple", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propXPresented {
		tlBuiltinTuple3Int.BuiltinTuple3IntReset(&item.X)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BoxedTuple) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *BoxedTuple) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *BoxedTuple) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"x":`...)
	w = tlBuiltinTuple3Int.BuiltinTuple3IntWriteJSONOpt(tctx, w, &item.X)
	return append(w, '}')
}

func (item *BoxedTuple) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BoxedTuple) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("boxedTuple", err.Error())
	}
	return nil
}
