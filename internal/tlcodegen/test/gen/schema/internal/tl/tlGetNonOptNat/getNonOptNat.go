// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlGetNonOptNat

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type GetNonOptNat struct {
	N  uint32
	Xs []int32
}

func (GetNonOptNat) TLName() string { return "getNonOptNat" }
func (GetNonOptNat) TLTag() uint32  { return 0x67665961 }

func (item *GetNonOptNat) Reset() {
	item.N = 0
	item.Xs = item.Xs[:0]
}

func (item *GetNonOptNat) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.N); err != nil {
		return w, err
	}
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.Xs, item.N)
}

// This method is general version of Write, use it instead!
func (item *GetNonOptNat) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *GetNonOptNat) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.N)
	w = basictl.NatWrite(w, 0x9770768a)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.Xs, item.N); err != nil {
		return w, err
	}
	return w, nil
}

func (item *GetNonOptNat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x67665961); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *GetNonOptNat) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *GetNonOptNat) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x67665961)
	return item.Write(w)
}

func (item *GetNonOptNat) ReadResult(w []byte, ret *[]int32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return tlBuiltinTupleInt.BuiltinTupleIntRead(w, ret, item.N)
}

func (item *GetNonOptNat) WriteResult(w []byte, ret []int32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x9770768a)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, ret, item.N); err != nil {
		return w, err
	}
	return w, nil
}

func (item *GetNonOptNat) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *[]int32) error {
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, in, ret, item.N); err != nil {
		return err
	}
	return nil
}

func (item *GetNonOptNat) WriteResultJSON(w []byte, ret []int32) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *GetNonOptNat) writeResultJSON(newTypeNames bool, short bool, w []byte, ret []int32) (_ []byte, err error) {
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, ret, item.N); err != nil {
		return w, err
	}
	return w, nil
}

func (item *GetNonOptNat) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret []int32
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *GetNonOptNat) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret []int32
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *GetNonOptNat) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret []int32
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item GetNonOptNat) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *GetNonOptNat) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propNPresented bool
	var rawXs []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "n":
				if propNPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("getNonOptNat", "n")
				}
				if err := internal.Json2ReadUint32(in, &item.N); err != nil {
					return err
				}
				propNPresented = true
			case "xs":
				if rawXs != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("getNonOptNat", "xs")
				}
				rawXs = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("getNonOptNat", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propNPresented {
		item.N = 0
	}
	var inXsPointer *basictl.JsonLexer
	inXs := basictl.JsonLexer{Data: rawXs}
	if rawXs != nil {
		inXsPointer = &inXs
	}
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, inXsPointer, &item.Xs, item.N); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *GetNonOptNat) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *GetNonOptNat) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *GetNonOptNat) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexN := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"n":`...)
	w = basictl.JSONWriteUint32(w, item.N)
	if (item.N != 0) == false {
		w = w[:backupIndexN]
	}
	backupIndexXs := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"xs":`...)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.Xs, item.N); err != nil {
		return w, err
	}
	if (len(item.Xs) != 0) == false {
		w = w[:backupIndexXs]
	}
	return append(w, '}'), nil
}

func (item *GetNonOptNat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *GetNonOptNat) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("getNonOptNat", err.Error())
	}
	return nil
}
