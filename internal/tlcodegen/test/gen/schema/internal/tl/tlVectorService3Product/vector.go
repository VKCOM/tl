// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlVectorService3Product

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorService3Product"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tlservice3/tlService3Product"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type VectorService3Product []tlService3Product.Service3Product

func (VectorService3Product) TLName() string { return "vector" }
func (VectorService3Product) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorService3Product) Reset() {
	ptr := (*[]tlService3Product.Service3Product)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorService3Product) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*[]tlService3Product.Service3Product)(item)
	return tlBuiltinVectorService3Product.BuiltinVectorService3ProductRead(w, ptr, nat_t)
}

func (item *VectorService3Product) WriteGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.Write(w, nat_t), nil
}

func (item *VectorService3Product) Write(w []byte, nat_t uint32) []byte {
	ptr := (*[]tlService3Product.Service3Product)(item)
	return tlBuiltinVectorService3Product.BuiltinVectorService3ProductWrite(w, *ptr, nat_t)
}

func (item *VectorService3Product) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

func (item *VectorService3Product) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *VectorService3Product) WriteBoxed(w []byte, nat_t uint32) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w, nat_t)
}

func (item *VectorService3Product) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	ptr := (*[]tlService3Product.Service3Product)(item)
	if err := tlBuiltinVectorService3Product.BuiltinVectorService3ProductReadJSON(legacyTypeNames, in, ptr, nat_t); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorService3Product) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSON(w, nat_t), nil
}

func (item *VectorService3Product) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}

func (item *VectorService3Product) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_t uint32) []byte {
	ptr := (*[]tlService3Product.Service3Product)(item)
	w = tlBuiltinVectorService3Product.BuiltinVectorService3ProductWriteJSONOpt(newTypeNames, short, w, *ptr, nat_t)
	return w
}
