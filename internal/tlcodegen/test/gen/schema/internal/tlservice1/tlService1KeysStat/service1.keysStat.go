// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService1KeysStat

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorDictionaryFieldDictionaryInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service1KeysStat struct {
	StartTime int32
	KeysTops  map[string]map[string]int32
}

func (Service1KeysStat) TLName() string { return "service1.keysStat" }
func (Service1KeysStat) TLTag() uint32  { return 0xf0f6bc68 }

func (item *Service1KeysStat) Reset() {
	item.StartTime = 0
	tlBuiltinVectorDictionaryFieldDictionaryInt.BuiltinVectorDictionaryFieldDictionaryIntReset(item.KeysTops)
}

func (item *Service1KeysStat) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.StartTime); err != nil {
		return w, err
	}
	return tlBuiltinVectorDictionaryFieldDictionaryInt.BuiltinVectorDictionaryFieldDictionaryIntRead(w, &item.KeysTops)
}

func (item *Service1KeysStat) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Service1KeysStat) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.StartTime)
	w = tlBuiltinVectorDictionaryFieldDictionaryInt.BuiltinVectorDictionaryFieldDictionaryIntWrite(w, item.KeysTops)
	return w
}

func (item *Service1KeysStat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xf0f6bc68); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Service1KeysStat) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service1KeysStat) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xf0f6bc68)
	return item.Write(w)
}

func (item Service1KeysStat) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service1KeysStat) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propStartTimePresented bool
	var propKeysTopsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "start_time":
				if propStartTimePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service1.keysStat", "start_time")
				}
				if err := internal.Json2ReadInt32(in, &item.StartTime); err != nil {
					return err
				}
				propStartTimePresented = true
			case "keys_tops":
				if propKeysTopsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service1.keysStat", "keys_tops")
				}
				if err := tlBuiltinVectorDictionaryFieldDictionaryInt.BuiltinVectorDictionaryFieldDictionaryIntReadJSON(legacyTypeNames, in, &item.KeysTops); err != nil {
					return err
				}
				propKeysTopsPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("service1.keysStat", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propStartTimePresented {
		item.StartTime = 0
	}
	if !propKeysTopsPresented {
		tlBuiltinVectorDictionaryFieldDictionaryInt.BuiltinVectorDictionaryFieldDictionaryIntReset(item.KeysTops)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service1KeysStat) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Service1KeysStat) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service1KeysStat) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexStartTime := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"start_time":`...)
	w = basictl.JSONWriteInt32(w, item.StartTime)
	if (item.StartTime != 0) == false {
		w = w[:backupIndexStartTime]
	}
	backupIndexKeysTops := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"keys_tops":`...)
	w = tlBuiltinVectorDictionaryFieldDictionaryInt.BuiltinVectorDictionaryFieldDictionaryIntWriteJSONOpt(newTypeNames, short, w, item.KeysTops)
	if (len(item.KeysTops) != 0) == false {
		w = w[:backupIndexKeysTops]
	}
	return append(w, '}')
}

func (item *Service1KeysStat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service1KeysStat) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service1.keysStat", err.Error())
	}
	return nil
}
