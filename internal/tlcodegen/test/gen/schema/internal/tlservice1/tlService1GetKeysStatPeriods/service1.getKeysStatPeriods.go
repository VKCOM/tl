// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService1GetKeysStatPeriods

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service1GetKeysStatPeriods struct {
}

func (Service1GetKeysStatPeriods) TLName() string { return "service1.getKeysStatPeriods" }
func (Service1GetKeysStatPeriods) TLTag() uint32  { return 0x8cdf39e3 }

func (item *Service1GetKeysStatPeriods) Reset() {}

func (item *Service1GetKeysStatPeriods) Read(w []byte) (_ []byte, err error) { return w, nil }

func (item *Service1GetKeysStatPeriods) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Service1GetKeysStatPeriods) Write(w []byte) []byte {
	return w
}

func (item *Service1GetKeysStatPeriods) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x8cdf39e3); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Service1GetKeysStatPeriods) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service1GetKeysStatPeriods) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x8cdf39e3)
	return item.Write(w)
}

func (item *Service1GetKeysStatPeriods) ReadResult(w []byte, ret *[]int32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return tlBuiltinVectorInt.BuiltinVectorIntRead(w, ret)
}

func (item *Service1GetKeysStatPeriods) WriteResult(w []byte, ret []int32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	w = tlBuiltinVectorInt.BuiltinVectorIntWrite(w, ret)
	return w, nil
}

func (item *Service1GetKeysStatPeriods) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *[]int32) error {
	if err := tlBuiltinVectorInt.BuiltinVectorIntReadJSON(legacyTypeNames, in, ret); err != nil {
		return err
	}
	return nil
}

func (item *Service1GetKeysStatPeriods) WriteResultJSON(w []byte, ret []int32) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *Service1GetKeysStatPeriods) writeResultJSON(tctx *basictl.JSONWriteContext, w []byte, ret []int32) (_ []byte, err error) {
	w = tlBuiltinVectorInt.BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, ret)
	return w, nil
}

func (item *Service1GetKeysStatPeriods) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret []int32
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *Service1GetKeysStatPeriods) ReadResultWriteResultJSONOpt(tctx *basictl.JSONWriteContext, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret []int32
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *Service1GetKeysStatPeriods) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret []int32
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item Service1GetKeysStatPeriods) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service1GetKeysStatPeriods) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return internal.ErrorInvalidJSON("service1.getKeysStatPeriods", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service1GetKeysStatPeriods) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Service1GetKeysStatPeriods) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service1GetKeysStatPeriods) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *Service1GetKeysStatPeriods) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service1GetKeysStatPeriods) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service1.getKeysStatPeriods", err.Error())
	}
	return nil
}
