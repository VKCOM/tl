// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package cycle_49caccaceef1b58bbbff030c58394129

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

var _TreeStatsObjectLimitValue = [2]internal.UnionElement{
	{TLTag: 0x73111993, TLName: "tree_stats.objectLimitValueLong", TLString: "tree_stats.objectLimitValueLong#73111993"},
	{TLTag: 0x5dfb8816, TLName: "tree_stats.objectLimitValueDouble", TLString: "tree_stats.objectLimitValueDouble#5dfb8816"},
}

type TreeStatsObjectLimitValue struct {
	valueDouble TreeStatsObjectLimitValueDouble
	index       int
}

func (item TreeStatsObjectLimitValue) TLName() string {
	return _TreeStatsObjectLimitValue[item.index].TLName
}
func (item TreeStatsObjectLimitValue) TLTag() uint32 {
	return _TreeStatsObjectLimitValue[item.index].TLTag
}

func (item *TreeStatsObjectLimitValue) Reset() { item.index = 0 }

func (item *TreeStatsObjectLimitValue) IsLong() bool { return item.index == 0 }

func (item *TreeStatsObjectLimitValue) AsLong() (TreeStatsObjectLimitValueLong, bool) {
	var value TreeStatsObjectLimitValueLong
	return value, item.index == 0
}
func (item *TreeStatsObjectLimitValue) ResetToLong() { item.index = 0 }
func (item *TreeStatsObjectLimitValue) SetLong()     { item.index = 0 }

func (item *TreeStatsObjectLimitValue) IsDouble() bool { return item.index == 1 }

func (item *TreeStatsObjectLimitValue) AsDouble() (*TreeStatsObjectLimitValueDouble, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueDouble, true
}
func (item *TreeStatsObjectLimitValue) ResetToDouble() *TreeStatsObjectLimitValueDouble {
	item.index = 1
	item.valueDouble.Reset()
	return &item.valueDouble
}
func (item *TreeStatsObjectLimitValue) SetDouble(value TreeStatsObjectLimitValueDouble) {
	item.index = 1
	item.valueDouble = value
}

func (item *TreeStatsObjectLimitValue) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x73111993:
		item.index = 0
		return w, nil
	case 0x5dfb8816:
		item.index = 1
		return item.valueDouble.Read(w)
	default:
		return w, internal.ErrorInvalidUnionTag("tree_stats.ObjectLimitValue", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *TreeStatsObjectLimitValue) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TreeStatsObjectLimitValue) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _TreeStatsObjectLimitValue[item.index].TLTag)
	switch item.index {
	case 0:
		return w
	case 1:
		w = item.valueDouble.Write(w)
	}
	return w
}

func (item *TreeStatsObjectLimitValue) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := internal.Json2ReadUnion("tree_stats.ObjectLimitValue", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "tree_stats.objectLimitValueLong#73111993", "tree_stats.objectLimitValueLong", "#73111993":
		if !legacyTypeNames && _tag == "tree_stats.objectLimitValueLong#73111993" {
			return internal.ErrorInvalidUnionLegacyTagJSON("tree_stats.ObjectLimitValue", "tree_stats.objectLimitValueLong#73111993")
		}
		item.index = 0
	case "tree_stats.objectLimitValueDouble#5dfb8816", "tree_stats.objectLimitValueDouble", "#5dfb8816":
		if !legacyTypeNames && _tag == "tree_stats.objectLimitValueDouble#5dfb8816" {
			return internal.ErrorInvalidUnionLegacyTagJSON("tree_stats.ObjectLimitValue", "tree_stats.objectLimitValueDouble#5dfb8816")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueDouble.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return internal.ErrorInvalidUnionTagJSON("tree_stats.ObjectLimitValue", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TreeStatsObjectLimitValue) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TreeStatsObjectLimitValue) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TreeStatsObjectLimitValue) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"tree_stats.objectLimitValueLong"`...)
		} else {
			w = append(w, `{"type":"tree_stats.objectLimitValueLong#73111993"`...)
		}
		return append(w, '}')
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"tree_stats.objectLimitValueDouble"`...)
		} else {
			w = append(w, `{"type":"tree_stats.objectLimitValueDouble#5dfb8816"`...)
		}
		if item.valueDouble != 0 {
			w = append(w, `,"value":`...)
			w = item.valueDouble.WriteJSONOpt(newTypeNames, short, w)
		}
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item TreeStatsObjectLimitValue) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TreeStatsObjectLimitValue) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TreeStatsObjectLimitValue) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("tree_stats.ObjectLimitValue", err.Error())
	}
	return nil
}

func (item TreeStatsObjectLimitValueDouble) AsUnion() TreeStatsObjectLimitValue {
	var ret TreeStatsObjectLimitValue
	ret.SetDouble(item)
	return ret
}

type TreeStatsObjectLimitValueDouble float64

func (TreeStatsObjectLimitValueDouble) TLName() string { return "tree_stats.objectLimitValueDouble" }
func (TreeStatsObjectLimitValueDouble) TLTag() uint32  { return 0x5dfb8816 }

func (item *TreeStatsObjectLimitValueDouble) Reset() {
	ptr := (*float64)(item)
	*ptr = 0
}

func (item *TreeStatsObjectLimitValueDouble) Read(w []byte) (_ []byte, err error) {
	ptr := (*float64)(item)
	return basictl.DoubleRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *TreeStatsObjectLimitValueDouble) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TreeStatsObjectLimitValueDouble) Write(w []byte) []byte {
	ptr := (*float64)(item)
	return basictl.DoubleWrite(w, *ptr)
}

func (item *TreeStatsObjectLimitValueDouble) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5dfb8816); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TreeStatsObjectLimitValueDouble) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TreeStatsObjectLimitValueDouble) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x5dfb8816)
	return item.Write(w)
}

func (item TreeStatsObjectLimitValueDouble) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TreeStatsObjectLimitValueDouble) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*float64)(item)
	if err := internal.Json2ReadFloat64(in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TreeStatsObjectLimitValueDouble) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *TreeStatsObjectLimitValueDouble) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *TreeStatsObjectLimitValueDouble) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*float64)(item)
	w = basictl.JSONWriteFloat64(w, *ptr)
	return w
}
func (item *TreeStatsObjectLimitValueDouble) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TreeStatsObjectLimitValueDouble) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("tree_stats.objectLimitValueDouble", err.Error())
	}
	return nil
}

func (item TreeStatsObjectLimitValueLong) AsUnion() TreeStatsObjectLimitValue {
	var ret TreeStatsObjectLimitValue
	ret.SetLong()
	return ret
}

type TreeStatsObjectLimitValueLong struct {
}

func (TreeStatsObjectLimitValueLong) TLName() string { return "tree_stats.objectLimitValueLong" }
func (TreeStatsObjectLimitValueLong) TLTag() uint32  { return 0x73111993 }

func (item *TreeStatsObjectLimitValueLong) Reset() {}

func (item *TreeStatsObjectLimitValueLong) Read(w []byte) (_ []byte, err error) { return w, nil }

// This method is general version of Write, use it instead!
func (item *TreeStatsObjectLimitValueLong) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TreeStatsObjectLimitValueLong) Write(w []byte) []byte {
	return w
}

func (item *TreeStatsObjectLimitValueLong) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x73111993); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TreeStatsObjectLimitValueLong) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TreeStatsObjectLimitValueLong) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x73111993)
	return item.Write(w)
}

func (item TreeStatsObjectLimitValueLong) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TreeStatsObjectLimitValueLong) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return internal.ErrorInvalidJSON("tree_stats.objectLimitValueLong", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TreeStatsObjectLimitValueLong) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TreeStatsObjectLimitValueLong) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TreeStatsObjectLimitValueLong) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *TreeStatsObjectLimitValueLong) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TreeStatsObjectLimitValueLong) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("tree_stats.objectLimitValueLong", err.Error())
	}
	return nil
}
