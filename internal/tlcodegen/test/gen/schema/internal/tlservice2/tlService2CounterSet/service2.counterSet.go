// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService2CounterSet

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTupleDouble"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTupleInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service2CounterSet struct {
	IntCounters   []int32
	FloatCounters []float64
}

func (Service2CounterSet) TLName() string { return "service2.counterSet" }
func (Service2CounterSet) TLTag() uint32  { return 0xf5403fd9 }

func (item *Service2CounterSet) Reset() {
	item.IntCounters = item.IntCounters[:0]
	item.FloatCounters = item.FloatCounters[:0]
}

func (item *Service2CounterSet) Read(w []byte, nat_intCountersNum uint32, nat_floatCountersNum uint32) (_ []byte, err error) {
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.IntCounters, nat_intCountersNum); err != nil {
		return w, err
	}
	return tlBuiltinTupleDouble.BuiltinTupleDoubleRead(w, &item.FloatCounters, nat_floatCountersNum)
}

func (item *Service2CounterSet) WriteGeneral(w []byte, nat_intCountersNum uint32, nat_floatCountersNum uint32) (_ []byte, err error) {
	return item.Write(w, nat_intCountersNum, nat_floatCountersNum)
}

func (item *Service2CounterSet) Write(w []byte, nat_intCountersNum uint32, nat_floatCountersNum uint32) (_ []byte, err error) {
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.IntCounters, nat_intCountersNum); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleDouble.BuiltinTupleDoubleWrite(w, item.FloatCounters, nat_floatCountersNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Service2CounterSet) ReadBoxed(w []byte, nat_intCountersNum uint32, nat_floatCountersNum uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xf5403fd9); err != nil {
		return w, err
	}
	return item.Read(w, nat_intCountersNum, nat_floatCountersNum)
}

func (item *Service2CounterSet) WriteBoxedGeneral(w []byte, nat_intCountersNum uint32, nat_floatCountersNum uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_intCountersNum, nat_floatCountersNum)
}

func (item *Service2CounterSet) WriteBoxed(w []byte, nat_intCountersNum uint32, nat_floatCountersNum uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xf5403fd9)
	return item.Write(w, nat_intCountersNum, nat_floatCountersNum)
}

func (item *Service2CounterSet) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_intCountersNum uint32, nat_floatCountersNum uint32) error {
	var rawIntCounters []byte
	var rawFloatCounters []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "intCounters":
				if rawIntCounters != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.counterSet", "intCounters")
				}
				rawIntCounters = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "floatCounters":
				if rawFloatCounters != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.counterSet", "floatCounters")
				}
				rawFloatCounters = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("service2.counterSet", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inIntCountersPointer *basictl.JsonLexer
	inIntCounters := basictl.JsonLexer{Data: rawIntCounters}
	if rawIntCounters != nil {
		inIntCountersPointer = &inIntCounters
	}
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, inIntCountersPointer, &item.IntCounters, nat_intCountersNum); err != nil {
		return err
	}

	var inFloatCountersPointer *basictl.JsonLexer
	inFloatCounters := basictl.JsonLexer{Data: rawFloatCounters}
	if rawFloatCounters != nil {
		inFloatCountersPointer = &inFloatCounters
	}
	if err := tlBuiltinTupleDouble.BuiltinTupleDoubleReadJSON(legacyTypeNames, inFloatCountersPointer, &item.FloatCounters, nat_floatCountersNum); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service2CounterSet) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte, nat_intCountersNum uint32, nat_floatCountersNum uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w, nat_intCountersNum, nat_floatCountersNum)
}

func (item *Service2CounterSet) WriteJSON(w []byte, nat_intCountersNum uint32, nat_floatCountersNum uint32) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w, nat_intCountersNum, nat_floatCountersNum)
}
func (item *Service2CounterSet) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_intCountersNum uint32, nat_floatCountersNum uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexIntCounters := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"intCounters":`...)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(tctx, w, item.IntCounters, nat_intCountersNum); err != nil {
		return w, err
	}
	if (len(item.IntCounters) != 0) == false {
		w = w[:backupIndexIntCounters]
	}
	backupIndexFloatCounters := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"floatCounters":`...)
	if w, err = tlBuiltinTupleDouble.BuiltinTupleDoubleWriteJSONOpt(tctx, w, item.FloatCounters, nat_floatCountersNum); err != nil {
		return w, err
	}
	if (len(item.FloatCounters) != 0) == false {
		w = w[:backupIndexFloatCounters]
	}
	return append(w, '}'), nil
}
