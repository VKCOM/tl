// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService2Set

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTupleInt"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlTrue"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tlservice2/tlService2DeltaSet"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service2Set struct {
	ObjectIdLength   uint32
	IntCountersNum   uint32
	FloatCountersNum uint32
	IntCounters      []int32
	FloatCounters    []int32
	NewValues        tlService2DeltaSet.Service2DeltaSet
}

func (Service2Set) TLName() string { return "service2.set" }
func (Service2Set) TLTag() uint32  { return 0x0d31f63d }

func (item *Service2Set) Reset() {
	item.ObjectIdLength = 0
	item.IntCountersNum = 0
	item.FloatCountersNum = 0
	item.IntCounters = item.IntCounters[:0]
	item.FloatCounters = item.FloatCounters[:0]
	item.NewValues.Reset()
}

func (item *Service2Set) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.ObjectIdLength); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.IntCountersNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.FloatCountersNum); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.IntCounters, item.IntCountersNum); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.FloatCounters, item.FloatCountersNum); err != nil {
		return w, err
	}
	return item.NewValues.Read(w, item.ObjectIdLength, item.IntCountersNum, item.FloatCountersNum)
}

// This method is general version of Write, use it instead!
func (item *Service2Set) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *Service2Set) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.ObjectIdLength)
	w = basictl.NatWrite(w, item.IntCountersNum)
	w = basictl.NatWrite(w, item.FloatCountersNum)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.IntCounters, item.IntCountersNum); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.FloatCounters, item.FloatCountersNum); err != nil {
		return w, err
	}
	if w, err = item.NewValues.Write(w, item.ObjectIdLength, item.IntCountersNum, item.FloatCountersNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Service2Set) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0d31f63d); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Service2Set) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *Service2Set) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x0d31f63d)
	return item.Write(w)
}

func (item *Service2Set) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *Service2Set) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *Service2Set) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *tlTrue.True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *Service2Set) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *Service2Set) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *Service2Set) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *Service2Set) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *Service2Set) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret tlTrue.True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item Service2Set) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *Service2Set) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propObjectIdLengthPresented bool
	var propIntCountersNumPresented bool
	var propFloatCountersNumPresented bool
	var rawIntCounters []byte
	var rawFloatCounters []byte
	var rawNewValues []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "objectIdLength":
				if propObjectIdLengthPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.set", "objectIdLength")
				}
				if err := internal.Json2ReadUint32(in, &item.ObjectIdLength); err != nil {
					return err
				}
				propObjectIdLengthPresented = true
			case "intCountersNum":
				if propIntCountersNumPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.set", "intCountersNum")
				}
				if err := internal.Json2ReadUint32(in, &item.IntCountersNum); err != nil {
					return err
				}
				propIntCountersNumPresented = true
			case "floatCountersNum":
				if propFloatCountersNumPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.set", "floatCountersNum")
				}
				if err := internal.Json2ReadUint32(in, &item.FloatCountersNum); err != nil {
					return err
				}
				propFloatCountersNumPresented = true
			case "intCounters":
				if rawIntCounters != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.set", "intCounters")
				}
				rawIntCounters = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "floatCounters":
				if rawFloatCounters != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.set", "floatCounters")
				}
				rawFloatCounters = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "newValues":
				if rawNewValues != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.set", "newValues")
				}
				rawNewValues = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("service2.set", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propObjectIdLengthPresented {
		item.ObjectIdLength = 0
	}
	if !propIntCountersNumPresented {
		item.IntCountersNum = 0
	}
	if !propFloatCountersNumPresented {
		item.FloatCountersNum = 0
	}
	var inIntCountersPointer *basictl.JsonLexer
	inIntCounters := basictl.JsonLexer{Data: rawIntCounters}
	if rawIntCounters != nil {
		inIntCountersPointer = &inIntCounters
	}
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, inIntCountersPointer, &item.IntCounters, item.IntCountersNum); err != nil {
		return err
	}

	var inFloatCountersPointer *basictl.JsonLexer
	inFloatCounters := basictl.JsonLexer{Data: rawFloatCounters}
	if rawFloatCounters != nil {
		inFloatCountersPointer = &inFloatCounters
	}
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, inFloatCountersPointer, &item.FloatCounters, item.FloatCountersNum); err != nil {
		return err
	}

	var inNewValuesPointer *basictl.JsonLexer
	inNewValues := basictl.JsonLexer{Data: rawNewValues}
	if rawNewValues != nil {
		inNewValuesPointer = &inNewValues
	}
	if err := item.NewValues.ReadJSON(legacyTypeNames, inNewValuesPointer, item.ObjectIdLength, item.IntCountersNum, item.FloatCountersNum); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service2Set) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *Service2Set) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service2Set) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexObjectIdLength := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"objectIdLength":`...)
	w = basictl.JSONWriteUint32(w, item.ObjectIdLength)
	if (item.ObjectIdLength != 0) == false {
		w = w[:backupIndexObjectIdLength]
	}
	backupIndexIntCountersNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"intCountersNum":`...)
	w = basictl.JSONWriteUint32(w, item.IntCountersNum)
	if (item.IntCountersNum != 0) == false {
		w = w[:backupIndexIntCountersNum]
	}
	backupIndexFloatCountersNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"floatCountersNum":`...)
	w = basictl.JSONWriteUint32(w, item.FloatCountersNum)
	if (item.FloatCountersNum != 0) == false {
		w = w[:backupIndexFloatCountersNum]
	}
	backupIndexIntCounters := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"intCounters":`...)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.IntCounters, item.IntCountersNum); err != nil {
		return w, err
	}
	if (len(item.IntCounters) != 0) == false {
		w = w[:backupIndexIntCounters]
	}
	backupIndexFloatCounters := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"floatCounters":`...)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.FloatCounters, item.FloatCountersNum); err != nil {
		return w, err
	}
	if (len(item.FloatCounters) != 0) == false {
		w = w[:backupIndexFloatCounters]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"newValues":`...)
	if w, err = item.NewValues.WriteJSONOpt(newTypeNames, short, w, item.ObjectIdLength, item.IntCountersNum, item.FloatCountersNum); err != nil {
		return w, err
	}
	return append(w, '}'), nil
}

func (item *Service2Set) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *Service2Set) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service2.set", err.Error())
	}
	return nil
}
