// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService2AddOrIncrMany

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTupleInt"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTupleService2CounterSet"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinTupleService2DeltaSet"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tlservice2/tlService2CounterSet"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tlservice2/tlService2DeltaSet"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service2AddOrIncrMany struct {
	ObjectIdLength   uint32
	IntCountersNum   uint32
	FloatCountersNum uint32
	ObjectsNum       uint32
	IntCounters      []int32
	FloatCounters    []int32
	Deltas           []tlService2DeltaSet.Service2DeltaSet
}

func (Service2AddOrIncrMany) TLName() string { return "service2.addOrIncrMany" }
func (Service2AddOrIncrMany) TLTag() uint32  { return 0x5aa52489 }

func (item *Service2AddOrIncrMany) Reset() {
	item.ObjectIdLength = 0
	item.IntCountersNum = 0
	item.FloatCountersNum = 0
	item.ObjectsNum = 0
	item.IntCounters = item.IntCounters[:0]
	item.FloatCounters = item.FloatCounters[:0]
	item.Deltas = item.Deltas[:0]
}

func (item *Service2AddOrIncrMany) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.ObjectIdLength); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.IntCountersNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.FloatCountersNum); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.ObjectsNum); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.IntCounters, item.IntCountersNum); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntRead(w, &item.FloatCounters, item.FloatCountersNum); err != nil {
		return w, err
	}
	return tlBuiltinTupleService2DeltaSet.BuiltinTupleService2DeltaSetRead(w, &item.Deltas, item.ObjectsNum, item.ObjectIdLength, item.IntCountersNum, item.FloatCountersNum)
}

func (item *Service2AddOrIncrMany) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w)
}

func (item *Service2AddOrIncrMany) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.ObjectIdLength)
	w = basictl.NatWrite(w, item.IntCountersNum)
	w = basictl.NatWrite(w, item.FloatCountersNum)
	w = basictl.NatWrite(w, item.ObjectsNum)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.IntCounters, item.IntCountersNum); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWrite(w, item.FloatCounters, item.FloatCountersNum); err != nil {
		return w, err
	}
	if w, err = tlBuiltinTupleService2DeltaSet.BuiltinTupleService2DeltaSetWrite(w, item.Deltas, item.ObjectsNum, item.ObjectIdLength, item.IntCountersNum, item.FloatCountersNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Service2AddOrIncrMany) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5aa52489); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Service2AddOrIncrMany) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w)
}

func (item *Service2AddOrIncrMany) WriteBoxed(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x5aa52489)
	return item.Write(w)
}

func (item *Service2AddOrIncrMany) ReadResult(w []byte, ret *[]tlService2CounterSet.Service2CounterSet) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return tlBuiltinTupleService2CounterSet.BuiltinTupleService2CounterSetRead(w, ret, item.ObjectsNum, item.IntCountersNum, item.FloatCountersNum)
}

func (item *Service2AddOrIncrMany) WriteResult(w []byte, ret []tlService2CounterSet.Service2CounterSet) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x9770768a)
	if w, err = tlBuiltinTupleService2CounterSet.BuiltinTupleService2CounterSetWrite(w, ret, item.ObjectsNum, item.IntCountersNum, item.FloatCountersNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Service2AddOrIncrMany) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *[]tlService2CounterSet.Service2CounterSet) error {
	if err := tlBuiltinTupleService2CounterSet.BuiltinTupleService2CounterSetReadJSON(legacyTypeNames, in, ret, item.ObjectsNum, item.IntCountersNum, item.FloatCountersNum); err != nil {
		return err
	}
	return nil
}

func (item *Service2AddOrIncrMany) WriteResultJSON(w []byte, ret []tlService2CounterSet.Service2CounterSet) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *Service2AddOrIncrMany) writeResultJSON(newTypeNames bool, short bool, w []byte, ret []tlService2CounterSet.Service2CounterSet) (_ []byte, err error) {
	if w, err = tlBuiltinTupleService2CounterSet.BuiltinTupleService2CounterSetWriteJSONOpt(newTypeNames, short, w, ret, item.ObjectsNum, item.IntCountersNum, item.FloatCountersNum); err != nil {
		return w, err
	}
	return w, nil
}

func (item *Service2AddOrIncrMany) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret []tlService2CounterSet.Service2CounterSet
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *Service2AddOrIncrMany) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret []tlService2CounterSet.Service2CounterSet
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *Service2AddOrIncrMany) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret []tlService2CounterSet.Service2CounterSet
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item Service2AddOrIncrMany) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *Service2AddOrIncrMany) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propObjectIdLengthPresented bool
	var propIntCountersNumPresented bool
	var propFloatCountersNumPresented bool
	var propObjectsNumPresented bool
	var rawIntCounters []byte
	var rawFloatCounters []byte
	var rawDeltas []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "objectIdLength":
				if propObjectIdLengthPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.addOrIncrMany", "objectIdLength")
				}
				if err := internal.Json2ReadUint32(in, &item.ObjectIdLength); err != nil {
					return err
				}
				propObjectIdLengthPresented = true
			case "intCountersNum":
				if propIntCountersNumPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.addOrIncrMany", "intCountersNum")
				}
				if err := internal.Json2ReadUint32(in, &item.IntCountersNum); err != nil {
					return err
				}
				propIntCountersNumPresented = true
			case "floatCountersNum":
				if propFloatCountersNumPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.addOrIncrMany", "floatCountersNum")
				}
				if err := internal.Json2ReadUint32(in, &item.FloatCountersNum); err != nil {
					return err
				}
				propFloatCountersNumPresented = true
			case "objectsNum":
				if propObjectsNumPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.addOrIncrMany", "objectsNum")
				}
				if err := internal.Json2ReadUint32(in, &item.ObjectsNum); err != nil {
					return err
				}
				propObjectsNumPresented = true
			case "intCounters":
				if rawIntCounters != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.addOrIncrMany", "intCounters")
				}
				rawIntCounters = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "floatCounters":
				if rawFloatCounters != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.addOrIncrMany", "floatCounters")
				}
				rawFloatCounters = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "deltas":
				if rawDeltas != nil {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service2.addOrIncrMany", "deltas")
				}
				rawDeltas = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return internal.ErrorInvalidJSONExcessElement("service2.addOrIncrMany", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propObjectIdLengthPresented {
		item.ObjectIdLength = 0
	}
	if !propIntCountersNumPresented {
		item.IntCountersNum = 0
	}
	if !propFloatCountersNumPresented {
		item.FloatCountersNum = 0
	}
	if !propObjectsNumPresented {
		item.ObjectsNum = 0
	}
	var inIntCountersPointer *basictl.JsonLexer
	inIntCounters := basictl.JsonLexer{Data: rawIntCounters}
	if rawIntCounters != nil {
		inIntCountersPointer = &inIntCounters
	}
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, inIntCountersPointer, &item.IntCounters, item.IntCountersNum); err != nil {
		return err
	}

	var inFloatCountersPointer *basictl.JsonLexer
	inFloatCounters := basictl.JsonLexer{Data: rawFloatCounters}
	if rawFloatCounters != nil {
		inFloatCountersPointer = &inFloatCounters
	}
	if err := tlBuiltinTupleInt.BuiltinTupleIntReadJSON(legacyTypeNames, inFloatCountersPointer, &item.FloatCounters, item.FloatCountersNum); err != nil {
		return err
	}

	var inDeltasPointer *basictl.JsonLexer
	inDeltas := basictl.JsonLexer{Data: rawDeltas}
	if rawDeltas != nil {
		inDeltasPointer = &inDeltas
	}
	if err := tlBuiltinTupleService2DeltaSet.BuiltinTupleService2DeltaSetReadJSON(legacyTypeNames, inDeltasPointer, &item.Deltas, item.ObjectsNum, item.ObjectIdLength, item.IntCountersNum, item.FloatCountersNum); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service2AddOrIncrMany) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}

func (item *Service2AddOrIncrMany) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service2AddOrIncrMany) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexObjectIdLength := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"objectIdLength":`...)
	w = basictl.JSONWriteUint32(w, item.ObjectIdLength)
	if (item.ObjectIdLength != 0) == false {
		w = w[:backupIndexObjectIdLength]
	}
	backupIndexIntCountersNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"intCountersNum":`...)
	w = basictl.JSONWriteUint32(w, item.IntCountersNum)
	if (item.IntCountersNum != 0) == false {
		w = w[:backupIndexIntCountersNum]
	}
	backupIndexFloatCountersNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"floatCountersNum":`...)
	w = basictl.JSONWriteUint32(w, item.FloatCountersNum)
	if (item.FloatCountersNum != 0) == false {
		w = w[:backupIndexFloatCountersNum]
	}
	backupIndexObjectsNum := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"objectsNum":`...)
	w = basictl.JSONWriteUint32(w, item.ObjectsNum)
	if (item.ObjectsNum != 0) == false {
		w = w[:backupIndexObjectsNum]
	}
	backupIndexIntCounters := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"intCounters":`...)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.IntCounters, item.IntCountersNum); err != nil {
		return w, err
	}
	if (len(item.IntCounters) != 0) == false {
		w = w[:backupIndexIntCounters]
	}
	backupIndexFloatCounters := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"floatCounters":`...)
	if w, err = tlBuiltinTupleInt.BuiltinTupleIntWriteJSONOpt(newTypeNames, short, w, item.FloatCounters, item.FloatCountersNum); err != nil {
		return w, err
	}
	if (len(item.FloatCounters) != 0) == false {
		w = w[:backupIndexFloatCounters]
	}
	backupIndexDeltas := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"deltas":`...)
	if w, err = tlBuiltinTupleService2DeltaSet.BuiltinTupleService2DeltaSetWriteJSONOpt(newTypeNames, short, w, item.Deltas, item.ObjectsNum, item.ObjectIdLength, item.IntCountersNum, item.FloatCountersNum); err != nil {
		return w, err
	}
	if (len(item.Deltas) != 0) == false {
		w = w[:backupIndexDeltas]
	}
	return append(w, '}'), nil
}

func (item *Service2AddOrIncrMany) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *Service2AddOrIncrMany) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service2.addOrIncrMany", err.Error())
	}
	return nil
}
