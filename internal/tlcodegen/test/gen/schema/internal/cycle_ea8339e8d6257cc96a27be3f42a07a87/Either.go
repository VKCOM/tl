// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package cycle_ea8339e8d6257cc96a27be3f42a07a87

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorService6FindWithBoundsResult"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tlservice6/tlService6FindWithBoundsResult"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

var _EitherIntVectorService6FindWithBoundsResult = [2]internal.UnionElement{
	{TLTag: 0x0a29cd5d, TLName: "left", TLString: "left#0a29cd5d"},
	{TLTag: 0xdf3ecb3b, TLName: "right", TLString: "right#df3ecb3b"},
}

type EitherIntVectorService6FindWithBoundsResult struct {
	valueLeft  LeftIntVectorService6FindWithBoundsResult
	valueRight RightIntVectorService6FindWithBoundsResult
	index      int
}

func (item EitherIntVectorService6FindWithBoundsResult) TLName() string {
	return _EitherIntVectorService6FindWithBoundsResult[item.index].TLName
}
func (item EitherIntVectorService6FindWithBoundsResult) TLTag() uint32 {
	return _EitherIntVectorService6FindWithBoundsResult[item.index].TLTag
}

func (item *EitherIntVectorService6FindWithBoundsResult) Reset() { item.ResetToLeft() }

func (item *EitherIntVectorService6FindWithBoundsResult) IsLeft() bool { return item.index == 0 }

func (item *EitherIntVectorService6FindWithBoundsResult) AsLeft() (*LeftIntVectorService6FindWithBoundsResult, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueLeft, true
}
func (item *EitherIntVectorService6FindWithBoundsResult) ResetToLeft() *LeftIntVectorService6FindWithBoundsResult {
	item.index = 0
	item.valueLeft.Reset()
	return &item.valueLeft
}
func (item *EitherIntVectorService6FindWithBoundsResult) SetLeft(value LeftIntVectorService6FindWithBoundsResult) {
	item.index = 0
	item.valueLeft = value
}

func (item *EitherIntVectorService6FindWithBoundsResult) IsRight() bool { return item.index == 1 }

func (item *EitherIntVectorService6FindWithBoundsResult) AsRight() (*RightIntVectorService6FindWithBoundsResult, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueRight, true
}
func (item *EitherIntVectorService6FindWithBoundsResult) ResetToRight() *RightIntVectorService6FindWithBoundsResult {
	item.index = 1
	item.valueRight.Reset()
	return &item.valueRight
}
func (item *EitherIntVectorService6FindWithBoundsResult) SetRight(value RightIntVectorService6FindWithBoundsResult) {
	item.index = 1
	item.valueRight = value
}

func (item *EitherIntVectorService6FindWithBoundsResult) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x0a29cd5d:
		item.index = 0
		return item.valueLeft.Read(w)
	case 0xdf3ecb3b:
		item.index = 1
		return item.valueRight.Read(w)
	default:
		return w, internal.ErrorInvalidUnionTag("Either", tag)
	}
}

func (item *EitherIntVectorService6FindWithBoundsResult) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *EitherIntVectorService6FindWithBoundsResult) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _EitherIntVectorService6FindWithBoundsResult[item.index].TLTag)
	switch item.index {
	case 0:
		w = item.valueLeft.Write(w)
	case 1:
		w = item.valueRight.Write(w)
	}
	return w
}

func (item *EitherIntVectorService6FindWithBoundsResult) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := internal.Json2ReadUnion("Either", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "left#0a29cd5d", "left", "#0a29cd5d":
		if !legacyTypeNames && _tag == "left#0a29cd5d" {
			return internal.ErrorInvalidUnionLegacyTagJSON("Either", "left#0a29cd5d")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueLeft.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "right#df3ecb3b", "right", "#df3ecb3b":
		if !legacyTypeNames && _tag == "right#df3ecb3b" {
			return internal.ErrorInvalidUnionLegacyTagJSON("Either", "right#df3ecb3b")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueRight.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return internal.ErrorInvalidUnionTagJSON("Either", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *EitherIntVectorService6FindWithBoundsResult) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *EitherIntVectorService6FindWithBoundsResult) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EitherIntVectorService6FindWithBoundsResult) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"left"`...)
		} else {
			w = append(w, `{"type":"left#0a29cd5d"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueLeft.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"right"`...)
		} else {
			w = append(w, `{"type":"right#df3ecb3b"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueRight.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item EitherIntVectorService6FindWithBoundsResult) String() string {
	return string(item.WriteJSON(nil))
}

func (item *EitherIntVectorService6FindWithBoundsResult) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *EitherIntVectorService6FindWithBoundsResult) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("Either", err.Error())
	}
	return nil
}

func (item LeftIntVectorService6FindWithBoundsResult) AsUnion() EitherIntVectorService6FindWithBoundsResult {
	var ret EitherIntVectorService6FindWithBoundsResult
	ret.SetLeft(item)
	return ret
}

type LeftIntVectorService6FindWithBoundsResult struct {
	Value int32
}

func (LeftIntVectorService6FindWithBoundsResult) TLName() string { return "left" }
func (LeftIntVectorService6FindWithBoundsResult) TLTag() uint32  { return 0x0a29cd5d }

func (item *LeftIntVectorService6FindWithBoundsResult) Reset() {
	item.Value = 0
}

func (item *LeftIntVectorService6FindWithBoundsResult) Read(w []byte) (_ []byte, err error) {
	return basictl.IntRead(w, &item.Value)
}

func (item *LeftIntVectorService6FindWithBoundsResult) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *LeftIntVectorService6FindWithBoundsResult) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.Value)
	return w
}

func (item *LeftIntVectorService6FindWithBoundsResult) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0a29cd5d); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *LeftIntVectorService6FindWithBoundsResult) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *LeftIntVectorService6FindWithBoundsResult) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0a29cd5d)
	return item.Write(w)
}

func (item LeftIntVectorService6FindWithBoundsResult) String() string {
	return string(item.WriteJSON(nil))
}

func (item *LeftIntVectorService6FindWithBoundsResult) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "value":
				if propValuePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("left", "value")
				}
				if err := internal.Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("left", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propValuePresented {
		item.Value = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *LeftIntVectorService6FindWithBoundsResult) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *LeftIntVectorService6FindWithBoundsResult) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *LeftIntVectorService6FindWithBoundsResult) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *LeftIntVectorService6FindWithBoundsResult) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *LeftIntVectorService6FindWithBoundsResult) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("left", err.Error())
	}
	return nil
}

func (item RightIntVectorService6FindWithBoundsResult) AsUnion() EitherIntVectorService6FindWithBoundsResult {
	var ret EitherIntVectorService6FindWithBoundsResult
	ret.SetRight(item)
	return ret
}

type RightIntVectorService6FindWithBoundsResult struct {
	Value []tlService6FindWithBoundsResult.Service6FindWithBoundsResult
}

func (RightIntVectorService6FindWithBoundsResult) TLName() string { return "right" }
func (RightIntVectorService6FindWithBoundsResult) TLTag() uint32  { return 0xdf3ecb3b }

func (item *RightIntVectorService6FindWithBoundsResult) Reset() {
	item.Value = item.Value[:0]
}

func (item *RightIntVectorService6FindWithBoundsResult) Read(w []byte) (_ []byte, err error) {
	return tlBuiltinVectorService6FindWithBoundsResult.BuiltinVectorService6FindWithBoundsResultRead(w, &item.Value)
}

func (item *RightIntVectorService6FindWithBoundsResult) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *RightIntVectorService6FindWithBoundsResult) Write(w []byte) []byte {
	w = tlBuiltinVectorService6FindWithBoundsResult.BuiltinVectorService6FindWithBoundsResultWrite(w, item.Value)
	return w
}

func (item *RightIntVectorService6FindWithBoundsResult) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xdf3ecb3b); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *RightIntVectorService6FindWithBoundsResult) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *RightIntVectorService6FindWithBoundsResult) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xdf3ecb3b)
	return item.Write(w)
}

func (item RightIntVectorService6FindWithBoundsResult) String() string {
	return string(item.WriteJSON(nil))
}

func (item *RightIntVectorService6FindWithBoundsResult) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "value":
				if propValuePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("right", "value")
				}
				if err := tlBuiltinVectorService6FindWithBoundsResult.BuiltinVectorService6FindWithBoundsResultReadJSON(legacyTypeNames, in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("right", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propValuePresented {
		item.Value = item.Value[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *RightIntVectorService6FindWithBoundsResult) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *RightIntVectorService6FindWithBoundsResult) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *RightIntVectorService6FindWithBoundsResult) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = tlBuiltinVectorService6FindWithBoundsResult.BuiltinVectorService6FindWithBoundsResultWriteJSONOpt(newTypeNames, short, w, item.Value)
	if (len(item.Value) != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *RightIntVectorService6FindWithBoundsResult) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *RightIntVectorService6FindWithBoundsResult) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("right", err.Error())
	}
	return nil
}
