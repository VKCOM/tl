// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService3GroupCountLimit

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service3GroupCountLimit struct {
	Types []int32
	Limit int32
}

func (Service3GroupCountLimit) TLName() string { return "service3.groupCountLimit" }
func (Service3GroupCountLimit) TLTag() uint32  { return 0x8c04ea7f }

func (item *Service3GroupCountLimit) Reset() {
	item.Types = item.Types[:0]
	item.Limit = 0
}

func (item *Service3GroupCountLimit) Read(w []byte) (_ []byte, err error) {
	if w, err = tlBuiltinVectorInt.BuiltinVectorIntRead(w, &item.Types); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Limit)
}

func (item *Service3GroupCountLimit) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Service3GroupCountLimit) Write(w []byte) []byte {
	w = tlBuiltinVectorInt.BuiltinVectorIntWrite(w, item.Types)
	w = basictl.IntWrite(w, item.Limit)
	return w
}

func (item *Service3GroupCountLimit) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x8c04ea7f); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Service3GroupCountLimit) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service3GroupCountLimit) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x8c04ea7f)
	return item.Write(w)
}

func (item Service3GroupCountLimit) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service3GroupCountLimit) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propTypesPresented bool
	var propLimitPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "types":
				if propTypesPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.groupCountLimit", "types")
				}
				if err := tlBuiltinVectorInt.BuiltinVectorIntReadJSON(legacyTypeNames, in, &item.Types); err != nil {
					return err
				}
				propTypesPresented = true
			case "limit":
				if propLimitPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.groupCountLimit", "limit")
				}
				if err := internal.Json2ReadInt32(in, &item.Limit); err != nil {
					return err
				}
				propLimitPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("service3.groupCountLimit", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propTypesPresented {
		item.Types = item.Types[:0]
	}
	if !propLimitPresented {
		item.Limit = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service3GroupCountLimit) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *Service3GroupCountLimit) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *Service3GroupCountLimit) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexTypes := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"types":`...)
	w = tlBuiltinVectorInt.BuiltinVectorIntWriteJSONOpt(tctx, w, item.Types)
	if (len(item.Types) != 0) == false {
		w = w[:backupIndexTypes]
	}
	backupIndexLimit := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"limit":`...)
	w = basictl.JSONWriteInt32(w, item.Limit)
	if (item.Limit != 0) == false {
		w = w[:backupIndexLimit]
	}
	return append(w, '}')
}

func (item *Service3GroupCountLimit) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service3GroupCountLimit) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service3.groupCountLimit", err.Error())
	}
	return nil
}
