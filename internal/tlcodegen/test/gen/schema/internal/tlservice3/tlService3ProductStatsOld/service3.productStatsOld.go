// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService3ProductStatsOld

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service3ProductStatsOld struct {
	Type            int32
	CountNew        int32
	CountTotal      int32
	CountScheduled  int32
	NextScheduledAt int32
}

func (Service3ProductStatsOld) TLName() string { return "service3.productStatsOld" }
func (Service3ProductStatsOld) TLTag() uint32  { return 0x6319810b }

func (item *Service3ProductStatsOld) Reset() {
	item.Type = 0
	item.CountNew = 0
	item.CountTotal = 0
	item.CountScheduled = 0
	item.NextScheduledAt = 0
}

func (item *Service3ProductStatsOld) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Type); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.CountNew); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.CountTotal); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.CountScheduled); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.NextScheduledAt)
}

func (item *Service3ProductStatsOld) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Service3ProductStatsOld) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.Type)
	w = basictl.IntWrite(w, item.CountNew)
	w = basictl.IntWrite(w, item.CountTotal)
	w = basictl.IntWrite(w, item.CountScheduled)
	w = basictl.IntWrite(w, item.NextScheduledAt)
	return w
}

func (item *Service3ProductStatsOld) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6319810b); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Service3ProductStatsOld) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service3ProductStatsOld) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x6319810b)
	return item.Write(w)
}

func (item Service3ProductStatsOld) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service3ProductStatsOld) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propTypePresented bool
	var propCountNewPresented bool
	var propCountTotalPresented bool
	var propCountScheduledPresented bool
	var propNextScheduledAtPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "type":
				if propTypePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.productStatsOld", "type")
				}
				if err := internal.Json2ReadInt32(in, &item.Type); err != nil {
					return err
				}
				propTypePresented = true
			case "count_new":
				if propCountNewPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.productStatsOld", "count_new")
				}
				if err := internal.Json2ReadInt32(in, &item.CountNew); err != nil {
					return err
				}
				propCountNewPresented = true
			case "count_total":
				if propCountTotalPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.productStatsOld", "count_total")
				}
				if err := internal.Json2ReadInt32(in, &item.CountTotal); err != nil {
					return err
				}
				propCountTotalPresented = true
			case "count_scheduled":
				if propCountScheduledPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.productStatsOld", "count_scheduled")
				}
				if err := internal.Json2ReadInt32(in, &item.CountScheduled); err != nil {
					return err
				}
				propCountScheduledPresented = true
			case "next_scheduled_at":
				if propNextScheduledAtPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.productStatsOld", "next_scheduled_at")
				}
				if err := internal.Json2ReadInt32(in, &item.NextScheduledAt); err != nil {
					return err
				}
				propNextScheduledAtPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("service3.productStatsOld", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propTypePresented {
		item.Type = 0
	}
	if !propCountNewPresented {
		item.CountNew = 0
	}
	if !propCountTotalPresented {
		item.CountTotal = 0
	}
	if !propCountScheduledPresented {
		item.CountScheduled = 0
	}
	if !propNextScheduledAtPresented {
		item.NextScheduledAt = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service3ProductStatsOld) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Service3ProductStatsOld) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service3ProductStatsOld) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexType := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"type":`...)
	w = basictl.JSONWriteInt32(w, item.Type)
	if (item.Type != 0) == false {
		w = w[:backupIndexType]
	}
	backupIndexCountNew := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"count_new":`...)
	w = basictl.JSONWriteInt32(w, item.CountNew)
	if (item.CountNew != 0) == false {
		w = w[:backupIndexCountNew]
	}
	backupIndexCountTotal := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"count_total":`...)
	w = basictl.JSONWriteInt32(w, item.CountTotal)
	if (item.CountTotal != 0) == false {
		w = w[:backupIndexCountTotal]
	}
	backupIndexCountScheduled := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"count_scheduled":`...)
	w = basictl.JSONWriteInt32(w, item.CountScheduled)
	if (item.CountScheduled != 0) == false {
		w = w[:backupIndexCountScheduled]
	}
	backupIndexNextScheduledAt := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"next_scheduled_at":`...)
	w = basictl.JSONWriteInt32(w, item.NextScheduledAt)
	if (item.NextScheduledAt != 0) == false {
		w = w[:backupIndexNextScheduledAt]
	}
	return append(w, '}')
}

func (item *Service3ProductStatsOld) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service3ProductStatsOld) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service3.productStatsOld", err.Error())
	}
	return nil
}
