// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService3Limits

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorService3GroupCountLimit"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorService3GroupSizeLimit"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tlservice3/tlService3GroupCountLimit"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tlservice3/tlService3GroupSizeLimit"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service3Limits struct {
	DefaultGroupSizeLimit  int32
	CustomGroupSizeLimits  []tlService3GroupSizeLimit.Service3GroupSizeLimit
	DefaultGroupCountLimit int32
	CustomGroupCountLimits []tlService3GroupCountLimit.Service3GroupCountLimit
}

func (Service3Limits) TLName() string { return "service3.limits" }
func (Service3Limits) TLTag() uint32  { return 0x80ee61ca }

func (item *Service3Limits) Reset() {
	item.DefaultGroupSizeLimit = 0
	item.CustomGroupSizeLimits = item.CustomGroupSizeLimits[:0]
	item.DefaultGroupCountLimit = 0
	item.CustomGroupCountLimits = item.CustomGroupCountLimits[:0]
}

func (item *Service3Limits) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.DefaultGroupSizeLimit); err != nil {
		return w, err
	}
	if w, err = tlBuiltinVectorService3GroupSizeLimit.BuiltinVectorService3GroupSizeLimitRead(w, &item.CustomGroupSizeLimits); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.DefaultGroupCountLimit); err != nil {
		return w, err
	}
	return tlBuiltinVectorService3GroupCountLimit.BuiltinVectorService3GroupCountLimitRead(w, &item.CustomGroupCountLimits)
}

// This method is general version of Write, use it instead!
func (item *Service3Limits) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Service3Limits) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.DefaultGroupSizeLimit)
	w = tlBuiltinVectorService3GroupSizeLimit.BuiltinVectorService3GroupSizeLimitWrite(w, item.CustomGroupSizeLimits)
	w = basictl.IntWrite(w, item.DefaultGroupCountLimit)
	w = tlBuiltinVectorService3GroupCountLimit.BuiltinVectorService3GroupCountLimitWrite(w, item.CustomGroupCountLimits)
	return w
}

func (item *Service3Limits) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x80ee61ca); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Service3Limits) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service3Limits) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x80ee61ca)
	return item.Write(w)
}

func (item *Service3Limits) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service3Limits) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propDefaultGroupSizeLimitPresented bool
	var propCustomGroupSizeLimitsPresented bool
	var propDefaultGroupCountLimitPresented bool
	var propCustomGroupCountLimitsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "default_group_size_limit":
				if propDefaultGroupSizeLimitPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.limits", "default_group_size_limit")
				}
				if err := internal.Json2ReadInt32(in, &item.DefaultGroupSizeLimit); err != nil {
					return err
				}
				propDefaultGroupSizeLimitPresented = true
			case "custom_group_size_limits":
				if propCustomGroupSizeLimitsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.limits", "custom_group_size_limits")
				}
				if err := tlBuiltinVectorService3GroupSizeLimit.BuiltinVectorService3GroupSizeLimitReadJSON(legacyTypeNames, in, &item.CustomGroupSizeLimits); err != nil {
					return err
				}
				propCustomGroupSizeLimitsPresented = true
			case "default_group_count_limit":
				if propDefaultGroupCountLimitPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.limits", "default_group_count_limit")
				}
				if err := internal.Json2ReadInt32(in, &item.DefaultGroupCountLimit); err != nil {
					return err
				}
				propDefaultGroupCountLimitPresented = true
			case "custom_group_count_limits":
				if propCustomGroupCountLimitsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service3.limits", "custom_group_count_limits")
				}
				if err := tlBuiltinVectorService3GroupCountLimit.BuiltinVectorService3GroupCountLimitReadJSON(legacyTypeNames, in, &item.CustomGroupCountLimits); err != nil {
					return err
				}
				propCustomGroupCountLimitsPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("service3.limits", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propDefaultGroupSizeLimitPresented {
		item.DefaultGroupSizeLimit = 0
	}
	if !propCustomGroupSizeLimitsPresented {
		item.CustomGroupSizeLimits = item.CustomGroupSizeLimits[:0]
	}
	if !propDefaultGroupCountLimitPresented {
		item.DefaultGroupCountLimit = 0
	}
	if !propCustomGroupCountLimitsPresented {
		item.CustomGroupCountLimits = item.CustomGroupCountLimits[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service3Limits) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Service3Limits) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service3Limits) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexDefaultGroupSizeLimit := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"default_group_size_limit":`...)
	w = basictl.JSONWriteInt32(w, item.DefaultGroupSizeLimit)
	if (item.DefaultGroupSizeLimit != 0) == false {
		w = w[:backupIndexDefaultGroupSizeLimit]
	}
	backupIndexCustomGroupSizeLimits := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"custom_group_size_limits":`...)
	w = tlBuiltinVectorService3GroupSizeLimit.BuiltinVectorService3GroupSizeLimitWriteJSONOpt(newTypeNames, short, w, item.CustomGroupSizeLimits)
	if (len(item.CustomGroupSizeLimits) != 0) == false {
		w = w[:backupIndexCustomGroupSizeLimits]
	}
	backupIndexDefaultGroupCountLimit := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"default_group_count_limit":`...)
	w = basictl.JSONWriteInt32(w, item.DefaultGroupCountLimit)
	if (item.DefaultGroupCountLimit != 0) == false {
		w = w[:backupIndexDefaultGroupCountLimit]
	}
	backupIndexCustomGroupCountLimits := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"custom_group_count_limits":`...)
	w = tlBuiltinVectorService3GroupCountLimit.BuiltinVectorService3GroupCountLimitWriteJSONOpt(newTypeNames, short, w, item.CustomGroupCountLimits)
	if (len(item.CustomGroupCountLimits) != 0) == false {
		w = w[:backupIndexCustomGroupCountLimits]
	}
	return append(w, '}')
}

func (item *Service3Limits) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service3Limits) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service3.limits", err.Error())
	}
	return nil
}
