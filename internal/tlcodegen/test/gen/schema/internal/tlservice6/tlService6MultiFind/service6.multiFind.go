// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlService6MultiFind

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/cycle_e0e20d17984738a60e3bf741bd7db2e9"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorEitherService6ErrorVectorService6FindResultRow"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type Service6MultiFind struct {
	Clusters    []int32
	Limit       int32
	EqThreshold float64
}

func (Service6MultiFind) TLName() string { return "service6.multiFind" }
func (Service6MultiFind) TLTag() uint32  { return 0xe62178d8 }

func (item *Service6MultiFind) Reset() {
	item.Clusters = item.Clusters[:0]
	item.Limit = 0
	item.EqThreshold = 0
}

func (item *Service6MultiFind) Read(w []byte) (_ []byte, err error) {
	if w, err = tlBuiltinVectorInt.BuiltinVectorIntRead(w, &item.Clusters); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Limit); err != nil {
		return w, err
	}
	return basictl.DoubleRead(w, &item.EqThreshold)
}

func (item *Service6MultiFind) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Service6MultiFind) Write(w []byte) []byte {
	w = tlBuiltinVectorInt.BuiltinVectorIntWrite(w, item.Clusters)
	w = basictl.IntWrite(w, item.Limit)
	w = basictl.DoubleWrite(w, item.EqThreshold)
	return w
}

func (item *Service6MultiFind) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe62178d8); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Service6MultiFind) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Service6MultiFind) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xe62178d8)
	return item.Write(w)
}

func (item *Service6MultiFind) ReadResult(w []byte, ret *[]cycle_e0e20d17984738a60e3bf741bd7db2e9.EitherService6ErrorVectorService6FindResultRow) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return tlBuiltinVectorEitherService6ErrorVectorService6FindResultRow.BuiltinVectorEitherService6ErrorVectorService6FindResultRowRead(w, ret)
}

func (item *Service6MultiFind) WriteResult(w []byte, ret []cycle_e0e20d17984738a60e3bf741bd7db2e9.EitherService6ErrorVectorService6FindResultRow) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	w = tlBuiltinVectorEitherService6ErrorVectorService6FindResultRow.BuiltinVectorEitherService6ErrorVectorService6FindResultRowWrite(w, ret)
	return w, nil
}

func (item *Service6MultiFind) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *[]cycle_e0e20d17984738a60e3bf741bd7db2e9.EitherService6ErrorVectorService6FindResultRow) error {
	if err := tlBuiltinVectorEitherService6ErrorVectorService6FindResultRow.BuiltinVectorEitherService6ErrorVectorService6FindResultRowReadJSON(legacyTypeNames, in, ret); err != nil {
		return err
	}
	return nil
}

func (item *Service6MultiFind) WriteResultJSON(w []byte, ret []cycle_e0e20d17984738a60e3bf741bd7db2e9.EitherService6ErrorVectorService6FindResultRow) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *Service6MultiFind) writeResultJSON(newTypeNames bool, short bool, w []byte, ret []cycle_e0e20d17984738a60e3bf741bd7db2e9.EitherService6ErrorVectorService6FindResultRow) (_ []byte, err error) {
	w = tlBuiltinVectorEitherService6ErrorVectorService6FindResultRow.BuiltinVectorEitherService6ErrorVectorService6FindResultRowWriteJSONOpt(newTypeNames, short, w, ret)
	return w, nil
}

func (item *Service6MultiFind) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret []cycle_e0e20d17984738a60e3bf741bd7db2e9.EitherService6ErrorVectorService6FindResultRow
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *Service6MultiFind) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret []cycle_e0e20d17984738a60e3bf741bd7db2e9.EitherService6ErrorVectorService6FindResultRow
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *Service6MultiFind) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret []cycle_e0e20d17984738a60e3bf741bd7db2e9.EitherService6ErrorVectorService6FindResultRow
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item Service6MultiFind) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Service6MultiFind) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propClustersPresented bool
	var propLimitPresented bool
	var propEqThresholdPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "clusters":
				if propClustersPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service6.multiFind", "clusters")
				}
				if err := tlBuiltinVectorInt.BuiltinVectorIntReadJSON(legacyTypeNames, in, &item.Clusters); err != nil {
					return err
				}
				propClustersPresented = true
			case "limit":
				if propLimitPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service6.multiFind", "limit")
				}
				if err := internal.Json2ReadInt32(in, &item.Limit); err != nil {
					return err
				}
				propLimitPresented = true
			case "eq_threshold":
				if propEqThresholdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("service6.multiFind", "eq_threshold")
				}
				if err := internal.Json2ReadFloat64(in, &item.EqThreshold); err != nil {
					return err
				}
				propEqThresholdPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("service6.multiFind", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propClustersPresented {
		item.Clusters = item.Clusters[:0]
	}
	if !propLimitPresented {
		item.Limit = 0
	}
	if !propEqThresholdPresented {
		item.EqThreshold = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Service6MultiFind) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *Service6MultiFind) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *Service6MultiFind) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexClusters := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"clusters":`...)
	w = tlBuiltinVectorInt.BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, item.Clusters)
	if (len(item.Clusters) != 0) == false {
		w = w[:backupIndexClusters]
	}
	backupIndexLimit := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"limit":`...)
	w = basictl.JSONWriteInt32(w, item.Limit)
	if (item.Limit != 0) == false {
		w = w[:backupIndexLimit]
	}
	backupIndexEqThreshold := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"eq_threshold":`...)
	w = basictl.JSONWriteFloat64(w, item.EqThreshold)
	if (item.EqThreshold != 0) == false {
		w = w[:backupIndexEqThreshold]
	}
	return append(w, '}')
}

func (item *Service6MultiFind) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Service6MultiFind) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("service6.multiFind", err.Error())
	}
	return nil
}
