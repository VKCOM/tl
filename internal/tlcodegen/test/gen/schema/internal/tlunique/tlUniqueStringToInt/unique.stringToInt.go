// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlUniqueStringToInt

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type UniqueStringToInt struct {
	Key string
}

func (UniqueStringToInt) TLName() string { return "unique.stringToInt" }
func (UniqueStringToInt) TLTag() uint32  { return 0x0f766c35 }

func (item *UniqueStringToInt) Reset() {
	item.Key = ""
}

func (item *UniqueStringToInt) Read(w []byte) (_ []byte, err error) {
	return basictl.StringRead(w, &item.Key)
}

// This method is general version of Write, use it instead!
func (item *UniqueStringToInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *UniqueStringToInt) Write(w []byte) []byte {
	w = basictl.StringWrite(w, item.Key)
	return w
}

func (item *UniqueStringToInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0f766c35); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *UniqueStringToInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *UniqueStringToInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0f766c35)
	return item.Write(w)
}

func (item *UniqueStringToInt) ReadResult(w []byte, ret *int32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
		return w, err
	}
	return basictl.IntRead(w, ret)
}

func (item *UniqueStringToInt) WriteResult(w []byte, ret int32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xa8509bda)
	w = basictl.IntWrite(w, ret)
	return w, nil
}

func (item *UniqueStringToInt) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *int32) error {
	if err := internal.Json2ReadInt32(in, ret); err != nil {
		return err
	}
	return nil
}

func (item *UniqueStringToInt) WriteResultJSON(w []byte, ret int32) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *UniqueStringToInt) writeResultJSON(newTypeNames bool, short bool, w []byte, ret int32) (_ []byte, err error) {
	w = basictl.JSONWriteInt32(w, ret)
	return w, nil
}

func (item *UniqueStringToInt) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret int32
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *UniqueStringToInt) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret int32
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *UniqueStringToInt) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret int32
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item *UniqueStringToInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *UniqueStringToInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("unique.stringToInt", "key")
				}
				if err := internal.Json2ReadString(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("unique.stringToInt", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *UniqueStringToInt) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *UniqueStringToInt) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *UniqueStringToInt) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteString(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	return append(w, '}')
}

func (item *UniqueStringToInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *UniqueStringToInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("unique.stringToInt", err.Error())
	}
	return nil
}
