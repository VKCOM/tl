// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTasksTaskInfo

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorInt"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tltasks/tlTasksTask"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TasksTaskInfo struct {
	TypeName string
	QueueId  []int32
	Task     tlTasksTask.TasksTask
}

func (TasksTaskInfo) TLName() string { return "tasks.taskInfo" }
func (TasksTaskInfo) TLTag() uint32  { return 0x6f0c6a6 }

func (item *TasksTaskInfo) Reset() {
	item.TypeName = ""
	item.QueueId = item.QueueId[:0]
	item.Task.Reset()
}

func (item *TasksTaskInfo) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.TypeName); err != nil {
		return w, err
	}
	if w, err = tlBuiltinVectorInt.BuiltinVectorIntRead(w, &item.QueueId); err != nil {
		return w, err
	}
	return item.Task.Read(w)
}

// This method is general version of Write, use it instead!
func (item *TasksTaskInfo) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TasksTaskInfo) Write(w []byte) []byte {
	w = basictl.StringWrite(w, item.TypeName)
	w = tlBuiltinVectorInt.BuiltinVectorIntWrite(w, item.QueueId)
	w = item.Task.Write(w)
	return w
}

func (item *TasksTaskInfo) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6f0c6a6); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TasksTaskInfo) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TasksTaskInfo) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x6f0c6a6)
	return item.Write(w)
}

func (item TasksTaskInfo) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TasksTaskInfo) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propTypeNamePresented bool
	var propQueueIdPresented bool
	var propTaskPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "type_name":
				if propTypeNamePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.taskInfo", "type_name")
				}
				if err := internal.Json2ReadString(in, &item.TypeName); err != nil {
					return err
				}
				propTypeNamePresented = true
			case "queue_id":
				if propQueueIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.taskInfo", "queue_id")
				}
				if err := tlBuiltinVectorInt.BuiltinVectorIntReadJSON(legacyTypeNames, in, &item.QueueId); err != nil {
					return err
				}
				propQueueIdPresented = true
			case "task":
				if propTaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.taskInfo", "task")
				}
				if err := item.Task.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propTaskPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("tasks.taskInfo", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propTypeNamePresented {
		item.TypeName = ""
	}
	if !propQueueIdPresented {
		item.QueueId = item.QueueId[:0]
	}
	if !propTaskPresented {
		item.Task.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TasksTaskInfo) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TasksTaskInfo) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TasksTaskInfo) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexTypeName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"type_name":`...)
	w = basictl.JSONWriteString(w, item.TypeName)
	if (len(item.TypeName) != 0) == false {
		w = w[:backupIndexTypeName]
	}
	backupIndexQueueId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"queue_id":`...)
	w = tlBuiltinVectorInt.BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, item.QueueId)
	if (len(item.QueueId) != 0) == false {
		w = w[:backupIndexQueueId]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"task":`...)
	w = item.Task.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *TasksTaskInfo) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TasksTaskInfo) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("tasks.taskInfo", err.Error())
	}
	return nil
}
