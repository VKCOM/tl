// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTasksQueueTypeInfo

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tltasks/tlTasksQueueTypeSettings"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tltasks/tlTasksQueueTypeStats"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TasksQueueTypeInfo struct {
	TypeName string
	Settings tlTasksQueueTypeSettings.TasksQueueTypeSettings
	Stats    tlTasksQueueTypeStats.TasksQueueTypeStats
}

func (TasksQueueTypeInfo) TLName() string { return "tasks.queueTypeInfo" }
func (TasksQueueTypeInfo) TLTag() uint32  { return 0x38d38d3e }

func (item *TasksQueueTypeInfo) Reset() {
	item.TypeName = ""
	item.Settings.Reset()
	item.Stats.Reset()
}

func (item *TasksQueueTypeInfo) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.TypeName); err != nil {
		return w, err
	}
	if w, err = item.Settings.Read(w); err != nil {
		return w, err
	}
	return item.Stats.Read(w)
}

func (item *TasksQueueTypeInfo) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TasksQueueTypeInfo) Write(w []byte) []byte {
	w = basictl.StringWrite(w, item.TypeName)
	w = item.Settings.Write(w)
	w = item.Stats.Write(w)
	return w
}

func (item *TasksQueueTypeInfo) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x38d38d3e); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TasksQueueTypeInfo) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TasksQueueTypeInfo) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x38d38d3e)
	return item.Write(w)
}

func (item TasksQueueTypeInfo) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TasksQueueTypeInfo) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propTypeNamePresented bool
	var propSettingsPresented bool
	var propStatsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "type_name":
				if propTypeNamePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueTypeInfo", "type_name")
				}
				if err := internal.Json2ReadString(in, &item.TypeName); err != nil {
					return err
				}
				propTypeNamePresented = true
			case "settings":
				if propSettingsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueTypeInfo", "settings")
				}
				if err := item.Settings.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propSettingsPresented = true
			case "stats":
				if propStatsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueTypeInfo", "stats")
				}
				if err := item.Stats.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propStatsPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("tasks.queueTypeInfo", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propTypeNamePresented {
		item.TypeName = ""
	}
	if !propSettingsPresented {
		item.Settings.Reset()
	}
	if !propStatsPresented {
		item.Stats.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TasksQueueTypeInfo) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TasksQueueTypeInfo) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TasksQueueTypeInfo) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexTypeName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"type_name":`...)
	w = basictl.JSONWriteString(w, item.TypeName)
	if (len(item.TypeName) != 0) == false {
		w = w[:backupIndexTypeName]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"settings":`...)
	w = item.Settings.WriteJSONOpt(newTypeNames, short, w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"stats":`...)
	w = item.Stats.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *TasksQueueTypeInfo) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TasksQueueTypeInfo) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("tasks.queueTypeInfo", err.Error())
	}
	return nil
}
