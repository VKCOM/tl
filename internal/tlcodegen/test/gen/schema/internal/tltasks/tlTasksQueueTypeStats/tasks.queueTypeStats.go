// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTasksQueueTypeStats

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TasksQueueTypeStats struct {
	FieldsMask     uint32
	WaitingSize    int64 // Conditional: item.FieldsMask.0
	ScheduledSize  int64 // Conditional: item.FieldsMask.1
	InProgressSize int64 // Conditional: item.FieldsMask.2
	NumQueues      int32 // Conditional: item.FieldsMask.3
}

func (TasksQueueTypeStats) TLName() string { return "tasks.queueTypeStats" }
func (TasksQueueTypeStats) TLTag() uint32  { return 0xe1b785f2 }

func (item *TasksQueueTypeStats) SetWaitingSize(v int64) {
	item.WaitingSize = v
	item.FieldsMask |= 1 << 0
}
func (item *TasksQueueTypeStats) ClearWaitingSize() {
	item.WaitingSize = 0
	item.FieldsMask &^= 1 << 0
}
func (item *TasksQueueTypeStats) IsSetWaitingSize() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *TasksQueueTypeStats) SetScheduledSize(v int64) {
	item.ScheduledSize = v
	item.FieldsMask |= 1 << 1
}
func (item *TasksQueueTypeStats) ClearScheduledSize() {
	item.ScheduledSize = 0
	item.FieldsMask &^= 1 << 1
}
func (item *TasksQueueTypeStats) IsSetScheduledSize() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *TasksQueueTypeStats) SetInProgressSize(v int64) {
	item.InProgressSize = v
	item.FieldsMask |= 1 << 2
}
func (item *TasksQueueTypeStats) ClearInProgressSize() {
	item.InProgressSize = 0
	item.FieldsMask &^= 1 << 2
}
func (item *TasksQueueTypeStats) IsSetInProgressSize() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *TasksQueueTypeStats) SetNumQueues(v int32) {
	item.NumQueues = v
	item.FieldsMask |= 1 << 3
}
func (item *TasksQueueTypeStats) ClearNumQueues() {
	item.NumQueues = 0
	item.FieldsMask &^= 1 << 3
}
func (item *TasksQueueTypeStats) IsSetNumQueues() bool { return item.FieldsMask&(1<<3) != 0 }

func (item *TasksQueueTypeStats) Reset() {
	item.FieldsMask = 0
	item.WaitingSize = 0
	item.ScheduledSize = 0
	item.InProgressSize = 0
	item.NumQueues = 0
}

func (item *TasksQueueTypeStats) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.LongRead(w, &item.WaitingSize); err != nil {
			return w, err
		}
	} else {
		item.WaitingSize = 0
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = basictl.LongRead(w, &item.ScheduledSize); err != nil {
			return w, err
		}
	} else {
		item.ScheduledSize = 0
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.LongRead(w, &item.InProgressSize); err != nil {
			return w, err
		}
	} else {
		item.InProgressSize = 0
	}
	if item.FieldsMask&(1<<3) != 0 {
		if w, err = basictl.IntRead(w, &item.NumQueues); err != nil {
			return w, err
		}
	} else {
		item.NumQueues = 0
	}
	return w, nil
}

func (item *TasksQueueTypeStats) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TasksQueueTypeStats) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.LongWrite(w, item.WaitingSize)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.LongWrite(w, item.ScheduledSize)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.LongWrite(w, item.InProgressSize)
	}
	if item.FieldsMask&(1<<3) != 0 {
		w = basictl.IntWrite(w, item.NumQueues)
	}
	return w
}

func (item *TasksQueueTypeStats) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xe1b785f2); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TasksQueueTypeStats) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TasksQueueTypeStats) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xe1b785f2)
	return item.Write(w)
}

func (item TasksQueueTypeStats) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TasksQueueTypeStats) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propWaitingSizePresented bool
	var propScheduledSizePresented bool
	var propInProgressSizePresented bool
	var propNumQueuesPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueTypeStats", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "waiting_size":
				if propWaitingSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueTypeStats", "waiting_size")
				}
				if err := internal.Json2ReadInt64(in, &item.WaitingSize); err != nil {
					return err
				}
				propWaitingSizePresented = true
			case "scheduled_size":
				if propScheduledSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueTypeStats", "scheduled_size")
				}
				if err := internal.Json2ReadInt64(in, &item.ScheduledSize); err != nil {
					return err
				}
				propScheduledSizePresented = true
			case "in_progress_size":
				if propInProgressSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueTypeStats", "in_progress_size")
				}
				if err := internal.Json2ReadInt64(in, &item.InProgressSize); err != nil {
					return err
				}
				propInProgressSizePresented = true
			case "num_queues":
				if propNumQueuesPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueTypeStats", "num_queues")
				}
				if err := internal.Json2ReadInt32(in, &item.NumQueues); err != nil {
					return err
				}
				propNumQueuesPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("tasks.queueTypeStats", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propWaitingSizePresented {
		item.WaitingSize = 0
	}
	if !propScheduledSizePresented {
		item.ScheduledSize = 0
	}
	if !propInProgressSizePresented {
		item.InProgressSize = 0
	}
	if !propNumQueuesPresented {
		item.NumQueues = 0
	}
	if propWaitingSizePresented {
		item.FieldsMask |= 1 << 0
	}
	if propScheduledSizePresented {
		item.FieldsMask |= 1 << 1
	}
	if propInProgressSizePresented {
		item.FieldsMask |= 1 << 2
	}
	if propNumQueuesPresented {
		item.FieldsMask |= 1 << 3
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TasksQueueTypeStats) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TasksQueueTypeStats) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TasksQueueTypeStats) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"waiting_size":`...)
		w = basictl.JSONWriteInt64(w, item.WaitingSize)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"scheduled_size":`...)
		w = basictl.JSONWriteInt64(w, item.ScheduledSize)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"in_progress_size":`...)
		w = basictl.JSONWriteInt64(w, item.InProgressSize)
	}
	if item.FieldsMask&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"num_queues":`...)
		w = basictl.JSONWriteInt32(w, item.NumQueues)
	}
	return append(w, '}')
}

func (item *TasksQueueTypeStats) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TasksQueueTypeStats) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("tasks.queueTypeStats", err.Error())
	}
	return nil
}
