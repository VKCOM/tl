// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTasksTask

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorInt"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TasksTask struct {
	FieldsMask    uint32
	Flags         int32
	Tag           []int32
	Data          string
	Id            int64 // Conditional: item.FieldsMask.0
	Retries       int32 // Conditional: item.FieldsMask.1
	ScheduledTime int32 // Conditional: item.FieldsMask.2
	Deadline      int32 // Conditional: item.FieldsMask.3
}

func (TasksTask) TLName() string { return "tasks.task" }
func (TasksTask) TLTag() uint32  { return 0x7c23bc2c }

func (item *TasksTask) SetId(v int64) {
	item.Id = v
	item.FieldsMask |= 1 << 0
}
func (item *TasksTask) ClearId() {
	item.Id = 0
	item.FieldsMask &^= 1 << 0
}
func (item *TasksTask) IsSetId() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *TasksTask) SetRetries(v int32) {
	item.Retries = v
	item.FieldsMask |= 1 << 1
}
func (item *TasksTask) ClearRetries() {
	item.Retries = 0
	item.FieldsMask &^= 1 << 1
}
func (item *TasksTask) IsSetRetries() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *TasksTask) SetScheduledTime(v int32) {
	item.ScheduledTime = v
	item.FieldsMask |= 1 << 2
}
func (item *TasksTask) ClearScheduledTime() {
	item.ScheduledTime = 0
	item.FieldsMask &^= 1 << 2
}
func (item *TasksTask) IsSetScheduledTime() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *TasksTask) SetDeadline(v int32) {
	item.Deadline = v
	item.FieldsMask |= 1 << 3
}
func (item *TasksTask) ClearDeadline() {
	item.Deadline = 0
	item.FieldsMask &^= 1 << 3
}
func (item *TasksTask) IsSetDeadline() bool { return item.FieldsMask&(1<<3) != 0 }

func (item *TasksTask) Reset() {
	item.FieldsMask = 0
	item.Flags = 0
	item.Tag = item.Tag[:0]
	item.Data = ""
	item.Id = 0
	item.Retries = 0
	item.ScheduledTime = 0
	item.Deadline = 0
}

func (item *TasksTask) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Flags); err != nil {
		return w, err
	}
	if w, err = tlBuiltinVectorInt.BuiltinVectorIntRead(w, &item.Tag); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Data); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.LongRead(w, &item.Id); err != nil {
			return w, err
		}
	} else {
		item.Id = 0
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = basictl.IntRead(w, &item.Retries); err != nil {
			return w, err
		}
	} else {
		item.Retries = 0
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ScheduledTime); err != nil {
			return w, err
		}
	} else {
		item.ScheduledTime = 0
	}
	if item.FieldsMask&(1<<3) != 0 {
		if w, err = basictl.IntRead(w, &item.Deadline); err != nil {
			return w, err
		}
	} else {
		item.Deadline = 0
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *TasksTask) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TasksTask) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.IntWrite(w, item.Flags)
	w = tlBuiltinVectorInt.BuiltinVectorIntWrite(w, item.Tag)
	w = basictl.StringWrite(w, item.Data)
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.LongWrite(w, item.Id)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.IntWrite(w, item.Retries)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ScheduledTime)
	}
	if item.FieldsMask&(1<<3) != 0 {
		w = basictl.IntWrite(w, item.Deadline)
	}
	return w
}

func (item *TasksTask) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x7c23bc2c); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TasksTask) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TasksTask) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x7c23bc2c)
	return item.Write(w)
}

func (item TasksTask) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TasksTask) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propFlagsPresented bool
	var propTagPresented bool
	var propDataPresented bool
	var propIdPresented bool
	var propRetriesPresented bool
	var propScheduledTimePresented bool
	var propDeadlinePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.task", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "flags":
				if propFlagsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.task", "flags")
				}
				if err := internal.Json2ReadInt32(in, &item.Flags); err != nil {
					return err
				}
				propFlagsPresented = true
			case "tag":
				if propTagPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.task", "tag")
				}
				if err := tlBuiltinVectorInt.BuiltinVectorIntReadJSON(legacyTypeNames, in, &item.Tag); err != nil {
					return err
				}
				propTagPresented = true
			case "data":
				if propDataPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.task", "data")
				}
				if err := internal.Json2ReadString(in, &item.Data); err != nil {
					return err
				}
				propDataPresented = true
			case "id":
				if propIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.task", "id")
				}
				if err := internal.Json2ReadInt64(in, &item.Id); err != nil {
					return err
				}
				propIdPresented = true
			case "retries":
				if propRetriesPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.task", "retries")
				}
				if err := internal.Json2ReadInt32(in, &item.Retries); err != nil {
					return err
				}
				propRetriesPresented = true
			case "scheduled_time":
				if propScheduledTimePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.task", "scheduled_time")
				}
				if err := internal.Json2ReadInt32(in, &item.ScheduledTime); err != nil {
					return err
				}
				propScheduledTimePresented = true
			case "deadline":
				if propDeadlinePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.task", "deadline")
				}
				if err := internal.Json2ReadInt32(in, &item.Deadline); err != nil {
					return err
				}
				propDeadlinePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("tasks.task", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propFlagsPresented {
		item.Flags = 0
	}
	if !propTagPresented {
		item.Tag = item.Tag[:0]
	}
	if !propDataPresented {
		item.Data = ""
	}
	if !propIdPresented {
		item.Id = 0
	}
	if !propRetriesPresented {
		item.Retries = 0
	}
	if !propScheduledTimePresented {
		item.ScheduledTime = 0
	}
	if !propDeadlinePresented {
		item.Deadline = 0
	}
	if propIdPresented {
		item.FieldsMask |= 1 << 0
	}
	if propRetriesPresented {
		item.FieldsMask |= 1 << 1
	}
	if propScheduledTimePresented {
		item.FieldsMask |= 1 << 2
	}
	if propDeadlinePresented {
		item.FieldsMask |= 1 << 3
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TasksTask) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TasksTask) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TasksTask) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexFlags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"flags":`...)
	w = basictl.JSONWriteInt32(w, item.Flags)
	if (item.Flags != 0) == false {
		w = w[:backupIndexFlags]
	}
	backupIndexTag := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tag":`...)
	w = tlBuiltinVectorInt.BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, item.Tag)
	if (len(item.Tag) != 0) == false {
		w = w[:backupIndexTag]
	}
	backupIndexData := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"data":`...)
	w = basictl.JSONWriteString(w, item.Data)
	if (len(item.Data) != 0) == false {
		w = w[:backupIndexData]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"id":`...)
		w = basictl.JSONWriteInt64(w, item.Id)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"retries":`...)
		w = basictl.JSONWriteInt32(w, item.Retries)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"scheduled_time":`...)
		w = basictl.JSONWriteInt32(w, item.ScheduledTime)
	}
	if item.FieldsMask&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"deadline":`...)
		w = basictl.JSONWriteInt32(w, item.Deadline)
	}
	return append(w, '}')
}

func (item *TasksTask) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TasksTask) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("tasks.task", err.Error())
	}
	return nil
}
