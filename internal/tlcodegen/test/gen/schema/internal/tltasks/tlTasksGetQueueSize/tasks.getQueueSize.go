// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTasksGetQueueSize

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tl/tlBuiltinVectorInt"
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal/tltasks/tlTasksQueueStats"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TasksGetQueueSize struct {
	TypeName   string
	QueueId    []int32
	FieldsMask uint32
	LocalDep   int32 // Conditional: item.FieldsMask.4
}

func (TasksGetQueueSize) TLName() string { return "tasks.getQueueSize" }
func (TasksGetQueueSize) TLTag() uint32  { return 0x6abbb057 }

func (item *TasksGetQueueSize) SetLocalDep(v int32) {
	item.LocalDep = v
	item.FieldsMask |= 1 << 4
}
func (item *TasksGetQueueSize) ClearLocalDep() {
	item.LocalDep = 0
	item.FieldsMask &^= 1 << 4
}
func (item *TasksGetQueueSize) IsSetLocalDep() bool { return item.FieldsMask&(1<<4) != 0 }

func (item *TasksGetQueueSize) Reset() {
	item.TypeName = ""
	item.QueueId = item.QueueId[:0]
	item.FieldsMask = 0
	item.LocalDep = 0
}

func (item *TasksGetQueueSize) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.TypeName); err != nil {
		return w, err
	}
	if w, err = tlBuiltinVectorInt.BuiltinVectorIntRead(w, &item.QueueId); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<4) != 0 {
		if w, err = basictl.IntRead(w, &item.LocalDep); err != nil {
			return w, err
		}
	} else {
		item.LocalDep = 0
	}
	return w, nil
}

func (item *TasksGetQueueSize) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TasksGetQueueSize) Write(w []byte) []byte {
	w = basictl.StringWrite(w, item.TypeName)
	w = tlBuiltinVectorInt.BuiltinVectorIntWrite(w, item.QueueId)
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.IntWrite(w, item.LocalDep)
	}
	return w
}

func (item *TasksGetQueueSize) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6abbb057); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TasksGetQueueSize) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TasksGetQueueSize) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x6abbb057)
	return item.Write(w)
}

func (item *TasksGetQueueSize) ReadResult(w []byte, ret *tlTasksQueueStats.TasksQueueStats) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldsMask)
}

func (item *TasksGetQueueSize) WriteResult(w []byte, ret tlTasksQueueStats.TasksQueueStats) (_ []byte, err error) {
	w = ret.WriteBoxed(w, item.FieldsMask)
	return w, nil
}

func (item *TasksGetQueueSize) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *tlTasksQueueStats.TasksQueueStats) error {
	if err := ret.ReadJSON(legacyTypeNames, in, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *TasksGetQueueSize) WriteResultJSON(w []byte, ret tlTasksQueueStats.TasksQueueStats) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *TasksGetQueueSize) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTasksQueueStats.TasksQueueStats) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	return w, nil
}

func (item *TasksGetQueueSize) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTasksQueueStats.TasksQueueStats
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *TasksGetQueueSize) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTasksQueueStats.TasksQueueStats
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *TasksGetQueueSize) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret tlTasksQueueStats.TasksQueueStats
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

// Set field "waiting_size" in "tasks.queueStats" by changing fieldMask "fields_mask"
func (item *TasksGetQueueSize) SetTasksQueueStatsWaitingSize(value bool) {
	if value {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}

// Set field "scheduled_size" in "tasks.queueStats" by changing fieldMask "fields_mask"
func (item *TasksGetQueueSize) SetTasksQueueStatsScheduledSize(value bool) {
	if value {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}

// Set field "in_progress_size" in "tasks.queueStats" by changing fieldMask "fields_mask"
func (item *TasksGetQueueSize) SetTasksQueueStatsInProgressSize(value bool) {
	if value {
		item.FieldsMask |= 1 << 2
	} else {
		item.FieldsMask &^= 1 << 2
	}
}

func (item TasksGetQueueSize) String() string {
	return string(item.WriteJSON(nil))
}

func (item *TasksGetQueueSize) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propTypeNamePresented bool
	var propQueueIdPresented bool
	var propFieldsMaskPresented bool
	var propLocalDepPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "type_name":
				if propTypeNamePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.getQueueSize", "type_name")
				}
				if err := internal.Json2ReadString(in, &item.TypeName); err != nil {
					return err
				}
				propTypeNamePresented = true
			case "queue_id":
				if propQueueIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.getQueueSize", "queue_id")
				}
				if err := tlBuiltinVectorInt.BuiltinVectorIntReadJSON(legacyTypeNames, in, &item.QueueId); err != nil {
					return err
				}
				propQueueIdPresented = true
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.getQueueSize", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "local_dep":
				if propLocalDepPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.getQueueSize", "local_dep")
				}
				if err := internal.Json2ReadInt32(in, &item.LocalDep); err != nil {
					return err
				}
				propLocalDepPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("tasks.getQueueSize", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propTypeNamePresented {
		item.TypeName = ""
	}
	if !propQueueIdPresented {
		item.QueueId = item.QueueId[:0]
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propLocalDepPresented {
		item.LocalDep = 0
	}
	if propLocalDepPresented {
		item.FieldsMask |= 1 << 4
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TasksGetQueueSize) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *TasksGetQueueSize) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *TasksGetQueueSize) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexTypeName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"type_name":`...)
	w = basictl.JSONWriteString(w, item.TypeName)
	if (len(item.TypeName) != 0) == false {
		w = w[:backupIndexTypeName]
	}
	backupIndexQueueId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"queue_id":`...)
	w = tlBuiltinVectorInt.BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, item.QueueId)
	if (len(item.QueueId) != 0) == false {
		w = w[:backupIndexQueueId]
	}
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"local_dep":`...)
		w = basictl.JSONWriteInt32(w, item.LocalDep)
	}
	return append(w, '}')
}

func (item *TasksGetQueueSize) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TasksGetQueueSize) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("tasks.getQueueSize", err.Error())
	}
	return nil
}
