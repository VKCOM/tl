// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlTasksQueueStats

import (
	"github.com/vkcom/tl/internal/tlcodegen/test/gen/schema/internal"
	"github.com/vkcom/tl/pkg/basictl"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type TasksQueueStats struct {
	WaitingSize    int32 // Conditional: nat_fields_mask.0
	ScheduledSize  int32 // Conditional: nat_fields_mask.1
	InProgressSize int32 // Conditional: nat_fields_mask.2
}

func (TasksQueueStats) TLName() string { return "tasks.queueStats" }
func (TasksQueueStats) TLTag() uint32  { return 0x1d942543 }

func (item *TasksQueueStats) SetWaitingSize(v int32, nat_fields_mask *uint32) {
	item.WaitingSize = v
	if nat_fields_mask != nil {
		*nat_fields_mask |= 1 << 0
	}
}
func (item *TasksQueueStats) ClearWaitingSize(nat_fields_mask *uint32) {
	item.WaitingSize = 0
	if nat_fields_mask != nil {
		*nat_fields_mask &^= 1 << 0
	}
}
func (item *TasksQueueStats) IsSetWaitingSize(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<0) != 0
}

func (item *TasksQueueStats) SetScheduledSize(v int32, nat_fields_mask *uint32) {
	item.ScheduledSize = v
	if nat_fields_mask != nil {
		*nat_fields_mask |= 1 << 1
	}
}
func (item *TasksQueueStats) ClearScheduledSize(nat_fields_mask *uint32) {
	item.ScheduledSize = 0
	if nat_fields_mask != nil {
		*nat_fields_mask &^= 1 << 1
	}
}
func (item *TasksQueueStats) IsSetScheduledSize(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<1) != 0
}

func (item *TasksQueueStats) SetInProgressSize(v int32, nat_fields_mask *uint32) {
	item.InProgressSize = v
	if nat_fields_mask != nil {
		*nat_fields_mask |= 1 << 2
	}
}
func (item *TasksQueueStats) ClearInProgressSize(nat_fields_mask *uint32) {
	item.InProgressSize = 0
	if nat_fields_mask != nil {
		*nat_fields_mask &^= 1 << 2
	}
}
func (item *TasksQueueStats) IsSetInProgressSize(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<2) != 0
}

func (item *TasksQueueStats) Reset() {
	item.WaitingSize = 0
	item.ScheduledSize = 0
	item.InProgressSize = 0
}

func (item *TasksQueueStats) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if nat_fields_mask&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.WaitingSize); err != nil {
			return w, err
		}
	} else {
		item.WaitingSize = 0
	}
	if nat_fields_mask&(1<<1) != 0 {
		if w, err = basictl.IntRead(w, &item.ScheduledSize); err != nil {
			return w, err
		}
	} else {
		item.ScheduledSize = 0
	}
	if nat_fields_mask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.InProgressSize); err != nil {
			return w, err
		}
	} else {
		item.InProgressSize = 0
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *TasksQueueStats) WriteGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_fields_mask), nil
}

func (item *TasksQueueStats) Write(w []byte, nat_fields_mask uint32) []byte {
	if nat_fields_mask&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.WaitingSize)
	}
	if nat_fields_mask&(1<<1) != 0 {
		w = basictl.IntWrite(w, item.ScheduledSize)
	}
	if nat_fields_mask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.InProgressSize)
	}
	return w
}

func (item *TasksQueueStats) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1d942543); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *TasksQueueStats) WriteBoxedGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_fields_mask), nil
}

func (item *TasksQueueStats) WriteBoxed(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x1d942543)
	return item.Write(w, nat_fields_mask)
}

func (item *TasksQueueStats) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_fields_mask uint32) error {
	var propWaitingSizePresented bool
	var propScheduledSizePresented bool
	var propInProgressSizePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "waiting_size":
				if propWaitingSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueStats", "waiting_size")
				}
				if nat_fields_mask&(1<<0) == 0 {
					return internal.ErrorInvalidJSON("tasks.queueStats", "field 'waiting_size' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := internal.Json2ReadInt32(in, &item.WaitingSize); err != nil {
					return err
				}
				propWaitingSizePresented = true
			case "scheduled_size":
				if propScheduledSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueStats", "scheduled_size")
				}
				if nat_fields_mask&(1<<1) == 0 {
					return internal.ErrorInvalidJSON("tasks.queueStats", "field 'scheduled_size' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := internal.Json2ReadInt32(in, &item.ScheduledSize); err != nil {
					return err
				}
				propScheduledSizePresented = true
			case "in_progress_size":
				if propInProgressSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("tasks.queueStats", "in_progress_size")
				}
				if nat_fields_mask&(1<<2) == 0 {
					return internal.ErrorInvalidJSON("tasks.queueStats", "field 'in_progress_size' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := internal.Json2ReadInt32(in, &item.InProgressSize); err != nil {
					return err
				}
				propInProgressSizePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("tasks.queueStats", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propWaitingSizePresented {
		item.WaitingSize = 0
	}
	if !propScheduledSizePresented {
		item.ScheduledSize = 0
	}
	if !propInProgressSizePresented {
		item.InProgressSize = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TasksQueueStats) WriteJSONGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask), nil
}

func (item *TasksQueueStats) WriteJSON(w []byte, nat_fields_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask)
}
func (item *TasksQueueStats) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_fields_mask uint32) []byte {
	w = append(w, '{')
	if nat_fields_mask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"waiting_size":`...)
		w = basictl.JSONWriteInt32(w, item.WaitingSize)
	}
	if nat_fields_mask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"scheduled_size":`...)
		w = basictl.JSONWriteInt32(w, item.ScheduledSize)
	}
	if nat_fields_mask&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"in_progress_size":`...)
		w = basictl.JSONWriteInt32(w, item.InProgressSize)
	}
	return append(w, '}')
}
