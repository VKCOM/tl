// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "benchmarks/types/benchmarks.VrutoyTopLevelUnion.h"
#include "benchmarks/types/benchmarks.vrutoyPositions.h"
#include "__common_namespace/types/true.h"


namespace tlgen { namespace casesTL2 { 
struct TestObject {
  uint32_t n = 0;
  ::tlgen::True f1{};
  bool f2 = false;
  std::vector<bool> f3;
  ::tlgen::benchmarks::VrutoyPositions f4{};
  bool f5 = false;
  std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion> f6;
  std::vector<::tlgen::True> f7;

  // tl type info
  static constexpr uint32_t TL_TAG = 0x4f96dd95;
  static constexpr std::string_view TL_NAME = "casesTL2.testObject";

  uint32_t tl_tag() const { return 0x4f96dd95; }
  std::string_view tl_name() const { return "casesTL2.testObject"; }

  // basic serialization methods 
  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const;

  friend std::ostream& operator<<(std::ostream& s, const TestObject& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::casesTL2

