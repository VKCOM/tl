// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"


namespace tlgen { namespace casesTL2 { 
struct TestArrayFixedBool {
  std::array<bool, 1> a1{};
  std::array<bool, 0> a2{};
  std::array<bool, 7> a3{};
  std::array<bool, 8> a4{};
  std::array<bool, 11> a5{};
  std::array<bool, 16> a6{};

  // tl type info
  static constexpr uint32_t TL_TAG = 0xf704cf4e;
  static constexpr std::string_view TL_NAME = "casesTL2.testArrayFixedBool";

  uint32_t tl_tag() const { return 0xf704cf4e; }
  std::string_view tl_name() const { return "casesTL2.testArrayFixedBool"; }

  // basic serialization methods 
  bool write_json(std::ostream& s) const;

  bool read(::tlgen::basictl::tl_istream & s) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s);
  void write(::tlgen::basictl::tl_throwable_ostream & s) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const;

  friend std::ostream& operator<<(std::ostream& s, const TestArrayFixedBool& rhs) {
    rhs.write_json(s);
    return s;
  }
};

}} // namespace tlgen::casesTL2

