// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "casesTL2/headers/casesTL2_vector.h"
#include "casesTL2/headers/casesTL2.testVectorBool.h"
#include "casesTL2/headers/casesTL2.testObject.h"
#include "casesTL2/headers/casesTL2.testFunctionWithDep2.h"
#include "casesTL2/headers/casesTL2.testFunctionWithDep1.h"
#include "casesTL2/headers/casesTL2.testFunctionNoDep5.h"
#include "casesTL2/headers/casesTL2.testFunctionNoDep4.h"
#include "casesTL2/headers/casesTL2.testFunctionNoDep3.h"
#include "casesTL2/headers/casesTL2.testFunctionNoDep2.h"
#include "casesTL2/headers/casesTL2.testFunctionNoDep1.h"
#include "casesTL2/headers/casesTL2.testArrayFlexibleBool.h"
#include "casesTL2/headers/casesTL2.testArrayFixedBool.h"
#include "__common_namespace/headers/int.h"
#include "casesTL2/headers/casesTL2_true.h"
#include "casesTL2/headers/casesTL2_Bool.h"
#include "casesTL2/headers/casesTL2_benchmarks.VrutoyTopLevelUnion.h"
#include "benchmarks/headers/benchmarks.VrutoyTopLevelUnion.h"
#include "benchmarks/headers/benchmarks.vrutoyPositions.h"
#include "__common_namespace/headers/true.h"


bool tlgen::details::BoolWriteJSON(std::ostream & s, bool item) {
  if (item) {
    s << "true";
  } else {
    s << "false";
  }
  return true;
}

bool tlgen::details::BoolReadBoxed(::tlgen::basictl::tl_istream & s, bool& item) {
  return s.bool_read(item, 0xbc799737, 0x997275b5);
}

bool tlgen::details::BoolWriteBoxed(::tlgen::basictl::tl_ostream & s, bool item) {
  return s.nat_write(item ? 0x997275b5 : 0xbc799737);
}

void tlgen::details::BuiltinTuple0BoolReset(std::array<bool, 0>& item) {
  for(auto && el : item) {
    el = false;
  }
}

bool tlgen::details::BuiltinTuple0BoolWriteJSON(std::ostream &s, const std::array<bool, 0>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    if (!::tlgen::details::BoolWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple0BoolRead(::tlgen::basictl::tl_istream & s, std::array<bool, 0>& item) {
  for(auto && el : item) {
    bool tmp = false;
    if (!::tlgen::details::BoolReadBoxed(s, tmp)) { return false; }
    el = tmp;
  }
  return true;
}

bool tlgen::details::BuiltinTuple0BoolWrite(::tlgen::basictl::tl_ostream & s, const std::array<bool, 0>& item) {
  for(const auto & el : item) {
    if (!::tlgen::details::BoolWriteBoxed(s, el)) { return false; }
  }
  return true;
}

void tlgen::details::BuiltinTuple11BoolReset(std::array<bool, 11>& item) {
  for(auto && el : item) {
    el = false;
  }
}

bool tlgen::details::BuiltinTuple11BoolWriteJSON(std::ostream &s, const std::array<bool, 11>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    if (!::tlgen::details::BoolWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple11BoolRead(::tlgen::basictl::tl_istream & s, std::array<bool, 11>& item) {
  for(auto && el : item) {
    bool tmp = false;
    if (!::tlgen::details::BoolReadBoxed(s, tmp)) { return false; }
    el = tmp;
  }
  return true;
}

bool tlgen::details::BuiltinTuple11BoolWrite(::tlgen::basictl::tl_ostream & s, const std::array<bool, 11>& item) {
  for(const auto & el : item) {
    if (!::tlgen::details::BoolWriteBoxed(s, el)) { return false; }
  }
  return true;
}

void tlgen::details::BuiltinTuple16BoolReset(std::array<bool, 16>& item) {
  for(auto && el : item) {
    el = false;
  }
}

bool tlgen::details::BuiltinTuple16BoolWriteJSON(std::ostream &s, const std::array<bool, 16>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    if (!::tlgen::details::BoolWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple16BoolRead(::tlgen::basictl::tl_istream & s, std::array<bool, 16>& item) {
  for(auto && el : item) {
    bool tmp = false;
    if (!::tlgen::details::BoolReadBoxed(s, tmp)) { return false; }
    el = tmp;
  }
  return true;
}

bool tlgen::details::BuiltinTuple16BoolWrite(::tlgen::basictl::tl_ostream & s, const std::array<bool, 16>& item) {
  for(const auto & el : item) {
    if (!::tlgen::details::BoolWriteBoxed(s, el)) { return false; }
  }
  return true;
}

void tlgen::details::BuiltinTuple1BoolReset(std::array<bool, 1>& item) {
  for(auto && el : item) {
    el = false;
  }
}

bool tlgen::details::BuiltinTuple1BoolWriteJSON(std::ostream &s, const std::array<bool, 1>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    if (!::tlgen::details::BoolWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple1BoolRead(::tlgen::basictl::tl_istream & s, std::array<bool, 1>& item) {
  for(auto && el : item) {
    bool tmp = false;
    if (!::tlgen::details::BoolReadBoxed(s, tmp)) { return false; }
    el = tmp;
  }
  return true;
}

bool tlgen::details::BuiltinTuple1BoolWrite(::tlgen::basictl::tl_ostream & s, const std::array<bool, 1>& item) {
  for(const auto & el : item) {
    if (!::tlgen::details::BoolWriteBoxed(s, el)) { return false; }
  }
  return true;
}

void tlgen::details::BuiltinTuple7BoolReset(std::array<bool, 7>& item) {
  for(auto && el : item) {
    el = false;
  }
}

bool tlgen::details::BuiltinTuple7BoolWriteJSON(std::ostream &s, const std::array<bool, 7>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    if (!::tlgen::details::BoolWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple7BoolRead(::tlgen::basictl::tl_istream & s, std::array<bool, 7>& item) {
  for(auto && el : item) {
    bool tmp = false;
    if (!::tlgen::details::BoolReadBoxed(s, tmp)) { return false; }
    el = tmp;
  }
  return true;
}

bool tlgen::details::BuiltinTuple7BoolWrite(::tlgen::basictl::tl_ostream & s, const std::array<bool, 7>& item) {
  for(const auto & el : item) {
    if (!::tlgen::details::BoolWriteBoxed(s, el)) { return false; }
  }
  return true;
}

void tlgen::details::BuiltinTuple8BoolReset(std::array<bool, 8>& item) {
  for(auto && el : item) {
    el = false;
  }
}

bool tlgen::details::BuiltinTuple8BoolWriteJSON(std::ostream &s, const std::array<bool, 8>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    if (!::tlgen::details::BoolWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple8BoolRead(::tlgen::basictl::tl_istream & s, std::array<bool, 8>& item) {
  for(auto && el : item) {
    bool tmp = false;
    if (!::tlgen::details::BoolReadBoxed(s, tmp)) { return false; }
    el = tmp;
  }
  return true;
}

bool tlgen::details::BuiltinTuple8BoolWrite(::tlgen::basictl::tl_ostream & s, const std::array<bool, 8>& item) {
  for(const auto & el : item) {
    if (!::tlgen::details::BoolWriteBoxed(s, el)) { return false; }
  }
  return true;
}

void tlgen::details::BuiltinTupleBoolReset(std::vector<bool>& item) {
  item.resize(0);
}

bool tlgen::details::BuiltinTupleBoolWriteJSON(std::ostream & s, const std::vector<bool>& item, [[maybe_unused]] uint32_t nat_n) {
  if (item.size() != nat_n) { return false; }
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    if (!::tlgen::details::BoolWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTupleBoolRead(::tlgen::basictl::tl_istream & s, std::vector<bool>& item, [[maybe_unused]] uint32_t nat_n) {
  // TODO - check length sanity
  item.resize(nat_n);
  for(auto && el : item) {
    bool tmp = false;
    if (!::tlgen::details::BoolReadBoxed(s, tmp)) { return false; }
    el = tmp;
  }
  return true;
}

bool tlgen::details::BuiltinTupleBoolWrite(::tlgen::basictl::tl_ostream & s, const std::vector<bool>& item, [[maybe_unused]] uint32_t nat_n) {
  if (item.size() != nat_n) { return s.set_error_sequence_length(); }
  for(const auto & el : item) {
    if (!::tlgen::details::BoolWriteBoxed(s, el)) { return false; }
  }
  return true;
}

void tlgen::details::BuiltinVectorBenchmarksVrutoyTopLevelUnionReset(std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorBenchmarksVrutoyTopLevelUnionWriteJSON(std::ostream & s, const std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    if (!::tlgen::details::BenchmarksVrutoyTopLevelUnionWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorBenchmarksVrutoyTopLevelUnionRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!::tlgen::details::BenchmarksVrutoyTopLevelUnionReadBoxed(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::details::BuiltinVectorBenchmarksVrutoyTopLevelUnionWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!::tlgen::details::BenchmarksVrutoyTopLevelUnionWriteBoxed(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::BuiltinVectorBoolReset(std::vector<bool>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorBoolWriteJSON(std::ostream & s, const std::vector<bool>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    if (!::tlgen::details::BoolWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorBoolRead(::tlgen::basictl::tl_istream & s, std::vector<bool>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    bool tmp = false;
    if (!::tlgen::details::BoolReadBoxed(s, tmp)) { return false; }
    el = tmp;
  }
  return true;
}

bool tlgen::details::BuiltinVectorBoolWrite(::tlgen::basictl::tl_ostream & s, const std::vector<bool>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!::tlgen::details::BoolWriteBoxed(s, el)) { return false; }
  }
  return true;
}

void tlgen::details::BuiltinVectorTrueBoxedReset(std::vector<::tlgen::True>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorTrueBoxedWriteJSON(std::ostream & s, const std::vector<::tlgen::True>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    if (!::tlgen::details::TrueWriteJSON(s, el)) { return false; }
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorTrueBoxedRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::True>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!::tlgen::details::TrueReadBoxed(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::details::BuiltinVectorTrueBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::True>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!::tlgen::details::TrueWriteBoxed(s, el)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

bool tlgen::casesTL2::TestArrayFixedBool::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestArrayFixedBoolWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestArrayFixedBool::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestArrayFixedBoolRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestArrayFixedBool::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestArrayFixedBoolWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestArrayFixedBool::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestArrayFixedBool::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestArrayFixedBool::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestArrayFixedBoolReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestArrayFixedBool::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestArrayFixedBoolWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestArrayFixedBool::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestArrayFixedBool::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestArrayFixedBoolReset(::tlgen::casesTL2::TestArrayFixedBool& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple1BoolReset(item.a1);
  ::tlgen::details::BuiltinTuple0BoolReset(item.a2);
  ::tlgen::details::BuiltinTuple7BoolReset(item.a3);
  ::tlgen::details::BuiltinTuple8BoolReset(item.a4);
  ::tlgen::details::BuiltinTuple11BoolReset(item.a5);
  ::tlgen::details::BuiltinTuple16BoolReset(item.a6);
}

bool tlgen::details::CasesTL2TestArrayFixedBoolWriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestArrayFixedBool& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  add_comma = true;
  s << "\"a1\":";
  if (!::tlgen::details::BuiltinTuple1BoolWriteJSON(s, item.a1)) { return false; }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"a2\":";
  if (!::tlgen::details::BuiltinTuple0BoolWriteJSON(s, item.a2)) { return false; }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"a3\":";
  if (!::tlgen::details::BuiltinTuple7BoolWriteJSON(s, item.a3)) { return false; }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"a4\":";
  if (!::tlgen::details::BuiltinTuple8BoolWriteJSON(s, item.a4)) { return false; }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"a5\":";
  if (!::tlgen::details::BuiltinTuple11BoolWriteJSON(s, item.a5)) { return false; }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"a6\":";
  if (!::tlgen::details::BuiltinTuple16BoolWriteJSON(s, item.a6)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestArrayFixedBoolRead(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestArrayFixedBool& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple1BoolRead(s, item.a1)) { return false; }
  if (!::tlgen::details::BuiltinTuple0BoolRead(s, item.a2)) { return false; }
  if (!::tlgen::details::BuiltinTuple7BoolRead(s, item.a3)) { return false; }
  if (!::tlgen::details::BuiltinTuple8BoolRead(s, item.a4)) { return false; }
  if (!::tlgen::details::BuiltinTuple11BoolRead(s, item.a5)) { return false; }
  if (!::tlgen::details::BuiltinTuple16BoolRead(s, item.a6)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestArrayFixedBoolWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestArrayFixedBool& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple1BoolWrite(s, item.a1)) { return false; }
  if (!::tlgen::details::BuiltinTuple0BoolWrite(s, item.a2)) { return false; }
  if (!::tlgen::details::BuiltinTuple7BoolWrite(s, item.a3)) { return false; }
  if (!::tlgen::details::BuiltinTuple8BoolWrite(s, item.a4)) { return false; }
  if (!::tlgen::details::BuiltinTuple11BoolWrite(s, item.a5)) { return false; }
  if (!::tlgen::details::BuiltinTuple16BoolWrite(s, item.a6)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestArrayFixedBoolReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestArrayFixedBool& item) {
  if (!s.nat_read_exact_tag(0xf704cf4e)) { return false; }
  return tlgen::details::CasesTL2TestArrayFixedBoolRead(s, item);
}

bool tlgen::details::CasesTL2TestArrayFixedBoolWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestArrayFixedBool& item) {
  if (!s.nat_write(0xf704cf4e)) { return false; }
  return tlgen::details::CasesTL2TestArrayFixedBoolWrite(s, item);
}

bool tlgen::casesTL2::TestArrayFlexibleBool::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestArrayFlexibleBoolWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestArrayFlexibleBool::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestArrayFlexibleBoolRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestArrayFlexibleBool::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestArrayFlexibleBoolWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestArrayFlexibleBool::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestArrayFlexibleBool::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestArrayFlexibleBool::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestArrayFlexibleBoolReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestArrayFlexibleBool::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestArrayFlexibleBoolWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestArrayFlexibleBool::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestArrayFlexibleBool::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestArrayFlexibleBoolReset(::tlgen::casesTL2::TestArrayFlexibleBool& item) noexcept {
  (void)item;
  item.n = 0;
  item.arr.clear();
}

bool tlgen::details::CasesTL2TestArrayFlexibleBoolWriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestArrayFlexibleBool& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.n != 0) {
    add_comma = true;
    s << "\"n\":";
    s << item.n;
  }
  if ((item.arr.size() != 0) || (item.n != 0)) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"arr\":";
    if (!::tlgen::details::BuiltinTupleBoolWriteJSON(s, item.arr, item.n)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestArrayFlexibleBoolRead(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestArrayFlexibleBool& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  if (!::tlgen::details::BuiltinTupleBoolRead(s, item.arr, item.n)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestArrayFlexibleBoolWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestArrayFlexibleBool& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  if (!::tlgen::details::BuiltinTupleBoolWrite(s, item.arr, item.n)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestArrayFlexibleBoolReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestArrayFlexibleBool& item) {
  if (!s.nat_read_exact_tag(0x974a9b29)) { return false; }
  return tlgen::details::CasesTL2TestArrayFlexibleBoolRead(s, item);
}

bool tlgen::details::CasesTL2TestArrayFlexibleBoolWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestArrayFlexibleBool& item) {
  if (!s.nat_write(0x974a9b29)) { return false; }
  return tlgen::details::CasesTL2TestArrayFlexibleBoolWrite(s, item);
}

bool tlgen::casesTL2::TestFunctionNoDep1::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep1WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep1::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep1Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep1::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep1Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionNoDep1::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionNoDep1::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionNoDep1::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep1ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep1::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep1WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionNoDep1::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionNoDep1::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestFunctionNoDep1Reset(::tlgen::casesTL2::TestFunctionNoDep1& item) noexcept {
  (void)item;
  item.x = 0;
}

bool tlgen::details::CasesTL2TestFunctionNoDep1WriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestFunctionNoDep1& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    s << item.x;
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep1Read(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionNoDep1& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep1Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionNoDep1& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep1ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionNoDep1& item) {
  if (!s.nat_read_exact_tag(0x1b8b9feb)) { return false; }
  return tlgen::details::CasesTL2TestFunctionNoDep1Read(s, item);
}

bool tlgen::details::CasesTL2TestFunctionNoDep1WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionNoDep1& item) {
  if (!s.nat_write(0x1b8b9feb)) { return false; }
  return tlgen::details::CasesTL2TestFunctionNoDep1Write(s, item);
}

bool tlgen::details::CasesTL2TestFunctionNoDep1ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::casesTL2::TestFunctionNoDep1& item, int32_t& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0xa8509bda)) { return false; }
  if (!s.int_read(result)) { return false; }
  return true;
}
bool tlgen::details::CasesTL2TestFunctionNoDep1WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::casesTL2::TestFunctionNoDep1& item, const int32_t& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0xa8509bda)) { return false; }
  if (!s.int_write(result)) { return false;}
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep1::read_result(::tlgen::basictl::tl_istream & s, int32_t & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionNoDep1ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::casesTL2::TestFunctionNoDep1::write_result(::tlgen::basictl::tl_ostream & s, const int32_t & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionNoDep1WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::casesTL2::TestFunctionNoDep1::read_result(::tlgen::basictl::tl_throwable_istream & s, int32_t & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::casesTL2::TestFunctionNoDep1::write_result(::tlgen::basictl::tl_throwable_ostream & s, const int32_t & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionNoDep2::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep2WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep2::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep2Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep2::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep2Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionNoDep2::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionNoDep2::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionNoDep2::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep2ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep2::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep2WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionNoDep2::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionNoDep2::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestFunctionNoDep2Reset(::tlgen::casesTL2::TestFunctionNoDep2& item) noexcept {
  (void)item;
  item.x = 0;
}

bool tlgen::details::CasesTL2TestFunctionNoDep2WriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestFunctionNoDep2& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    s << item.x;
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep2Read(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionNoDep2& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep2Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionNoDep2& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep2ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionNoDep2& item) {
  if (!s.nat_read_exact_tag(0x0a2c0bf9)) { return false; }
  return tlgen::details::CasesTL2TestFunctionNoDep2Read(s, item);
}

bool tlgen::details::CasesTL2TestFunctionNoDep2WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionNoDep2& item) {
  if (!s.nat_write(0x0a2c0bf9)) { return false; }
  return tlgen::details::CasesTL2TestFunctionNoDep2Write(s, item);
}

bool tlgen::details::CasesTL2TestFunctionNoDep2ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::casesTL2::TestFunctionNoDep2& item, ::tlgen::True& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::TrueReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::CasesTL2TestFunctionNoDep2WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::casesTL2::TestFunctionNoDep2& item, const ::tlgen::True& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::TrueWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep2::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::True & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionNoDep2ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::casesTL2::TestFunctionNoDep2::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::True & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionNoDep2WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::casesTL2::TestFunctionNoDep2::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::True & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::casesTL2::TestFunctionNoDep2::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::True & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionNoDep3::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep3WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep3::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep3Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep3::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep3Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionNoDep3::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionNoDep3::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionNoDep3::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep3ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep3::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep3WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionNoDep3::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionNoDep3::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestFunctionNoDep3Reset(::tlgen::casesTL2::TestFunctionNoDep3& item) noexcept {
  (void)item;
  item.x = 0;
}

bool tlgen::details::CasesTL2TestFunctionNoDep3WriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestFunctionNoDep3& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    s << item.x;
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep3Read(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionNoDep3& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep3Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionNoDep3& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep3ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionNoDep3& item) {
  if (!s.nat_read_exact_tag(0xf020849b)) { return false; }
  return tlgen::details::CasesTL2TestFunctionNoDep3Read(s, item);
}

bool tlgen::details::CasesTL2TestFunctionNoDep3WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionNoDep3& item) {
  if (!s.nat_write(0xf020849b)) { return false; }
  return tlgen::details::CasesTL2TestFunctionNoDep3Write(s, item);
}

bool tlgen::details::CasesTL2TestFunctionNoDep3ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::casesTL2::TestFunctionNoDep3& item, std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntRead(s, result)) { return false; }
  return true;
}
bool tlgen::details::CasesTL2TestFunctionNoDep3WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::casesTL2::TestFunctionNoDep3& item, const std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x1cb5c415)) { return false; }
  if (!::tlgen::details::BuiltinVectorIntWrite(s, result)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep3::read_result(::tlgen::basictl::tl_istream & s, std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionNoDep3ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::casesTL2::TestFunctionNoDep3::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionNoDep3WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::casesTL2::TestFunctionNoDep3::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::casesTL2::TestFunctionNoDep3::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionNoDep4::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep4WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep4::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep4Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep4::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep4Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionNoDep4::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionNoDep4::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionNoDep4::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep4ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep4::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep4WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionNoDep4::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionNoDep4::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestFunctionNoDep4Reset(::tlgen::casesTL2::TestFunctionNoDep4& item) noexcept {
  (void)item;
  item.x = 0;
}

bool tlgen::details::CasesTL2TestFunctionNoDep4WriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestFunctionNoDep4& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    s << item.x;
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep4Read(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionNoDep4& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep4Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionNoDep4& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep4ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionNoDep4& item) {
  if (!s.nat_read_exact_tag(0x5a933a50)) { return false; }
  return tlgen::details::CasesTL2TestFunctionNoDep4Read(s, item);
}

bool tlgen::details::CasesTL2TestFunctionNoDep4WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionNoDep4& item) {
  if (!s.nat_write(0x5a933a50)) { return false; }
  return tlgen::details::CasesTL2TestFunctionNoDep4Write(s, item);
}

bool tlgen::details::CasesTL2TestFunctionNoDep4ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::casesTL2::TestFunctionNoDep4& item, bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolReadBoxed(s, result)) { return false; }
  return true;
}
bool tlgen::details::CasesTL2TestFunctionNoDep4WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::casesTL2::TestFunctionNoDep4& item, const bool& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BoolWriteBoxed(s, result)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep4::read_result(::tlgen::basictl::tl_istream & s, bool & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionNoDep4ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::casesTL2::TestFunctionNoDep4::write_result(::tlgen::basictl::tl_ostream & s, const bool & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionNoDep4WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::casesTL2::TestFunctionNoDep4::read_result(::tlgen::basictl::tl_throwable_istream & s, bool & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::casesTL2::TestFunctionNoDep4::write_result(::tlgen::basictl::tl_throwable_ostream & s, const bool & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionNoDep5::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep5WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep5::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep5Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep5::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep5Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionNoDep5::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionNoDep5::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionNoDep5::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep5ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep5::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionNoDep5WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionNoDep5::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionNoDep5::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestFunctionNoDep5Reset(::tlgen::casesTL2::TestFunctionNoDep5& item) noexcept {
  (void)item;
  item.x = 0;
}

bool tlgen::details::CasesTL2TestFunctionNoDep5WriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestFunctionNoDep5& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x != 0) {
    s << "\"x\":";
    s << item.x;
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep5Read(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionNoDep5& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_read(item.x)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep5Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionNoDep5& item) noexcept {
  (void)s;
  (void)item;
  if (!s.int_write(item.x)) { return false;}
  return true;
}

bool tlgen::details::CasesTL2TestFunctionNoDep5ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionNoDep5& item) {
  if (!s.nat_read_exact_tag(0x2b47b925)) { return false; }
  return tlgen::details::CasesTL2TestFunctionNoDep5Read(s, item);
}

bool tlgen::details::CasesTL2TestFunctionNoDep5WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionNoDep5& item) {
  if (!s.nat_write(0x2b47b925)) { return false; }
  return tlgen::details::CasesTL2TestFunctionNoDep5Write(s, item);
}

bool tlgen::details::CasesTL2TestFunctionNoDep5ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::casesTL2::TestFunctionNoDep5& item, ::tlgen::casesTL2::TestObject& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::CasesTL2TestObjectReadBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::CasesTL2TestFunctionNoDep5WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::casesTL2::TestFunctionNoDep5& item, const ::tlgen::casesTL2::TestObject& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::CasesTL2TestObjectWriteBoxed(s, result)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::casesTL2::TestFunctionNoDep5::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestObject & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionNoDep5ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::casesTL2::TestFunctionNoDep5::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestObject & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionNoDep5WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::casesTL2::TestFunctionNoDep5::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::casesTL2::TestObject & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::casesTL2::TestFunctionNoDep5::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::casesTL2::TestObject & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionWithDep1::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestFunctionWithDep1WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestFunctionWithDep1::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionWithDep1Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionWithDep1::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionWithDep1Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionWithDep1::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionWithDep1::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionWithDep1::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionWithDep1ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionWithDep1::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionWithDep1WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionWithDep1::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionWithDep1::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestFunctionWithDep1Reset(::tlgen::casesTL2::TestFunctionWithDep1& item) noexcept {
  (void)item;
  item.n = 0;
}

bool tlgen::details::CasesTL2TestFunctionWithDep1WriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestFunctionWithDep1& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.n != 0) {
    s << "\"n\":";
    s << item.n;
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestFunctionWithDep1Read(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionWithDep1& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestFunctionWithDep1Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionWithDep1& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  return true;
}

bool tlgen::details::CasesTL2TestFunctionWithDep1ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionWithDep1& item) {
  if (!s.nat_read_exact_tag(0xb6c63b07)) { return false; }
  return tlgen::details::CasesTL2TestFunctionWithDep1Read(s, item);
}

bool tlgen::details::CasesTL2TestFunctionWithDep1WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionWithDep1& item) {
  if (!s.nat_write(0xb6c63b07)) { return false; }
  return tlgen::details::CasesTL2TestFunctionWithDep1Write(s, item);
}

bool tlgen::details::CasesTL2TestFunctionWithDep1ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::casesTL2::TestFunctionWithDep1& item, std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntRead(s, result, item.n)) { return false; }
  return true;
}
bool tlgen::details::CasesTL2TestFunctionWithDep1WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::casesTL2::TestFunctionWithDep1& item, const std::vector<int32_t>& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!s.nat_write(0x9770768a)) { return false; }
  if (!::tlgen::details::BuiltinTupleIntWrite(s, result, item.n)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestFunctionWithDep1::read_result(::tlgen::basictl::tl_istream & s, std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionWithDep1ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::casesTL2::TestFunctionWithDep1::write_result(::tlgen::basictl::tl_ostream & s, const std::vector<int32_t> & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionWithDep1WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::casesTL2::TestFunctionWithDep1::read_result(::tlgen::basictl::tl_throwable_istream & s, std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::casesTL2::TestFunctionWithDep1::write_result(::tlgen::basictl::tl_throwable_ostream & s, const std::vector<int32_t> & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionWithDep2::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestFunctionWithDep2WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestFunctionWithDep2::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionWithDep2Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionWithDep2::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionWithDep2Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionWithDep2::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionWithDep2::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestFunctionWithDep2::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionWithDep2ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestFunctionWithDep2::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestFunctionWithDep2WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestFunctionWithDep2::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestFunctionWithDep2::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestFunctionWithDep2Reset(::tlgen::casesTL2::TestFunctionWithDep2& item) noexcept {
  (void)item;
  item.n = 0;
}

bool tlgen::details::CasesTL2TestFunctionWithDep2WriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestFunctionWithDep2& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.n != 0) {
    s << "\"n\":";
    s << item.n;
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestFunctionWithDep2Read(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionWithDep2& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestFunctionWithDep2Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionWithDep2& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  return true;
}

bool tlgen::details::CasesTL2TestFunctionWithDep2ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestFunctionWithDep2& item) {
  if (!s.nat_read_exact_tag(0x9d44a2fd)) { return false; }
  return tlgen::details::CasesTL2TestFunctionWithDep2Read(s, item);
}

bool tlgen::details::CasesTL2TestFunctionWithDep2WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestFunctionWithDep2& item) {
  if (!s.nat_write(0x9d44a2fd)) { return false; }
  return tlgen::details::CasesTL2TestFunctionWithDep2Write(s, item);
}

bool tlgen::details::CasesTL2TestFunctionWithDep2ReadResult(::tlgen::basictl::tl_istream & s, const tlgen::casesTL2::TestFunctionWithDep2& item, ::tlgen::benchmarks::VrutoyPositions& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BenchmarksVrutoyPositionsReadBoxed(s, result, item.n)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::details::CasesTL2TestFunctionWithDep2WriteResult(::tlgen::basictl::tl_ostream & s, const tlgen::casesTL2::TestFunctionWithDep2& item, const ::tlgen::benchmarks::VrutoyPositions& result) {
  (void)s;
  (void)item;
  (void)result;
  if (!::tlgen::details::BenchmarksVrutoyPositionsWriteBoxed(s, result, item.n)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::casesTL2::TestFunctionWithDep2::read_result(::tlgen::basictl::tl_istream & s, ::tlgen::benchmarks::VrutoyPositions & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionWithDep2ReadResult(s, *this, result);
  s.sync();
  return success;
}
bool tlgen::casesTL2::TestFunctionWithDep2::write_result(::tlgen::basictl::tl_ostream & s, const ::tlgen::benchmarks::VrutoyPositions & result) const noexcept {
  bool success = tlgen::details::CasesTL2TestFunctionWithDep2WriteResult(s, *this, result);
  s.sync();
  return success;
}

void tlgen::casesTL2::TestFunctionWithDep2::read_result(::tlgen::basictl::tl_throwable_istream & s, ::tlgen::benchmarks::VrutoyPositions & result) const {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_result(s2, result);
  s2.pass_data(s);
}
void tlgen::casesTL2::TestFunctionWithDep2::write_result(::tlgen::basictl::tl_throwable_ostream & s, const ::tlgen::benchmarks::VrutoyPositions & result) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_result(s2, result);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestObject::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestObjectWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestObject::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestObjectRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestObject::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestObjectWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestObject::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestObject::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestObject::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestObjectReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestObject::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestObjectWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestObject::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestObject::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestObjectReset(::tlgen::casesTL2::TestObject& item) noexcept {
  (void)item;
  item.n = 0;
  ::tlgen::details::TrueReset(item.f1);
  item.f2 = false;
  item.f3.clear();
  ::tlgen::details::BenchmarksVrutoyPositionsReset(item.f4);
  item.f5 = false;
  item.f6.clear();
  item.f7.clear();
}

bool tlgen::details::CasesTL2TestObjectWriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestObject& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.n != 0) {
    add_comma = true;
    s << "\"n\":";
    s << item.n;
  }
  if ((item.n & (1<<0)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"f1\":";
    if (!::tlgen::details::TrueWriteJSON(s, item.f1)) { return false; }
  }
  if (item.f2) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"f2\":";
    if (!::tlgen::details::BoolWriteJSON(s, item.f2)) { return false; }
  }
  if (item.f3.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"f3\":";
    if (!::tlgen::details::BuiltinVectorBoolWriteJSON(s, item.f3)) { return false; }
  }
  if (add_comma) {
    s << ",";
  }
  add_comma = true;
  s << "\"f4\":";
  if (!::tlgen::details::BenchmarksVrutoyPositionsWriteJSON(s, item.f4, item.n)) { return false; }
  if ((item.n & (1<<1)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"f5\":";
    if (!::tlgen::details::BoolWriteJSON(s, item.f5)) { return false; }
  }
  if (item.f6.size() != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"f6\":";
    if (!::tlgen::details::BuiltinVectorBenchmarksVrutoyTopLevelUnionWriteJSON(s, item.f6)) { return false; }
  }
  if ((item.n & (1<<14)) != 0) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"f7\":";
    if (!::tlgen::details::BuiltinVectorTrueBoxedWriteJSON(s, item.f7)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestObjectRead(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestObject& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  if ((item.n & (1<<0)) != 0) {
    if (!::tlgen::details::TrueRead(s, item.f1)) { return s.set_error_unknown_scenario(); }
  } else {
      ::tlgen::details::TrueReset(item.f1);
  }
  if (!::tlgen::details::BoolReadBoxed(s, item.f2)) { return false; }
  if (!::tlgen::details::BuiltinVectorBoolRead(s, item.f3)) { return false; }
  if (!::tlgen::details::BenchmarksVrutoyPositionsRead(s, item.f4, item.n)) { return s.set_error_unknown_scenario(); }
  if ((item.n & (1<<1)) != 0) {
    if (!::tlgen::details::BoolReadBoxed(s, item.f5)) { return false; }
  } else {
      item.f5 = false;
  }
  if (!::tlgen::details::BuiltinVectorBenchmarksVrutoyTopLevelUnionRead(s, item.f6)) { return false; }
  if ((item.n & (1<<14)) != 0) {
    if (!::tlgen::details::BuiltinVectorTrueBoxedRead(s, item.f7)) { return false; }
  } else {
      item.f7.clear();
  }
  return true;
}

bool tlgen::details::CasesTL2TestObjectWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestObject& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  if ((item.n & (1<<0)) != 0) {
      if (!::tlgen::details::TrueWrite(s, item.f1)) { return s.set_error_unknown_scenario(); }
  }
  if (!::tlgen::details::BoolWriteBoxed(s, item.f2)) { return false; }
  if (!::tlgen::details::BuiltinVectorBoolWrite(s, item.f3)) { return false; }
  if (!::tlgen::details::BenchmarksVrutoyPositionsWrite(s, item.f4, item.n)) { return s.set_error_unknown_scenario(); }
  if ((item.n & (1<<1)) != 0) {
      if (!::tlgen::details::BoolWriteBoxed(s, item.f5)) { return false; }
  }
  if (!::tlgen::details::BuiltinVectorBenchmarksVrutoyTopLevelUnionWrite(s, item.f6)) { return false; }
  if ((item.n & (1<<14)) != 0) {
      if (!::tlgen::details::BuiltinVectorTrueBoxedWrite(s, item.f7)) { return false; }
  }
  return true;
}

bool tlgen::details::CasesTL2TestObjectReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestObject& item) {
  if (!s.nat_read_exact_tag(0x4f96dd95)) { return false; }
  return tlgen::details::CasesTL2TestObjectRead(s, item);
}

bool tlgen::details::CasesTL2TestObjectWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestObject& item) {
  if (!s.nat_write(0x4f96dd95)) { return false; }
  return tlgen::details::CasesTL2TestObjectWrite(s, item);
}

bool tlgen::casesTL2::TestVectorBool::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesTL2TestVectorBoolWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::casesTL2::TestVectorBool::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestVectorBoolRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestVectorBool::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestVectorBoolWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestVectorBool::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestVectorBool::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::casesTL2::TestVectorBool::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesTL2TestVectorBoolReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::casesTL2::TestVectorBool::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesTL2TestVectorBoolWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::casesTL2::TestVectorBool::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::casesTL2::TestVectorBool::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesTL2TestVectorBoolReset(::tlgen::casesTL2::TestVectorBool& item) noexcept {
  (void)item;
  item.x.clear();
}

bool tlgen::details::CasesTL2TestVectorBoolWriteJSON(std::ostream& s, const ::tlgen::casesTL2::TestVectorBool& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.x.size() != 0) {
    s << "\"x\":";
    if (!::tlgen::details::BuiltinVectorBoolWriteJSON(s, item.x)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesTL2TestVectorBoolRead(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestVectorBool& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorBoolRead(s, item.x)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestVectorBoolWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestVectorBool& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorBoolWrite(s, item.x)) { return false; }
  return true;
}

bool tlgen::details::CasesTL2TestVectorBoolReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::casesTL2::TestVectorBool& item) {
  if (!s.nat_read_exact_tag(0x644bb447)) { return false; }
  return tlgen::details::CasesTL2TestVectorBoolRead(s, item);
}

bool tlgen::details::CasesTL2TestVectorBoolWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::casesTL2::TestVectorBool& item) {
  if (!s.nat_write(0x644bb447)) { return false; }
  return tlgen::details::CasesTL2TestVectorBoolWrite(s, item);
}

void tlgen::details::VectorBenchmarksVrutoyTopLevelUnionReset(std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorBenchmarksVrutoyTopLevelUnionWriteJSON(std::ostream& s, const std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorBenchmarksVrutoyTopLevelUnionWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorBenchmarksVrutoyTopLevelUnionRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorBenchmarksVrutoyTopLevelUnionRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorBenchmarksVrutoyTopLevelUnionWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorBenchmarksVrutoyTopLevelUnionWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorBenchmarksVrutoyTopLevelUnionReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorBenchmarksVrutoyTopLevelUnionRead(s, item);
}

bool tlgen::details::VectorBenchmarksVrutoyTopLevelUnionWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::benchmarks::VrutoyTopLevelUnion>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorBenchmarksVrutoyTopLevelUnionWrite(s, item);
}

void tlgen::details::VectorBoolReset(std::vector<bool>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorBoolWriteJSON(std::ostream& s, const std::vector<bool>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorBoolWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorBoolRead(::tlgen::basictl::tl_istream & s, std::vector<bool>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorBoolRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorBoolWrite(::tlgen::basictl::tl_ostream & s, const std::vector<bool>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorBoolWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorBoolReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<bool>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorBoolRead(s, item);
}

bool tlgen::details::VectorBoolWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<bool>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorBoolWrite(s, item);
}

void tlgen::details::VectorTrueBoxedReset(std::vector<::tlgen::True>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorTrueBoxedWriteJSON(std::ostream& s, const std::vector<::tlgen::True>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorTrueBoxedWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorTrueBoxedRead(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::True>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorTrueBoxedRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorTrueBoxedWrite(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::True>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorTrueBoxedWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorTrueBoxedReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<::tlgen::True>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorTrueBoxedRead(s, item);
}

bool tlgen::details::VectorTrueBoxedWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<::tlgen::True>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorTrueBoxedWrite(s, item);
}
