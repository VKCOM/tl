// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#include "cases_bytes/headers/cases_bytes_vector.h"
#include "cases_bytes/headers/cases_bytes_tuple.h"
#include "cases_bytes/headers/cases_bytes.testVector.h"
#include "cases_bytes/headers/cases_bytes.testTuple.h"
#include "cases_bytes/headers/cases_bytes.testEnumContainer.h"
#include "cases/headers/cases.TestEnum.h"
#include "cases_bytes/headers/cases_bytes.TestEnum.h"
#include "cases_bytes/headers/cases_bytes.TestEnumItems.h"
#include "cases_bytes/headers/cases_bytes.testDictStringString.h"
#include "cases_bytes/headers/cases_bytes_dictionary.h"
#include "__common_namespace/headers/dictionaryField.h"
#include "cases_bytes/headers/cases_bytes.testDictString.h"
#include "cases_bytes/headers/cases_bytes.testDictInt.h"
#include "cases_bytes/headers/cases_bytes.testDictAny.h"
#include "__common_namespace/headers/dictionaryAny.h"
#include "cases_bytes/headers/cases_bytes.testArray.h"
#include "cases_bytes/headers/cases_bytes_string.h"
#include "cases_bytes/headers/cases_bytes_dictionaryField.h"
#include "__common_namespace/headers/dictionaryFieldAny.h"


void tlgen::details::BuiltinTuple4StringReset(std::array<std::string, 4>& item) {
  for(auto && el : item) {
    el.clear();
  }
}

bool tlgen::details::BuiltinTuple4StringWriteJSON(std::ostream &s, const std::array<std::string, 4>& item) {
  s << "[";
  size_t index = 0;
  for(auto && el : item) {
    s << "\"" << el << "\"";
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTuple4StringRead(::tlgen::basictl::tl_istream & s, std::array<std::string, 4>& item) {
  for(auto && el : item) {
    if (!s.string_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinTuple4StringWrite(::tlgen::basictl::tl_ostream & s, const std::array<std::string, 4>& item) {
  for(const auto & el : item) {
    if (!s.string_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinTupleStringReset(std::vector<std::string>& item) {
  item.resize(0);
}

bool tlgen::details::BuiltinTupleStringWriteJSON(std::ostream & s, const std::vector<std::string>& item, [[maybe_unused]] uint32_t nat_n) {
  if (item.size() != nat_n) { return false; }
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    s << "\"" << el << "\"";
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinTupleStringRead(::tlgen::basictl::tl_istream & s, std::vector<std::string>& item, [[maybe_unused]] uint32_t nat_n) {
  // TODO - check length sanity
  item.resize(nat_n);
  for(auto && el : item) {
    if (!s.string_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinTupleStringWrite(::tlgen::basictl::tl_ostream & s, const std::vector<std::string>& item, [[maybe_unused]] uint32_t nat_n) {
  if (item.size() != nat_n) { return s.set_error_sequence_length(); }
  for(const auto & el : item) {
    if (!s.string_write(el)) { return false;}
  }
  return true;
}

void tlgen::details::BuiltinVectorDictionaryFieldStringReset(std::map<std::string, std::string>& item) {
  item.clear(); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorDictionaryFieldStringWriteJSON(std::ostream & s, const std::map<std::string, std::string>& item) {
  s << "{";
  size_t index = 0;
  for(const auto & el : item) {
    s << "\"" << el.first << "\"";
    s << ":";
    s << "\"" << el.second << "\"";
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "}";
  return true;
}

bool tlgen::details::BuiltinVectorDictionaryFieldStringRead(::tlgen::basictl::tl_istream & s, std::map<std::string, std::string>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  item.clear();
  for(uint32_t i = 0; i < len; i++) {
    ::tlgen::DictionaryField<std::string> el;
    if (!::tlgen::details::DictionaryFieldStringRead(s, el)) { return s.set_error_unknown_scenario(); }
    item[el.key] = el.value;
  }
  return true;
}

bool tlgen::details::BuiltinVectorDictionaryFieldStringWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::string>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    ::tlgen::DictionaryField<std::string> el2{.key= el.first, .value= el.second};
    if (!::tlgen::details::DictionaryFieldStringWrite(s, el2)) { return s.set_error_unknown_scenario(); }
  }
  return true;
}

void tlgen::details::BuiltinVectorStringReset(std::vector<std::string>& item) {
  item.resize(0); // TODO - unwrap
}

bool tlgen::details::BuiltinVectorStringWriteJSON(std::ostream & s, const std::vector<std::string>& item) {
  s << "[";
  size_t index = 0;
  for(const auto & el : item) {
    s << "\"" << el << "\"";
    if (index != item.size() - 1) {
      s << ",";
    }
    index++;
  }
  s << "]";
  return true;
}

bool tlgen::details::BuiltinVectorStringRead(::tlgen::basictl::tl_istream & s, std::vector<std::string>& item) {
  uint32_t len = 0;
  if (!s.nat_read(len)) { return false; }
  // TODO - check length sanity
  item.resize(len);
  for(auto && el : item) {
    if (!s.string_read(el)) { return false; }
  }
  return true;
}

bool tlgen::details::BuiltinVectorStringWrite(::tlgen::basictl::tl_ostream & s, const std::vector<std::string>& item) {
  if (!s.nat_write(item.size())) { return false; }
  for(const auto & el : item) {
    if (!s.string_write(el)) { return false;}
  }
  return true;
}

bool tlgen::cases_bytes::TestArray::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestArrayWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestArray::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestArrayRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestArray::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestArrayWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestArray::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestArray::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestArray::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestArrayReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestArray::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestArrayWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestArray::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestArray::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestArrayReset(::tlgen::cases_bytes::TestArray& item) noexcept {
  (void)item;
  item.n = 0;
  item.arr.clear();
}

bool tlgen::details::CasesBytesTestArrayWriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestArray& item) noexcept {
  (void)s;
  (void)item;
  auto add_comma = false;
  s << "{";
  if (item.n != 0) {
    add_comma = true;
    s << "\"n\":";
    s << item.n;
  }
  if ((item.arr.size() != 0) || (item.n != 0)) {
    if (add_comma) {
      s << ",";
    }
    add_comma = true;
    s << "\"arr\":";
    if (!::tlgen::details::BuiltinTupleStringWriteJSON(s, item.arr, item.n)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesBytesTestArrayRead(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestArray& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_read(item.n)) { return false; }
  if (!::tlgen::details::BuiltinTupleStringRead(s, item.arr, item.n)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestArrayWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestArray& item) noexcept {
  (void)s;
  (void)item;
  if (!s.nat_write(item.n)) { return false;}
  if (!::tlgen::details::BuiltinTupleStringWrite(s, item.arr, item.n)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestArrayReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestArray& item) {
  if (!s.nat_read_exact_tag(0x3762fb81)) { return false; }
  return tlgen::details::CasesBytesTestArrayRead(s, item);
}

bool tlgen::details::CasesBytesTestArrayWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestArray& item) {
  if (!s.nat_write(0x3762fb81)) { return false; }
  return tlgen::details::CasesBytesTestArrayWrite(s, item);
}

bool tlgen::cases_bytes::TestDictAny::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestDictAnyWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestDictAny::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestDictAnyRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestDictAny::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestDictAnyWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestDictAny::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestDictAny::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestDictAny::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestDictAnyReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestDictAny::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestDictAnyWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestDictAny::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestDictAny::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestDictAnyReset(::tlgen::cases_bytes::TestDictAny& item) noexcept {
  (void)item;
  ::tlgen::details::DictionaryAnyDoubleIntReset(item.dict);
}

bool tlgen::details::CasesBytesTestDictAnyWriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestDictAny& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.dict.size() != 0) {
    s << "\"dict\":";
    if (!::tlgen::details::DictionaryAnyDoubleIntWriteJSON(s, item.dict)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesBytesTestDictAnyRead(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestDictAny& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::DictionaryAnyDoubleIntRead(s, item.dict)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CasesBytesTestDictAnyWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestDictAny& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::DictionaryAnyDoubleIntWrite(s, item.dict)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CasesBytesTestDictAnyReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestDictAny& item) {
  if (!s.nat_read_exact_tag(0x5a5fce57)) { return false; }
  return tlgen::details::CasesBytesTestDictAnyRead(s, item);
}

bool tlgen::details::CasesBytesTestDictAnyWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestDictAny& item) {
  if (!s.nat_write(0x5a5fce57)) { return false; }
  return tlgen::details::CasesBytesTestDictAnyWrite(s, item);
}

bool tlgen::cases_bytes::TestDictInt::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestDictIntWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestDictInt::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestDictIntRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestDictInt::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestDictIntWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestDictInt::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestDictInt::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestDictInt::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestDictIntReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestDictInt::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestDictIntWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestDictInt::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestDictInt::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestDictIntReset(::tlgen::cases_bytes::TestDictInt& item) noexcept {
  (void)item;
  item.dict.clear();
}

bool tlgen::details::CasesBytesTestDictIntWriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestDictInt& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.dict.size() != 0) {
    s << "\"dict\":";
    if (!::tlgen::details::BuiltinVectorDictionaryFieldAnyIntIntWriteJSON(s, item.dict)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesBytesTestDictIntRead(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestDictInt& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldAnyIntIntRead(s, item.dict)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestDictIntWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestDictInt& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldAnyIntIntWrite(s, item.dict)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestDictIntReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestDictInt& item) {
  if (!s.nat_read_exact_tag(0x453ace07)) { return false; }
  return tlgen::details::CasesBytesTestDictIntRead(s, item);
}

bool tlgen::details::CasesBytesTestDictIntWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestDictInt& item) {
  if (!s.nat_write(0x453ace07)) { return false; }
  return tlgen::details::CasesBytesTestDictIntWrite(s, item);
}

bool tlgen::cases_bytes::TestDictString::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestDictStringWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestDictString::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestDictStringRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestDictString::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestDictStringWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestDictString::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestDictString::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestDictString::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestDictStringReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestDictString::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestDictStringWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestDictString::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestDictString::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestDictStringReset(::tlgen::cases_bytes::TestDictString& item) noexcept {
  (void)item;
  item.dict.clear();
}

bool tlgen::details::CasesBytesTestDictStringWriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestDictString& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.dict.size() != 0) {
    s << "\"dict\":";
    if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWriteJSON(s, item.dict)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesBytesTestDictStringRead(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestDictString& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntRead(s, item.dict)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestDictStringWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestDictString& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldIntWrite(s, item.dict)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestDictStringReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestDictString& item) {
  if (!s.nat_read_exact_tag(0x6c04d6ce)) { return false; }
  return tlgen::details::CasesBytesTestDictStringRead(s, item);
}

bool tlgen::details::CasesBytesTestDictStringWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestDictString& item) {
  if (!s.nat_write(0x6c04d6ce)) { return false; }
  return tlgen::details::CasesBytesTestDictStringWrite(s, item);
}

bool tlgen::cases_bytes::TestDictStringString::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestDictStringStringWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestDictStringString::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestDictStringStringRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestDictStringString::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestDictStringStringWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestDictStringString::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestDictStringString::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestDictStringString::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestDictStringStringReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestDictStringString::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestDictStringStringWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestDictStringString::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestDictStringString::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestDictStringStringReset(::tlgen::cases_bytes::TestDictStringString& item) noexcept {
  (void)item;
  item.dict.clear();
}

bool tlgen::details::CasesBytesTestDictStringStringWriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestDictStringString& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.dict.size() != 0) {
    s << "\"dict\":";
    if (!::tlgen::details::BuiltinVectorDictionaryFieldStringWriteJSON(s, item.dict)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesBytesTestDictStringStringRead(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestDictStringString& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldStringRead(s, item.dict)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestDictStringStringWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestDictStringString& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldStringWrite(s, item.dict)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestDictStringStringReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestDictStringString& item) {
  if (!s.nat_read_exact_tag(0xad69c772)) { return false; }
  return tlgen::details::CasesBytesTestDictStringStringRead(s, item);
}

bool tlgen::details::CasesBytesTestDictStringStringWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestDictStringString& item) {
  if (!s.nat_write(0xad69c772)) { return false; }
  return tlgen::details::CasesBytesTestDictStringStringWrite(s, item);
}

static const std::string_view CasesBytesTestEnum_tbl_tl_name[]{"cases_bytes.testEnum1", "cases_bytes.testEnum2", "cases_bytes.testEnum3"};
static const uint32_t CasesBytesTestEnum_tbl_tl_tag[]{0x58aad3f5, 0x00b47add, 0x81911ffa};

bool tlgen::cases_bytes::TestEnum::write_json(std::ostream & s)const {
  if (!::tlgen::details::CasesBytesTestEnumWriteJSON(s, *this)) { return false; }
  return true;
}
bool tlgen::cases_bytes::TestEnum::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestEnumReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  return true;
}
bool tlgen::cases_bytes::TestEnum::write_boxed(::tlgen::basictl::tl_ostream & s)const noexcept {
  if (!::tlgen::details::CasesBytesTestEnumWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  return true;
}

void tlgen::cases_bytes::TestEnum::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestEnum::write_boxed(::tlgen::basictl::tl_throwable_ostream & s)const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

std::string_view tlgen::cases_bytes::TestEnum::tl_name() const {
  return CasesBytesTestEnum_tbl_tl_name[value.index()];
}
uint32_t tlgen::cases_bytes::TestEnum::tl_tag() const {
  return CasesBytesTestEnum_tbl_tl_tag[value.index()];
}


void tlgen::details::CasesBytesTestEnumReset(::tlgen::cases_bytes::TestEnum& item) noexcept{
  item.value.emplace<0>(); // TODO - optimize, if already 0, call Reset function
}

bool tlgen::details::CasesBytesTestEnumWriteJSON(std::ostream & s, const ::tlgen::cases_bytes::TestEnum& item) noexcept {
  s << "\"" << CasesBytesTestEnum_tbl_tl_name[item.value.index()] << "\"";
  return true;
}
bool tlgen::details::CasesBytesTestEnumReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestEnum& item) noexcept {
  uint32_t nat;
  if (!s.nat_read(nat)) { return false; }
  switch (nat) {
  case 0x58aad3f5:
    if (item.value.index() != 0) { item.value.emplace<0>(); }
    break;
  case 0x00b47add:
    if (item.value.index() != 1) { item.value.emplace<1>(); }
    break;
  case 0x81911ffa:
    if (item.value.index() != 2) { item.value.emplace<2>(); }
    break;
  default:
    return s.set_error_union_tag();
    }
  return true;
}

bool tlgen::details::CasesBytesTestEnumWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestEnum& item) noexcept{
  if (!s.nat_write(CasesBytesTestEnum_tbl_tl_tag[item.value.index()])) { return false; }
  switch (item.value.index()) {
  }
  return true;
}

bool tlgen::cases_bytes::TestEnum1::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestEnum1WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestEnum1::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestEnum1Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestEnum1::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestEnum1Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestEnum1::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestEnum1::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestEnum1::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestEnum1ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestEnum1::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestEnum1WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestEnum1::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestEnum1::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestEnum1Reset(::tlgen::cases_bytes::TestEnum1& item) noexcept {
  (void)item;
}

bool tlgen::details::CasesBytesTestEnum1WriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestEnum1& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::CasesBytesTestEnum1Read(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestEnum1& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::CasesBytesTestEnum1Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestEnum1& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::CasesBytesTestEnum1ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestEnum1& item) {
  if (!s.nat_read_exact_tag(0x58aad3f5)) { return false; }
  return tlgen::details::CasesBytesTestEnum1Read(s, item);
}

bool tlgen::details::CasesBytesTestEnum1WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestEnum1& item) {
  if (!s.nat_write(0x58aad3f5)) { return false; }
  return tlgen::details::CasesBytesTestEnum1Write(s, item);
}

bool tlgen::cases_bytes::TestEnum2::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestEnum2WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestEnum2::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestEnum2Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestEnum2::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestEnum2Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestEnum2::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestEnum2::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestEnum2::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestEnum2ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestEnum2::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestEnum2WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestEnum2::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestEnum2::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestEnum2Reset(::tlgen::cases_bytes::TestEnum2& item) noexcept {
  (void)item;
}

bool tlgen::details::CasesBytesTestEnum2WriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestEnum2& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::CasesBytesTestEnum2Read(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestEnum2& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::CasesBytesTestEnum2Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestEnum2& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::CasesBytesTestEnum2ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestEnum2& item) {
  if (!s.nat_read_exact_tag(0x00b47add)) { return false; }
  return tlgen::details::CasesBytesTestEnum2Read(s, item);
}

bool tlgen::details::CasesBytesTestEnum2WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestEnum2& item) {
  if (!s.nat_write(0x00b47add)) { return false; }
  return tlgen::details::CasesBytesTestEnum2Write(s, item);
}

bool tlgen::cases_bytes::TestEnum3::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestEnum3WriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestEnum3::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestEnum3Read(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestEnum3::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestEnum3Write(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestEnum3::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestEnum3::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestEnum3::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestEnum3ReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestEnum3::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestEnum3WriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestEnum3::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestEnum3::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestEnum3Reset(::tlgen::cases_bytes::TestEnum3& item) noexcept {
  (void)item;
}

bool tlgen::details::CasesBytesTestEnum3WriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestEnum3& item) noexcept {
  (void)s;
  (void)item;
  s << "true";
  return true;
}

bool tlgen::details::CasesBytesTestEnum3Read(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestEnum3& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::CasesBytesTestEnum3Write(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestEnum3& item) noexcept {
  (void)s;
  (void)item;
  return true;
}

bool tlgen::details::CasesBytesTestEnum3ReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestEnum3& item) {
  if (!s.nat_read_exact_tag(0x81911ffa)) { return false; }
  return tlgen::details::CasesBytesTestEnum3Read(s, item);
}

bool tlgen::details::CasesBytesTestEnum3WriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestEnum3& item) {
  if (!s.nat_write(0x81911ffa)) { return false; }
  return tlgen::details::CasesBytesTestEnum3Write(s, item);
}

bool tlgen::cases_bytes::TestEnumContainer::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestEnumContainerWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestEnumContainer::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestEnumContainerRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestEnumContainer::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestEnumContainerWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestEnumContainer::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestEnumContainer::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestEnumContainer::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestEnumContainerReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestEnumContainer::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestEnumContainerWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestEnumContainer::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestEnumContainer::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestEnumContainerReset(::tlgen::cases_bytes::TestEnumContainer& item) noexcept {
  (void)item;
  ::tlgen::details::CasesTestEnumReset(item.value);
}

bool tlgen::details::CasesBytesTestEnumContainerWriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestEnumContainer& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"value\":";
  if (!::tlgen::details::CasesTestEnumWriteJSON(s, item.value)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::CasesBytesTestEnumContainerRead(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestEnumContainer& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::CasesTestEnumReadBoxed(s, item.value)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CasesBytesTestEnumContainerWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestEnumContainer& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::CasesTestEnumWriteBoxed(s, item.value)) { return s.set_error_unknown_scenario(); }
  return true;
}

bool tlgen::details::CasesBytesTestEnumContainerReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestEnumContainer& item) {
  if (!s.nat_read_exact_tag(0x32b92037)) { return false; }
  return tlgen::details::CasesBytesTestEnumContainerRead(s, item);
}

bool tlgen::details::CasesBytesTestEnumContainerWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestEnumContainer& item) {
  if (!s.nat_write(0x32b92037)) { return false; }
  return tlgen::details::CasesBytesTestEnumContainerWrite(s, item);
}

bool tlgen::cases_bytes::TestTuple::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestTupleWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestTuple::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestTupleRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestTuple::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestTupleWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestTuple::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestTuple::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestTuple::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestTupleReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestTuple::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestTupleWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestTuple::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestTuple::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestTupleReset(::tlgen::cases_bytes::TestTuple& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple4StringReset(item.tpl);
}

bool tlgen::details::CasesBytesTestTupleWriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestTuple& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  s << "\"tpl\":";
  if (!::tlgen::details::BuiltinTuple4StringWriteJSON(s, item.tpl)) { return false; }
  s << "}";
  return true;
}

bool tlgen::details::CasesBytesTestTupleRead(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestTuple& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple4StringRead(s, item.tpl)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestTupleWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestTuple& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple4StringWrite(s, item.tpl)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestTupleReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestTuple& item) {
  if (!s.nat_read_exact_tag(0x2dd3bacf)) { return false; }
  return tlgen::details::CasesBytesTestTupleRead(s, item);
}

bool tlgen::details::CasesBytesTestTupleWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestTuple& item) {
  if (!s.nat_write(0x2dd3bacf)) { return false; }
  return tlgen::details::CasesBytesTestTupleWrite(s, item);
}

bool tlgen::cases_bytes::TestVector::write_json(std::ostream& s)const {
  if (!::tlgen::details::CasesBytesTestVectorWriteJSON(s, *this)) { return false; }
  return true;
}

bool tlgen::cases_bytes::TestVector::read(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestVectorRead(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestVector::write(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestVectorWrite(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestVector::read(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestVector::write(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write(s2);
  s2.pass_data(s);
}

bool tlgen::cases_bytes::TestVector::read_boxed(::tlgen::basictl::tl_istream & s) noexcept {
  if (!::tlgen::details::CasesBytesTestVectorReadBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

bool tlgen::cases_bytes::TestVector::write_boxed(::tlgen::basictl::tl_ostream & s) const noexcept {
  if (!::tlgen::details::CasesBytesTestVectorWriteBoxed(s, *this)) { return s.set_error_unknown_scenario(); }
  s.sync();
  return true;
}

void tlgen::cases_bytes::TestVector::read_boxed(::tlgen::basictl::tl_throwable_istream & s) {
  ::tlgen::basictl::tl_istream s2(s);
  this->read_boxed(s2);
  s2.pass_data(s);
}

void tlgen::cases_bytes::TestVector::write_boxed(::tlgen::basictl::tl_throwable_ostream & s) const {
  ::tlgen::basictl::tl_ostream s2(s);
  this->write_boxed(s2);
  s2.pass_data(s);
}

void tlgen::details::CasesBytesTestVectorReset(::tlgen::cases_bytes::TestVector& item) noexcept {
  (void)item;
  item.arr.clear();
}

bool tlgen::details::CasesBytesTestVectorWriteJSON(std::ostream& s, const ::tlgen::cases_bytes::TestVector& item) noexcept {
  (void)s;
  (void)item;
  s << "{";
  if (item.arr.size() != 0) {
    s << "\"arr\":";
    if (!::tlgen::details::BuiltinVectorStringWriteJSON(s, item.arr)) { return false; }
  }
  s << "}";
  return true;
}

bool tlgen::details::CasesBytesTestVectorRead(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestVector& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorStringRead(s, item.arr)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestVectorWrite(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestVector& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorStringWrite(s, item.arr)) { return false; }
  return true;
}

bool tlgen::details::CasesBytesTestVectorReadBoxed(::tlgen::basictl::tl_istream & s, ::tlgen::cases_bytes::TestVector& item) {
  if (!s.nat_read_exact_tag(0x3647c8ae)) { return false; }
  return tlgen::details::CasesBytesTestVectorRead(s, item);
}

bool tlgen::details::CasesBytesTestVectorWriteBoxed(::tlgen::basictl::tl_ostream & s, const ::tlgen::cases_bytes::TestVector& item) {
  if (!s.nat_write(0x3647c8ae)) { return false; }
  return tlgen::details::CasesBytesTestVectorWrite(s, item);
}

void tlgen::details::DictionaryStringReset(std::map<std::string, std::string>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::DictionaryStringWriteJSON(std::ostream& s, const std::map<std::string, std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldStringWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::DictionaryStringRead(::tlgen::basictl::tl_istream & s, std::map<std::string, std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldStringRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::DictionaryStringWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldStringWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::DictionaryStringReadBoxed(::tlgen::basictl::tl_istream & s, std::map<std::string, std::string>& item) {
  if (!s.nat_read_exact_tag(0x1f4c618f)) { return false; }
  return tlgen::details::DictionaryStringRead(s, item);
}

bool tlgen::details::DictionaryStringWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::string>& item) {
  if (!s.nat_write(0x1f4c618f)) { return false; }
  return tlgen::details::DictionaryStringWrite(s, item);
}

void tlgen::details::TupleString4Reset(std::array<std::string, 4>& item) noexcept {
  (void)item;
  ::tlgen::details::BuiltinTuple4StringReset(item);
}

bool tlgen::details::TupleString4WriteJSON(std::ostream& s, const std::array<std::string, 4>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple4StringWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleString4Read(::tlgen::basictl::tl_istream & s, std::array<std::string, 4>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple4StringRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleString4Write(::tlgen::basictl::tl_ostream & s, const std::array<std::string, 4>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinTuple4StringWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::TupleString4ReadBoxed(::tlgen::basictl::tl_istream & s, std::array<std::string, 4>& item) {
  if (!s.nat_read_exact_tag(0x9770768a)) { return false; }
  return tlgen::details::TupleString4Read(s, item);
}

bool tlgen::details::TupleString4WriteBoxed(::tlgen::basictl::tl_ostream & s, const std::array<std::string, 4>& item) {
  if (!s.nat_write(0x9770768a)) { return false; }
  return tlgen::details::TupleString4Write(s, item);
}

void tlgen::details::VectorDictionaryFieldStringReset(std::map<std::string, std::string>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorDictionaryFieldStringWriteJSON(std::ostream& s, const std::map<std::string, std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldStringWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorDictionaryFieldStringRead(::tlgen::basictl::tl_istream & s, std::map<std::string, std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldStringRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorDictionaryFieldStringWrite(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorDictionaryFieldStringWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorDictionaryFieldStringReadBoxed(::tlgen::basictl::tl_istream & s, std::map<std::string, std::string>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorDictionaryFieldStringRead(s, item);
}

bool tlgen::details::VectorDictionaryFieldStringWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::map<std::string, std::string>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorDictionaryFieldStringWrite(s, item);
}

void tlgen::details::VectorStringReset(std::vector<std::string>& item) noexcept {
  (void)item;
  item.clear();
}

bool tlgen::details::VectorStringWriteJSON(std::ostream& s, const std::vector<std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorStringWriteJSON(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorStringRead(::tlgen::basictl::tl_istream & s, std::vector<std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorStringRead(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorStringWrite(::tlgen::basictl::tl_ostream & s, const std::vector<std::string>& item) noexcept {
  (void)s;
  (void)item;
  if (!::tlgen::details::BuiltinVectorStringWrite(s, item)) { return false; }
  return true;
}

bool tlgen::details::VectorStringReadBoxed(::tlgen::basictl::tl_istream & s, std::vector<std::string>& item) {
  if (!s.nat_read_exact_tag(0x1cb5c415)) { return false; }
  return tlgen::details::VectorStringRead(s, item);
}

bool tlgen::details::VectorStringWriteBoxed(::tlgen::basictl::tl_ostream & s, const std::vector<std::string>& item) {
  if (!s.nat_write(0x1cb5c415)) { return false; }
  return tlgen::details::VectorStringWrite(s, item);
}
