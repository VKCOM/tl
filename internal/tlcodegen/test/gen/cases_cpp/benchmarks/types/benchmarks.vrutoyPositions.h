// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "benchmarks/types/benchmarks.vruposition.h"


namespace tlgen { namespace benchmarks { 
struct VrutoyPositions {
  std::vector<::tlgen::benchmarks::Vruposition> next_positions;

  // tl type info
  static constexpr uint32_t TL_TAG = 0xb6003de0;
  static constexpr std::string_view TL_NAME = "benchmarks.vrutoyPositions";

  uint32_t tl_tag() const { return 0xb6003de0; }
  std::string_view tl_name() const { return "benchmarks.vrutoyPositions"; }

  // basic serialization methods 
  bool write_json(std::ostream& s, [[maybe_unused]] uint32_t nat_n) const;

  bool read(::tlgen::basictl::tl_istream & s, [[maybe_unused]] uint32_t nat_n) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s, [[maybe_unused]] uint32_t nat_n) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s, [[maybe_unused]] uint32_t nat_n);
  void write(::tlgen::basictl::tl_throwable_ostream & s, [[maybe_unused]] uint32_t nat_n) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s, [[maybe_unused]] uint32_t nat_n) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s, [[maybe_unused]] uint32_t nat_n) const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s, [[maybe_unused]] uint32_t nat_n);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s, [[maybe_unused]] uint32_t nat_n) const;
};

}} // namespace tlgen::benchmarks

