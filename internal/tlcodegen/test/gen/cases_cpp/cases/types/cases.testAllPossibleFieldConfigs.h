// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
#pragma once

#include "basictl/io_streams.h"
#include "basictl/io_throwable_streams.h"
#include "__common_namespace/types/true.h"


namespace tlgen { namespace cases { 
struct TestAllPossibleFieldConfigs {
  uint32_t local = 0;
  int32_t f00 = 0;
  ::tlgen::True f01{};
  std::vector<int32_t> f02;
  std::vector<int32_t> f03;
  int32_t f10 = 0;
  ::tlgen::True f11{};
  std::vector<int32_t> f12;
  std::vector<int32_t> f13;
  int32_t f20 = 0;
  ::tlgen::True f21{};
  std::vector<int32_t> f22;
  std::vector<int32_t> f23;

  // tl type info
  static constexpr uint32_t TL_TAG = 0xfb6836d3;
  static constexpr std::string_view TL_NAME = "cases.testAllPossibleFieldConfigs";

  uint32_t tl_tag() const { return 0xfb6836d3; }
  std::string_view tl_name() const { return "cases.testAllPossibleFieldConfigs"; }

  // basic serialization methods 
  bool write_json(std::ostream& s, [[maybe_unused]] uint32_t nat_outer) const;

  bool read(::tlgen::basictl::tl_istream & s, [[maybe_unused]] uint32_t nat_outer) noexcept;
  bool write(::tlgen::basictl::tl_ostream & s, [[maybe_unused]] uint32_t nat_outer) const noexcept;

  void read(::tlgen::basictl::tl_throwable_istream & s, [[maybe_unused]] uint32_t nat_outer);
  void write(::tlgen::basictl::tl_throwable_ostream & s, [[maybe_unused]] uint32_t nat_outer) const;

  bool read_boxed(::tlgen::basictl::tl_istream & s, [[maybe_unused]] uint32_t nat_outer) noexcept;
  bool write_boxed(::tlgen::basictl::tl_ostream & s, [[maybe_unused]] uint32_t nat_outer) const noexcept;
  
  void read_boxed(::tlgen::basictl::tl_throwable_istream & s, [[maybe_unused]] uint32_t nat_outer);
  void write_boxed(::tlgen::basictl::tl_throwable_ostream & s, [[maybe_unused]] uint32_t nat_outer) const;
};

}} // namespace tlgen::cases

