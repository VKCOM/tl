<?php

/**
 * AUTOGENERATED, DO NOT EDIT! If you want to modify it, check tl schema.
 *
 * This autogenerated code represents tl class for typed RPC API.
 */

namespace VK\TL\cases\Types;

use VK\TL;

/**
 * @kphp-tl-class
 */
class cases_testAllPossibleFieldConfigs {

  /** Field mask for $f10 field */
  const BIT_F10_0 = (1 << 0);

  /** Field mask for $f11 field */
  const BIT_F11_1 = (1 << 1);

  /** Field mask for $f12 field */
  const BIT_F12_2 = (1 << 2);

  /** Field mask for $f13 field */
  const BIT_F13_3 = (1 << 3);

  /** Field mask for $f20 field */
  const BIT_F20_0 = (1 << 0);

  /** Field mask for $f21 field */
  const BIT_F21_1 = (1 << 1);

  /** Field mask for $f22 field */
  const BIT_F22_2 = (1 << 2);

  /** Field mask for $f23 field */
  const BIT_F23_3 = (1 << 3);

  /** @var int */
  public $local = 0;

  /** @var int */
  public $f00 = 0;

  /** @var boolean */
  public $f01 = true;

  /** @var int[] */
  public $f02 = [];

  /** @var int[] */
  public $f03 = [];

  /** @var int|null */
  public $f10 = null;

  /** @var boolean */
  public $f11 = false;

  /** @var int[]|null */
  public $f12 = null;

  /** @var int[]|null */
  public $f13 = null;

  /** @var int|null */
  public $f20 = null;

  /** @var boolean */
  public $f21 = false;

  /** @var int[]|null */
  public $f22 = null;

  /** @var int[]|null */
  public $f23 = null;

  /**
   * @param int $local
   * @param int $f00
   * @param boolean $f01
   * @param int[] $f02
   * @param int[] $f03
   */
  public function __construct($local = 0, $f00 = 0, $f01 = true, $f02 = [], $f03 = []) {
    $this->local = $local;
    $this->f00 = $f00;
    $this->f01 = $f01;
    $this->f02 = $f02;
    $this->f03 = $f03;
  }

  /**
   * @param TL\tl_input_stream $stream
   * @param int $outer
   * @return bool 
   */
  public function read_boxed($stream, $outer) {
    [$magic, $success] = $stream->read_uint32();
    if (!$success || $magic != 0xfb6836d3) {
      return false;
    }
    return $this->read($stream, $outer);
  }

  /**
   * @param TL\tl_input_stream $stream
   * @param int $outer
   * @return bool 
   */
  public function read($stream, $outer) {
    [$this->local, $success] = $stream->read_uint32();
    if (!$success) {
      return false;
    }
    [$this->f00, $success] = $stream->read_int32();
    if (!$success) {
      return false;
    }
    $this->f01 = true;
    $this->f02 = [];
    for($i9 = 0; $i9 < $this->local; $i9++) {
      /** @var int */
      $obj9 = 0;
      [$obj9, $success] = $stream->read_int32();
      if (!$success) {
        return false;
      }
      $this->f02[] = $obj9;
    }
    $this->f03 = [];
    for($i9 = 0; $i9 < $outer; $i9++) {
      /** @var int */
      $obj9 = 0;
      [$obj9, $success] = $stream->read_int32();
      if (!$success) {
        return false;
      }
      $this->f03[] = $obj9;
    }
    if (($this->local & (1 << 0)) != 0) {
      [$this->f10, $success] = $stream->read_int32();
      if (!$success) {
        return false;
      }
    } else {
      $this->f10 = null;
    }
    if (($this->local & (1 << 1)) != 0) {
      $this->f11 = true;
    } else {
      $this->f11 = false;
    }
    if (($this->local & (1 << 2)) != 0) {
      $this->f12 = [];
      for($i9 = 0; $i9 < $this->local; $i9++) {
        /** @var int */
        $obj9 = 0;
        [$obj9, $success] = $stream->read_int32();
        if (!$success) {
          return false;
        }
        $this->f12[] = $obj9;
      }
    } else {
      $this->f12 = null;
    }
    if (($this->local & (1 << 3)) != 0) {
      $this->f13 = [];
      for($i9 = 0; $i9 < $outer; $i9++) {
        /** @var int */
        $obj9 = 0;
        [$obj9, $success] = $stream->read_int32();
        if (!$success) {
          return false;
        }
        $this->f13[] = $obj9;
      }
    } else {
      $this->f13 = null;
    }
    if (($outer & (1 << 0)) != 0) {
      [$this->f20, $success] = $stream->read_int32();
      if (!$success) {
        return false;
      }
    } else {
      $this->f20 = null;
    }
    if (($outer & (1 << 1)) != 0) {
      $this->f21 = true;
    } else {
      $this->f21 = false;
    }
    if (($outer & (1 << 2)) != 0) {
      $this->f22 = [];
      for($i9 = 0; $i9 < $this->local; $i9++) {
        /** @var int */
        $obj9 = 0;
        [$obj9, $success] = $stream->read_int32();
        if (!$success) {
          return false;
        }
        $this->f22[] = $obj9;
      }
    } else {
      $this->f22 = null;
    }
    if (($outer & (1 << 3)) != 0) {
      $this->f23 = [];
      for($i9 = 0; $i9 < $outer; $i9++) {
        /** @var int */
        $obj9 = 0;
        [$obj9, $success] = $stream->read_int32();
        if (!$success) {
          return false;
        }
        $this->f23[] = $obj9;
      }
    } else {
      $this->f23 = null;
    }
    return true;
  }

  /**
   * @param TL\tl_output_stream $stream
   * @param int $outer
   * @return bool 
   */
  public function write_boxed($stream, $outer) {
    $success = $stream->write_uint32(0xfb6836d3);
    if (!$success) {
      return false;
    }
    return $this->write($stream, $outer);
  }

  /**
   * @param TL\tl_output_stream $stream
   * @param int $outer
   * @return bool 
   */
  public function write($stream, $outer) {
    $success = $stream->write_uint32($this->local);
    if (!$success) {
      return false;
    }
    $success = $stream->write_int32($this->f00);
    if (!$success) {
      return false;
    }
    for($i9 = 0; $i9 < $this->local; $i9++) {
      $success = $stream->write_int32($this->f02[$i9]);
      if (!$success) {
        return false;
      }
    }
    for($i9 = 0; $i9 < $outer; $i9++) {
      $success = $stream->write_int32($this->f03[$i9]);
      if (!$success) {
        return false;
      }
    }
    if (($this->local & (1 << 0)) != 0) {
      $success = $stream->write_int32($this->f10);
      if (!$success) {
        return false;
      }
    }
    if (($this->local & (1 << 2)) != 0) {
      for($i9 = 0; $i9 < $this->local; $i9++) {
        $success = $stream->write_int32($this->f12[$i9]);
        if (!$success) {
          return false;
        }
      }
    }
    if (($this->local & (1 << 3)) != 0) {
      for($i9 = 0; $i9 < $outer; $i9++) {
        $success = $stream->write_int32($this->f13[$i9]);
        if (!$success) {
          return false;
        }
      }
    }
    if (($outer & (1 << 0)) != 0) {
      $success = $stream->write_int32($this->f20);
      if (!$success) {
        return false;
      }
    }
    if (($outer & (1 << 2)) != 0) {
      for($i9 = 0; $i9 < $this->local; $i9++) {
        $success = $stream->write_int32($this->f22[$i9]);
        if (!$success) {
          return false;
        }
      }
    }
    if (($outer & (1 << 3)) != 0) {
      for($i9 = 0; $i9 < $outer; $i9++) {
        $success = $stream->write_int32($this->f23[$i9]);
        if (!$success) {
          return false;
        }
      }
    }
    return true;
  }

  /**
   * @return int
   */
  public function calculateLocal() {
    $mask = 0;

    if (!is_null($this->f10)) {
      $mask |= self::BIT_F10_0;
    }

    if ($this->f11) {
      $mask |= self::BIT_F11_1;
    }

    if (!is_null($this->f12)) {
      $mask |= self::BIT_F12_2;
    }

    if (!is_null($this->f13)) {
      $mask |= self::BIT_F13_3;
    }

    return $mask;
  }

  /**
   * @return int
   */
  public function calculateOuter() {
    $mask = 0;

    if (!is_null($this->f20)) {
      $mask |= self::BIT_F20_0;
    }

    if ($this->f21) {
      $mask |= self::BIT_F21_1;
    }

    if (!is_null($this->f22)) {
      $mask |= self::BIT_F22_2;
    }

    if (!is_null($this->f23)) {
      $mask |= self::BIT_F23_3;
    }

    return $mask;
  }

}
