<?php

/**
 * AUTOGENERATED, DO NOT EDIT! If you want to modify it, check tl schema.
 *
 * This autogenerated code represents tl class for typed RPC API.
 */

namespace VK\TL\cases\Types;

use VK\TL;

/**
 * @kphp-tl-class
 */
class cases_testLocalFieldmask implements TL\Readable, TL\Writeable {

  /** Field mask for $f2 field */
  const BIT_F2_0 = (1 << 0);

  /** Field mask for $f3 field */
  const BIT_F3_1 = (1 << 1);

  /** Field mask for $f4 field */
  const BIT_F4_1 = (1 << 1);

  /** @var int */
  public $f1 = 0;

  /** @var int|null */
  public $f2 = null;

  /** @var boolean */
  public $f3 = false;

  /** @var boolean */
  public $f4 = false;

  /**
   * @param int $f1
   */
  public function __construct($f1 = 0) {
    $this->f1 = $f1;
  }

  /**
   * @param TL\tl_input_stream $stream
   * @return bool 
   */
  public function read_boxed($stream) {
    [$magic, $success] = $stream->read_uint32();
    if (!$success || $magic != 0xf68fd3f9) {
      return false;
    }
    return $this->read($stream);
  }

  /**
   * @param TL\tl_input_stream $stream
   * @return bool 
   */
  public function read($stream) {
    [$this->f1, $success] = $stream->read_uint32();
    if (!$success) {
      return false;
    }
    if (($this->f1 & (1 << 0)) != 0) {
      [$this->f2, $success] = $stream->read_uint32();
      if (!$success) {
        return false;
      }
    } else {
      $this->f2 = null;
    }
    if (($this->f2 & (1 << 1)) != 0) {
      $this->f3 = true;
    } else {
      $this->f3 = false;
    }
    if (($this->f2 & (1 << 1)) != 0) {
      $this->f4 = true;
    } else {
      $this->f4 = false;
    }
    return true;
  }

  /**
   * @param TL\tl_output_stream $stream
   * @return bool 
   */
  public function write_boxed($stream) {
    $success = $stream->write_uint32(0xf68fd3f9);
    if (!$success) {
      return false;
    }
    return $this->write($stream);
  }

  /**
   * @param TL\tl_output_stream $stream
   * @return bool 
   */
  public function write($stream) {
    $success = $stream->write_uint32($this->f1);
    if (!$success) {
      return false;
    }
    if (($this->f1 & (1 << 0)) != 0) {
      $success = $stream->write_uint32($this->f2);
      if (!$success) {
        return false;
      }
    }
    return true;
  }

  /**
   * @return int
   */
  public function calculateF1() {
    $mask = 0;

    if (!is_null($this->f2)) {
      $mask |= self::BIT_F2_0;
    }

    return $mask;
  }

  /**
   * @return int
   */
  public function calculateF2() {
    $mask = 0;

    if ($this->f3 && $this->f4) {
      $mask |= (self::BIT_F3_1 | self::BIT_F4_1);
    }

    return $mask;
  }

}
