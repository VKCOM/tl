<?php

/**
 * AUTOGENERATED, DO NOT EDIT! If you want to modify it, check tl schema.
 *
 * This autogenerated code represents tl class for typed RPC API.
 */

namespace VK\TL\cases\Types;

use VK\TL;

/**
 * @kphp-tl-class
 */
class cases_replace7 implements TL\Readable, TL\Writeable {

  /** @var int */
  public $n = 0;

  /** @var int */
  public $m = 0;

  /** @var int[][] */
  public $a = [];

  /**
   * @param int $n
   * @param int $m
   * @param int[][] $a
   */
  public function __construct($n = 0, $m = 0, $a = []) {
    $this->n = $n;
    $this->m = $m;
    $this->a = $a;
  }

  /**
   * @param TL\tl_input_stream $stream
   * @return bool 
   */
  public function read_boxed($stream) {
    [$magic, $success] = $stream->read_uint32();
    if (!$success || $magic != 0x6ccce4be) {
      return false;
    }
    return $this->read($stream);
  }

  /**
   * @param TL\tl_input_stream $stream
   * @return bool 
   */
  public function read($stream) {
    [$this->n, $success] = $stream->read_uint32();
    if (!$success) {
      return false;
    }
    [$this->m, $success] = $stream->read_uint32();
    if (!$success) {
      return false;
    }
    $this->a = [];
    for($i15 = 0; $i15 < $this->n; $i15++) {
      $array_array_int___element = [];
      for($i9 = 0; $i9 < $this->m; $i9++) {
        $array_int___element = 0;
        [$array_int___element, $success] = $stream->read_int32();
        if (!$success) {
          return false;
        }
        $array_array_int___element[] = $array_int___element;
      }
      $this->a[] = $array_array_int___element;
    }
    return true;
  }

  /**
   * @param TL\tl_output_stream $stream
   * @return bool 
   */
  public function write_boxed($stream) {
    $success = $stream->write_uint32(0x6ccce4be);
    if (!$success) {
      return false;
    }
    return $this->write($stream);
  }

  /**
   * @param TL\tl_output_stream $stream
   * @return bool 
   */
  public function write($stream) {
    $success = $stream->write_uint32($this->n);
    if (!$success) {
      return false;
    }
    $success = $stream->write_uint32($this->m);
    if (!$success) {
      return false;
    }
    for($i15 = 0; $i15 < $this->n; $i15++) {
      for($i9 = 0; $i9 < $this->m; $i9++) {
        $success = $stream->write_int32($this->a[$i15][$i9]);
        if (!$success) {
          return false;
        }
      }
    }
    return true;
  }

}
