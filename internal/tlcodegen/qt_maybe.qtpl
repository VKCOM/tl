{%- import "fmt" -%}

{%- func (maybe *TypeRWMaybe) GenerateCode(bytesVersion bool, directImports *DirectImports) -%}
    {%- code
        goName := addBytes(maybe.wr.goGlobalName, bytesVersion)
        tlName := maybe.wr.tlName.String()
        elementTypeString := maybe.element.t.TypeString2(bytesVersion, directImports, maybe.wr.ins, false, false)
        natArgsDecl := formatNatArgsDecl(maybe.wr.NatParams)
        natArgsCall := formatNatArgsDeclCall(maybe.wr.NatParams)
        emptyTag := fmt.Sprintf("%#x", maybe.emptyTag)
        okTag := fmt.Sprintf("%#x", maybe.okTag)
        writeElementNeedsError := maybe.element.t.hasErrorInWriteMethods
        isSizeConstant, trivialSize := maybe.element.t.trw.tl2TrivialSize("item.Value", false, maybe.element.recursive)
    -%}
type {%s= goName %} struct {
    Value {%s= elementTypeString %} // not deterministic if !Ok
    Ok    bool
}

func (item *{%s= goName %}) Reset() {
    item.Ok = false
}
    {%- if maybe.wr.gen.options.GenerateRandomCode -%}
func (item *{%s= goName %}) FillRandom(rg *basictl.RandGenerator{%s= natArgsDecl %}) {
    if basictl.RandomUint(rg) & 1 == 1 {
        item.Ok = true
        {%s= maybe.element.t.TypeRandomCode(bytesVersion, directImports, maybe.wr.ins, "item.Value", formatNatArgs(nil, maybe.element.natArgs), false) %}
    } else {
        item.Ok = false
    }
}
    {%- endif -%}

func (item *{%s= goName %}) ReadBoxed(w []byte{%s= natArgsDecl %}) (_ []byte, err error) {
    if w, err = basictl.ReadBool(w, &item.Ok, {%s= emptyTag %}, {%s= okTag %}); err != nil {
        return w, err
    }
    if item.Ok {
        {%s= maybe.element.t.TypeReadingCode(bytesVersion, directImports, maybe.wr.ins, "item.Value", maybe.element.Bare(), formatNatArgs(nil, maybe.element.natArgs), false, true) %}
    }
    return w, nil
}

func (item *{%s= goName %}) WriteBoxedGeneral(w []byte{%s= natArgsDecl %}) (_ []byte, err error) {
    {%- if writeElementNeedsError -%}
    return item.WriteBoxed(w{%s= natArgsCall %})
    {%- else -%}
    return item.WriteBoxed(w{%s= natArgsCall %}), nil
    {%- endif -%}
}

func (item *{%s= goName %}) WriteBoxed(w []byte{%s= natArgsDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    if item.Ok {
        w = basictl.NatWrite(w, {%s= okTag %})
        {%s= maybe.element.t.TypeWritingCode(bytesVersion, directImports, maybe.wr.ins, "item.Value", maybe.element.Bare(), formatNatArgs(nil, maybe.element.natArgs), false, true, writeElementNeedsError) %}
    }
    {%- if writeElementNeedsError -%}
    return basictl.NatWrite(w, {%s= emptyTag %}), nil
    {%- else -%}
    return basictl.NatWrite(w, {%s= emptyTag %})
    {%- endif -%}
}

{%- if maybe.wr.gen.options.GenerateTL2 -%}
{%- if maybe.wr.wantsTL2 -%}
func (item *{%s= goName %}) CalculateLayout(sizes []int{%s= natArgsDecl %}) []int {
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if item.Ok {
        sizes[sizePosition] += 1
        sizes[sizePosition] += basictl.TL2CalculateSize(1)
        {%- if len(trivialSize) == 0 && !maybe.element.t.IsTrueType() -%}
        currentPosition := len(sizes)
        {%- endif -%}
        {%- code nonEmptyCondition := maybe.element.t.TypeJSONEmptyCondition(false, "item.Value", maybe.element.recursive) -%}
        {%- if nonEmptyCondition != "" -%}
        if {%s= nonEmptyCondition %} {
        {%- endif -%}
        {%s= maybe.element.t.CalculateLayout(bytesVersion, "sizes", "item.Value", false, maybe.wr.ins, maybe.element.recursive, formatNatArgs(nil, maybe.element.natArgs)) %}
        {%- code
            sizeValue := "sizes[currentPosition]"
            if len(trivialSize) != 0 {
                sizeValue = trivialSize
            }
        -%}
        {%- if !isSizeConstant -%}
        if {%s= sizeValue %} != 0 {
        {%- endif -%}
            sizes[sizePosition] += {%s= sizeValue %}
        {%- if maybe.element.t.trw.isSizeWrittenInData() -%}
            sizes[sizePosition] += basictl.TL2CalculateSize({%s= sizeValue %})
        {%- endif -%}
        {%- if !isSizeConstant -%}
        }
        {%- endif -%}
        {%- if nonEmptyCondition != "" -%}
        }
        {%- endif -%}
    }
    return sizes
}

func (item *{%s= goName %}) InternalWriteTL2(w []byte, sizes []int{%s= natArgsDecl %}) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if currentSize == 0 {
        return w, sizes
    }

    if item.Ok {
        currentPosition := len(w)
        w = append(w, 1)
        w = basictl.TL2WriteSize(w, 1)
        {%- code
            sizeValue = "sizes[0]"
            if len(trivialSize) != 0 {
                sizeValue = trivialSize
            }
            nonEmptyCondition = maybe.element.t.TypeJSONEmptyCondition(false, "item.Value", maybe.element.recursive)
        -%}
        {%- if nonEmptyCondition != "" -%}
        if {%s= nonEmptyCondition %} {
        {%- endif -%}
        if {%s= sizeValue %} != 0 {
        w[currentPosition] |= (1 << 1)
        {%s= maybe.element.t.WriteTL2Call(bytesVersion, "sizes", "w", "item.Value", false, maybe.wr.ins, maybe.element.recursive, formatNatArgs(nil, maybe.element.natArgs)) %}
        {%- if len(trivialSize) == 0 -%}
        } else {
            sizes = sizes[1:]
        }
        {%- else -%}
        }
        {%- endif -%}
        {%- if nonEmptyCondition != "" -%}
        }
        {%- endif -%}
    }
    return w, sizes
}
{%- endif -%}

func (item *{%s= goName %}) InternalReadTL2(r []byte{%s= natArgsDecl %}) (_ []byte, err error) {
{%- if !maybe.wr.wantsTL2 -%}
    return r, {%s= maybe.wr.gen.InternalPrefix()%}ErrorTL2SerializersNotGenerated({%q= tlName %})
{%- else -%}
    saveR := r
    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    shift := currentSize + basictl.TL2CalculateSize(currentSize)

    if currentSize == 0 {
        item.Ok = false
    } else {
        var block byte
        if r, err = basictl.ByteReadTL2(r, &block); err != nil { return r, err }
        if block & 1 == 0 {
            return r, basictl.TL2Error("must have constructor bytes")
        }
        var index int
        if r, index, err = basictl.TL2ParseSize(r); err != nil { return r, err }
        if index != 1 {
            return r, basictl.TL2Error("expected 1")
        }
        item.Ok = true
        if block & (1 << 1) != 0 {
        {%- if maybe.element.recursive -%}
        if item.Value == nil {
            var newValue {%s= maybe.element.t.TypeString2(bytesVersion, directImports, maybe.wr.ins, false, false) %}
            item.Value = &newValue
        }
        {%- endif -%}
        {%s= maybe.element.t.ReadTL2Call(bytesVersion, "r", "item.Value", false, maybe.wr.ins, maybe.element.recursive, formatNatArgs(nil, maybe.element.natArgs)) %}
        } else {
        {%s= maybe.element.t.TypeResettingCode(bytesVersion, directImports, maybe.wr.ins, "item.Value", maybe.element.recursive) %}
        }
    }
    if len(saveR) < len(r) + shift {
        r = saveR[shift:]
    }
{%- endif -%}
    return r, nil
}

{%- endif -%}
{%- if maybe.wr.gen.options.GenerateLegacyJsonRead -%}
func (item *{%s= goName %}) ReadJSONLegacy(legacyTypeNames bool, j interface{}{%s= natArgsDecl %}) error {
  _ok, _jvalue, err := {%s= maybe.wr.gen.InternalPrefix()%}JsonReadMaybe({%q= tlName %}, j)
  if err != nil {
    return err
  }
  item.Ok = _ok
  if _ok {
    {%s= maybe.element.t.TypeJSONReadingCode(bytesVersion, directImports, maybe.wr.ins, "_jvalue", "item.Value", formatNatArgs(nil, maybe.element.natArgs), false, ) %}
  }
  return nil
}

{%- endif -%}
func (item *{%s= goName %}) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer{%s= natArgsDecl %}) error {
  _ok, _jvalue, err := {%s= maybe.wr.gen.InternalPrefix()%}Json2ReadMaybe({%q= tlName %}, in)
  if err != nil {
    return err
  }
  item.Ok = _ok
  if _ok {
    var in2Pointer *basictl.JsonLexer
    if _jvalue != nil {
        in2 := basictl.JsonLexer{Data: _jvalue}
        in2Pointer = &in2
    }
    {%s= maybe.element.t.TypeJSON2ReadingCode(bytesVersion, directImports, maybe.wr.ins, "in2Pointer", "item.Value", formatNatArgs(nil, maybe.element.natArgs), false, ) %}
  }
  return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *{%s= goName %}) WriteJSONGeneral(w []byte{%s= natArgsDecl %}) (_ []byte, err error) {
    {%- if writeElementNeedsError -%}
    return item.WriteJSONOpt(true, false, w{%s= natArgsCall %})
    {%- else -%}
    return item.WriteJSONOpt(true, false, w{%s= natArgsCall %}), nil
    {%- endif -%}
}

func (item *{%s= goName %}) WriteJSON(w []byte{%s= natArgsDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    return item.WriteJSONOpt(true, false, w{%s= natArgsCall %})
}
func (item *{%s= goName %}) WriteJSONOpt(newTypeNames bool, short bool, w []byte{%s= natArgsDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    if !item.Ok {
    {%- if writeElementNeedsError -%}
        return append(w, "{}"...), nil
    {%- else -%}
        return append(w, "{}"...)
    {%- endif -%}
    }
    w = append(w, `{"ok":true`...)
    {%- code
        emptyCondition := maybe.element.t.TypeJSONEmptyCondition(bytesVersion, "item.Value", false, )
    -%}
    {%- if emptyCondition != "" -%}
    if {%s= emptyCondition %} {
    {%- endif -%}
    w = append(w, `,"value":`...)
    {%s= maybe.element.t.TypeJSONWritingCode(bytesVersion, directImports, maybe.wr.ins, "item.Value", formatNatArgs(nil, maybe.element.natArgs), false, writeElementNeedsError) %}
    {%- if emptyCondition != "" -%}
    }
    {%- endif -%}
    {%- if writeElementNeedsError -%}
    return append(w, '}'), nil
    {%- else -%}
    return append(w, '}')
    {%- endif -%}
}
    {%- if len(maybe.wr.NatParams) == 0 -%}

func (item {%s= goName %}) String({%s= formatNatArgsDeclNoComma(maybe.wr.NatParams) %}) string {
    {%- if writeElementNeedsError -%}
    w, err := item.WriteJSON(nil{%s= natArgsCall %})
    if err != nil {
        return err.Error()
    }
    return string(w)
    {%- else -%}
    return string(item.WriteJSON(nil{%s= natArgsCall %}))
    {%- endif -%}
}

    {%- endif -%}

{%- endfunc -%}
