// Code generated by qtc from "qt_meta.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package tlcodegen

import "fmt"

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func (gen *Gen2) streamgenerateMeta(qw422016 *qt422016.Writer, tlgenVersion string) {
	qw422016.N().S(HeaderComment)
	qw422016.N().S(`
`)
	typeWrappers := gen.generatedTypesList

	qw422016.N().S(`package `)
	qw422016.E().S(MetaGoPackageName)
	qw422016.N().S(`

import (
    "fmt"

    `)
	qw422016.N().Q(gen.BasicPackageNameFull)
	qw422016.N().S(`
    "`)
	qw422016.N().S(gen.options.TLPackageNameFull)
	qw422016.N().S(`/internal"
)

func SchemaGenerator() string { return `)
	qw422016.N().S(fmt.Sprintf("%#v", tlgenVersion))
	qw422016.N().S(` }
func SchemaURL() string { return `)
	qw422016.N().S(fmt.Sprintf("%#v", gen.options.SchemaURL))
	qw422016.N().S(` }
func SchemaCommit() string { return `)
	qw422016.N().S(fmt.Sprintf("%#v", gen.options.SchemaCommit))
	qw422016.N().S(` }
func SchemaTimestamp() uint32 { return `)
	qw422016.E().V(gen.options.SchemaTimestamp)
	qw422016.N().S(` }

// We can create only types which have zero type arguments and zero nat arguments
type Object interface {
	TLName() string // returns type's TL name. For union, returns constructor name depending on actual union value
	TLTag() uint32  // returns type's TL tag. For union, returns constructor tag depending on actual union value
	String() string // returns type's representation for debugging (JSON for now)

`)
	if gen.options.GenerateRandomCode {
		qw422016.N().S(`	FillRandom(rg *basictl.RandGenerator)
`)
	}
	qw422016.N().S(`	Read(w []byte) ([]byte, error) // reads type's bare TL representation by consuming bytes from the start of w and returns remaining bytes, plus error
	ReadBoxed(w []byte) ([]byte, error) // same as Read, but reads/checks TLTag first (this method is general version of Write, use it only when you are working with interface)
	WriteGeneral(w []byte) ([]byte, error) // same as Write, but has common signature (with error) for all objects, so can be called through interface
	WriteBoxedGeneral(w []byte) ([]byte, error) // same as WriteBoxed, but has common signature (with error) for all objects, so can be called through interface

	MarshalJSON() ([]byte, error) // returns type's JSON representation, plus error
	UnmarshalJSON([]byte) error // reads type's JSON representation

`)
	if gen.options.GenerateLegacyJsonRead {
		qw422016.N().S(`    ReadJSONLegacy(legacyTypeNames bool, j interface{}) error
`)
	}
	qw422016.N().S(`    ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error
    // like MarshalJSON, but appends to w and returns it
    // pass empty basictl.JSONWriteContext{} if you do not know which options you need
	WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) ([]byte, error)
`)
	if gen.options.GenerateTL2 {
		qw422016.N().S(`
    ReadTL2(r []byte, ctx *basictl.TL2ReadContext) ([]byte, error)
	WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte
`)
	}
	qw422016.N().S(`}

type Function interface {
	Object

    // tctx is for options controlling transcoding short-long version during Long ID and legacyTypeNames->newTypeNames transition
    // pass empty basictl.JSONWriteContext{} if you do not know which options you need
	ReadResultWriteResultJSON(tctx *basictl.JSONWriteContext, r []byte, w []byte) ([]byte, []byte, error) // combination of ReadResult(r) + WriteResultJSON(w). Returns new r, new w, plus error
	ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) // combination of ReadResultJSON(r) + WriteResult(w). Returns new r, new w, plus error
}

func GetAllTLItems() []TLItem {
	var allItems []TLItem
	for _, item := range itemsByName {
		if item != nil {
			allItems = append(allItems, *item)
		}
	}
	return allItems
}

// for quick one-liners
func GetTLName(tag uint32, notFoundName string) string {
	if item := FactoryItemByTLTag(tag); item != nil {
		return item.TLName()
	}
	return notFoundName
}

func CreateFunction(tag uint32) Function {
    if item := FactoryItemByTLTag(tag); item != nil && item.createFunction != nil {
        return item.createFunction()
    }
    return nil
}

func CreateObject(tag uint32) Object {
    if item := FactoryItemByTLTag(tag); item != nil && item.createObject != nil {
        return item.createObject()
    }
    return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateFunctionFromName(name string) Function {
    if item := FactoryItemByTLName(name); item != nil && item.createFunction != nil {
        return item.createFunction()
    }
    return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateObjectFromName(name string) Object {
    if item := FactoryItemByTLName(name); item != nil && item.createObject != nil {
        return item.createObject()
    }
    return nil
}

func CreateFunctionBytes(tag uint32) Function {
    if item := FactoryItemByTLTag(tag); item != nil && item.createFunctionBytes != nil {
        return item.createFunctionBytes()
    }
    return nil
}

func CreateObjectBytes(tag uint32) Object {
    if item := FactoryItemByTLTag(tag); item != nil && item.createObjectBytes != nil {
        return item.createObjectBytes()
    }
    return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateFunctionFromNameBytes(name string) Function {
    if item := FactoryItemByTLName(name); item != nil && item.createFunctionBytes != nil {
        return item.createFunctionBytes()
    }
    return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateObjectFromNameBytes(name string) Object {
    if item := FactoryItemByTLName(name); item != nil && item.createObjectBytes != nil {
        return item.createObjectBytes()
    }
    return nil
}

`)
	if gen.options.GenerateLegacyJsonRead {
		qw422016.N().S(`// legacy wrapper, will be removed soon
func ReadJSONLegacy(item Object, legacyTypeNames bool, b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON(item.TLName(), err.Error())
	}
	if err = item.ReadJSONLegacy(legacyTypeNames, j); err != nil {
		return internal.ErrorInvalidJSON(item.TLName(), err.Error())
	}
	return nil
}
`)
	}
	qw422016.N().S(`
type TLItem struct {
    tag                uint32
    annotations        uint32
    tlName             string

    resultTypeContainsUnionTypes bool
    argumentsTypesContainUnionTypes bool

    createFunction     func() Function
    createFunctionLong func() Function
    createObject       func() Object
    createFunctionBytes     func() Function
    createFunctionLongBytes func() Function
    createObjectBytes       func() Object

}

func (item TLItem) TLTag() uint32            { return item.tag }
func (item TLItem) TLName() string           { return item.tlName }
func (item TLItem) CreateObject() Object     { return item.createObject() }
func (item TLItem) IsFunction() bool         { return item.createFunction != nil }
func (item TLItem) CreateFunction() Function { return item.createFunction() }

func (item TLItem) HasUnionTypesInResult() bool { return item.resultTypeContainsUnionTypes }
func (item TLItem) HasUnionTypesInArguments() bool { return item.argumentsTypesContainUnionTypes }

// For transcoding short-long version during Long ID transition
func (item TLItem) HasFunctionLong() bool        { return item.createFunctionLong != nil }
func (item TLItem) CreateFunctionLong() Function { return item.createFunctionLong() }

// Annotations
`)
	for bit, name := range gen.allAnnotations {
		goName := ToUpperFirst(name)

		qw422016.N().S(`func (item TLItem) Annotation`)
		qw422016.N().S(goName)
		qw422016.N().S(`() bool { return item.annotations & `)
		qw422016.N().S(fmt.Sprintf("%#x", 1<<bit))
		qw422016.N().S(` != 0 }
`)
	}
	qw422016.N().S(`
// TLItem serves as a single type for all enum values
func (item *TLItem) Reset()                         {}
`)
	if gen.options.GenerateRandomCode {
		qw422016.N().S(`	func (item *TLItem) FillRandom(rg *basictl.RandGenerator) {}
`)
	}
	qw422016.N().S(`func (item *TLItem) Read(w []byte) ([]byte, error)  { return w, nil }
func (item *TLItem) WriteGeneral(w []byte) ([]byte, error) { return w, nil }
func (item *TLItem) Write(w []byte) []byte { return w }
func (item *TLItem) ReadBoxed(w []byte) ([]byte, error) { return basictl.NatReadExactTag(w, item.tag) }
func (item *TLItem) WriteBoxedGeneral(w []byte) ([]byte, error) { return basictl.NatWrite(w, item.tag), nil }
func (item *TLItem) WriteBoxed(w []byte) []byte { return basictl.NatWrite(w, item.tag) }
func (item TLItem) String() string {
	return string(item.WriteJSON(nil))
}
`)
	if gen.options.GenerateLegacyJsonRead {
		qw422016.N().S(`func (item *TLItem) ReadJSONLegacy(legacyTypeNames bool, j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON(item.tlName, "expected json object")
	}
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement(item.tlName, k)
	}
	return nil
}

`)
	}
	qw422016.N().S(`func (item *TLItem) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	in.Delim('{')
	if !in.Ok() {
		return in.Error()
	}
	for !in.IsDelim('}') {
		return internal.ErrorInvalidJSONExcessElement(item.tlName, in.UnsafeFieldName(true))
	}
	in.Delim('}')
	if !in.Ok() {
		return in.Error()
	}
	return nil
}
func (item *TLItem) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}
func (item *TLItem) WriteJSON(w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}
func (item *TLItem) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}
func (item *TLItem) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON(item.tlName, err.Error())
	}
	return nil
}
`)
	if gen.options.GenerateTL2 {
		qw422016.N().S(`
func (item *TLItem) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) ([]byte, error) {
    return r, nil
}

func (item *TLItem) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
    return w
}
`)
	}
	qw422016.N().S(`func FactoryItemByTLTag(tag uint32) *TLItem {
    return itemsByTag[tag]
}

func FactoryItemByTLName(name string) *TLItem {
    return itemsByName[name]
}

var itemsByTag = map[uint32]*TLItem {}

var itemsByName = map[string]*TLItem {}

func SetGlobalFactoryCreateForFunction(itemTag uint32, createObject func() Object, createFunction func() Function, createFunctionLong func() Function) {
    item := itemsByTag[itemTag]
    if item == nil {
        panic(fmt.Sprintf("factory cannot find function tag #%08x to set", itemTag))
    }
    item.createObject = createObject
    item.createFunction = createFunction
    item.createFunctionLong = createFunctionLong
}

func SetGlobalFactoryCreateForObject(itemTag uint32, createObject func() Object) {
    item := itemsByTag[itemTag]
    if item == nil {
        panic(fmt.Sprintf("factory cannot find item tag #%08x to set", itemTag))
    }
    item.createObject = createObject
}

func SetGlobalFactoryCreateForEnumElement(itemTag uint32) {
    item := itemsByTag[itemTag]
    if item == nil {
        panic(fmt.Sprintf("factory cannot find enum tag #%08x to set", itemTag))
    }
    item.createObject = func() Object { return item }
}

func SetGlobalFactoryCreateForFunctionBytes(itemTag uint32, createObject func() Object, createFunction func() Function, createFunctionLong func() Function) {
    item := itemsByTag[itemTag]
    if item == nil {
        panic(fmt.Sprintf("factory cannot find function tag #%08x to set", itemTag))
    }
    item.createObjectBytes = createObject
    item.createFunctionBytes = createFunction
    item.createFunctionLongBytes = createFunctionLong
}

func SetGlobalFactoryCreateForObjectBytes(itemTag uint32, createObject func() Object) {
    item := itemsByTag[itemTag]
    if item == nil {
        panic(fmt.Sprintf("factory cannot find item tag #%08x to set", itemTag))
    }
    item.createObjectBytes = createObject
}

func SetGlobalFactoryCreateForEnumElementBytes(itemTag uint32) {
    item := itemsByTag[itemTag]
    if item == nil {
        panic(fmt.Sprintf("factory cannot find enum tag #%08x to set", itemTag))
    }
    item.createObjectBytes = func() Object { return item }
}

func pleaseImportFactoryBytesObject() Object {
       panic("factory functions are not linked to reduce code bloat, please import 'gen/factory_bytes' instead of 'gen/meta'.")
}

func pleaseImportFactoryBytesFunction() Function {
       panic("factory functions are not linked to reduce code bloat, please import 'gen/factory_bytes' instead of 'gen/meta'.")
}

func pleaseImportFactoryObject() Object {
       panic("factory functions are not linked to reduce code bloat, please import 'gen/factory' instead of 'gen/meta'.")
}

func pleaseImportFactoryFunction() Function {
       panic("factory functions are not linked to reduce code bloat, please import 'gen/factory' instead of 'gen/meta'.")
}

func fillObject(n1 string, n2 string, item *TLItem)  {
	itemsByTag[item.tag] = item
	itemsByName[item.tlName] = item
	itemsByName[n1] = item
	itemsByName[n2] = item
	item.createObject = pleaseImportFactoryObject
	item.createObjectBytes = pleaseImportFactoryBytesObject
	// code below is as fast, but allocates some extra strings which are already in binary const segment due to JSON code
	// itemsByName[fmt.Sprintf("%s#%08x", item.tlName, item.tag)] = item
	// itemsByName[fmt.Sprintf("#%08x", item.tag)] = item
}

func fillFunction(n1 string, n2 string, item *TLItem)  {
    fillObject(n1, n2, item)
	item.createFunction = pleaseImportFactoryFunction
	item.createFunctionBytes = pleaseImportFactoryBytesFunction
}

func init() {
`)
	for _, wr := range typeWrappers {
		if wr.tlTag == 0 || !wr.IsTopLevel() {
			continue
		}
		if fun, ok := wr.trw.(*TypeRWStruct); ok && len(wr.NatParams) == 0 {
			resultTypeContainsUnionTypes := false
			argumentsTypesContainUnionTypes := false

			if fun.ResultType != nil {
				resultTypeContainsUnionTypes = fun.wr.DoesReturnTypeContainUnionTypes()
				argumentsTypesContainUnionTypes = fun.wr.DoArgumentsContainUnionTypes()

				qw422016.N().S(`fillFunction(`)
			} else {
				qw422016.N().S(`fillObject(`)
			}
			qw422016.N().S(`"`)
			wr.tlName.StreamString(qw422016)
			qw422016.N().S(`#`)
			qw422016.N().S(fmt.Sprintf("%08x", wr.tlTag))
			qw422016.N().S(`",`)
			qw422016.N().Q(fmt.Sprintf("#%08x", wr.tlTag))
			qw422016.N().S(`,&TLItem{tag:`)
			qw422016.N().S(fmt.Sprintf("0x%08x", wr.tlTag))
			qw422016.N().S(`, annotations:`)
			qw422016.N().S(fmt.Sprintf("0x%x", wr.AnnotationsMask()))
			qw422016.N().S(`, tlName: "`)
			wr.tlName.StreamString(qw422016)
			qw422016.N().S(`", resultTypeContainsUnionTypes:`)
			qw422016.N().V(resultTypeContainsUnionTypes)
			qw422016.N().S(`, argumentsTypesContainUnionTypes:`)
			qw422016.N().V(argumentsTypesContainUnionTypes)
			qw422016.N().S(`})`)
		}
		qw422016.N().S(`
`)
	}
	qw422016.N().S(`}

`)
}

func (gen *Gen2) writegenerateMeta(qq422016 qtio422016.Writer, tlgenVersion string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	gen.streamgenerateMeta(qw422016, tlgenVersion)
	qt422016.ReleaseWriter(qw422016)
}

func (gen *Gen2) generateMeta(tlgenVersion string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	gen.writegenerateMeta(qb422016, tlgenVersion)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
