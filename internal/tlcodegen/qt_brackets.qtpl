{%- func (tuple *TypeRWBrackets) GenerateCode(bytesVersion bool, directImports *DirectImports) -%}
    {%- code
        goName := addBytes(tuple.wr.goGlobalName, bytesVersion)
        natDecl := formatNatArgsDecl(tuple.wr.NatParams)
        natCall := formatNatArgsDeclCall(tuple.wr.NatParams)
        typeString := tuple.wr.TypeString2(bytesVersion, directImports, tuple.wr.ins, false, false)
        elementTypeString := tuple.element.t.TypeString2(bytesVersion, directImports, tuple.wr.ins, false, false)
        writeElementNeedsError := tuple.element.t.hasErrorInWriteMethods
    -%}
    {%- switch -%}
        {%- case tuple.dictLike -%}
            {%- code
                keyTypeString := tuple.dictKeyField.t.TypeString2(bytesVersion, directImports, tuple.wr.ins, false, false)
                valueTypeString := tuple.dictValueField.t.TypeString2(bytesVersion, directImports, tuple.wr.ins, false, false)
                valueNatArgsDecl := formatNatArgsDecl(tuple.element.t.NatParams)
                valueNatArgsCall := formatNatArgsDeclCall(tuple.element.t.NatParams)
                keyFieldName := tuple.dictKeyField.goName
                valueFieldName := tuple.dictValueField.goName
            -%}
            {%- if bytesVersion -%}
                {%- if tuple.wr.gen.options.GenerateRandomCode -%}
func {%s= goName %}FillRandom(rg *basictl.RandGenerator, vec *{%s= typeString %} {%s= natDecl %}) {
    rg.IncreaseDepth()
    l := rg.LimitValue(basictl.RandomUint(rg))
    *vec = make([]{%s= elementTypeString %}, l)
    for i := range *vec {
        {%s= tuple.element.t.TypeRandomCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false) %}
    }
    rg.DecreaseDepth()
}
                {%- endif -%}

func {%s= goName %}Read(w []byte, vec *{%s= typeString %} {%s= natDecl %}) (_ []byte, err error) {
    var l uint32
    if w, err = basictl.NatRead(w, &l); err != nil {
        return w, err
    }
    {%- if tuple.wr.gen.options.UseCheckLengthSanity -%}
    if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
        return w, err
    }
    {%- endif -%}
    if uint32(cap(*vec)) < l {
        *vec = make([]{%s= elementTypeString %}, l)
    } else {
        *vec = (*vec)[:l]
    }
    for i := range *vec {
        {%s= tuple.element.t.TypeReadingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false ) %}
    }
    return w, nil
}

func {%s= goName %}Write(w []byte, vec {%s= typeString %} {%s= natDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    w = basictl.NatWrite(w, uint32(len(vec)))
    for _, elem := range vec {
        {%s= tuple.element.t.TypeWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false, writeElementNeedsError) %}
    }
    {%- if writeElementNeedsError -%}
    return w, nil
    {%- else -%}
    return w
    {%- endif -%}
}
{%- if tuple.wr.gen.options.GenerateTL2 -%}

{%- if tuple.wr.wantsTL2 -%}
func {%s= goName %}CalculateLayout(sizes []int, vec *{%s= typeString %}{%s= valueNatArgsDecl %}) []int {
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if len(*vec) != 0 {
        sizes[sizePosition] += basictl.TL2CalculateSize(len(*vec))
    }
    for i := 0; i < len(*vec); i++ {
        {%- code
            _, trivialSize := tuple.element.t.trw.tl2TrivialSize("elem", false, tuple.element.recursive)
            sizeValue := trivialSize
            if len(trivialSize) == 0 {
                sizeValue = "sizes[currentPosition]"
            }
        -%}
        {%- if len(trivialSize) == 0 -%}
        currentPosition := len(sizes)
        {%- endif -%}
        {%- if tuple.element.t.trw.doesCalculateLayoutUseObject(false) -%}
        elem := (*vec)[i]
        {%- endif -%}
        {%s= tuple.element.t.CalculateLayout(directImports, bytesVersion, "sizes", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
        sizes[sizePosition] += {%s= sizeValue %}
        {%- if tuple.element.t.trw.isSizeWrittenInData() -%}
        sizes[sizePosition] += basictl.TL2CalculateSize({%s= sizeValue %})
        {%- endif -%}
    }
    return sizes
}

func {%s= goName %}InternalWriteTL2(w []byte, sizes []int,vec *{%s= typeString %}{%s= valueNatArgsDecl %}) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if len(*vec) != 0 {
        w = basictl.TL2WriteSize(w, len(*vec))
    }

    for i := 0; i < len(*vec); i++ {
        {%- if tuple.element.t.trw.doesWriteTL2UseObject(false) -%}
        elem := (*vec)[i]
        {%- endif -%}
        {%s= tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
    }
    return w, sizes
}
{%- endif -%}

func {%s= goName %}InternalReadTL2(r []byte, vec *{%s= typeString %}{%s= valueNatArgsDecl %}) (_ []byte, err error) {
{%- if !tuple.wr.wantsTL2 -%}
    return r, {%s= tuple.wr.gen.InternalPrefix()%}ErrorTL2SerializersNotGenerated({%q= typeString %})
{%- else -%}
    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    if len(r) < currentSize {
        return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
    }

    currentR := r[:currentSize]
    r = r[currentSize:]

    elementCount := 0
    if currentSize != 0 {
        {%- code
            readResult := "currentR"
            if !tuple.element.t.trw.doesReadTL2UseBytes(false) {
                readResult = "_"
            }
        -%}
        if {%s= readResult %}, elementCount, err = basictl.TL2ParseSize(currentR); err != nil { return r, err }
    }

    if cap(*vec) < elementCount {
        *vec = make([]{%s= elementTypeString %}, elementCount)
    }
    *vec = (*vec)[:elementCount]
    for i := 0; i < elementCount; i++ {
        {%- if tuple.element.t.trw.doesReadTL2UseObject(false) -%}
        elem := (*vec)[i]
        {%- endif -%}
        {%s= tuple.element.t.ReadTL2Call(directImports, bytesVersion, "currentR", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
    }
    return r, nil
{%- endif -%}
}
{%- endif -%}

                {%- if tuple.dictKeyString -%}
{%- if tuple.wr.gen.options.GenerateLegacyJsonRead -%}
func {%s= goName %}ReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *{%s= typeString %} {%s= valueNatArgsDecl %}) error {
    var _map map[string]interface{}
    var _mapok bool
    if j != nil {
        _map, _mapok = j.(map[string]interface{})
        if !_mapok {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json object")
        }
    }
      l := len(_map)
    if cap(*vec) < l {
        *vec = make([]{%s= elementTypeString %}, l)
    } else {
        *vec = (*vec)[:l]
    }
    i := 0
    arr := *vec
    for key, _jvalue := range _map {
        arr[i].{%s= tuple.dictKeyField.goName %} = append(arr[i].{%s= tuple.dictKeyField.goName %}[:0], key...)
        {%s= tuple.dictValueField.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_jvalue", "arr[i]."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false, ) %}
        i++
    }
    return nil
}

{%- endif -%}
func {%s= goName %}ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *{%s= typeString %} {%s= valueNatArgsDecl %}) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
        in.Delim('{')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json object")
        }
        for ;!in.IsDelim('}'); index++ {
            if len(*vec) <= index {
                var newValue {%s= elementTypeString %}
                *vec = append(*vec, newValue)
                *vec = (*vec)[:cap(*vec)]
            }
            (*vec)[index].Key = append((*vec)[index].Key[:0], in.UnsafeFieldName(true)...)
            in.WantColon()
            {%s= tuple.dictValueField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "(*vec)[index]."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false ) %}
            in.WantComma()
        }
        in.Delim('}')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json object's end")
        }
    }
	*vec = (*vec)[:index]
	return nil
}

func {%s= goName %}WriteJSON(w []byte, vec {%s= typeString %} {%s= valueNatArgsDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    return {%s= goName %}WriteJSONOpt(true, false, w, vec{%s= valueNatArgsCall %})
}
func {%s= goName %}WriteJSONOpt(newTypeNames bool, short bool, w []byte, vec {%s= typeString %} {%s= valueNatArgsDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    w = append(w, '{')
    for _, elem := range vec {
        w = basictl.JSONAddCommaIfNeeded(w)
        w = basictl.JSONWriteStringBytes(w, elem.{%s= tuple.dictKeyField.goName %})
        w = append(w, ':')
        {%s= tuple.dictValueField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false, writeElementNeedsError) %}
    }
    {%- if writeElementNeedsError -%}
    return append(w, '}'), nil
    {%- else -%}
    return append(w, '}')
    {%- endif -%}
}
                {%- else -%}
{%- if tuple.wr.gen.options.GenerateLegacyJsonRead -%}
func {%s= goName %}ReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *{%s= typeString %} {%s= valueNatArgsDecl %}) error {
    var _map map[string]interface{}
    var _mapok bool
    if j != nil {
        _map, _mapok = j.(map[string]interface{})
        if !_mapok {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json object")
        }
    }
      l := len(_map)
    if cap(*vec) < l {
        *vec = make([]{%s= elementTypeString %}, l)
    } else {
        *vec = (*vec)[:l]
    }
    i := 0
    arr := *vec
    for _jkey, _jvalue := range _map {
        {%s= tuple.dictKeyField.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_jkey", "arr[i]."+keyFieldName, formatNatArgs(nil, tuple.dictKeyField.natArgs), false ) %}
        {%s= tuple.dictValueField.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_jvalue", "arr[i]."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false ) %}
        i++
    }
    return nil
}

{%- endif -%}
func {%s= goName %}ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *{%s= typeString %} {%s= valueNatArgsDecl %}) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
        in.Delim('{')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json object")
        }
        for ;!in.IsDelim('}'); index++ {
            if len(*vec) <= index {
                var newValue {%s= elementTypeString %}
                *vec = append(*vec, newValue)
                *vec = (*vec)[:cap(*vec)]
            }
            keyBytes := []byte(in.UnsafeFieldName(false))
            if !in.Ok() {
                return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected correct json value in key")
            }
            in2 := basictl.JsonLexer{Data: keyBytes}
            {%s= tuple.dictKeyField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "&in2", "(*vec)[index]."+keyFieldName, formatNatArgs(nil, tuple.dictKeyField.natArgs), false ) %}
            in.WantColon()
            {%s= tuple.dictValueField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "(*vec)[index]."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false ) %}
            in.WantComma()
        }
        in.Delim('}')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json object's end")
        }
    }
	*vec = (*vec)[:index]
	return nil
}

func {%s= goName %}WriteJSON(w []byte, vec {%s= typeString %} {%s= valueNatArgsDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    return {%s= goName %}WriteJSONOpt(true, false, w, vec{%s= valueNatArgsCall %})
}
func {%s= goName %}WriteJSONOpt(newTypeNames bool, short bool, w []byte, vec {%s= typeString %} {%s= valueNatArgsDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    w = append(w, '{')
    for _, elem := range vec {
        key := elem.{%s= keyFieldName %}
        w = basictl.JSONAddCommaIfNeeded(w)
        w = append(w, `"`...)
        {%s= tuple.dictKeyField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "key", formatNatArgs(nil, tuple.dictKeyField.natArgs), false, tuple.dictKeyField.t.hasErrorInWriteMethods) %}
        w = append(w, `":`...)
        {%s= tuple.dictValueField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false, tuple.dictValueField.t.hasErrorInWriteMethods) %}
    }
    {%- if writeElementNeedsError -%}
    return append(w, '}'), nil
    {%- else -%}
    return append(w, '}')
    {%- endif -%}
}
                {%- endif -%}
            {%- else -%}
func {%s= goName %}Reset(m map[{%s= keyTypeString %}]{%s= valueTypeString %}) {
    for k := range m {
        delete(m, k)
    }
}

            {%- if tuple.wr.gen.options.GenerateRandomCode -%}
func {%s= goName %}FillRandom(rg *basictl.RandGenerator, m *map[{%s= keyTypeString %}]{%s= valueTypeString %} {%s= natDecl %}) {
    rg.IncreaseDepth()
    l := rg.LimitValue(basictl.RandomUint(rg))
    *m = make(map[{%s= keyTypeString %}]{%s= valueTypeString %}, l)
    for i := 0; i < int(l); i++ {
        var elem {%s= elementTypeString %}
        {%s= tuple.element.t.TypeRandomCode(bytesVersion, directImports, tuple.wr.ins, "elem", formatNatArgs(nil, tuple.element.natArgs), false) %}
        (*m)[elem.{%s= keyFieldName %}] = elem.{%s= valueFieldName %}
    }
    rg.DecreaseDepth()
}
            {%- endif -%}
func {%s= goName %}Read(w []byte, m *map[{%s= keyTypeString %}]{%s= valueTypeString %} {%s= natDecl %}) (_ []byte, err error) {
    var l uint32
    if w, err = basictl.NatRead(w, &l); err != nil {
        return w, err
    }
    {%- if tuple.wr.gen.options.UseCheckLengthSanity -%}
    if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
        return w, err
    }
    {%- endif -%}
    var data map[{%s= keyTypeString %}]{%s= valueTypeString %}
    if *m == nil {
        if l == 0 {
            return w, nil
        }
        data = make(map[{%s= keyTypeString %}]{%s= valueTypeString %}, l)
        *m = data
    } else {
        data = *m
        for k := range data {
            delete(data, k)
        }
    }
    for i := 0; i < int(l); i++ {
        var elem {%s= elementTypeString %}
        {%s= tuple.element.t.TypeReadingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false ) %}
         data[elem.{%s= keyFieldName %}] = elem.{%s= valueFieldName %}
    }
    return w, nil
}

func {%s= goName %}Write(w []byte, m map[{%s= keyTypeString %}]{%s= valueTypeString %} {%s= natDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    w = basictl.NatWrite(w, uint32(len(m)))
    if len(m) == 0 {
    {%- if writeElementNeedsError -%}
        return w, nil
    {%- else -%}
        return w
    {%- endif -%}
    }
    keys := make([]{%s= keyTypeString %}, 0, len(m))
    for k := range m {
        keys = append(keys, k)
    }
    {%- code
        directImports.importSort = true
    -%}
{%- if tuple.dictKeyString -%}
    sort.Strings(keys)
{%- else -%}
    sort.Slice(keys, func(i, j int) bool {
        return keys[i] < keys[j]
    })
{%- endif -%}
    for _, key := range keys {
        val := m[key]
        elem := {%s= elementTypeString %}{{%s= keyFieldName %}:key, {%s= valueFieldName %}:val}
        {%s= tuple.element.t.TypeWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false, writeElementNeedsError) %}
    }
    {%- if writeElementNeedsError -%}
    return w, nil
    {%- else -%}
    return w
    {%- endif -%}
}
{%- if tuple.wr.gen.options.GenerateTL2 -%}

{%- if tuple.wr.wantsTL2 -%}
func {%s= goName %}CalculateLayout(sizes []int, m *map[{%s= keyTypeString %}]{%s= valueTypeString %}{%s= natDecl %}) []int {
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if len(*m) != 0 {
        sizes[sizePosition] += basictl.TL2CalculateSize(len(*m))
    }

    keys := make([]{%s= keyTypeString %}, 0, len(*m))
    for k := range *m {
        keys = append(keys, k)
    }
{%- if tuple.dictKeyString -%}
    sort.Strings(keys)
{%- else -%}
    sort.Slice(keys, func(i, j int) bool {
        return keys[i] < keys[j]
    })
{%- endif -%}

    for i := 0; i < len(keys); i++ {
        {%- code
            isConstantSize, trivialSize := tuple.element.t.trw.tl2TrivialSize("elem", false, tuple.dictKeyField.recursive)
            sizeValue := trivialSize
            if len(trivialSize) == 0 {
                sizeValue = "sizes[currentPosition]"
            }
        -%}
        {%- if len(trivialSize) == 0 || !isConstantSize-%}
        elem := {%s= elementTypeString %}{{%s= keyFieldName %}:keys[i], {%s= valueFieldName %}:(*m)[keys[i]]}
        {%- endif -%}
        {%- if len(trivialSize) == 0 -%}
        currentPosition := len(sizes)
        {%- endif -%}
        {%s= tuple.element.t.CalculateLayout(directImports, bytesVersion, "sizes", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
        sizes[sizePosition] += {%s= sizeValue %}
        {%- if tuple.element.t.trw.isSizeWrittenInData() -%}
        sizes[sizePosition] += basictl.TL2CalculateSize({%s= sizeValue %})
        {%- endif -%}
    }
    return sizes
}

func {%s= goName %}InternalWriteTL2(w []byte, sizes []int, m *map[{%s= keyTypeString %}]{%s= valueTypeString %}{%s= natDecl %}) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if len(*m) != 0 {
        w = basictl.TL2WriteSize(w, len(*m))
    }

    keys := make([]{%s= keyTypeString %}, 0, len(*m))
    for k := range *m {
        keys = append(keys, k)
    }
{%- if tuple.dictKeyString -%}
    sort.Strings(keys)
{%- else -%}
    sort.Slice(keys, func(i, j int) bool {
        return keys[i] < keys[j]
    })
{%- endif -%}

    for i := 0; i < len(keys); i++ {
        {%- if tuple.element.t.trw.doesWriteTL2UseObject(false) -%}
        elem := {%s= elementTypeString %}{{%s= keyFieldName %}:keys[i], {%s= valueFieldName %}:(*m)[keys[i]]}
        {%- endif -%}
        {%s= tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
    }
    return w, sizes
}
{%- endif -%}

func {%s= goName %}InternalReadTL2(r []byte, m *map[{%s= keyTypeString %}]{%s= valueTypeString %}{%s= natDecl %}) (_ []byte, err error) {
{%- if !tuple.wr.wantsTL2 -%}
    return r, {%s= tuple.wr.gen.InternalPrefix()%}ErrorTL2SerializersNotGenerated({%q= typeString %})
{%- else -%}
    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    if len(r) < currentSize {
        return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
    }

    currentR := r[:currentSize]
    r = r[currentSize:]

    elementCount := 0
    if currentSize != 0 {
        {%- code
            readResult := "currentR"
            if !tuple.element.t.trw.doesReadTL2UseBytes(false) {
                readResult = "_"
            }
        -%}
        if {%s= readResult %}, elementCount, err = basictl.TL2ParseSize(currentR); err != nil { return r, err }
    }

    if *m == nil {
        *m = make(map[{%s= keyTypeString %}]{%s= valueTypeString %})
    }

    for key := range *m {
        delete(*m, key)
    }

    data := *m

    for i := 0; i < elementCount; i++ {
        elem := {%s= elementTypeString %}{}
        {%s= tuple.element.t.ReadTL2Call(directImports, bytesVersion, "currentR", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
        data[elem.{%s= keyFieldName %}] = elem.{%s= valueFieldName %}
    }
    return r, nil
{%- endif -%}
}
{%- endif -%}

{%- if tuple.wr.gen.options.GenerateLegacyJsonRead -%}
func {%s= goName %}ReadJSONLegacy(legacyTypeNames bool, j interface{}, m *{%s= typeString %} {%s= valueNatArgsDecl %}) error {
    var _map map[string]interface{}
    var _mapok bool
    if j != nil {
        _map, _mapok = j.(map[string]interface{})
        if !_mapok {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json object")
        }
    }
    l := len(_map)
    var data map[{%s= keyTypeString %}]{%s= valueTypeString %}
    if *m == nil {
        if l == 0 {
            return nil
        }
        data = make(map[{%s= keyTypeString %}]{%s= valueTypeString %}, l)
        *m = data
    } else {
        data = *m
        for k := range data {
            delete(data, k)
        }
    }
    for _jkey, _jvalue := range _map {
                {%- if tuple.dictKeyString -%}
                {%- else -%}
        var key {%s= keyTypeString %}
        {%s= tuple.dictKeyField.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_jkey", "key", formatNatArgs(nil, tuple.dictKeyField.natArgs), false ) %}
                {%- endif -%}
        var value {%s= valueTypeString %}
        {%s= tuple.dictValueField.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_jvalue", "value", formatNatArgs(nil, tuple.dictValueField.natArgs), false ) %}
                {%- if tuple.dictKeyString -%}
        data[_jkey] = value
                {%- else -%}
        data[key] = value
                {%- endif -%}
    }
    return nil
}

{%- endif -%}
func {%s= goName %}ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, m *{%s= typeString %} {%s= valueNatArgsDecl %}) error {
	var data map[{%s= keyTypeString %}]{%s= valueTypeString %}
	if *m == nil {
	    *m = make(map[{%s= keyTypeString %}]{%s= valueTypeString %}, 0)
	    data = *m
	} else {
        data = *m
        for k := range data {
            delete(data, k)
        }
    }
    if in != nil {
        in.Delim('{')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json object")
        }
        for !in.IsDelim('}') {
        {%- if tuple.dictKeyString -%}
            key := in.UnsafeFieldName(true)
            in.WantColon()
            var value {%s= valueTypeString %}
            {%s= tuple.dictValueField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "value", formatNatArgs(nil, tuple.dictValueField.natArgs), false ) %}
            data[key] = value
        {%- else -%}
            keyBytes := []byte(in.UnsafeFieldName(false))
            in.WantColon()
            if !in.Ok() {
                return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected correct json value in key")
            }
            in2 := basictl.JsonLexer{Data: keyBytes}
            var key {%s= keyTypeString %}
            {%s= tuple.dictKeyField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "&in2", "key", formatNatArgs(nil, tuple.dictKeyField.natArgs), false ) %}
            var value {%s= valueTypeString %}
            {%s= tuple.dictValueField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "value", formatNatArgs(nil, tuple.dictValueField.natArgs), false ) %}
            data[key] = value
        {%- endif -%}
            in.WantComma()
        }
        in.Delim('}')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json object's end")
        }
    }
    return nil
}

func {%s= goName %}WriteJSON(w []byte, m {%s= typeString %} {%s= valueNatArgsDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    return {%s= goName %}WriteJSONOpt(true, false, w, m{%s= valueNatArgsCall %})
}
                {%- if tuple.dictKeyString -%}
func {%s= goName %}WriteJSONOpt(newTypeNames bool, short bool, w []byte, m {%s= typeString %} {%s= valueNatArgsDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    keys := make([]{%s= keyTypeString %}, 0, len(m))
    for k := range m {
        keys = append(keys, k)
    }
    {%- code
        directImports.importSort = true
    -%}
    sort.Strings(keys)
    w = append(w, '{')
    for _, key := range keys {
        value := m[key]
        w = basictl.JSONAddCommaIfNeeded(w)
        w = basictl.JSONWriteString(w, key)
        w = append(w, ':')
        {%s= tuple.dictValueField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "value", formatNatArgs(nil, tuple.dictValueField.natArgs), false, tuple.dictValueField.t.hasErrorInWriteMethods) %}
    }
    {%- if writeElementNeedsError -%}
    return append(w, '}'), nil
    {%- else -%}
    return append(w, '}')
    {%- endif -%}
}
                {%- else -%}
func {%s= goName %}WriteJSONOpt(newTypeNames bool, short bool, w []byte, m {%s= typeString %} {%s= natDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    keys := make([]{%s= keyTypeString %}, 0, len(m))
    for k := range m {
        keys = append(keys, k)
    }
    {%- code
        directImports.importSort = true
    -%}
    sort.Slice(keys, func(i, j int) bool {
        return keys[i] < keys[j]
    })
    w = append(w, '{')
    for _, key := range keys {
        value := m[key]
        w = basictl.JSONAddCommaIfNeeded(w)
        w = append(w, `"`...)
        {%s= tuple.dictKeyField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "key", formatNatArgs(nil, tuple.dictKeyField.natArgs), false, tuple.dictKeyField.t.hasErrorInWriteMethods) %}
        w = append(w, `":`...)
        {%s= tuple.dictValueField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "value", formatNatArgs(nil, tuple.dictValueField.natArgs), false, tuple.dictValueField.t.hasErrorInWriteMethods) %}
    }
    {%- if writeElementNeedsError -%}
    return append(w, '}'), nil
    {%- else -%}
    return append(w, '}')
    {%- endif -%}
}
                {%- endif -%}
            {%- endif -%}
        {%- case tuple.vectorLike -%}
            {%- if tuple.wr.gen.options.GenerateRandomCode -%}
func {%s= goName %}FillRandom(rg *basictl.RandGenerator, vec *{%s= typeString %} {%s= natDecl %}) {
    rg.IncreaseDepth()
    l := rg.LimitValue(basictl.RandomUint(rg))
    *vec = make([]{%s= elementTypeString %}, l)
    for i := range *vec {
        {%s= tuple.element.t.TypeRandomCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false) %}
    }
    rg.DecreaseDepth()
}
            {%- endif -%}
func {%s= goName %}Read(w []byte, vec *{%s= typeString %} {%s= natDecl %}) (_ []byte, err error) {
    var l uint32
    if w, err = basictl.NatRead(w, &l); err != nil {
        return w, err
    }
    {%- if tuple.wr.gen.options.UseCheckLengthSanity -%}
    if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
        return w, err
    }
    {%- endif -%}
    if uint32(cap(*vec)) < l {
        *vec = make([]{%s= elementTypeString %}, l)
    } else {
        *vec = (*vec)[:l]
    }
    for i := range *vec {
        {%s= tuple.element.t.TypeReadingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false ) %}
    }
    return w, nil
}

func {%s= goName %}Write(w []byte, vec {%s= typeString %} {%s= natDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    w = basictl.NatWrite(w, uint32(len(vec)))
    for _, elem := range vec {
        {%s= tuple.element.t.TypeWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false, writeElementNeedsError) %}
    }
    {%- if writeElementNeedsError -%}
    return w, nil
    {%- else -%}
    return w
    {%- endif -%}
}
{%- if tuple.wr.gen.options.GenerateTL2 -%}

{%- if tuple.wr.wantsTL2 -%}
func {%s= goName %}CalculateLayout(sizes []int, vec *{%s= typeString %} {%s= natDecl %}) []int {
    currentSize := 0
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if len(*vec) != 0 {
        currentSize += basictl.TL2CalculateSize(len(*vec))
    }
    {%- if _, ok := tuple.element.t.trw.(*TypeRWBool); ok -%}
    // special case for bool
    currentSize += (len(*vec) + 7) / 8
    {%- else -%}
    for i := 0; i < len(*vec); i++ {
        {%- code
            _, trivialSize := tuple.element.t.trw.tl2TrivialSize("elem", false, tuple.element.recursive)
            sizeValue := trivialSize
            if len(trivialSize) == 0 {
                sizeValue = "sizes[currentPosition]"
            }
        -%}
        {%- if len(trivialSize) == 0 -%}
        currentPosition := len(sizes)
        {%- endif -%}
        {%- if tuple.element.t.trw.doesCalculateLayoutUseObject(false) -%}
        elem := (*vec)[i]
        {%- endif -%}
        {%s= tuple.element.t.CalculateLayout(directImports, bytesVersion, "sizes", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
        currentSize += {%s= sizeValue %}
        {%- if tuple.element.t.trw.isSizeWrittenInData() -%}
        currentSize += basictl.TL2CalculateSize({%s= sizeValue %})
        {%- endif -%}
    }
    {%- endif -%}
    sizes[sizePosition] = currentSize
    return sizes
}

func {%s= goName %}InternalWriteTL2(w []byte, sizes []int, vec *{%s= typeString %} {%s= natDecl %}) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if len(*vec) != 0 {
        w = basictl.TL2WriteSize(w, len(*vec))
    }

    {%- if _, ok := tuple.element.t.trw.(*TypeRWBool); ok -%}
    // special case for bool
    blockCount := (len(*vec) + 7) / 8
    index := 0
    for i := 0; i < blockCount; i++ {
        var block byte

        blockSize := 8
        if index + blockSize > len(*vec) {
            blockSize = len(*vec) - index
        }
        for j := 0; j < blockSize; j++ {
            if (*vec)[index] {
                block |= (1 << j)
            }
            index += 1
        }

        w = append(w, block)
    }
    {%- else -%}
    for i := 0; i < len(*vec); i++ {
        {%- if tuple.element.t.trw.doesWriteTL2UseObject(false) -%}
        elem := (*vec)[i]
        {%- endif -%}
        {%s= tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
    }
    {%- endif -%}
    return w, sizes
}
{%- endif -%}

func {%s= goName %}InternalReadTL2(r []byte, vec *{%s= typeString %}{%s= natDecl %}) (_ []byte, err error) {
{%- if !tuple.wr.wantsTL2 -%}
    return r, {%s= tuple.wr.gen.InternalPrefix()%}ErrorTL2SerializersNotGenerated({%q= typeString %})
{%- else -%}
    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    if len(r) < currentSize {
        return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
    }

    currentR := r[:currentSize]
    r = r[currentSize:]

    elementCount := 0
    if currentSize != 0 {
        {%- code
            readResult := "currentR"
            if !tuple.element.t.trw.doesReadTL2UseBytes(false) {
                readResult = "_"
            }
        -%}
        if {%s= readResult %}, elementCount, err = basictl.TL2ParseSize(currentR); err != nil { return r, err }
    }

    if cap(*vec) < elementCount {
        *vec = make([]{%s= elementTypeString %}, elementCount)
    }
    *vec = (*vec)[:elementCount]
    {%- if _, ok := tuple.element.t.trw.(*TypeRWBool); ok -%}
    // special case for bool
    blocksCount := (elementCount + 7) / 8
    index := 0
    for i := 0; i < blocksCount; i++ {
        var block byte
        if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil { return currentR, err }

        blockSize := 8
        if index + blockSize > elementCount {
            blockSize = elementCount - index
        }
        for j := 0; j < blockSize; j++ {
            (*vec)[index] = (block & (1 << j)) != 0
            index += 1
        }
    }
    {%- else -%}
    for i := 0; i < elementCount; i++ {
        {%s= tuple.element.t.ReadTL2Call(directImports, bytesVersion, "currentR", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
    }
    {%- endif -%}
    return r, nil
{%- endif -%}
}
{%- endif -%}

{%- if tuple.wr.gen.options.GenerateLegacyJsonRead -%}
func {%s= goName %}ReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *{%s= typeString %} {%s= natDecl %}) error {
    l, _arr, err := {%s= tuple.wr.gen.InternalPrefix()%}JsonReadArray({%q= typeString %}, j)
    if err != nil {
        return err
    }
    if cap(*vec) < l {
        *vec = make([]{%s= elementTypeString %}, l)
    } else {
        *vec = (*vec)[:l]
    }
    for i := range *vec {
        {%s= tuple.element.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_arr[i]", "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false ) %}
    }
    return nil
}

{%- endif -%}
func {%s= goName %}ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *{%s= typeString %} {%s= natDecl %}) error {
    *vec = (*vec)[:cap(*vec)]
    index := 0
    if in != nil {
        in.Delim('[')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json array")
        }
        for ;!in.IsDelim(']'); index++ {
            if len(*vec) <= index {
                var newValue {%s= elementTypeString %}
                *vec = append(*vec, newValue)
                *vec = (*vec)[:cap(*vec)]
            }
            {%s= tuple.element.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "(*vec)[index]", formatNatArgs(nil, tuple.element.natArgs), false) %}
             in.WantComma()
        }
        in.Delim(']')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json array's end")
        }
    }
    *vec = (*vec)[:index]
    return nil
}

func {%s= goName %}WriteJSON(w []byte, vec {%s= typeString %} {%s= natDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    return {%s= goName %}WriteJSONOpt(true, false, w, vec{%s= natCall %})
}
func {%s= goName %}WriteJSONOpt(newTypeNames bool, short bool, w []byte, vec {%s= typeString %} {%s= natDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    w = append(w, '[')
    for _, elem := range vec {
        w = basictl.JSONAddCommaIfNeeded(w)
        {%s= tuple.element.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", formatNatArgs(nil, tuple.element.natArgs), false, writeElementNeedsError) %}
    }
    {%- if writeElementNeedsError -%}
    return append(w, ']'), nil
    {%- else -%}
    return append(w, ']')
    {%- endif -%}
}

        {%- case tuple.dynamicSize -%}
            {%- if tuple.wr.gen.options.GenerateRandomCode -%}
func {%s= goName %}FillRandom(rg *basictl.RandGenerator, vec *{%s= typeString %} {%s= natDecl %}) {
    rg.IncreaseDepth()
    *vec = make([]{%s= elementTypeString %}, nat_n)
    for i := range *vec {
        {%s= tuple.element.t.TypeRandomCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false) %}
    }
    rg.DecreaseDepth()
}
            {%- endif -%}

func {%s= goName %}Read(w []byte, vec *{%s= typeString %} {%s= natDecl %}) (_ []byte, err error) {
    {%- if tuple.wr.gen.options.UseCheckLengthSanity -%}
    if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
        return w, err
    }
    {%- endif -%}
    if uint32(cap(*vec)) < nat_n {
        *vec = make([]{%s= elementTypeString %}, nat_n)
    } else {
        *vec = (*vec)[:nat_n]
    }
    for i := range *vec {
        {%s= tuple.element.t.TypeReadingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false) %}
    }
    return w, nil
}

func {%s= goName %}Write(w []byte, vec {%s= typeString %} {%s= natDecl %}) (_ []byte, err error) {
    if uint32(len(vec)) != nat_n {
        return w, {%s= tuple.wr.gen.InternalPrefix()%}ErrorWrongSequenceLength({%q= typeString %}, len(vec), nat_n)
    }
    for _, elem := range vec {
        {%s= tuple.element.t.TypeWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false, writeElementNeedsError) %}
    }
    return w, nil
}
{%- if tuple.wr.gen.options.GenerateTL2 -%}

{%- if tuple.wr.wantsTL2 -%}
func {%s= goName %}CalculateLayout(sizes []int, vec *{%s= typeString %} {%s= natDecl %}) []int {
    currentSize := 0
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if nat_n != 0 {
        currentSize += basictl.TL2CalculateSize(int(nat_n))
    }

    {%- if _, ok := tuple.element.t.trw.(*TypeRWBool); ok -%}
    // special case for bool
    currentSize += (int(nat_n) + 7) / 8
    {%- else -%}
    lastIndex := uint32(len(*vec))
    if lastIndex > nat_n {
        lastIndex = nat_n
    }

    for i := uint32(0); i < lastIndex; i++ {
        {%- code
            _, trivialSize := tuple.element.t.trw.tl2TrivialSize("(*vec)[i]", false, tuple.element.recursive)
            sizeValue := trivialSize
            if len(trivialSize) == 0 {
                sizeValue = "sizes[currentPosition]"
            }
        -%}
        {%- if len(trivialSize) == 0 -%}
        currentPosition := len(sizes)
        {%- endif -%}
        {%s= tuple.element.t.CalculateLayout(directImports, bytesVersion, "sizes", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
        currentSize += {%s= sizeValue %}
        {%- if tuple.element.t.trw.isSizeWrittenInData() -%}
        currentSize += basictl.TL2CalculateSize({%s= sizeValue %})
        {%- endif -%}
    }

    // append empty objects if not enough
    for i := lastIndex; i < nat_n; i++ {
        {%- code
            _, trivialSize = tuple.element.t.trw.tl2TrivialSize("elem", false, tuple.element.recursive)
            sizeValue = trivialSize
            if len(trivialSize) == 0 {
                sizeValue = "sizes[currentPosition]"
            }
        -%}
        {%- if tuple.element.t.trw.doesCalculateLayoutUseObject(false) -%}
        var elem {%s= elementTypeString %}
        {%- endif -%}
        {%- if len(trivialSize) == 0 -%}
        currentPosition := len(sizes)
        {%- endif -%}
        {%s= tuple.element.t.CalculateLayout(directImports, bytesVersion, "sizes", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
        currentSize += {%s= sizeValue %}
        {%- if tuple.element.t.trw.isSizeWrittenInData() -%}
        currentSize += basictl.TL2CalculateSize({%s= sizeValue %})
        {%- endif -%}
    }
    {%- endif -%}

    sizes[sizePosition] = currentSize
    return sizes
}

func {%s= goName %}InternalWriteTL2(w []byte, sizes []int, vec *{%s= typeString %} {%s= natDecl %}) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if nat_n != 0 {
        w = basictl.TL2WriteSize(w, int(nat_n))
    }

    lastIndex := uint32(len(*vec))
    if lastIndex > nat_n {
        lastIndex = nat_n
    }

    {%- if _, ok := tuple.element.t.trw.(*TypeRWBool); ok -%}
    // special case for bool
    blocksCount := (lastIndex + 7) / 8
    index := uint32(0)
    for i := uint32(0); i < blocksCount; i++ {
        block := byte(0)
        blockSize := uint32(8)
        if index + blockSize > lastIndex {
            blockSize = lastIndex - index
        }
        for j := uint32(0); j < blockSize; j++ {
            if (*vec)[index] {
                block |= (1 << j)
            }
            index += 1
        }
        w = append(w, block)
    }

    // append empty objects if not enough
    for i := blocksCount; i < (nat_n + 7) / 8; i++ {
        w = append(w, 0)
    }
    {%- else -%}
    for i := uint32(0); i < lastIndex; i++ {
        {%s= tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
    }

    // append empty objects if not enough
    for i := lastIndex; i < nat_n; i++ {
        {%- if tuple.element.t.trw.doesWriteTL2UseObject(false) -%}
        var elem {%s= elementTypeString %}
        {%- endif -%}
        {%s= tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
    }
    {%- endif -%}
    return w, sizes
}
{%- endif -%}

func {%s= goName %}InternalReadTL2(r []byte, vec *{%s= typeString %}{%s= natDecl %}) (_ []byte, err error) {
{%- if !tuple.wr.wantsTL2 -%}
    return r, {%s= tuple.wr.gen.InternalPrefix()%}ErrorTL2SerializersNotGenerated({%q= typeString %})
{%- else -%}
    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    if len(r) < currentSize {
        return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
    }

    currentR := r[:currentSize]
    r = r[currentSize:]

    elementCount := 0
    if currentSize != 0 {
        {%- code
            readResult := "currentR"
            if !tuple.element.t.trw.doesReadTL2UseBytes(false) {
                readResult = "_"
            }
        -%}
        if {%s= readResult %}, elementCount, err = basictl.TL2ParseSize(currentR); err != nil { return r, err }
    }

    if uint32(cap(*vec)) < nat_n {
        *vec = make([]{%s= elementTypeString %}, nat_n)
    } else {
        *vec = (*vec)[:nat_n]
    }

    lastIndex := uint32(elementCount)
    if lastIndex > nat_n {
        lastIndex = nat_n
    }

    {%- if _, ok := tuple.element.t.trw.(*TypeRWBool); ok -%}
    // special case for bool
    blocksCount := (lastIndex + 7) / 8
    index := uint32(0)
    for i := uint32(0); i < blocksCount; i++ {
        var block byte
        if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil { return currentR, err }

        blockSize := uint32(8)
        if index + blockSize > lastIndex {
            blockSize = lastIndex - index
        }
        for j := uint32(0); j < blockSize; j++ {
            (*vec)[index] = (block & (1 << j)) != 0
            index += 1
        }
    }

    // reset elements if received less elements
    for i := index; i < nat_n; i++ {
        (*vec)[i] = false
    }
    {%- else -%}
    for i := uint32(0); i < lastIndex; i++ {
        {%s= tuple.element.t.ReadTL2Call(directImports, bytesVersion, "currentR", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
    }

    // reset elements if received less elements
    for i := lastIndex; i < nat_n; i++ {
        {%s= tuple.element.t.TypeResettingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", false) %}
    }
    {%- endif -%}

    return r, nil
{%- endif -%}
}
{%- endif -%}
{%- if tuple.wr.gen.options.GenerateLegacyJsonRead -%}
func {%s= goName %}ReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *{%s= typeString %} {%s= natDecl %}) error {
    _, _arr, err := {%s= tuple.wr.gen.InternalPrefix()%}JsonReadArrayFixedSize({%q= typeString %}, j, nat_n)
    if err != nil {
        return err
    }
    if uint32(cap(*vec)) < nat_n {
        *vec = make([]{%s= elementTypeString %}, nat_n)
    } else {
        *vec = (*vec)[:nat_n]
    }
    for i := range *vec {
        {%s= tuple.element.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_arr[i]", "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false) %}
    }
    return nil
}

{%- endif -%}
func {%s= goName %}ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *{%s= typeString %} {%s= natDecl %}) error {
    if uint32(cap(*vec)) < nat_n {
        *vec = make([]{%s= elementTypeString %}, nat_n)
    } else {
        *vec = (*vec)[:nat_n]
    }
    index := 0
    if in != nil {
        in.Delim('[')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json array")
        }
        for ;!in.IsDelim(']'); index++ {
            if nat_n <= uint32(index) {
                return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "array is longer than expected")
            }
            {%s= tuple.element.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "(*vec)[index]", formatNatArgs(nil, tuple.element.natArgs), false) %}
             in.WantComma()
        }
        in.Delim(']')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json array's end")
        }
    }
    if uint32(index) != nat_n {
        return {%s= tuple.wr.gen.InternalPrefix()%}ErrorWrongSequenceLength({%q= typeString %}, index, nat_n)
    }
    return nil
}

func {%s= goName %}WriteJSON(w []byte, vec {%s= typeString %} {%s= natDecl %}) (_ []byte, err error) {
    return {%s= goName %}WriteJSONOpt(true, false, w, vec{%s= natCall %})
}
func {%s= goName %}WriteJSONOpt(newTypeNames bool, short bool, w []byte, vec {%s= typeString %} {%s= natDecl %}) (_ []byte, err error) {
    if uint32(len(vec)) != nat_n {
        return w, {%s= tuple.wr.gen.InternalPrefix()%}ErrorWrongSequenceLength({%q= typeString %}, len(vec), nat_n)
    }
    w = append(w, '[')
    for _, elem := range vec {
        w = basictl.JSONAddCommaIfNeeded(w)
        {%s= tuple.element.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", formatNatArgs(nil, tuple.element.natArgs), false, writeElementNeedsError) %}
    }
    return append(w, ']'), nil
}

        {%- default -%}
func {%s= goName %}Reset(vec *{%s= typeString %}) {
    for i := range *vec {
            {%s= tuple.element.t.TypeResettingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", false) %}
    }
}

            {%- if tuple.wr.gen.options.GenerateRandomCode -%}
func {%s= goName %}FillRandom(rg *basictl.RandGenerator, vec *{%s= typeString %} {%s= natDecl %}) {
    rg.IncreaseDepth()
    for i := range *vec {
        {%s= tuple.element.t.TypeRandomCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false) %}
    }
    rg.DecreaseDepth()
}
            {%- endif -%}

func {%s= goName %}Read(w []byte, vec *{%s= typeString %} {%s= natDecl %}) (_ []byte, err error) {
    for i := range *vec {
        {%s= tuple.element.t.TypeReadingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false) %}
    }
    return w, nil
}

func {%s= goName %}Write(w []byte, vec *{%s= typeString %} {%s= natDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    for _, elem := range *vec {
        {%s= tuple.element.t.TypeWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false, writeElementNeedsError) %}
    }
    {%- if writeElementNeedsError -%}
    return w, nil
    {%- else -%}
    return w
    {%- endif -%}
}
{%- if tuple.wr.gen.options.GenerateTL2 -%}

{%- if tuple.wr.wantsTL2 -%}
func {%s= goName %}CalculateLayout(sizes []int, vec *{%s= typeString %} {%s= natDecl %}) []int {
    currentSize := 0
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if {%v= tuple.size %} != 0 {
        currentSize += basictl.TL2CalculateSize({%v= tuple.size %})
    }

    {%- if _, ok := tuple.element.t.trw.(*TypeRWBool); ok -%}
    // special case for bool
    currentSize += ({%v= tuple.size %} + 7) / 8
    {%- else -%}
    for i := 0; i < {%v= tuple.size %}; i++ {
        {%- code
            _, trivialSize := tuple.element.t.trw.tl2TrivialSize("(*vec)[i]", false, tuple.element.recursive)
            sizeValue := trivialSize
            if len(trivialSize) == 0 {
                sizeValue = "sizes[currentPosition]"
            }
        -%}
        {%- if len(trivialSize) == 0 -%}
        currentPosition := len(sizes)
        {%- endif -%}
        {%s= tuple.element.t.CalculateLayout(directImports, bytesVersion, "sizes", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
        currentSize += {%s= sizeValue %}
        {%- if tuple.element.t.trw.isSizeWrittenInData() -%}
        currentSize += basictl.TL2CalculateSize({%s= sizeValue %})
        {%- endif -%}
    }
    {%- endif -%}

    sizes[sizePosition] = currentSize
    return sizes
}

func {%s= goName %}InternalWriteTL2(w []byte, sizes []int, vec *{%s= typeString %} {%s= natDecl %}) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if {%v= tuple.size %} != 0 {
        w = basictl.TL2WriteSize(w, {%v= tuple.size %})
    }

    {%- if _, ok := tuple.element.t.trw.(*TypeRWBool); ok -%}
    // special case for bool
    index := 0
    for i := uint32(0); i < ({%v= tuple.size %} + 7) / 8; i++ {
        block := byte(0)
        blockSize := 8
        if index + blockSize > {%v= tuple.size %} {
            blockSize = {%v= tuple.size %} - index
        }
        for j := 0; j < blockSize; j++ {
            if (*vec)[index] {
                block |= (1 << j)
            }
            index += 1
        }
        w = append(w, block)
    }
    {%- else -%}
    for i := 0; i < {%v= tuple.size %}; i++ {
        {%s= tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
    }
    {%- endif -%}
    return w, sizes
}
{%- endif -%}

func {%s= goName %}InternalReadTL2(r []byte, vec *{%s= typeString %}{%s= natDecl %}) (_ []byte, err error) {
{%- if !tuple.wr.wantsTL2 -%}
    return r, {%s= tuple.wr.gen.InternalPrefix()%}ErrorTL2SerializersNotGenerated({%q= typeString %})
{%- else -%}
    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    if len(r) < currentSize {
        return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
    }

    currentR := r[:currentSize]
    r = r[currentSize:]

    elementCount := 0
    if currentSize != 0 {
        {%- code
            readResult := "currentR"
            if !tuple.element.t.trw.doesReadTL2UseBytes(false) {
                readResult = "_"
            }
        -%}
        if {%s= readResult %}, elementCount, err = basictl.TL2ParseSize(currentR); err != nil { return r, err }
    }

    lastIndex := elementCount
    if lastIndex > {%v= tuple.size %} {
        lastIndex = {%v= tuple.size %}
    }
    {%- if _, ok := tuple.element.t.trw.(*TypeRWBool); ok -%}
    // special case for bool
    blocksCount := (lastIndex + 7) / 8
    index := 0
    for i := 0; i < blocksCount; i++ {
        var block byte
        if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil { return currentR, err }

        blockSize := 8
        if index + blockSize > lastIndex {
            blockSize = lastIndex - index
        }
        for j := 0; j < blockSize; j++ {
            (*vec)[index] = (block & (1 << j)) != 0
            index += 1
        }
    }

    // reset elements if received less elements
    for i := lastIndex; i < {%v= tuple.size %}; i++ {
        (*vec)[i] = false
    }
    {%- else -%}
    for i := 0; i < lastIndex; i++ {
        {%s= tuple.element.t.ReadTL2Call(directImports, bytesVersion, "currentR", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)) %}
    }

    // reset elements if received less elements
    for i := lastIndex; i < {%v= tuple.size %}; i++ {
        {%s= tuple.element.t.TypeResettingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", false) %}
    }
    {%- endif -%}

    return r, nil
{%- endif -%}
}
{%- endif -%}

{%- if tuple.wr.gen.options.GenerateLegacyJsonRead -%}
func {%s= goName %}ReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *{%s= typeString %} {%s= natDecl %}) error {
    _, _arr, err := {%s= tuple.wr.gen.InternalPrefix()%}JsonReadArrayFixedSize({%q= typeString %}, j, {%v tuple.size %})
    if err != nil {
        return err
    }
    for i := range *vec {
        {%s= tuple.element.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_arr[i]", "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false) %}
    }
    return nil
}

{%- endif -%}
func {%s= goName %}ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *{%s= typeString %} {%s= natDecl %}) error {
    index := 0
    if in != nil {
        in.Delim('[')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json array")
        }
        for ;!in.IsDelim(']'); index++ {
            if index == {%v tuple.size %} {
                return {%s= tuple.wr.gen.InternalPrefix()%}ErrorWrongSequenceLength({%q= typeString %}, index + 1, {%v tuple.size %})
            }
            {%s= tuple.element.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "(*vec)[index]", formatNatArgs(nil, tuple.element.natArgs), false) %}
            in.WantComma()
        }
        in.Delim(']')
        if !in.Ok() {
            return {%s= tuple.wr.gen.InternalPrefix()%}ErrorInvalidJSON({%q= typeString %}, "expected json array's end")
        }
    }
    if index != {%v tuple.size %} {
        return {%s= tuple.wr.gen.InternalPrefix()%}ErrorWrongSequenceLength({%q= typeString %}, index + 1, {%v tuple.size %})
    }
    return nil
}

func {%s= goName %}WriteJSON(w []byte, vec *{%s= typeString %} {%s= natDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    return {%s= goName %}WriteJSONOpt(true, false, w, vec{%s= natCall %})
}
func {%s= goName %}WriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *{%s= typeString %} {%s= natDecl %}) {%s= wrapWithError(writeElementNeedsError, "[]byte") %} {
    w = append(w, '[')
    for _, elem := range *vec {
        w = basictl.JSONAddCommaIfNeeded(w)
        {%s= tuple.element.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", formatNatArgs(nil, tuple.element.natArgs), false, writeElementNeedsError) %}
    }
    {%- if writeElementNeedsError -%}
    return append(w, ']'), nil
    {%- else -%}
    return append(w, ']')
    {%- endif -%}
}
    {%- endswitch -%}
{%- endfunc -%}
