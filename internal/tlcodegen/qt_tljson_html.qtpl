{% package tlcodegen %}

{% import "fmt" %}
{% import "strconv" %}


{%- func tlJSON(gen *Gen2, buildSHA256Checksum string) -%}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>TL JSON help</title>
  </head>
  <body>
    <h1>Schema</h1>
    <ul>
      <li><abbr>TL</abbr> ⟷ <abbr>JSON</abbr> mapping rules: <a href="https://github.com/VKCOM/tl/blob/master/TLJSON.md">TLJSON.md</a></li>
    </ul>
    <h1>Functions</h1>
    <ul>
  {%- for _, trww := range gen.generatedTypesList -%}
    {%- if fun, ok := trww.trw.(*TypeRWStruct); ok && fun.ResultType != nil -%}
      <li>
        <a href="#{%s trww.JSONHelpString() %}">
        <code>{%s trww.JSONHelpString() %}</code></a>
        → <code>{%= printJSONHelpType2(gen, fun.ResultType, fun.Fields, fun.ResultNatArgs) %}</code>
      </li>
    {%- endif -%}
  {%- endfor -%}
    </ul>
    <h1>Types</h1>
<h2 id="#">#</h2>
Builtin type <code>#</code>. Represents <code>uint32</code>. Can be used as field mask or collection size.
  {%- for _, trww := range gen.generatedTypesList -%}
{%= printHTMLHelp(gen, trww) %}
  {%- endfor -%}
  </body>
</html>
{%- endfunc -%}

{%- func printJSONHelpType2(gen *Gen2, trww *TypeRWWrapper, fields []Field, natArgs []ActualNatArg) -%}
{%- stripspace -%}
  {%- switch trw := trww.trw.(type) -%}
  {%- case *TypeRWBool -%}
{%s "<bool>" %}
  {%- case *TypeRWPrimitive -%}
{%s "<"%}{%s trw.primitiveType %}{%s ">"%}
  {%- case *TypeRWMaybe -%}
       {%= makeRef2(trww.JSONHelpString(), trww.JSONHelpFullType(fields, natArgs)) %}
  {%- case *TypeRWStruct -%}
    {%- if trw.isTypeDef()-%}
      {%= printJSONHelpType2(gen, trw.Fields[0].t, fields, trw.Fields[0].t.transformNatArgsFromParent(trww, natArgs, trw.Fields[0].natArgs)) %}
    {%- elseif trw.wr.IsTrueType() -%}
{%s "{}" %}
    {%- else -%}
       {%= makeRef2(trww.JSONHelpString(), trww.JSONHelpFullType(fields, natArgs)) %}
    {%- endif -%}
  {%- case *TypeRWUnion -%}
       {%= makeRef2(trww.JSONHelpString(), trww.JSONHelpFullType(fields, natArgs)) %}
  {%- case *TypeRWBrackets -%}
    {%- code
    elementNatArgs := trw.element.t.transformNatArgsFromParent(trww, natArgs, trw.element.natArgs)
    -%}
    {%- switch -%}
    {%- case trw.dictLike -%}
{%s "{" %}
{%= printJSONHelpType2(gen, trw.dictKeyField.t, fields, trw.dictKeyField.t.transformNatArgsFromParent(trw.element.t, elementNatArgs, trw.dictKeyField.natArgs)) %}{%s ": " %}
{%= printJSONHelpType2(gen, trw.dictValueField.t, fields, trw.dictValueField.t.transformNatArgsFromParent(trw.element.t, elementNatArgs, trw.dictValueField.natArgs)) %}{%s "}"%}
    {%- case trw.vectorLike -%}
{%s "[" %}{%= printJSONHelpType2(gen, trw.element.t, fields, elementNatArgs) %}{%s ", ...]" %}
    {%- default -%}
{%s "[" %}{%s trww.JSONHelpNatArg(fields, natArgs[len(natArgs)-1]) %}{%s " × " %}{%= printJSONHelpType2(gen, trw.element.t, fields, elementNatArgs) %}{%s "]"%}
    {%- endswitch -%}
  {%- endswitch -%}
{%- endstripspace -%}
{%- endfunc -%}

{%- func printHTMLHelp(gen *Gen2, trww *TypeRWWrapper) -%}
  {%- code
      if trw, ok := trww.trw.(*TypeRWStruct); ok && ((trw.ResultType == nil && trww.IsTrueType()) || trw.isTypeDef()) {
          return
      }
      if _, ok := trww.trw.(*TypeRWBool); ok {
          return
      }
      if _, ok := trww.trw.(*TypeRWBrackets); ok {
          return
      }
      if _, ok := trww.trw.(*TypeRWPrimitive); ok {
          return
      }
  -%}
<h2 id="{%s trww.JSONHelpString() %}">{%s trww.JSONHelpString() %}</h2>
    {%- code
        natArgsDecl := ""
        for i, a := range trww.NatArgs(!OptimizeConstParameters, "") {
            if i != 0 {
                natArgsDecl += ", "
            }
            natArgsDecl += a.name
        }
    -%}
    {%- if len(natArgsDecl) != 0 -%}
External # (nat) arguments: <b>{%s natArgsDecl %}</b>
    {%- endif -%}
<p></p>
  {%- switch trw := trww.trw.(type) -%}
  {%- case *TypeRWPrimitive -%}
<dl>
  <dt>JSON</dt>
  <dd>{%s trw.primitiveType %}</dd>
</dl>
  {%- case *TypeRWMaybe -%}
<dl>
  <dt>JSON</dt>
  <dd>
    <ul>
      <li><code>{}</code></li>
      <li><code>{%s `{"value": `%}{%= printJSONHelpType2(gen, trw.element.t, nil, trw.element.natArgs) %}{%s "}" %}</code></li>
    </ul>
  </dd>
  <dt>TL</dt>
  <dd>
    <ul>
    <li><code>{%s trww.origTL[0].String() %}</code></li>
    <li><code>{%s trww.origTL[1].String() %}</code></li>
    </ul>
  </dd>
</dl>
  {%- case *TypeRWStruct -%}
<dl>
  <dt>JSON</dt>
  <dd><code>
  {%- if trw.ResultType != nil && trww.IsTrueType() -%}
    {}
  {%- else -%}
    {
      <table>
      {%- for i, field := range trw.Fields -%}
        <tr>
        {%- if field.t.IsTrueType() -%}
          <td>&nbsp;&nbsp;"{%s field.originalName %}"</td><td>: true{%- if i != len(trw.Fields) - 1 -%},{%- endif -%}</td>
        {%- else -%}
          <td>&nbsp;&nbsp;"{%s field.originalName %}"</td><td>: {%= printJSONHelpType2(gen, field.t, trw.Fields, field.natArgs) %}{%- if i != len(trw.Fields) - 1 -%},{%- endif -%}</td>
        {%- endif -%}
          <td>{%= jsonCommentFieldMask(field.fieldMask, field.BitNumber, trw.Fields) %}</td>
        </tr>
      {%- endfor -%}
      </table>
    }
  {%- endif -%}</code></dd>
  <dt>TL</dt>
  <dd>
    <code>{%s trww.origTL[0].String() %}</code>
  </dd>
</dl>
  {%- case *TypeRWUnion -%}
<dl>
  <dt>JSON</dt>
  <dd>
    <ul>
    {%- for _, field := range trw.Fields -%}
            {%- code
                tag := fmt.Sprintf("%08x", field.t.tlTag)
            -%}
            <li><code>
            {%- if trw.IsEnum -%}
                "{%s field.originalName %}"
                // or "#{%s tag %}" or "{%s field.originalName %}#{%s tag %}"
            {%- else -%}
                {"type":"{%s field.originalName %}"{%- if !field.t.IsTrueType() -%}, "value":{%= makeRef(field.t.JSONHelpString()) %}{%- endif -%}}
                // or "type":"#{%s tag %}" or "type":"{%s field.originalName %}#{%s tag %}"
            {%- endif -%}
            </code></li>
    {%- endfor -%}
    </ul>
  </dd>
  <dt>TL</dt>
  <dd>
    <ul>
    {%- for _, origTL := range trww.origTL -%}
    <li><code>{%s origTL.String() %}</code></li>
    {%- endfor -%}
    </ul>
  </dd>
</dl>
  {%- endswitch -%}
{%- endfunc -%}

{%- func jsonCommentFieldMask(fm *ActualNatArg, num uint32, fields []Field) -%}
  {%- if fm == nil -%}{%- return -%}{%- endif -%}
  {%- if fm.isField -%}
// {%s fields[fm.FieldIndex].originalName %} bit #{%s strconv.Itoa(int(num)) %}
  {%- else -%}
// {%s fm.name %} bit #{%s strconv.Itoa(int(num)) %}
  {%- endif -%}
{%- endfunc -%}

{%- func makeRef(s string) -%}<a href="#{%s s %}">{%s s %}</a>{%- endfunc -%}

{%- func makeRef2(a string, s string) -%}<a href="#{%s a %}">{%s s %}</a>{%- endfunc -%}
