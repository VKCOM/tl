// Code generated by qtc from "qt_brackets.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package tlcodegen

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func (tuple *TypeRWBrackets) StreamGenerateCode(qw422016 *qt422016.Writer, bytesVersion bool, directImports *DirectImports) {
	goName := addBytes(tuple.wr.goGlobalName, bytesVersion)
	natDecl := formatNatArgsDecl(tuple.wr.NatParams)
	natCall := formatNatArgsDeclCall(tuple.wr.NatParams)
	typeString := tuple.wr.TypeString2(bytesVersion, directImports, tuple.wr.ins, false, false)
	elementTypeString := tuple.element.t.TypeString2(bytesVersion, directImports, tuple.wr.ins, false, false)
	writeElementNeedsError := tuple.element.t.hasErrorInWriteMethods

	switch {
	case tuple.dictLike:
		keyTypeString := tuple.dictKeyField.t.TypeString2(bytesVersion, directImports, tuple.wr.ins, false, false)
		valueTypeString := tuple.dictValueField.t.TypeString2(bytesVersion, directImports, tuple.wr.ins, false, false)
		valueNatArgsDecl := formatNatArgsDecl(tuple.element.t.NatParams)
		valueNatArgsCall := formatNatArgsDeclCall(tuple.element.t.NatParams)
		keyFieldName := tuple.dictKeyField.goName
		valueFieldName := tuple.dictValueField.goName

		if bytesVersion {
			if tuple.wr.gen.options.GenerateRandomCode {
				qw422016.N().S(`func `)
				qw422016.N().S(goName)
				qw422016.N().S(`FillRandom(rg *basictl.RandGenerator, vec *`)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(natDecl)
				qw422016.N().S(`) {
    rg.IncreaseDepth()
    l := rg.LimitValue(basictl.RandomUint(rg))
    *vec = make([]`)
				qw422016.N().S(elementTypeString)
				qw422016.N().S(`, l)
    for i := range *vec {
        `)
				qw422016.N().S(tuple.element.t.TypeRandomCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false))
				qw422016.N().S(`
    }
    rg.DecreaseDepth()
}
`)
			}
			qw422016.N().S(`
func `)
			qw422016.N().S(goName)
			qw422016.N().S(`Read(w []byte, vec *`)
			qw422016.N().S(typeString)
			qw422016.N().S(` `)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) (_ []byte, err error) {
    var l uint32
    if w, err = basictl.NatRead(w, &l); err != nil {
        return w, err
    }
`)
			if tuple.wr.gen.options.UseCheckLengthSanity {
				qw422016.N().S(`    if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
        return w, err
    }
`)
			}
			qw422016.N().S(`    if uint32(cap(*vec)) < l {
        *vec = make([]`)
			qw422016.N().S(elementTypeString)
			qw422016.N().S(`, l)
    } else {
        *vec = (*vec)[:l]
    }
    for i := range *vec {
        `)
			qw422016.N().S(tuple.element.t.TypeReadingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false))
			qw422016.N().S(`
    }
    return w, nil
}

func `)
			qw422016.N().S(goName)
			qw422016.N().S(`Write(w []byte, vec `)
			qw422016.N().S(typeString)
			qw422016.N().S(` `)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) `)
			qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
			qw422016.N().S(` {
    w = basictl.NatWrite(w, uint32(len(vec)))
    for _, elem := range vec {
        `)
			qw422016.N().S(tuple.element.t.TypeWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false, writeElementNeedsError))
			qw422016.N().S(`
    }
`)
			if writeElementNeedsError {
				qw422016.N().S(`    return w, nil
`)
			} else {
				qw422016.N().S(`    return w
`)
			}
			qw422016.N().S(`}
`)
			if tuple.wr.gen.options.GenerateTL2 {
				qw422016.N().S(`
`)
				if tuple.wr.wantsTL2 {
					qw422016.N().S(`func `)
					qw422016.N().S(goName)
					qw422016.N().S(`CalculateLayout(sizes []int, vec *`)
					qw422016.N().S(typeString)
					qw422016.N().S(valueNatArgsDecl)
					qw422016.N().S(`) []int {
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if len(*vec) != 0 {
        sizes[sizePosition] += basictl.TL2CalculateSize(len(*vec))
    }
    for i := 0; i < len(*vec); i++ {
`)
					_, trivialSize := tuple.element.t.trw.tl2TrivialSize("elem", false, tuple.element.recursive)
					sizeValue := trivialSize
					if len(trivialSize) == 0 {
						sizeValue = "sizes[currentPosition]"
					}

					if len(trivialSize) == 0 {
						qw422016.N().S(`        currentPosition := len(sizes)
`)
					}
					if tuple.element.t.trw.doesCalculateLayoutUseObject(false) {
						qw422016.N().S(`        elem := (*vec)[i]
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.CalculateLayoutCall(directImports, bytesVersion, "sizes", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
        sizes[sizePosition] += `)
					qw422016.N().S(sizeValue)
					qw422016.N().S(`
`)
					if tuple.element.t.trw.isSizeWrittenInData() {
						qw422016.N().S(`        sizes[sizePosition] += basictl.TL2CalculateSize(`)
						qw422016.N().S(sizeValue)
						qw422016.N().S(`)
`)
					}
					qw422016.N().S(`    }
    return sizes
}

func `)
					qw422016.N().S(goName)
					qw422016.N().S(`InternalWriteTL2(w []byte, sizes []int,vec *`)
					qw422016.N().S(typeString)
					qw422016.N().S(valueNatArgsDecl)
					qw422016.N().S(`) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if len(*vec) != 0 {
        w = basictl.TL2WriteSize(w, len(*vec))
    }

    for i := 0; i < len(*vec); i++ {
`)
					if tuple.element.t.trw.doesWriteTL2UseObject(false) {
						qw422016.N().S(`        elem := (*vec)[i]
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
    }
    return w, sizes
}
`)
				}
				qw422016.N().S(`
func `)
				qw422016.N().S(goName)
				qw422016.N().S(`InternalReadTL2(r []byte, vec *`)
				qw422016.N().S(typeString)
				qw422016.N().S(valueNatArgsDecl)
				qw422016.N().S(`) (_ []byte, err error) {
`)
				if !tuple.wr.wantsTL2 {
					qw422016.N().S(`    return r, `)
					qw422016.N().S(tuple.wr.gen.InternalPrefix())
					qw422016.N().S(`ErrorTL2SerializersNotGenerated(`)
					qw422016.N().Q(typeString)
					qw422016.N().S(`)
`)
				} else {
					qw422016.N().S(`    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    if len(r) < currentSize {
        return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
    }

    currentR := r[:currentSize]
    r = r[currentSize:]

    elementCount := 0
    if currentSize != 0 {
`)
					readResult := "currentR"
					if !tuple.element.t.trw.doesReadTL2UseBytes(false) {
						readResult = "_"
					}

					qw422016.N().S(`        if `)
					qw422016.N().S(readResult)
					qw422016.N().S(`, elementCount, err = basictl.TL2ParseSize(currentR); err != nil { return r, err }
    }

    if cap(*vec) < elementCount {
        *vec = make([]`)
					qw422016.N().S(elementTypeString)
					qw422016.N().S(`, elementCount)
    }
    *vec = (*vec)[:elementCount]
    for i := 0; i < elementCount; i++ {
`)
					if tuple.element.t.trw.doesReadTL2UseObject(false) {
						qw422016.N().S(`        elem := (*vec)[i]
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.ReadTL2Call(directImports, bytesVersion, "currentR", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
    }
    return r, nil
`)
				}
				qw422016.N().S(`}
`)
			}
			qw422016.N().S(`
`)
			if tuple.dictKeyString {
				if tuple.wr.gen.options.GenerateLegacyJsonRead {
					qw422016.N().S(`func `)
					qw422016.N().S(goName)
					qw422016.N().S(`ReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *`)
					qw422016.N().S(typeString)
					qw422016.N().S(` `)
					qw422016.N().S(valueNatArgsDecl)
					qw422016.N().S(`) error {
    var _map map[string]interface{}
    var _mapok bool
    if j != nil {
        _map, _mapok = j.(map[string]interface{})
        if !_mapok {
            return `)
					qw422016.N().S(tuple.wr.gen.InternalPrefix())
					qw422016.N().S(`ErrorInvalidJSON(`)
					qw422016.N().Q(typeString)
					qw422016.N().S(`, "expected json object")
        }
    }
      l := len(_map)
    if cap(*vec) < l {
        *vec = make([]`)
					qw422016.N().S(elementTypeString)
					qw422016.N().S(`, l)
    } else {
        *vec = (*vec)[:l]
    }
    i := 0
    arr := *vec
    for key, _jvalue := range _map {
        arr[i].`)
					qw422016.N().S(tuple.dictKeyField.goName)
					qw422016.N().S(` = append(arr[i].`)
					qw422016.N().S(tuple.dictKeyField.goName)
					qw422016.N().S(`[:0], key...)
        `)
					qw422016.N().S(tuple.dictValueField.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_jvalue", "arr[i]."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false))
					qw422016.N().S(`
        i++
    }
    return nil
}

`)
				}
				qw422016.N().S(`func `)
				qw422016.N().S(goName)
				qw422016.N().S(`ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *`)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(valueNatArgsDecl)
				qw422016.N().S(`) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
        in.Delim('{')
        if !in.Ok() {
            return `)
				qw422016.N().S(tuple.wr.gen.InternalPrefix())
				qw422016.N().S(`ErrorInvalidJSON(`)
				qw422016.N().Q(typeString)
				qw422016.N().S(`, "expected json object")
        }
        for ;!in.IsDelim('}'); index++ {
            if len(*vec) <= index {
                var newValue `)
				qw422016.N().S(elementTypeString)
				qw422016.N().S(`
                *vec = append(*vec, newValue)
                *vec = (*vec)[:cap(*vec)]
            }
            (*vec)[index].Key = append((*vec)[index].Key[:0], in.UnsafeFieldName(true)...)
            in.WantColon()
            `)
				qw422016.N().S(tuple.dictValueField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "(*vec)[index]."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false))
				qw422016.N().S(`
            in.WantComma()
        }
        in.Delim('}')
        if !in.Ok() {
            return `)
				qw422016.N().S(tuple.wr.gen.InternalPrefix())
				qw422016.N().S(`ErrorInvalidJSON(`)
				qw422016.N().Q(typeString)
				qw422016.N().S(`, "expected json object's end")
        }
    }
	*vec = (*vec)[:index]
	return nil
}

func `)
				qw422016.N().S(goName)
				qw422016.N().S(`WriteJSON(w []byte, vec `)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(valueNatArgsDecl)
				qw422016.N().S(`) `)
				qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
				qw422016.N().S(` {
    tctx := basictl.JSONWriteContext{}
    return `)
				qw422016.N().S(goName)
				qw422016.N().S(`WriteJSONOpt(&tctx, w, vec`)
				qw422016.N().S(valueNatArgsCall)
				qw422016.N().S(`)
}
func `)
				qw422016.N().S(goName)
				qw422016.N().S(`WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec `)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(valueNatArgsDecl)
				qw422016.N().S(`) `)
				qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
				qw422016.N().S(` {
    w = append(w, '{')
    for _, elem := range vec {
        w = basictl.JSONAddCommaIfNeeded(w)
        w = basictl.JSONWriteStringBytes(w, elem.`)
				qw422016.N().S(tuple.dictKeyField.goName)
				qw422016.N().S(`)
        w = append(w, ':')
        `)
				qw422016.N().S(tuple.dictValueField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false, writeElementNeedsError))
				qw422016.N().S(`
    }
`)
				if writeElementNeedsError {
					qw422016.N().S(`    return append(w, '}'), nil
`)
				} else {
					qw422016.N().S(`    return append(w, '}')
`)
				}
				qw422016.N().S(`}
`)
			} else {
				if tuple.wr.gen.options.GenerateLegacyJsonRead {
					qw422016.N().S(`func `)
					qw422016.N().S(goName)
					qw422016.N().S(`ReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *`)
					qw422016.N().S(typeString)
					qw422016.N().S(` `)
					qw422016.N().S(valueNatArgsDecl)
					qw422016.N().S(`) error {
    var _map map[string]interface{}
    var _mapok bool
    if j != nil {
        _map, _mapok = j.(map[string]interface{})
        if !_mapok {
            return `)
					qw422016.N().S(tuple.wr.gen.InternalPrefix())
					qw422016.N().S(`ErrorInvalidJSON(`)
					qw422016.N().Q(typeString)
					qw422016.N().S(`, "expected json object")
        }
    }
      l := len(_map)
    if cap(*vec) < l {
        *vec = make([]`)
					qw422016.N().S(elementTypeString)
					qw422016.N().S(`, l)
    } else {
        *vec = (*vec)[:l]
    }
    i := 0
    arr := *vec
    for _jkey, _jvalue := range _map {
        `)
					qw422016.N().S(tuple.dictKeyField.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_jkey", "arr[i]."+keyFieldName, formatNatArgs(nil, tuple.dictKeyField.natArgs), false))
					qw422016.N().S(`
        `)
					qw422016.N().S(tuple.dictValueField.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_jvalue", "arr[i]."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false))
					qw422016.N().S(`
        i++
    }
    return nil
}

`)
				}
				qw422016.N().S(`func `)
				qw422016.N().S(goName)
				qw422016.N().S(`ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *`)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(valueNatArgsDecl)
				qw422016.N().S(`) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
        in.Delim('{')
        if !in.Ok() {
            return `)
				qw422016.N().S(tuple.wr.gen.InternalPrefix())
				qw422016.N().S(`ErrorInvalidJSON(`)
				qw422016.N().Q(typeString)
				qw422016.N().S(`, "expected json object")
        }
        for ;!in.IsDelim('}'); index++ {
            if len(*vec) <= index {
                var newValue `)
				qw422016.N().S(elementTypeString)
				qw422016.N().S(`
                *vec = append(*vec, newValue)
                *vec = (*vec)[:cap(*vec)]
            }
            keyBytes := []byte(in.UnsafeFieldName(false))
            if !in.Ok() {
                return `)
				qw422016.N().S(tuple.wr.gen.InternalPrefix())
				qw422016.N().S(`ErrorInvalidJSON(`)
				qw422016.N().Q(typeString)
				qw422016.N().S(`, "expected correct json value in key")
            }
            in2 := basictl.JsonLexer{Data: keyBytes}
            `)
				qw422016.N().S(tuple.dictKeyField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "&in2", "(*vec)[index]."+keyFieldName, formatNatArgs(nil, tuple.dictKeyField.natArgs), false))
				qw422016.N().S(`
            in.WantColon()
            `)
				qw422016.N().S(tuple.dictValueField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "(*vec)[index]."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false))
				qw422016.N().S(`
            in.WantComma()
        }
        in.Delim('}')
        if !in.Ok() {
            return `)
				qw422016.N().S(tuple.wr.gen.InternalPrefix())
				qw422016.N().S(`ErrorInvalidJSON(`)
				qw422016.N().Q(typeString)
				qw422016.N().S(`, "expected json object's end")
        }
    }
	*vec = (*vec)[:index]
	return nil
}

func `)
				qw422016.N().S(goName)
				qw422016.N().S(`WriteJSON(w []byte, vec `)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(valueNatArgsDecl)
				qw422016.N().S(`) `)
				qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
				qw422016.N().S(` {
    tctx := basictl.JSONWriteContext{}
    return `)
				qw422016.N().S(goName)
				qw422016.N().S(`WriteJSONOpt(&tctx, w, vec`)
				qw422016.N().S(valueNatArgsCall)
				qw422016.N().S(`)
}
func `)
				qw422016.N().S(goName)
				qw422016.N().S(`WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec `)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(valueNatArgsDecl)
				qw422016.N().S(`) `)
				qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
				qw422016.N().S(` {
    w = append(w, '{')
    for _, elem := range vec {
        key := elem.`)
				qw422016.N().S(keyFieldName)
				qw422016.N().S(`
        w = basictl.JSONAddCommaIfNeeded(w)
        w = append(w, `)
				qw422016.N().S("`")
				qw422016.N().S(`"`)
				qw422016.N().S("`")
				qw422016.N().S(`...)
        `)
				qw422016.N().S(tuple.dictKeyField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "key", formatNatArgs(nil, tuple.dictKeyField.natArgs), false, tuple.dictKeyField.t.hasErrorInWriteMethods))
				qw422016.N().S(`
        w = append(w, `)
				qw422016.N().S("`")
				qw422016.N().S(`":`)
				qw422016.N().S("`")
				qw422016.N().S(`...)
        `)
				qw422016.N().S(tuple.dictValueField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem."+valueFieldName, formatNatArgs(nil, tuple.dictValueField.natArgs), false, tuple.dictValueField.t.hasErrorInWriteMethods))
				qw422016.N().S(`
    }
`)
				if writeElementNeedsError {
					qw422016.N().S(`    return append(w, '}'), nil
`)
				} else {
					qw422016.N().S(`    return append(w, '}')
`)
				}
				qw422016.N().S(`}
`)
			}
		} else {
			qw422016.N().S(`func `)
			qw422016.N().S(goName)
			qw422016.N().S(`Reset(m map[`)
			qw422016.N().S(keyTypeString)
			qw422016.N().S(`]`)
			qw422016.N().S(valueTypeString)
			qw422016.N().S(`) {
    for k := range m {
        delete(m, k)
    }
}

`)
			if tuple.wr.gen.options.GenerateRandomCode {
				qw422016.N().S(`func `)
				qw422016.N().S(goName)
				qw422016.N().S(`FillRandom(rg *basictl.RandGenerator, m *map[`)
				qw422016.N().S(keyTypeString)
				qw422016.N().S(`]`)
				qw422016.N().S(valueTypeString)
				qw422016.N().S(` `)
				qw422016.N().S(natDecl)
				qw422016.N().S(`) {
    rg.IncreaseDepth()
    l := rg.LimitValue(basictl.RandomUint(rg))
    *m = make(map[`)
				qw422016.N().S(keyTypeString)
				qw422016.N().S(`]`)
				qw422016.N().S(valueTypeString)
				qw422016.N().S(`, l)
    for i := 0; i < int(l); i++ {
        var elem `)
				qw422016.N().S(elementTypeString)
				qw422016.N().S(`
        `)
				qw422016.N().S(tuple.element.t.TypeRandomCode(bytesVersion, directImports, tuple.wr.ins, "elem", formatNatArgs(nil, tuple.element.natArgs), false))
				qw422016.N().S(`
        (*m)[elem.`)
				qw422016.N().S(keyFieldName)
				qw422016.N().S(`] = elem.`)
				qw422016.N().S(valueFieldName)
				qw422016.N().S(`
    }
    rg.DecreaseDepth()
}
`)
			}
			qw422016.N().S(`func `)
			qw422016.N().S(goName)
			qw422016.N().S(`Read(w []byte, m *map[`)
			qw422016.N().S(keyTypeString)
			qw422016.N().S(`]`)
			qw422016.N().S(valueTypeString)
			qw422016.N().S(` `)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) (_ []byte, err error) {
    var l uint32
    if w, err = basictl.NatRead(w, &l); err != nil {
        return w, err
    }
`)
			if tuple.wr.gen.options.UseCheckLengthSanity {
				qw422016.N().S(`    if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
        return w, err
    }
`)
			}
			qw422016.N().S(`    var data map[`)
			qw422016.N().S(keyTypeString)
			qw422016.N().S(`]`)
			qw422016.N().S(valueTypeString)
			qw422016.N().S(`
    if *m == nil {
        if l == 0 {
            return w, nil
        }
        data = make(map[`)
			qw422016.N().S(keyTypeString)
			qw422016.N().S(`]`)
			qw422016.N().S(valueTypeString)
			qw422016.N().S(`, l)
        *m = data
    } else {
        data = *m
        for k := range data {
            delete(data, k)
        }
    }
    for i := 0; i < int(l); i++ {
        var elem `)
			qw422016.N().S(elementTypeString)
			qw422016.N().S(`
        `)
			qw422016.N().S(tuple.element.t.TypeReadingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false))
			qw422016.N().S(`
         data[elem.`)
			qw422016.N().S(keyFieldName)
			qw422016.N().S(`] = elem.`)
			qw422016.N().S(valueFieldName)
			qw422016.N().S(`
    }
    return w, nil
}

func `)
			qw422016.N().S(goName)
			qw422016.N().S(`Write(w []byte, m map[`)
			qw422016.N().S(keyTypeString)
			qw422016.N().S(`]`)
			qw422016.N().S(valueTypeString)
			qw422016.N().S(` `)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) `)
			qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
			qw422016.N().S(` {
    w = basictl.NatWrite(w, uint32(len(m)))
    if len(m) == 0 {
`)
			if writeElementNeedsError {
				qw422016.N().S(`        return w, nil
`)
			} else {
				qw422016.N().S(`        return w
`)
			}
			qw422016.N().S(`    }
    keys := make([]`)
			qw422016.N().S(keyTypeString)
			qw422016.N().S(`, 0, len(m))
    for k := range m {
        keys = append(keys, k)
    }
`)
			directImports.importSort = true

			if tuple.dictKeyString {
				qw422016.N().S(`    sort.Strings(keys)
`)
			} else {
				qw422016.N().S(`    sort.Slice(keys, func(i, j int) bool {
        return keys[i] < keys[j]
    })
`)
			}
			qw422016.N().S(`    for _, key := range keys {
        val := m[key]
        elem := `)
			qw422016.N().S(elementTypeString)
			qw422016.N().S(`{`)
			qw422016.N().S(keyFieldName)
			qw422016.N().S(`:key, `)
			qw422016.N().S(valueFieldName)
			qw422016.N().S(`:val}
        `)
			qw422016.N().S(tuple.element.t.TypeWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false, writeElementNeedsError))
			qw422016.N().S(`
    }
`)
			if writeElementNeedsError {
				qw422016.N().S(`    return w, nil
`)
			} else {
				qw422016.N().S(`    return w
`)
			}
			qw422016.N().S(`}
`)
			if tuple.wr.gen.options.GenerateTL2 {
				qw422016.N().S(`
`)
				if tuple.wr.wantsTL2 {
					qw422016.N().S(`func `)
					qw422016.N().S(goName)
					qw422016.N().S(`CalculateLayout(sizes []int, m *map[`)
					qw422016.N().S(keyTypeString)
					qw422016.N().S(`]`)
					qw422016.N().S(valueTypeString)
					qw422016.N().S(natDecl)
					qw422016.N().S(`) []int {
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if len(*m) != 0 {
        sizes[sizePosition] += basictl.TL2CalculateSize(len(*m))
    }

    keys := make([]`)
					qw422016.N().S(keyTypeString)
					qw422016.N().S(`, 0, len(*m))
    for k := range *m {
        keys = append(keys, k)
    }
`)
					if tuple.dictKeyString {
						qw422016.N().S(`    sort.Strings(keys)
`)
					} else {
						qw422016.N().S(`    sort.Slice(keys, func(i, j int) bool {
        return keys[i] < keys[j]
    })
`)
					}
					qw422016.N().S(`
    for i := 0; i < len(keys); i++ {
`)
					isConstantSize, trivialSize := tuple.element.t.trw.tl2TrivialSize("elem", false, tuple.dictKeyField.recursive)
					sizeValue := trivialSize
					if len(trivialSize) == 0 {
						sizeValue = "sizes[currentPosition]"
					}

					if len(trivialSize) == 0 || !isConstantSize {
						qw422016.N().S(`        elem := `)
						qw422016.N().S(elementTypeString)
						qw422016.N().S(`{`)
						qw422016.N().S(keyFieldName)
						qw422016.N().S(`:keys[i], `)
						qw422016.N().S(valueFieldName)
						qw422016.N().S(`:(*m)[keys[i]]}
`)
					}
					if len(trivialSize) == 0 {
						qw422016.N().S(`        currentPosition := len(sizes)
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.CalculateLayoutCall(directImports, bytesVersion, "sizes", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
        sizes[sizePosition] += `)
					qw422016.N().S(sizeValue)
					qw422016.N().S(`
`)
					if tuple.element.t.trw.isSizeWrittenInData() {
						qw422016.N().S(`        sizes[sizePosition] += basictl.TL2CalculateSize(`)
						qw422016.N().S(sizeValue)
						qw422016.N().S(`)
`)
					}
					qw422016.N().S(`    }
    return sizes
}

func `)
					qw422016.N().S(goName)
					qw422016.N().S(`InternalWriteTL2(w []byte, sizes []int, m *map[`)
					qw422016.N().S(keyTypeString)
					qw422016.N().S(`]`)
					qw422016.N().S(valueTypeString)
					qw422016.N().S(natDecl)
					qw422016.N().S(`) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if len(*m) != 0 {
        w = basictl.TL2WriteSize(w, len(*m))
    }

    keys := make([]`)
					qw422016.N().S(keyTypeString)
					qw422016.N().S(`, 0, len(*m))
    for k := range *m {
        keys = append(keys, k)
    }
`)
					if tuple.dictKeyString {
						qw422016.N().S(`    sort.Strings(keys)
`)
					} else {
						qw422016.N().S(`    sort.Slice(keys, func(i, j int) bool {
        return keys[i] < keys[j]
    })
`)
					}
					qw422016.N().S(`
    for i := 0; i < len(keys); i++ {
`)
					if tuple.element.t.trw.doesWriteTL2UseObject(false) {
						qw422016.N().S(`        elem := `)
						qw422016.N().S(elementTypeString)
						qw422016.N().S(`{`)
						qw422016.N().S(keyFieldName)
						qw422016.N().S(`:keys[i], `)
						qw422016.N().S(valueFieldName)
						qw422016.N().S(`:(*m)[keys[i]]}
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
    }
    return w, sizes
}
`)
				}
				qw422016.N().S(`
func `)
				qw422016.N().S(goName)
				qw422016.N().S(`InternalReadTL2(r []byte, m *map[`)
				qw422016.N().S(keyTypeString)
				qw422016.N().S(`]`)
				qw422016.N().S(valueTypeString)
				qw422016.N().S(natDecl)
				qw422016.N().S(`) (_ []byte, err error) {
`)
				if !tuple.wr.wantsTL2 {
					qw422016.N().S(`    return r, `)
					qw422016.N().S(tuple.wr.gen.InternalPrefix())
					qw422016.N().S(`ErrorTL2SerializersNotGenerated(`)
					qw422016.N().Q(typeString)
					qw422016.N().S(`)
`)
				} else {
					qw422016.N().S(`    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    if len(r) < currentSize {
        return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
    }

    currentR := r[:currentSize]
    r = r[currentSize:]

    elementCount := 0
    if currentSize != 0 {
`)
					readResult := "currentR"
					if !tuple.element.t.trw.doesReadTL2UseBytes(false) {
						readResult = "_"
					}

					qw422016.N().S(`        if `)
					qw422016.N().S(readResult)
					qw422016.N().S(`, elementCount, err = basictl.TL2ParseSize(currentR); err != nil { return r, err }
    }

    if *m == nil {
        *m = make(map[`)
					qw422016.N().S(keyTypeString)
					qw422016.N().S(`]`)
					qw422016.N().S(valueTypeString)
					qw422016.N().S(`)
    }

    for key := range *m {
        delete(*m, key)
    }

    data := *m

    for i := 0; i < elementCount; i++ {
        elem := `)
					qw422016.N().S(elementTypeString)
					qw422016.N().S(`{}
        `)
					qw422016.N().S(tuple.element.t.ReadTL2Call(directImports, bytesVersion, "currentR", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
        data[elem.`)
					qw422016.N().S(keyFieldName)
					qw422016.N().S(`] = elem.`)
					qw422016.N().S(valueFieldName)
					qw422016.N().S(`
    }
    return r, nil
`)
				}
				qw422016.N().S(`}
`)
			}
			qw422016.N().S(`
`)
			if tuple.wr.gen.options.GenerateLegacyJsonRead {
				qw422016.N().S(`func `)
				qw422016.N().S(goName)
				qw422016.N().S(`ReadJSONLegacy(legacyTypeNames bool, j interface{}, m *`)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(valueNatArgsDecl)
				qw422016.N().S(`) error {
    var _map map[string]interface{}
    var _mapok bool
    if j != nil {
        _map, _mapok = j.(map[string]interface{})
        if !_mapok {
            return `)
				qw422016.N().S(tuple.wr.gen.InternalPrefix())
				qw422016.N().S(`ErrorInvalidJSON(`)
				qw422016.N().Q(typeString)
				qw422016.N().S(`, "expected json object")
        }
    }
    l := len(_map)
    var data map[`)
				qw422016.N().S(keyTypeString)
				qw422016.N().S(`]`)
				qw422016.N().S(valueTypeString)
				qw422016.N().S(`
    if *m == nil {
        if l == 0 {
            return nil
        }
        data = make(map[`)
				qw422016.N().S(keyTypeString)
				qw422016.N().S(`]`)
				qw422016.N().S(valueTypeString)
				qw422016.N().S(`, l)
        *m = data
    } else {
        data = *m
        for k := range data {
            delete(data, k)
        }
    }
    for _jkey, _jvalue := range _map {
`)
				if tuple.dictKeyString {
				} else {
					qw422016.N().S(`        var key `)
					qw422016.N().S(keyTypeString)
					qw422016.N().S(`
        `)
					qw422016.N().S(tuple.dictKeyField.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_jkey", "key", formatNatArgs(nil, tuple.dictKeyField.natArgs), false))
					qw422016.N().S(`
`)
				}
				qw422016.N().S(`        var value `)
				qw422016.N().S(valueTypeString)
				qw422016.N().S(`
        `)
				qw422016.N().S(tuple.dictValueField.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_jvalue", "value", formatNatArgs(nil, tuple.dictValueField.natArgs), false))
				qw422016.N().S(`
`)
				if tuple.dictKeyString {
					qw422016.N().S(`        data[_jkey] = value
`)
				} else {
					qw422016.N().S(`        data[key] = value
`)
				}
				qw422016.N().S(`    }
    return nil
}

`)
			}
			qw422016.N().S(`func `)
			qw422016.N().S(goName)
			qw422016.N().S(`ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, m *`)
			qw422016.N().S(typeString)
			qw422016.N().S(` `)
			qw422016.N().S(valueNatArgsDecl)
			qw422016.N().S(`) error {
	var data map[`)
			qw422016.N().S(keyTypeString)
			qw422016.N().S(`]`)
			qw422016.N().S(valueTypeString)
			qw422016.N().S(`
	if *m == nil {
	    *m = make(map[`)
			qw422016.N().S(keyTypeString)
			qw422016.N().S(`]`)
			qw422016.N().S(valueTypeString)
			qw422016.N().S(`, 0)
	    data = *m
	} else {
        data = *m
        for k := range data {
            delete(data, k)
        }
    }
    if in != nil {
        in.Delim('{')
        if !in.Ok() {
            return `)
			qw422016.N().S(tuple.wr.gen.InternalPrefix())
			qw422016.N().S(`ErrorInvalidJSON(`)
			qw422016.N().Q(typeString)
			qw422016.N().S(`, "expected json object")
        }
        for !in.IsDelim('}') {
`)
			if tuple.dictKeyString {
				qw422016.N().S(`            key := in.UnsafeFieldName(true)
            in.WantColon()
            var value `)
				qw422016.N().S(valueTypeString)
				qw422016.N().S(`
            `)
				qw422016.N().S(tuple.dictValueField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "value", formatNatArgs(nil, tuple.dictValueField.natArgs), false))
				qw422016.N().S(`
            data[key] = value
`)
			} else {
				qw422016.N().S(`            keyBytes := []byte(in.UnsafeFieldName(false))
            in.WantColon()
            if !in.Ok() {
                return `)
				qw422016.N().S(tuple.wr.gen.InternalPrefix())
				qw422016.N().S(`ErrorInvalidJSON(`)
				qw422016.N().Q(typeString)
				qw422016.N().S(`, "expected correct json value in key")
            }
            in2 := basictl.JsonLexer{Data: keyBytes}
            var key `)
				qw422016.N().S(keyTypeString)
				qw422016.N().S(`
            `)
				qw422016.N().S(tuple.dictKeyField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "&in2", "key", formatNatArgs(nil, tuple.dictKeyField.natArgs), false))
				qw422016.N().S(`
            var value `)
				qw422016.N().S(valueTypeString)
				qw422016.N().S(`
            `)
				qw422016.N().S(tuple.dictValueField.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "value", formatNatArgs(nil, tuple.dictValueField.natArgs), false))
				qw422016.N().S(`
            data[key] = value
`)
			}
			qw422016.N().S(`            in.WantComma()
        }
        in.Delim('}')
        if !in.Ok() {
            return `)
			qw422016.N().S(tuple.wr.gen.InternalPrefix())
			qw422016.N().S(`ErrorInvalidJSON(`)
			qw422016.N().Q(typeString)
			qw422016.N().S(`, "expected json object's end")
        }
    }
    return nil
}

func `)
			qw422016.N().S(goName)
			qw422016.N().S(`WriteJSON(w []byte, m `)
			qw422016.N().S(typeString)
			qw422016.N().S(` `)
			qw422016.N().S(valueNatArgsDecl)
			qw422016.N().S(`) `)
			qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
			qw422016.N().S(` {
    tctx := basictl.JSONWriteContext{}
    return `)
			qw422016.N().S(goName)
			qw422016.N().S(`WriteJSONOpt(&tctx, w, m`)
			qw422016.N().S(valueNatArgsCall)
			qw422016.N().S(`)
}
`)
			if tuple.dictKeyString {
				qw422016.N().S(`func `)
				qw422016.N().S(goName)
				qw422016.N().S(`WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, m `)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(valueNatArgsDecl)
				qw422016.N().S(`) `)
				qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
				qw422016.N().S(` {
    keys := make([]`)
				qw422016.N().S(keyTypeString)
				qw422016.N().S(`, 0, len(m))
    for k := range m {
        keys = append(keys, k)
    }
`)
				directImports.importSort = true

				qw422016.N().S(`    sort.Strings(keys)
    w = append(w, '{')
    for _, key := range keys {
        value := m[key]
        w = basictl.JSONAddCommaIfNeeded(w)
        w = basictl.JSONWriteString(w, key)
        w = append(w, ':')
        `)
				qw422016.N().S(tuple.dictValueField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "value", formatNatArgs(nil, tuple.dictValueField.natArgs), false, tuple.dictValueField.t.hasErrorInWriteMethods))
				qw422016.N().S(`
    }
`)
				if writeElementNeedsError {
					qw422016.N().S(`    return append(w, '}'), nil
`)
				} else {
					qw422016.N().S(`    return append(w, '}')
`)
				}
				qw422016.N().S(`}
`)
			} else {
				qw422016.N().S(`func `)
				qw422016.N().S(goName)
				qw422016.N().S(`WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, m `)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(natDecl)
				qw422016.N().S(`) `)
				qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
				qw422016.N().S(` {
    keys := make([]`)
				qw422016.N().S(keyTypeString)
				qw422016.N().S(`, 0, len(m))
    for k := range m {
        keys = append(keys, k)
    }
`)
				directImports.importSort = true

				qw422016.N().S(`    sort.Slice(keys, func(i, j int) bool {
        return keys[i] < keys[j]
    })
    w = append(w, '{')
    for _, key := range keys {
        value := m[key]
        w = basictl.JSONAddCommaIfNeeded(w)
        w = append(w, `)
				qw422016.N().S("`")
				qw422016.N().S(`"`)
				qw422016.N().S("`")
				qw422016.N().S(`...)
        `)
				qw422016.N().S(tuple.dictKeyField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "key", formatNatArgs(nil, tuple.dictKeyField.natArgs), false, tuple.dictKeyField.t.hasErrorInWriteMethods))
				qw422016.N().S(`
        w = append(w, `)
				qw422016.N().S("`")
				qw422016.N().S(`":`)
				qw422016.N().S("`")
				qw422016.N().S(`...)
        `)
				qw422016.N().S(tuple.dictValueField.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "value", formatNatArgs(nil, tuple.dictValueField.natArgs), false, tuple.dictValueField.t.hasErrorInWriteMethods))
				qw422016.N().S(`
    }
`)
				if writeElementNeedsError {
					qw422016.N().S(`    return append(w, '}'), nil
`)
				} else {
					qw422016.N().S(`    return append(w, '}')
`)
				}
				qw422016.N().S(`}
`)
			}
		}
	case tuple.vectorLike:
		if tuple.wr.gen.options.GenerateRandomCode {
			qw422016.N().S(`func `)
			qw422016.N().S(goName)
			qw422016.N().S(`FillRandom(rg *basictl.RandGenerator, vec *`)
			qw422016.N().S(typeString)
			qw422016.N().S(` `)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) {
    rg.IncreaseDepth()
    l := rg.LimitValue(basictl.RandomUint(rg))
    *vec = make([]`)
			qw422016.N().S(elementTypeString)
			qw422016.N().S(`, l)
    for i := range *vec {
        `)
			qw422016.N().S(tuple.element.t.TypeRandomCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false))
			qw422016.N().S(`
    }
    rg.DecreaseDepth()
}
`)
		}
		qw422016.N().S(`func `)
		qw422016.N().S(goName)
		qw422016.N().S(`Read(w []byte, vec *`)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) (_ []byte, err error) {
    var l uint32
    if w, err = basictl.NatRead(w, &l); err != nil {
        return w, err
    }
`)
		if tuple.wr.gen.options.UseCheckLengthSanity {
			qw422016.N().S(`    if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
        return w, err
    }
`)
		}
		qw422016.N().S(`    if uint32(cap(*vec)) < l {
        *vec = make([]`)
		qw422016.N().S(elementTypeString)
		qw422016.N().S(`, l)
    } else {
        *vec = (*vec)[:l]
    }
    for i := range *vec {
        `)
		qw422016.N().S(tuple.element.t.TypeReadingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false))
		qw422016.N().S(`
    }
    return w, nil
}

func `)
		qw422016.N().S(goName)
		qw422016.N().S(`Write(w []byte, vec `)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) `)
		qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
		qw422016.N().S(` {
    w = basictl.NatWrite(w, uint32(len(vec)))
    for _, elem := range vec {
        `)
		qw422016.N().S(tuple.element.t.TypeWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false, writeElementNeedsError))
		qw422016.N().S(`
    }
`)
		if writeElementNeedsError {
			qw422016.N().S(`    return w, nil
`)
		} else {
			qw422016.N().S(`    return w
`)
		}
		qw422016.N().S(`}
`)
		if tuple.wr.gen.options.GenerateTL2 {
			qw422016.N().S(`
`)
			if tuple.wr.wantsTL2 {
				qw422016.N().S(`func `)
				qw422016.N().S(goName)
				qw422016.N().S(`CalculateLayout(sizes []int, vec *`)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(natDecl)
				qw422016.N().S(`) []int {
    currentSize := 0
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if len(*vec) != 0 {
        currentSize += basictl.TL2CalculateSize(len(*vec))
    }
`)
				if _, ok := tuple.element.t.trw.(*TypeRWBool); ok {
					qw422016.N().S(`    // special case for bool
    currentSize += (len(*vec) + 7) / 8
`)
				} else {
					qw422016.N().S(`    for i := 0; i < len(*vec); i++ {
`)
					_, trivialSize := tuple.element.t.trw.tl2TrivialSize("elem", false, tuple.element.recursive)
					sizeValue := trivialSize
					if len(trivialSize) == 0 {
						sizeValue = "sizes[currentPosition]"
					}

					if len(trivialSize) == 0 {
						qw422016.N().S(`        currentPosition := len(sizes)
`)
					}
					if tuple.element.t.trw.doesCalculateLayoutUseObject(false) {
						qw422016.N().S(`        elem := (*vec)[i]
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.CalculateLayoutCall(directImports, bytesVersion, "sizes", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
        currentSize += `)
					qw422016.N().S(sizeValue)
					qw422016.N().S(`
`)
					if tuple.element.t.trw.isSizeWrittenInData() {
						qw422016.N().S(`        currentSize += basictl.TL2CalculateSize(`)
						qw422016.N().S(sizeValue)
						qw422016.N().S(`)
`)
					}
					qw422016.N().S(`    }
`)
				}
				qw422016.N().S(`    sizes[sizePosition] = currentSize
    return sizes
}

func `)
				qw422016.N().S(goName)
				qw422016.N().S(`InternalWriteTL2(w []byte, sizes []int, vec *`)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(natDecl)
				qw422016.N().S(`) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if len(*vec) != 0 {
        w = basictl.TL2WriteSize(w, len(*vec))
    }

`)
				if _, ok := tuple.element.t.trw.(*TypeRWBool); ok {
					qw422016.N().S(`    // special case for bool
    blockCount := (len(*vec) + 7) / 8
    index := 0
    for i := 0; i < blockCount; i++ {
        var block byte

        blockSize := 8
        if index + blockSize > len(*vec) {
            blockSize = len(*vec) - index
        }
        for j := 0; j < blockSize; j++ {
            if (*vec)[index] {
                block |= (1 << j)
            }
            index += 1
        }

        w = append(w, block)
    }
`)
				} else {
					qw422016.N().S(`    for i := 0; i < len(*vec); i++ {
`)
					if tuple.element.t.trw.doesWriteTL2UseObject(false) {
						qw422016.N().S(`        elem := (*vec)[i]
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
    }
`)
				}
				qw422016.N().S(`    return w, sizes
}
`)
			}
			qw422016.N().S(`
func `)
			qw422016.N().S(goName)
			qw422016.N().S(`InternalReadTL2(r []byte, vec *`)
			qw422016.N().S(typeString)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) (_ []byte, err error) {
`)
			if !tuple.wr.wantsTL2 {
				qw422016.N().S(`    return r, `)
				qw422016.N().S(tuple.wr.gen.InternalPrefix())
				qw422016.N().S(`ErrorTL2SerializersNotGenerated(`)
				qw422016.N().Q(typeString)
				qw422016.N().S(`)
`)
			} else {
				qw422016.N().S(`    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    if len(r) < currentSize {
        return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
    }

    currentR := r[:currentSize]
    r = r[currentSize:]

    elementCount := 0
    if currentSize != 0 {
`)
				readResult := "currentR"
				if !tuple.element.t.trw.doesReadTL2UseBytes(false) {
					readResult = "_"
				}

				qw422016.N().S(`        if `)
				qw422016.N().S(readResult)
				qw422016.N().S(`, elementCount, err = basictl.TL2ParseSize(currentR); err != nil { return r, err }
    }

    if cap(*vec) < elementCount {
        *vec = make([]`)
				qw422016.N().S(elementTypeString)
				qw422016.N().S(`, elementCount)
    }
    *vec = (*vec)[:elementCount]
`)
				if _, ok := tuple.element.t.trw.(*TypeRWBool); ok {
					qw422016.N().S(`    // special case for bool
    blocksCount := (elementCount + 7) / 8
    index := 0
    for i := 0; i < blocksCount; i++ {
        var block byte
        if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil { return currentR, err }

        blockSize := 8
        if index + blockSize > elementCount {
            blockSize = elementCount - index
        }
        for j := 0; j < blockSize; j++ {
            (*vec)[index] = (block & (1 << j)) != 0
            index += 1
        }
    }
`)
				} else {
					qw422016.N().S(`    for i := 0; i < elementCount; i++ {
        `)
					qw422016.N().S(tuple.element.t.ReadTL2Call(directImports, bytesVersion, "currentR", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
    }
`)
				}
				qw422016.N().S(`    return r, nil
`)
			}
			qw422016.N().S(`}
`)
		}
		qw422016.N().S(`
`)
		if tuple.wr.gen.options.GenerateLegacyJsonRead {
			qw422016.N().S(`func `)
			qw422016.N().S(goName)
			qw422016.N().S(`ReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *`)
			qw422016.N().S(typeString)
			qw422016.N().S(` `)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) error {
    l, _arr, err := `)
			qw422016.N().S(tuple.wr.gen.InternalPrefix())
			qw422016.N().S(`JsonReadArray(`)
			qw422016.N().Q(typeString)
			qw422016.N().S(`, j)
    if err != nil {
        return err
    }
    if cap(*vec) < l {
        *vec = make([]`)
			qw422016.N().S(elementTypeString)
			qw422016.N().S(`, l)
    } else {
        *vec = (*vec)[:l]
    }
    for i := range *vec {
        `)
			qw422016.N().S(tuple.element.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_arr[i]", "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false))
			qw422016.N().S(`
    }
    return nil
}

`)
		}
		qw422016.N().S(`func `)
		qw422016.N().S(goName)
		qw422016.N().S(`ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *`)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) error {
    *vec = (*vec)[:cap(*vec)]
    index := 0
    if in != nil {
        in.Delim('[')
        if !in.Ok() {
            return `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorInvalidJSON(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, "expected json array")
        }
        for ;!in.IsDelim(']'); index++ {
            if len(*vec) <= index {
                var newValue `)
		qw422016.N().S(elementTypeString)
		qw422016.N().S(`
                *vec = append(*vec, newValue)
                *vec = (*vec)[:cap(*vec)]
            }
            `)
		qw422016.N().S(tuple.element.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "(*vec)[index]", formatNatArgs(nil, tuple.element.natArgs), false))
		qw422016.N().S(`
             in.WantComma()
        }
        in.Delim(']')
        if !in.Ok() {
            return `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorInvalidJSON(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, "expected json array's end")
        }
    }
    *vec = (*vec)[:index]
    return nil
}

func `)
		qw422016.N().S(goName)
		qw422016.N().S(`WriteJSON(w []byte, vec `)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) `)
		qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
		qw422016.N().S(` {
    tctx := basictl.JSONWriteContext{}
    return `)
		qw422016.N().S(goName)
		qw422016.N().S(`WriteJSONOpt(&tctx, w, vec`)
		qw422016.N().S(natCall)
		qw422016.N().S(`)
}
func `)
		qw422016.N().S(goName)
		qw422016.N().S(`WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec `)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) `)
		qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
		qw422016.N().S(` {
    w = append(w, '[')
    for _, elem := range vec {
        w = basictl.JSONAddCommaIfNeeded(w)
        `)
		qw422016.N().S(tuple.element.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", formatNatArgs(nil, tuple.element.natArgs), false, writeElementNeedsError))
		qw422016.N().S(`
    }
`)
		if writeElementNeedsError {
			qw422016.N().S(`    return append(w, ']'), nil
`)
		} else {
			qw422016.N().S(`    return append(w, ']')
`)
		}
		qw422016.N().S(`}

`)
	case tuple.dynamicSize:
		if tuple.wr.gen.options.GenerateRandomCode {
			qw422016.N().S(`func `)
			qw422016.N().S(goName)
			qw422016.N().S(`FillRandom(rg *basictl.RandGenerator, vec *`)
			qw422016.N().S(typeString)
			qw422016.N().S(` `)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) {
    rg.IncreaseDepth()
    *vec = make([]`)
			qw422016.N().S(elementTypeString)
			qw422016.N().S(`, nat_n)
    for i := range *vec {
        `)
			qw422016.N().S(tuple.element.t.TypeRandomCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false))
			qw422016.N().S(`
    }
    rg.DecreaseDepth()
}
`)
		}
		qw422016.N().S(`
func `)
		qw422016.N().S(goName)
		qw422016.N().S(`Read(w []byte, vec *`)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) (_ []byte, err error) {
`)
		if tuple.wr.gen.options.UseCheckLengthSanity {
			qw422016.N().S(`    if err = basictl.CheckLengthSanity(w, nat_n, 4); err != nil {
        return w, err
    }
`)
		}
		qw422016.N().S(`    if uint32(cap(*vec)) < nat_n {
        *vec = make([]`)
		qw422016.N().S(elementTypeString)
		qw422016.N().S(`, nat_n)
    } else {
        *vec = (*vec)[:nat_n]
    }
    for i := range *vec {
        `)
		qw422016.N().S(tuple.element.t.TypeReadingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false))
		qw422016.N().S(`
    }
    return w, nil
}

func `)
		qw422016.N().S(goName)
		qw422016.N().S(`Write(w []byte, vec `)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) (_ []byte, err error) {
    if uint32(len(vec)) != nat_n {
        return w, `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorWrongSequenceLength(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, len(vec), nat_n)
    }
    for _, elem := range vec {
        `)
		qw422016.N().S(tuple.element.t.TypeWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false, writeElementNeedsError))
		qw422016.N().S(`
    }
    return w, nil
}
`)
		if tuple.wr.gen.options.GenerateTL2 {
			qw422016.N().S(`
`)
			if tuple.wr.wantsTL2 {
				qw422016.N().S(`func `)
				qw422016.N().S(goName)
				qw422016.N().S(`CalculateLayout(sizes []int, vec *`)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(natDecl)
				qw422016.N().S(`) []int {
    currentSize := 0
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if nat_n != 0 {
        currentSize += basictl.TL2CalculateSize(int(nat_n))
    }

`)
				if _, ok := tuple.element.t.trw.(*TypeRWBool); ok {
					qw422016.N().S(`    // special case for bool
    currentSize += (int(nat_n) + 7) / 8
`)
				} else {
					qw422016.N().S(`    lastIndex := uint32(len(*vec))
    if lastIndex > nat_n {
        lastIndex = nat_n
    }

    for i := uint32(0); i < lastIndex; i++ {
`)
					_, trivialSize := tuple.element.t.trw.tl2TrivialSize("(*vec)[i]", false, tuple.element.recursive)
					sizeValue := trivialSize
					if len(trivialSize) == 0 {
						sizeValue = "sizes[currentPosition]"
					}

					if len(trivialSize) == 0 {
						qw422016.N().S(`        currentPosition := len(sizes)
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.CalculateLayoutCall(directImports, bytesVersion, "sizes", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
        currentSize += `)
					qw422016.N().S(sizeValue)
					qw422016.N().S(`
`)
					if tuple.element.t.trw.isSizeWrittenInData() {
						qw422016.N().S(`        currentSize += basictl.TL2CalculateSize(`)
						qw422016.N().S(sizeValue)
						qw422016.N().S(`)
`)
					}
					qw422016.N().S(`    }

    // append empty objects if not enough
    for i := lastIndex; i < nat_n; i++ {
`)
					_, trivialSize = tuple.element.t.trw.tl2TrivialSize("elem", false, tuple.element.recursive)
					sizeValue = trivialSize
					if len(trivialSize) == 0 {
						sizeValue = "sizes[currentPosition]"
					}

					if tuple.element.t.trw.doesCalculateLayoutUseObject(false) {
						qw422016.N().S(`        var elem `)
						qw422016.N().S(elementTypeString)
						qw422016.N().S(`
`)
					}
					if len(trivialSize) == 0 {
						qw422016.N().S(`        currentPosition := len(sizes)
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.CalculateLayoutCall(directImports, bytesVersion, "sizes", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
        currentSize += `)
					qw422016.N().S(sizeValue)
					qw422016.N().S(`
`)
					if tuple.element.t.trw.isSizeWrittenInData() {
						qw422016.N().S(`        currentSize += basictl.TL2CalculateSize(`)
						qw422016.N().S(sizeValue)
						qw422016.N().S(`)
`)
					}
					qw422016.N().S(`    }
`)
				}
				qw422016.N().S(`
    sizes[sizePosition] = currentSize
    return sizes
}

func `)
				qw422016.N().S(goName)
				qw422016.N().S(`InternalWriteTL2(w []byte, sizes []int, vec *`)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(natDecl)
				qw422016.N().S(`) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if nat_n != 0 {
        w = basictl.TL2WriteSize(w, int(nat_n))
    }

    lastIndex := uint32(len(*vec))
    if lastIndex > nat_n {
        lastIndex = nat_n
    }

`)
				if _, ok := tuple.element.t.trw.(*TypeRWBool); ok {
					qw422016.N().S(`    // special case for bool
    blocksCount := (lastIndex + 7) / 8
    index := uint32(0)
    for i := uint32(0); i < blocksCount; i++ {
        block := byte(0)
        blockSize := uint32(8)
        if index + blockSize > lastIndex {
            blockSize = lastIndex - index
        }
        for j := uint32(0); j < blockSize; j++ {
            if (*vec)[index] {
                block |= (1 << j)
            }
            index += 1
        }
        w = append(w, block)
    }

    // append empty objects if not enough
    for i := blocksCount; i < (nat_n + 7) / 8; i++ {
        w = append(w, 0)
    }
`)
				} else {
					qw422016.N().S(`    for i := uint32(0); i < lastIndex; i++ {
        `)
					qw422016.N().S(tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
    }

    // append empty objects if not enough
    for i := lastIndex; i < nat_n; i++ {
`)
					if tuple.element.t.trw.doesWriteTL2UseObject(false) {
						qw422016.N().S(`        var elem `)
						qw422016.N().S(elementTypeString)
						qw422016.N().S(`
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "elem", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
    }
`)
				}
				qw422016.N().S(`    return w, sizes
}
`)
			}
			qw422016.N().S(`
func `)
			qw422016.N().S(goName)
			qw422016.N().S(`InternalReadTL2(r []byte, vec *`)
			qw422016.N().S(typeString)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) (_ []byte, err error) {
`)
			if !tuple.wr.wantsTL2 {
				qw422016.N().S(`    return r, `)
				qw422016.N().S(tuple.wr.gen.InternalPrefix())
				qw422016.N().S(`ErrorTL2SerializersNotGenerated(`)
				qw422016.N().Q(typeString)
				qw422016.N().S(`)
`)
			} else {
				qw422016.N().S(`    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    if len(r) < currentSize {
        return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
    }

    currentR := r[:currentSize]
    r = r[currentSize:]

    elementCount := 0
    if currentSize != 0 {
`)
				readResult := "currentR"
				if !tuple.element.t.trw.doesReadTL2UseBytes(false) {
					readResult = "_"
				}

				qw422016.N().S(`        if `)
				qw422016.N().S(readResult)
				qw422016.N().S(`, elementCount, err = basictl.TL2ParseSize(currentR); err != nil { return r, err }
    }

    if uint32(cap(*vec)) < nat_n {
        *vec = make([]`)
				qw422016.N().S(elementTypeString)
				qw422016.N().S(`, nat_n)
    } else {
        *vec = (*vec)[:nat_n]
    }

    lastIndex := uint32(elementCount)
    if lastIndex > nat_n {
        lastIndex = nat_n
    }

`)
				if _, ok := tuple.element.t.trw.(*TypeRWBool); ok {
					qw422016.N().S(`    // special case for bool
    blocksCount := (lastIndex + 7) / 8
    index := uint32(0)
    for i := uint32(0); i < blocksCount; i++ {
        var block byte
        if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil { return currentR, err }

        blockSize := uint32(8)
        if index + blockSize > lastIndex {
            blockSize = lastIndex - index
        }
        for j := uint32(0); j < blockSize; j++ {
            (*vec)[index] = (block & (1 << j)) != 0
            index += 1
        }
    }

    // reset elements if received less elements
    for i := index; i < nat_n; i++ {
        (*vec)[i] = false
    }
`)
				} else {
					qw422016.N().S(`    for i := uint32(0); i < lastIndex; i++ {
        `)
					qw422016.N().S(tuple.element.t.ReadTL2Call(directImports, bytesVersion, "currentR", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
    }

    // reset elements if received less elements
    for i := lastIndex; i < nat_n; i++ {
        `)
					qw422016.N().S(tuple.element.t.TypeResettingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", false))
					qw422016.N().S(`
    }
`)
				}
				qw422016.N().S(`
    return r, nil
`)
			}
			qw422016.N().S(`}
`)
		}
		if tuple.wr.gen.options.GenerateLegacyJsonRead {
			qw422016.N().S(`func `)
			qw422016.N().S(goName)
			qw422016.N().S(`ReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *`)
			qw422016.N().S(typeString)
			qw422016.N().S(` `)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) error {
    _, _arr, err := `)
			qw422016.N().S(tuple.wr.gen.InternalPrefix())
			qw422016.N().S(`JsonReadArrayFixedSize(`)
			qw422016.N().Q(typeString)
			qw422016.N().S(`, j, nat_n)
    if err != nil {
        return err
    }
    if uint32(cap(*vec)) < nat_n {
        *vec = make([]`)
			qw422016.N().S(elementTypeString)
			qw422016.N().S(`, nat_n)
    } else {
        *vec = (*vec)[:nat_n]
    }
    for i := range *vec {
        `)
			qw422016.N().S(tuple.element.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_arr[i]", "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false))
			qw422016.N().S(`
    }
    return nil
}

`)
		}
		qw422016.N().S(`func `)
		qw422016.N().S(goName)
		qw422016.N().S(`ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *`)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) error {
    if uint32(cap(*vec)) < nat_n {
        *vec = make([]`)
		qw422016.N().S(elementTypeString)
		qw422016.N().S(`, nat_n)
    } else {
        *vec = (*vec)[:nat_n]
    }
    index := 0
    if in != nil {
        in.Delim('[')
        if !in.Ok() {
            return `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorInvalidJSON(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, "expected json array")
        }
        for ;!in.IsDelim(']'); index++ {
            if nat_n <= uint32(index) {
                return `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorInvalidJSON(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, "array is longer than expected")
            }
            `)
		qw422016.N().S(tuple.element.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "(*vec)[index]", formatNatArgs(nil, tuple.element.natArgs), false))
		qw422016.N().S(`
             in.WantComma()
        }
        in.Delim(']')
        if !in.Ok() {
            return `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorInvalidJSON(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, "expected json array's end")
        }
    }
    if uint32(index) != nat_n {
        return `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorWrongSequenceLength(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, index, nat_n)
    }
    return nil
}

func `)
		qw422016.N().S(goName)
		qw422016.N().S(`WriteJSON(w []byte, vec `)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) (_ []byte, err error) {
    tctx := basictl.JSONWriteContext{}
    return `)
		qw422016.N().S(goName)
		qw422016.N().S(`WriteJSONOpt(&tctx, w, vec`)
		qw422016.N().S(natCall)
		qw422016.N().S(`)
}
func `)
		qw422016.N().S(goName)
		qw422016.N().S(`WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec `)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) (_ []byte, err error) {
    if uint32(len(vec)) != nat_n {
        return w, `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorWrongSequenceLength(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, len(vec), nat_n)
    }
    w = append(w, '[')
    for _, elem := range vec {
        w = basictl.JSONAddCommaIfNeeded(w)
        `)
		qw422016.N().S(tuple.element.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", formatNatArgs(nil, tuple.element.natArgs), false, writeElementNeedsError))
		qw422016.N().S(`
    }
    return append(w, ']'), nil
}

`)
	default:
		qw422016.N().S(`func `)
		qw422016.N().S(goName)
		qw422016.N().S(`Reset(vec *`)
		qw422016.N().S(typeString)
		qw422016.N().S(`) {
    for i := range *vec {
            `)
		qw422016.N().S(tuple.element.t.TypeResettingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", false))
		qw422016.N().S(`
    }
}

`)
		if tuple.wr.gen.options.GenerateRandomCode {
			qw422016.N().S(`func `)
			qw422016.N().S(goName)
			qw422016.N().S(`FillRandom(rg *basictl.RandGenerator, vec *`)
			qw422016.N().S(typeString)
			qw422016.N().S(` `)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) {
    rg.IncreaseDepth()
    for i := range *vec {
        `)
			qw422016.N().S(tuple.element.t.TypeRandomCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false))
			qw422016.N().S(`
    }
    rg.DecreaseDepth()
}
`)
		}
		qw422016.N().S(`
func `)
		qw422016.N().S(goName)
		qw422016.N().S(`Read(w []byte, vec *`)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) (_ []byte, err error) {
    for i := range *vec {
        `)
		qw422016.N().S(tuple.element.t.TypeReadingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false))
		qw422016.N().S(`
    }
    return w, nil
}

func `)
		qw422016.N().S(goName)
		qw422016.N().S(`Write(w []byte, vec *`)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) `)
		qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
		qw422016.N().S(` {
    for _, elem := range *vec {
        `)
		qw422016.N().S(tuple.element.t.TypeWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", tuple.element.Bare(), formatNatArgs(nil, tuple.element.natArgs), false, false, writeElementNeedsError))
		qw422016.N().S(`
    }
`)
		if writeElementNeedsError {
			qw422016.N().S(`    return w, nil
`)
		} else {
			qw422016.N().S(`    return w
`)
		}
		qw422016.N().S(`}
`)
		if tuple.wr.gen.options.GenerateTL2 {
			qw422016.N().S(`
`)
			if tuple.wr.wantsTL2 {
				qw422016.N().S(`func `)
				qw422016.N().S(goName)
				qw422016.N().S(`CalculateLayout(sizes []int, vec *`)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(natDecl)
				qw422016.N().S(`) []int {
    currentSize := 0
    sizePosition := len(sizes)
    sizes = append(sizes, 0)
    if `)
				qw422016.N().V(tuple.size)
				qw422016.N().S(` != 0 {
        currentSize += basictl.TL2CalculateSize(`)
				qw422016.N().V(tuple.size)
				qw422016.N().S(`)
    }

`)
				if _, ok := tuple.element.t.trw.(*TypeRWBool); ok {
					qw422016.N().S(`    // special case for bool
    currentSize += (`)
					qw422016.N().V(tuple.size)
					qw422016.N().S(` + 7) / 8
`)
				} else {
					qw422016.N().S(`    for i := 0; i < `)
					qw422016.N().V(tuple.size)
					qw422016.N().S(`; i++ {
`)
					_, trivialSize := tuple.element.t.trw.tl2TrivialSize("(*vec)[i]", false, tuple.element.recursive)
					sizeValue := trivialSize
					if len(trivialSize) == 0 {
						sizeValue = "sizes[currentPosition]"
					}

					if len(trivialSize) == 0 {
						qw422016.N().S(`        currentPosition := len(sizes)
`)
					}
					qw422016.N().S(`        `)
					qw422016.N().S(tuple.element.t.CalculateLayoutCall(directImports, bytesVersion, "sizes", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
        currentSize += `)
					qw422016.N().S(sizeValue)
					qw422016.N().S(`
`)
					if tuple.element.t.trw.isSizeWrittenInData() {
						qw422016.N().S(`        currentSize += basictl.TL2CalculateSize(`)
						qw422016.N().S(sizeValue)
						qw422016.N().S(`)
`)
					}
					qw422016.N().S(`    }
`)
				}
				qw422016.N().S(`
    sizes[sizePosition] = currentSize
    return sizes
}

func `)
				qw422016.N().S(goName)
				qw422016.N().S(`InternalWriteTL2(w []byte, sizes []int, vec *`)
				qw422016.N().S(typeString)
				qw422016.N().S(` `)
				qw422016.N().S(natDecl)
				qw422016.N().S(`) ([]byte, []int) {
    currentSize := sizes[0]
    sizes = sizes[1:]

    w = basictl.TL2WriteSize(w, currentSize)
    if `)
				qw422016.N().V(tuple.size)
				qw422016.N().S(` != 0 {
        w = basictl.TL2WriteSize(w, `)
				qw422016.N().V(tuple.size)
				qw422016.N().S(`)
    }

`)
				if _, ok := tuple.element.t.trw.(*TypeRWBool); ok {
					qw422016.N().S(`    // special case for bool
    index := 0
    for i := uint32(0); i < (`)
					qw422016.N().V(tuple.size)
					qw422016.N().S(` + 7) / 8; i++ {
        block := byte(0)
        blockSize := 8
        if index + blockSize > `)
					qw422016.N().V(tuple.size)
					qw422016.N().S(` {
            blockSize = `)
					qw422016.N().V(tuple.size)
					qw422016.N().S(` - index
        }
        for j := 0; j < blockSize; j++ {
            if (*vec)[index] {
                block |= (1 << j)
            }
            index += 1
        }
        w = append(w, block)
    }
`)
				} else {
					qw422016.N().S(`    for i := 0; i < `)
					qw422016.N().V(tuple.size)
					qw422016.N().S(`; i++ {
        `)
					qw422016.N().S(tuple.element.t.WriteTL2Call(directImports, bytesVersion, "sizes", "w", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
    }
`)
				}
				qw422016.N().S(`    return w, sizes
}
`)
			}
			qw422016.N().S(`
func `)
			qw422016.N().S(goName)
			qw422016.N().S(`InternalReadTL2(r []byte, vec *`)
			qw422016.N().S(typeString)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) (_ []byte, err error) {
`)
			if !tuple.wr.wantsTL2 {
				qw422016.N().S(`    return r, `)
				qw422016.N().S(tuple.wr.gen.InternalPrefix())
				qw422016.N().S(`ErrorTL2SerializersNotGenerated(`)
				qw422016.N().Q(typeString)
				qw422016.N().S(`)
`)
			} else {
				qw422016.N().S(`    currentSize := 0
    if r, currentSize, err = basictl.TL2ParseSize(r); err != nil { return r, err }
    if len(r) < currentSize {
        return r, basictl.TL2Error("not enough data: expected %d, got %d", currentSize, len(r))
    }

    currentR := r[:currentSize]
    r = r[currentSize:]

    elementCount := 0
    if currentSize != 0 {
`)
				readResult := "currentR"
				if !tuple.element.t.trw.doesReadTL2UseBytes(false) {
					readResult = "_"
				}

				qw422016.N().S(`        if `)
				qw422016.N().S(readResult)
				qw422016.N().S(`, elementCount, err = basictl.TL2ParseSize(currentR); err != nil { return r, err }
    }

    lastIndex := elementCount
    if lastIndex > `)
				qw422016.N().V(tuple.size)
				qw422016.N().S(` {
        lastIndex = `)
				qw422016.N().V(tuple.size)
				qw422016.N().S(`
    }
`)
				if _, ok := tuple.element.t.trw.(*TypeRWBool); ok {
					qw422016.N().S(`    // special case for bool
    blocksCount := (lastIndex + 7) / 8
    index := 0
    for i := 0; i < blocksCount; i++ {
        var block byte
        if currentR, err = basictl.ByteReadTL2(currentR, &block); err != nil { return currentR, err }

        blockSize := 8
        if index + blockSize > lastIndex {
            blockSize = lastIndex - index
        }
        for j := 0; j < blockSize; j++ {
            (*vec)[index] = (block & (1 << j)) != 0
            index += 1
        }
    }

    // reset elements if received less elements
    for i := lastIndex; i < `)
					qw422016.N().V(tuple.size)
					qw422016.N().S(`; i++ {
        (*vec)[i] = false
    }
`)
				} else {
					qw422016.N().S(`    for i := 0; i < lastIndex; i++ {
        `)
					qw422016.N().S(tuple.element.t.ReadTL2Call(directImports, bytesVersion, "currentR", "(*vec)[i]", false, tuple.wr.ins, false, formatNatArgs(nil, tuple.element.natArgs)))
					qw422016.N().S(`
    }

    // reset elements if received less elements
    for i := lastIndex; i < `)
					qw422016.N().V(tuple.size)
					qw422016.N().S(`; i++ {
        `)
					qw422016.N().S(tuple.element.t.TypeResettingCode(bytesVersion, directImports, tuple.wr.ins, "(*vec)[i]", false))
					qw422016.N().S(`
    }
`)
				}
				qw422016.N().S(`
    return r, nil
`)
			}
			qw422016.N().S(`}
`)
		}
		qw422016.N().S(`
`)
		if tuple.wr.gen.options.GenerateLegacyJsonRead {
			qw422016.N().S(`func `)
			qw422016.N().S(goName)
			qw422016.N().S(`ReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *`)
			qw422016.N().S(typeString)
			qw422016.N().S(` `)
			qw422016.N().S(natDecl)
			qw422016.N().S(`) error {
    _, _arr, err := `)
			qw422016.N().S(tuple.wr.gen.InternalPrefix())
			qw422016.N().S(`JsonReadArrayFixedSize(`)
			qw422016.N().Q(typeString)
			qw422016.N().S(`, j, `)
			qw422016.E().V(tuple.size)
			qw422016.N().S(`)
    if err != nil {
        return err
    }
    for i := range *vec {
        `)
			qw422016.N().S(tuple.element.t.TypeJSONReadingCode(bytesVersion, directImports, tuple.wr.ins, "_arr[i]", "(*vec)[i]", formatNatArgs(nil, tuple.element.natArgs), false))
			qw422016.N().S(`
    }
    return nil
}

`)
		}
		qw422016.N().S(`func `)
		qw422016.N().S(goName)
		qw422016.N().S(`ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *`)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) error {
    index := 0
    if in != nil {
        in.Delim('[')
        if !in.Ok() {
            return `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorInvalidJSON(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, "expected json array")
        }
        for ;!in.IsDelim(']'); index++ {
            if index == `)
		qw422016.E().V(tuple.size)
		qw422016.N().S(` {
                return `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorWrongSequenceLength(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, index + 1, `)
		qw422016.E().V(tuple.size)
		qw422016.N().S(`)
            }
            `)
		qw422016.N().S(tuple.element.t.TypeJSON2ReadingCode(bytesVersion, directImports, tuple.wr.ins, "in", "(*vec)[index]", formatNatArgs(nil, tuple.element.natArgs), false))
		qw422016.N().S(`
            in.WantComma()
        }
        in.Delim(']')
        if !in.Ok() {
            return `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorInvalidJSON(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, "expected json array's end")
        }
    }
    if index != `)
		qw422016.E().V(tuple.size)
		qw422016.N().S(` {
        return `)
		qw422016.N().S(tuple.wr.gen.InternalPrefix())
		qw422016.N().S(`ErrorWrongSequenceLength(`)
		qw422016.N().Q(typeString)
		qw422016.N().S(`, index + 1, `)
		qw422016.E().V(tuple.size)
		qw422016.N().S(`)
    }
    return nil
}

func `)
		qw422016.N().S(goName)
		qw422016.N().S(`WriteJSON(w []byte, vec *`)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) `)
		qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
		qw422016.N().S(` {
    tctx := basictl.JSONWriteContext{}
    return `)
		qw422016.N().S(goName)
		qw422016.N().S(`WriteJSONOpt(&tctx, w, vec`)
		qw422016.N().S(natCall)
		qw422016.N().S(`)
}
func `)
		qw422016.N().S(goName)
		qw422016.N().S(`WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec *`)
		qw422016.N().S(typeString)
		qw422016.N().S(` `)
		qw422016.N().S(natDecl)
		qw422016.N().S(`) `)
		qw422016.N().S(wrapWithError(writeElementNeedsError, "[]byte"))
		qw422016.N().S(` {
    w = append(w, '[')
    for _, elem := range *vec {
        w = basictl.JSONAddCommaIfNeeded(w)
        `)
		qw422016.N().S(tuple.element.t.TypeJSONWritingCode(bytesVersion, directImports, tuple.wr.ins, "elem", formatNatArgs(nil, tuple.element.natArgs), false, writeElementNeedsError))
		qw422016.N().S(`
    }
`)
		if writeElementNeedsError {
			qw422016.N().S(`    return append(w, ']'), nil
`)
		} else {
			qw422016.N().S(`    return append(w, ']')
`)
		}
		qw422016.N().S(`}
`)
	}
}

func (tuple *TypeRWBrackets) WriteGenerateCode(qq422016 qtio422016.Writer, bytesVersion bool, directImports *DirectImports) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	tuple.StreamGenerateCode(qw422016, bytesVersion, directImports)
	qt422016.ReleaseWriter(qw422016)
}

func (tuple *TypeRWBrackets) GenerateCode(bytesVersion bool, directImports *DirectImports) string {
	qb422016 := qt422016.AcquireByteBuffer()
	tuple.WriteGenerateCode(qb422016, bytesVersion, directImports)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
