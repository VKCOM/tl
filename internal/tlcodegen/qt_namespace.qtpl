{% package tlcodegen %}

{% import "fmt" %}

// will generate type aliases anyway and RPC code if appropriate flag is set
{%- func (gen *Gen2) generateNamespacesCode(anyTypeAlias bool, anyFunctions bool, name string, namespace *Namespace, sortedImports []string, directImports *DirectImports) -%}
{%s= HeaderComment %}
package {%s= gen.GlobalPackageName + name %}

import (
    {%- if gen.options.GenerateRPCCode && anyFunctions -%}
    "context"
    "time"

    {%q= gen.options.BasicRPCPath %}
    {%q= gen.BasicPackageNameFull %}
    "{%s= gen.options.TLPackageNameFull %}/internal"
    {%- endif -%}
    {%- for _, wr := range sortedImports -%}
    "{%s= gen.options.TLPackageNameFull %}/{%s= wr %}"
    {%- endfor -%}
)

    {%- code
        ourTypes := map[*TypeRWWrapper]struct{}{}
    -%}

{%= typesAlias(anyTypeAlias, name, namespace.types, directImports, ourTypes) %}

    {%- if !gen.options.GenerateRPCCode || !anyFunctions -%}
        {%- return -%}
    {%- endif -%}

type Client struct {
    Client  *rpc.Client
    Network string // should be either "tcp4" or "unix"
    Address string
    ActorID int64     // should be >0 for routing via rpc-proxy
    Timeout time.Time // used if not set in extra or ctx
}

{%= writeClientsCode(gen.GlobalPackageName, namespace.types, directImports, ourTypes) %}

type Handler struct {
    {%= handlerStructs(gen.GlobalPackageName, name, namespace.types, directImports, ourTypes) %} }

func (h *Handler) Handle(ctx context.Context, hctx *rpc.HandlerContext) (err error) {
    {%= handleRequest(namespace.types, directImports) %} return rpc.ErrNoHandler
}
{%- endfunc -%}

{%- func typesAlias(anyTypeAlias bool, namespace string, types []*TypeRWWrapper, directImports *DirectImports, ourTypes map[*TypeRWWrapper]struct{})-%}
    {%- if anyTypeAlias -%}
type(
        {%- for _, wr := range types -%}
            {%- if wr.ShouldWriteTypeAlias() -%}
                {%- code
                    ourTypes[wr] = struct{}{}
                -%}
    {%s= wr.TypeString2(false, directImports, nil, true, true) %} = {%s= wr.TypeString2(false, directImports, nil, false, true) %}
                {%- if wr.wantsBytesVersion && wr.hasBytesVersion -%}
    {%s= wr.TypeString2(true, directImports, nil, true, true) %} = {%s= wr.TypeString2(true, directImports, nil, false, true) %}
                {%- endif -%}
            {%- endif -%}
        {%- endfor -%}
)
    {%- endif -%}
    {%- for _, wr := range types -%}
        {%- if wr.ShouldWriteEnumElementAlias() -%}
            {%- code
                _, ourUnionParentLocal := ourTypes[wr.unionParent.wr]
                typeString := wr.TypeString2(false, directImports, nil, true, true)
            -%}
func {%s= typeString %}() {%s= wr.unionParent.wr.TypeString2(false, directImports, nil, ourUnionParentLocal, false) %} { return {%s= wr.TypeString2(false, directImports, nil, false, true) %}() }
        {%- endif -%}
    {%- endfor -%}
    {%- for _, wr := range types -%}
    {%- code
         _, ok := wr.trw.(*TypeRWBool)
    -%}
        {%- if ok -%}
            {%- code
                localTypeString := wr.TypeString2(false, directImports, nil, true, true)
                globalTypeString := wr.TypeString2(false, directImports, nil, false, true)
            -%}

func {%s= localTypeString %}ReadBoxed(w []byte, v *bool) ([]byte, error) {
    return {%s= globalTypeString %}ReadBoxed(w, v)
}
func {%s= localTypeString %}WriteBoxed(w []byte, v bool) []byte {
    return {%s= globalTypeString %}WriteBoxed(w, v)
}
        {%- endif -%}
    {%- endfor -%}
{%- endfunc -%}

{%- func writeClientsCode(shortPackageName string, types []*TypeRWWrapper, directImports *DirectImports, ourTypes map[*TypeRWWrapper]struct{}) -%}
    {%- for _, wr := range types -%}
        {%- if wr.wantsBytesVersion && wr.hasBytesVersion -%}
{%= writeClientCode(true, shortPackageName, wr, directImports, ourTypes) %}
        {%- endif -%}
{%= writeClientCode(false, shortPackageName, wr, directImports, ourTypes) %}
    {%- endfor -%}
{%- endfunc -%}

{%- func writeClientCode(bytesVersion bool, shortPackageName string, wr *TypeRWWrapper, directImports *DirectImports, ourTypes map[*TypeRWWrapper]struct{}) -%}
    {%- code
         fun, ok := wr.trw.(*TypeRWStruct)
    -%}
    {%- if !ok || fun.ResultType == nil -%} {%- return -%} {%- endif -%}
    {%- code
         _, ourResultType := ourTypes[fun.ResultType]
         ret := fun.ResultType.TypeString2(bytesVersion, directImports, nil, ourResultType, false)
         typeString := wr.TypeString2(bytesVersion, directImports, nil, true, true)
         tlName := wr.tlName.String()
    -%}
func (c *Client) {%s= typeString %}(ctx context.Context, args {%s= typeString %}, extra *rpc.InvokeReqExtra, ret *{%s= ret %}) (err error) {
    req := c.Client.GetRequest()
    req.ActorID = c.ActorID
    {%- if fun.wr.HasAnnotation("read") -%}
        req.ReadOnly = true
    {%- endif -%}
    req.FunctionName = "{%s= tlName %}"
    if extra != nil {
        req.Extra = *extra
    }
	if _, ok := ctx.Deadline(); !ok {
		rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	}
    req.Body, err = args.WriteBoxedGeneral(req.Body)
    if err != nil {
        return internal.ErrorClientWrite("{%s= tlName %}", err)
    }
    resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
    defer c.Client.PutResponse(resp)
    if err != nil {
        return internal.ErrorClientDo("{%s= tlName %}", c.Network, c.ActorID, c.Address, err)
    }
    if ret != nil {
        if _, err = args.ReadResult(resp.Body, ret); err != nil {
            return internal.ErrorClientReadResult("{%s= tlName %}", c.Network, c.ActorID, c.Address, err)
        }
    }
    return nil
}
{%- endfunc -%}

{%- func handlerStructs(shortPackageName string, name string, types []*TypeRWWrapper, directImports *DirectImports, ourTypes map[*TypeRWWrapper]struct{}) -%}
    {%- for _, wr := range types  -%}
        {%- if fun, ok := wr.trw.(*TypeRWStruct); ok && fun.ResultType != nil -%}
            {%- code
                tlName := wr.tlName.String()
                 _, ourResultType := ourTypes[fun.ResultType]
                ret := fun.ResultType.TypeString2(false, directImports, nil, ourResultType, false)
                funcTypeString := wr.TypeString2(false, directImports, nil, true, true)
            -%}
{%s= funcTypeString %} func(ctx context.Context, args {%s= funcTypeString %}) ({%s= ret %}, error) // {%s= tlName %}
        {%- endif -%}
    {%- endfor -%}

    {%- for _, wr := range types  -%}
        {%- if fun, ok := wr.trw.(*TypeRWStruct); ok && fun.ResultType != nil -%}
            {%- code
                tlName := wr.tlName.String()
                funcTypeString := wr.TypeString2(false, directImports, nil, true, true)
            -%}
Raw{%s= funcTypeString %} func(ctx context.Context, hctx *rpc.HandlerContext) error // {%s= tlName %}
        {%- endif -%}
    {%- endfor -%}
{%- endfunc -%}

{%- func handleRequest(types []*TypeRWWrapper, directImports *DirectImports) -%}
    {%- code 
        totalFuns := 0
        for _, wr := range types {
            if fun, ok := wr.trw.(*TypeRWStruct); ok && fun.ResultType != nil {
                totalFuns++
            }
        }
    -%}
    {%- if totalFuns == 0 -%} {%- return -%} {%- endif -%}
tag, r, _ := basictl.NatReadTag(hctx.Request) // keep hctx.Request intact for handler chaining
switch tag {
    {%- for _, wr := range types -%}
        {%- if fun, ok := wr.trw.(*TypeRWStruct); ok && fun.ResultType != nil -%}
            {%- code
                tlTag := fmt.Sprintf("0x%08x", wr.tlTag)
                funcTypeString := wr.TypeString2(false, directImports, nil, true, true)
                tlName := wr.tlName.String()
            -%}
case {%s= tlTag %}: // {%s= tlName %}
    hctx.RequestFunctionName = "{%s= tlName %}"
    if h.Raw{%s= funcTypeString %} != nil {
        hctx.Request = r
        err = h.Raw{%s= funcTypeString %}(ctx, hctx)
        if rpc.IsHijackedResponse(err) {
            return err
        }
        if err != nil {
            return internal.ErrorServerHandle("{%s= tlName %}", err)
        }
        return nil
    }
    if h.{%s= funcTypeString %} != nil {
        var args {%s= funcTypeString %}
        if _, err = args.Read(r); err != nil {
            return internal.ErrorServerRead("{%s= tlName %}", err)
        }
        ctx = hctx.WithContext(ctx)
        ret, err := h.{%s= funcTypeString %}(ctx, args)
        if rpc.IsHijackedResponse(err)  {
            return err
        }
        if err != nil {
            return internal.ErrorServerHandle("{%s= tlName %}", err)
        }
        if hctx.Response, err = args.WriteResult(hctx.Response, ret); err != nil {
            return internal.ErrorServerWriteResult("{%s= tlName %}", err)
        }
        return nil
    }
        {%- endif -%}
    {%- endfor -%}
}
{%- endfunc -%}
