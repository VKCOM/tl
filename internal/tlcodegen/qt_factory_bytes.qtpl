{%- import "fmt" -%}

{%- func (gen *Gen2) generateFactoryBytes(sortedImports []string, directImports *DirectImports) -%}
{%s= HeaderComment %}
{%- code typeWrappers := gen.generatedTypesList -%}
package {%s FactoryGoPackageNameBytes %}

import (
    "{%s= gen.MetaPackageName %}"
    {%- for _, wr := range sortedImports -%}
    "{%s= gen.options.TLPackageNameFull %}/{%s= wr %}"
    {%- endfor -%}
)

func CreateFunctionBytes(tag uint32) meta.Function {
    return meta.CreateFunctionBytes(tag)
}

func CreateObjectBytes(tag uint32) meta.Object {
    return meta.CreateObjectBytes(tag)
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateFunctionFromNameBytes(name string) meta.Function {
    return meta.CreateFunctionFromNameBytes(name)
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateObjectFromNameBytes(name string) meta.Object {
    return meta.CreateObjectFromNameBytes(name)
}

func init() {
{%- code
    tl1Wrappers, tl2Wrappers := ExtractTopLevelTypes(typeWrappers)
-%}
{%- if len(tl1Wrappers) != 0 -%}
// TL
{%- endif -%}
{%- for _, wr := range tl1Wrappers  -%}
    {%- code hasBytes := wr.wantsBytesVersion && wr.hasBytesVersion -%}
    {%- if wr.tlTag == 0 || !wr.IsTopLevel() -%} {%- continue -%} {%- endif -%}
    {%- if fun, ok := wr.trw.(*TypeRWStruct); ok && len(wr.NatParams) == 0-%}
    {%- code tlTag := fmt.Sprintf("0x%08x", wr.tlTag) -%}
        {%- if wr.unionParent != nil && wr.unionParent.IsEnum -%}
            meta.SetGlobalFactoryCreateForEnumElementBytes({%s tlTag %})
            {%- continue -%}
        {%- endif -%}
    {% stripspace %}
        {%- if fun.ResultType != nil -%}
        meta.SetGlobalFactoryCreateForFunctionBytes({%s= tlTag %},
        func() meta.Object { var ret{% space %}{%s= wr.TypeString2(hasBytes, directImports, nil, false, true) %}; return &ret },
        func() meta.Function { var ret{% space %}{%s= wr.TypeString2(hasBytes, directImports, nil, false, true) %}; return &ret },
        {%- if wr.WrLong != nil -%}
        func() meta.Function { var ret{% space %}{%s= wr.WrLong.TypeString2(hasBytes, directImports, nil, false, true) %}; return &ret },
        {%- else -%}
        nil,
        {%- endif -%}
        {%- else -%}
        meta.SetGlobalFactoryCreateForObjectBytes({%s= tlTag %},
        func() meta.Object { var ret{% space %}{%s= wr.TypeString2(hasBytes, directImports, nil, false, true) %}; return &ret }
        {%- endif -%}
        ){% endstripspace %}
    {%- endif -%}
{%- endfor -%}
{%- if len(tl2Wrappers) != 0 -%}
// TL2
{%- endif -%}
{%- for _, wr := range tl2Wrappers  -%}
    {%- code hasBytes := wr.wantsBytesVersion && wr.hasBytesVersion -%}
    {%- if fun, ok := wr.trw.(*TypeRWStruct); ok -%}
    {%- code tlTag := fmt.Sprintf("0x%08x", wr.tlTag) -%}
        {%- if wr.unionParent != nil && wr.unionParent.IsEnum -%}
            meta.SetGlobalFactoryCreateForEnumElementBytes({%s tlTag %})
            {%- continue -%}
        {%- endif -%}
    {% stripspace %}
        {%- if fun.ResultType != nil -%}
        meta.SetGlobalFactoryCreateForFunctionBytes({%s= tlTag %},
        func() meta.Object { var ret{% space %}{%s= wr.TypeString2(hasBytes, directImports, nil, false, true) %}; return &ret },
        func() meta.Function { var ret{% space %}{%s= wr.TypeString2(hasBytes, directImports, nil, false, true) %}; return &ret },
            {%- if wr.WrLong != nil -%}
        func() meta.Function { var ret{% space %}{%s= wr.WrLong.TypeString2(hasBytes, directImports, nil, false, true) %}; return &ret },
            {%- else -%}
        nil,
            {%- endif -%}
        {%- else -%}
        meta.SetGlobalFactoryCreateForObjectBytesTL2({%q= wr.tlName.String() %},
        func() meta.Object { var ret{% space %}{%s= wr.TypeString2(hasBytes, directImports, nil, false, true) %}; return &ret }
        {%- endif -%}
        ){% endstripspace %}
    {%- endif -%}
    {%- if _, ok := wr.trw.(*TypeRWUnion); ok -%}
    {% stripspace %}
        meta.SetGlobalFactoryCreateForObjectBytesTL2({%q= wr.tlName.String() %},
        func() meta.Object { var ret{% space %}{%s= wr.TypeString2(hasBytes, directImports, nil, false, true) %}; return &ret }
        ){% endstripspace %}
    {%- endif -%}
{%- endfor -%}
}

{%- endfunc -%}
